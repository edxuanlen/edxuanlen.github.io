{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/BlueLake/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/jquery.fancybox.mini.styl","path":"css/jquery.fancybox.mini.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/jquery.fancybox.styl","path":"css/jquery.fancybox.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style-dark.styl","path":"css/style-dark.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/click.js","path":"js/click.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/wrapImage.js","path":"js/wrapImage.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/jquery-3.3.1.min.js","path":"js/jquery-3.3.1.min.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/jquery.fancybox.min.js","path":"js/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg-dark.jpg","path":"img/bg-dark.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/lib/fancybox/LICENSE","path":"lib/fancybox/LICENSE","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/lib/fancybox/README.md","path":"lib/fancybox/README.md","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/jquery.fancybox.pack.js","path":"js/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/css/share.styl","path":"share/css/share.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.svg","path":"share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.eot","path":"share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.ttf","path":"share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.woff","path":"share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/js/qrcode.js","path":"share/js/qrcode.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/share/js/social-share.js","path":"share/js/social-share.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/lib/fancybox/source/jquery.fancybox.min.css","path":"lib/fancybox/source/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/lib/fancybox/source/jquery.fancybox.min.js","path":"lib/fancybox/source/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"6ebdf5bd617e279d2380a91618ec4881fe8fd50e","modified":1581028822749},{"_id":"source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1581028822809},{"_id":"source/favicon.ico","hash":"79bb6c43618aa139b643ea6af2f7fd5a0539e35c","modified":1581028822810},{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1581028822811},{"_id":"themes/BlueLake/README.en.md","hash":"dd48abd439d141fe623c6d5e4220c2df3e2198a7","modified":1581028822811},{"_id":"themes/BlueLake/README.md","hash":"cc3af0adf4e94a27e30397fda8717488265674dc","modified":1581028822812},{"_id":"themes/BlueLake/_config.yml","hash":"1240ca33da216a74816226cf1dd5113388f33f60","modified":1584803195199},{"_id":"themes/BlueLake/package.json","hash":"53b98a76b9cd12bc187bd93aebf4bf2c85c7437c","modified":1581028822843},{"_id":"source/_posts/ACM_Template.md","hash":"e8beffc4e28580584024a7914857a43da52baa65","modified":1581028822750},{"_id":"source/_posts/Catch-That-Cow.md","hash":"0a30698ed8c0b97011d56e93c39d62261f04d871","modified":1581028822751},{"_id":"source/_posts/Dungeon-Master.md","hash":"7bf2e7ee79e7daa8600c636e8d3fc870ffd018f4","modified":1581028822751},{"_id":"source/_posts/HTML.md","hash":"7948d88106b08c3d0143e809a52024d1ddc20e83","modified":1581028822752},{"_id":"source/_posts/JS.md","hash":"0581d0c449cba4b913208f6bd34e3a07a47ae2bf","modified":1581028822752},{"_id":"source/_posts/JVM.md","hash":"76234878725a8b3ea5685f28c48fc4bd210e1735","modified":1584885623601},{"_id":"source/_posts/Kubernetes.md","hash":"6138ebd9f3a2469172d314ff9e186c5f608a5369","modified":1584327222152},{"_id":"source/_posts/Linux_Communication.md","hash":"3855e40d0a3313d51fab441bbeef8c8daa836ad5","modified":1581028822753},{"_id":"source/_posts/PyMySQL初识.md","hash":"9ef7a0019df46df5205e44392657b021ba350ecc","modified":1581028822754},{"_id":"source/_posts/Python3-PIL图像处理.md","hash":"c0f3b82fa089dd590e6fe1d019afde48f304322d","modified":1581028822754},{"_id":"source/_posts/Python文件处理.md","hash":"e4a4148833eb13791b396e1d4ea51212c8dd8c1a","modified":1581028822755},{"_id":"source/_posts/STL之list.md","hash":"266685db9f9e383934c0e3d0abdc903193187697","modified":1581028822756},{"_id":"source/_posts/STL之map.md","hash":"1d33b60ef0d4bf8052626a1d090a64babd27581f","modified":1581028822757},{"_id":"source/_posts/STL之set.md","hash":"daa2b44452616517ce9b4d59ce521cebb55c40be","modified":1581028822760},{"_id":"source/_posts/STL之sort和unique.md","hash":"883db0a650212748fced5208deb7910888d60a90","modified":1581028822763},{"_id":"source/_posts/STL之stack-queue.md","hash":"fb76ebcb15cbdf27814d27f4eece4e9b18ba9d1f","modified":1581028822764},{"_id":"source/_posts/STL之string.md","hash":"55e9cdba1e21d95973736b30172fe1552cd4fa73","modified":1581028822766},{"_id":"source/_posts/STL之vector.md","hash":"8ed8efe318366e83ceb0a747958e9fa35f0492b6","modified":1581028822768},{"_id":"source/_posts/Spring-AOP.md","hash":"3e5bfccf222ab3d40a9f24557b65e6274e8ccfae","modified":1583997770556},{"_id":"source/_posts/Spring-IOC.md","hash":"6f654ce2a56a6a33f89d73d279f95384259712ab","modified":1585061727595},{"_id":"source/_posts/Spring-boot入门.md","hash":"72cdbe585d71403f4ea4ddc53ee61b4f6f261fdc","modified":1581028822770},{"_id":"source/_posts/Spring-boot第一个应用的开发.md","hash":"6798627e625f3181886e4c2720b04181ebf29b09","modified":1581028822771},{"_id":"source/_posts/Ubuntu-18-之旅.md","hash":"0849e11a5b2bfa40c9961486c807fe76e758539c","modified":1581028822772},{"_id":"source/_posts/VSCode.md","hash":"85b1f9c9f59b071f97d9b21ecb83ed9f5bc83c7b","modified":1581028822772},{"_id":"source/_posts/Zookeeper.md","hash":"2c1ac72637f171746bdda0d675b1bf508ccf858c","modified":1584508334290},{"_id":"source/_posts/chocolatey.md","hash":"3a70b4e5837c8312130509bd4f0198d6fbbfce44","modified":1581028822773},{"_id":"source/_posts/docker.md","hash":"80af6a3365ab3a5f91a9281ae2ab8c6077e14888","modified":1584861414943},{"_id":"source/_posts/git.md","hash":"6d40c550b63259bc7851464015cb3d2ae00fa698","modified":1581028822774},{"_id":"source/_posts/hashmap.md","hash":"7609df0988b43a797f05967cb9e7e06ce94d22c4","modified":1585051586433},{"_id":"source/_posts/hexo-Bluelake主题.md","hash":"ac063d9a79818bbd6590bb11e458584ce907bac3","modified":1581028822775},{"_id":"source/_posts/hexo-github搭建个人博客.md","hash":"bd5331a7ac4b2c79a6236bb10ea3b6e49f3cbac0","modified":1581028822776},{"_id":"source/_posts/hexo的一些使用记录.md","hash":"c8dc83b2994786c808097cac37303e89f318102c","modified":1581028822776},{"_id":"source/_posts/mysql.md","hash":"fbda8b3523530a78eed82d68c54e765340798a56","modified":1581028822776},{"_id":"source/_posts/python-Django初识.md","hash":"6a98500ce36337621e109055c130bf57a3d6ca96","modified":1581028822777},{"_id":"source/_posts/python爬取hdu题库.md","hash":"1e3c185f2f5c0e67422451559e7c8016249a9bf6","modified":1581028822777},{"_id":"source/_posts/redis配置与使用.md","hash":"eacc9e201a4b0e00f1b1067094785549911b1248","modified":1581028822779},{"_id":"source/_posts/string-的使用.md","hash":"199edabf292ae873e1d54e8cc1f6aa1217afa515","modified":1581028822780},{"_id":"source/_posts/不要62.md","hash":"38e461acea105895ac55d8a02b488e6af35e7784","modified":1581028822782},{"_id":"source/_posts/主席树.md","hash":"88571d69d094a19225f57147deb1e1b9519ba785","modified":1581028822785},{"_id":"source/_posts/乘积尾零数目.md","hash":"b4bbb1053c6a97a3a3efd34ce360e520d972b4f0","modified":1581028822787},{"_id":"source/_posts/全排列.md","hash":"bc35d221501d0ddfe598ccaf8594556952f3b179","modified":1581028822788},{"_id":"source/_posts/合并数字.md","hash":"71c529b2efd79dcf41f0eee16d80d563318715b4","modified":1581028822793},{"_id":"source/_posts/最长公共子串LCS.md","hash":"55bdb65d9cb1b9e2821b2b9c64ca5e768d3de30d","modified":1581028822795},{"_id":"source/_posts/最长公共子串LCS.md~","hash":"7ca90e8703422a43b8e3ecc2f1e1ad586cd6fa3e","modified":1581028822796},{"_id":"source/_posts/最长递增序列LIS(n^2和nlog2n).md","hash":"c3718cfdc85ef4272b5d273da459ed10ed5908af","modified":1581028822798},{"_id":"source/_posts/棋盘问题.md","hash":"1f4f4c1fa00546533eeb3ef1e7dce29501757c4c","modified":1581028822799},{"_id":"source/_posts/第九届蓝桥杯试题、答案以及比赛经历.md","hash":"b6fd84994726b13b6020fff67502edb53908da6d","modified":1581028822800},{"_id":"source/_posts/给博客添加live2d.md","hash":"a0501471b990a9eef34f2ea49ad38a137c836f45","modified":1581028822801},{"_id":"source/_posts/网站.md","hash":"c417ffeb6e3ef30e9bf2c9b941c3d29ea21f1648","modified":1581028822802},{"_id":"source/_posts/线段树模板.md","hash":"29bb64487163b8e48bee9aa47be2c4f9f82e929c","modified":1581028822801},{"_id":"source/_posts/背包.md","hash":"af40cff3249a3e4194cb8842e38eecfa1dcc5c50","modified":1581028822802},{"_id":"source/_posts/自建SS服务.md","hash":"f2cd8d472d4be515ffbbab7f82e4658cd8886476","modified":1583653070142},{"_id":"source/_posts/蓝桥杯试题集-入门训练.md","hash":"43e165b5058785bc37985d0ec079b2a5ab6ed9b0","modified":1581028822803},{"_id":"source/_posts/蓝桥杯试题集-历届试题.md","hash":"b47f01ee128185e46453bcb3724b055a32f27088","modified":1581028822804},{"_id":"source/_posts/蓝桥杯试题集-基础练习.md","hash":"11842c3f875e4a3463b35d2cd24ce481bb2efe87","modified":1581028822805},{"_id":"source/_posts/蓝桥杯试题集-算法提高.md","hash":"da2b3b724d5af052f7f90db27e30adbec0681158","modified":1581028822805},{"_id":"source/_posts/蓝桥杯试题集-算法训练.md","hash":"14a96c0c53cb0dab04a214eb0068b00357fe8e85","modified":1581028822805},{"_id":"source/_posts/蓝桥杯试题集.md","hash":"feb030221ff1339653f216c1c4ff901a402923b5","modified":1581028822806},{"_id":"source/_posts/补蓝桥杯国赛.md","hash":"58e05969f6d1787d74a49178f0ac47f2d95eebe1","modified":1581028822806},{"_id":"source/_posts/解决写wyh的矩阵出现内存占用超过限制的问题.md","hash":"a71099628c6d557ebab16fb27fdd9e28b5e83a96","modified":1581028822807},{"_id":"source/_posts/配置apache-tomcat.md","hash":"831bba87fd23a1a1769067c48a723f88c791847a","modified":1581028822808},{"_id":"source/_posts/面试专题.md","hash":"bb925e827913db25702e11c1c91d6eb6ef2c9105","modified":1585560138990},{"_id":"source/about/index.md","hash":"3b7ec3461fe730b86d9cf5cda6708e2a179482fb","modified":1581028822808},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"85f06e2ea9a45bb55761b29cda4487f782557b2b","modified":1581028822816},{"_id":"themes/BlueLake/languages/en.yml","hash":"fe087d478a81ffc15f93f2295bc2b6f49a149c3d","modified":1581028822817},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"a57b9b768346adfe1c1553c4b727d5c113a52480","modified":1581028822817},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"fff49dfae21808bb1edd74dfe4f14c457b64c191","modified":1581028822818},{"_id":"themes/BlueLake/languages/ko.yml","hash":"bd3c4058a43a0f6e239f360261f3260c87c185f0","modified":1581028822818},{"_id":"themes/BlueLake/languages/tr.yml","hash":"47d1dfd33fb1f0acbb1dfd400854d265ae8ccd45","modified":1581028822819},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"9a7ffb9f16af9fdca51d818e4fd2eb9f7e8ba9cf","modified":1581028822820},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"b388d0e44084026dedaf4ffdf7536e06bc8b37a8","modified":1581028822820},{"_id":"themes/BlueLake/layout/archive.jade","hash":"98d9fb812edbc180878fdadb65bc38499eef2cc4","modified":1581028822834},{"_id":"themes/BlueLake/layout/base.jade","hash":"2f913a373c99131e3872e15120e48438e6bd4a7c","modified":1584537832177},{"_id":"themes/BlueLake/layout/category.jade","hash":"9f3a9f1d6f0bbad258b308ad8d49128c05b422cf","modified":1581028822835},{"_id":"themes/BlueLake/layout/index.jade","hash":"6406182f71d0f36757e91c5ec999f244c1f83c68","modified":1581028822837},{"_id":"themes/BlueLake/layout/page.jade","hash":"415404398931d98db28bff723886b07dcb8bbbc3","modified":1581028822839},{"_id":"themes/BlueLake/layout/post.jade","hash":"4f93e467d67c2da84fa2b8c67bc80323f44c679a","modified":1584537787491},{"_id":"themes/BlueLake/layout/tag.jade","hash":"50c7af7565751db5d7672beb434768885fb224cb","modified":1581028822842},{"_id":"source/_posts/JVM/G1划分.png","hash":"f75ca58774c62c8fcba475ab9706c7740b319ef6","modified":1584079913430},{"_id":"source/_posts/JVM/传统GC划分.png","hash":"8b975c9c1537d052c9121056a8aaf21bddc4bc13","modified":1584079852645},{"_id":"source/_posts/Python3-PIL图像处理/1.jpg","hash":"e0f6176cb4aecad74f7b464ea961749a0f052fc1","modified":1581028822755},{"_id":"source/_posts/STL之list/list.png","hash":"061c5439db44d0a5157cdc361977770eeb12f920","modified":1581028822757},{"_id":"source/_posts/STL之map/map1.png","hash":"4a2b4d79bc50226dcc7c585cc92f9adbe2469a71","modified":1581028822759},{"_id":"source/_posts/STL之map/map.png","hash":"11e4216731469b39a8dbc388e476064d33ef1473","modified":1581028822758},{"_id":"source/_posts/STL之set/set.png","hash":"f474a53fd5d20d468c44cb01d20b646b440a40f5","modified":1581028822761},{"_id":"source/_posts/STL之set/set1.png","hash":"842e8de0b971fd1f45cec243904610c976f99c5a","modified":1581028822761},{"_id":"source/_posts/STL之set/set2.png","hash":"598589a99350c2f49df2497c8ea2b48031862846","modified":1581028822762},{"_id":"source/_posts/STL之set/set3.png","hash":"ee07ed0a3a7c53b3e7f6e369ca0a57eb927ed679","modified":1581028822762},{"_id":"source/_posts/STL之sort和unique/sort&unique.png","hash":"6969547e97be5f8bf1bf61cd4233b96ac7057297","modified":1581028822763},{"_id":"source/_posts/STL之stack-queue/queue.png","hash":"73ad2a0230be0fed9ad4c509f164bb3d3a582665","modified":1581028822765},{"_id":"source/_posts/STL之stack-queue/queue1.png","hash":"082bc4312621471bf85671936f7b87a110ac96ea","modified":1581028822765},{"_id":"source/_posts/STL之stack-queue/stack.png","hash":"cd29fb95f26e2718d375eb41dcb338506479c824","modified":1581028822766},{"_id":"source/_posts/STL之string/string.png","hash":"86d77f1a35452dba515f55052054132f094a21eb","modified":1581028822767},{"_id":"source/_posts/STL之vector/vector1.png","hash":"91f305cd3d57199f098f05f4b652041e381a3b72","modified":1581028822769},{"_id":"source/_posts/STL之vector/vector.png","hash":"f4fe8e18fd88615a526a993f7ee7eda787d38e5a","modified":1581028822769},{"_id":"source/_posts/Zookeeper/lock.png","hash":"1a64e82766823043f18d5136a3d73923abe34403","modified":1584498525300},{"_id":"source/_posts/hashmap/linkList.png","hash":"57fa461ff89afb367be0ad559ab2aa1cc3a76c42","modified":1584063236546},{"_id":"source/_posts/python爬取hdu题库/1.png","hash":"622416382c6734c0c52a3c06c89375f43edff2a4","modified":1581028822778},{"_id":"source/_posts/python爬取hdu题库/2.png","hash":"bd93fd97039884b1aea48e3b4fdc0d55958f6916","modified":1581028822779},{"_id":"source/_posts/“第九届蓝桥杯试题、答案以及比赛经历/1.png","hash":"c1cfdf7046c04a40d59902e31b66fb42709917e6","modified":1581028822781},{"_id":"source/_posts/“第九届蓝桥杯试题、答案以及比赛经历/2.png","hash":"862422b8487a5fe53f217ff5ee752144000600da","modified":1581028822781},{"_id":"source/_posts/不要62/1.png","hash":"7e34b657ff4fdf37c975ee13a0c7a5ba1402161d","modified":1581028822783},{"_id":"source/_posts/不要62/DP.png","hash":"b40ed2312674e4546e270a034a8409108fcab852","modified":1581028822784},{"_id":"source/_posts/全排列/1.png","hash":"f785e10b8f29429b94d6b5b845801befd48c7726","modified":1581028822790},{"_id":"source/_posts/全排列/2.png","hash":"819fd30bb03972745670b2f5777147d686352f31","modified":1581028822791},{"_id":"source/_posts/全排列/3.png","hash":"2033fb477e315017361a8ebb447a1d153d99910c","modified":1581028822792},{"_id":"source/_posts/合并数字/1.png","hash":"90b71cfa122c080cb805df0083adc4baa4098057","modified":1581028822794},{"_id":"source/_posts/最长公共子串LCS/lcs1.png","hash":"d33749e9145d43334a26e58ead57fca6a529528a","modified":1581028822798},{"_id":"source/_posts/最长递增序列LIS(n^2和nlog2n)/LIS.png","hash":"a9cc6d8940ca905d4cb1a2b16a6d4a85cb46a53d","modified":1581028822799},{"_id":"source/_posts/面试专题/RDB&AOF.png","hash":"0990b7ef6945405b1bde5e191a2cfac24eb2bccc","modified":1584786375370},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"74a7f795ac83813ffacd4f6db01f2fc6fa94e967","modified":1581028822822},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"21d05990aa5a19632f9ed51085ef7727adeea17a","modified":1581028822822},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"3fa65886665e8165640d22ede8dd3b06a0554583","modified":1581028822823},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"f95aa1d48752fe47046c0ba89199ad765351b510","modified":1581028822823},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"ba9f855c30ab6d7d00639722fba873bfc346b793","modified":1581028822824},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1581028822825},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1581028822825},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1581028822826},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"4f2fba7fcb39a6bf70ff04dad9a3dab2563b21e7","modified":1581028822827},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"44de0851108bca8404f5614d5101c7a7ee67754d","modified":1581028822827},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"c632919f04194dcf6e0e8ccc572554a859aa922b","modified":1581028822829},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1581028822828},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"6e587b7d254d0d92b959ba58262f5e81b618eba2","modified":1581028822829},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"0107affa0c6b22e09546fcf82a6f71ba2dd1e315","modified":1581028822830},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"9af40206a525db1cb9761fa6facb36332057acf3","modified":1581028822831},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"164a83faaf92ec19d268fd303bf6e30348ddef5c","modified":1581028822831},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"c6f778d5d2f13bacbd83a56a9e9faaeac0dda0ed","modified":1581028822832},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"c75308c2b72456cfb98cb80f280c66e58f171705","modified":1581028822832},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"4e90378aa88c5694126dc8ea5bed3bb2f8642e53","modified":1581028822833},{"_id":"themes/BlueLake/source/css/highlight-dark.styl","hash":"11dfe68ade914332c484a4dceaec215bf8b62ee7","modified":1581028822846},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"92b5c306f276f8ea6a134e303b1b63612d25ecfe","modified":1581028822847},{"_id":"themes/BlueLake/source/css/jquery.fancybox.mini.styl","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1584537079245},{"_id":"themes/BlueLake/source/css/jquery.fancybox.styl","hash":"d12b0c58a53cd59d2b44b28c90c84264359851ed","modified":1584537509146},{"_id":"themes/BlueLake/source/css/style-dark.styl","hash":"3f45549a1aff27a14eae81d9be74977337d14464","modified":1581028822848},{"_id":"themes/BlueLake/source/css/style.styl","hash":"a990d649eb2d4dacfec0910d05d839a5f677c02b","modified":1581028822849},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1581028822851},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"a910f5840f8e25b7a6e5c47b9a04ae49b9db8c32","modified":1581028822852},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1581028822853},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1581028822854},{"_id":"themes/BlueLake/source/js/click.js","hash":"8d19acaa3efcb2ac617dbdc2dd82e1050bd2c269","modified":1581028822859},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"7ce826f7b678ff3c524fce8bbd480c188e50c7ee","modified":1581028822861},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"9e68d688f2f12ec193ce9496beb0fd42e1de2288","modified":1581028822862},{"_id":"themes/BlueLake/source/js/totop.js","hash":"d9367c6fa3e973bc5f32ce38d951858455726a02","modified":1581028822862},{"_id":"themes/BlueLake/source/js/wrapImage.js","hash":"7ba90900a201a1db2ccc6f384b402d0f01b7a945","modified":1584537371311},{"_id":"source/_posts/最长公共子串LCS/lcs.png","hash":"3ae005fe75874e80a07c4e563ca0ea241f160747","modified":1581028822797},{"_id":"source/_posts/面试专题/Stack.png","hash":"064716c7164e3184c26433ce1c19596128df5db9","modified":1584957550281},{"_id":"source/_posts/面试专题/TCP_IP.png","hash":"cdee55db4f48528a07c14c03209c164c42a1c8db","modified":1584535417661},{"_id":"source/_posts/面试专题/TCP_IP1.png","hash":"c72e32257093b47f417dff7ea09429fe5ee55ca5","modified":1584536287722},{"_id":"source/_posts/面试专题/二叉树.png","hash":"a1333d0f8dea06e8c3344dc7200508853cb860a4","modified":1584667578704},{"_id":"source/_posts/面试专题/类的声明周期.png","hash":"5e1aab82faffaee5248f502129bc12ab4716d354","modified":1584083446814},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1581028822857},{"_id":"themes/BlueLake/source/js/jquery-3.3.1.min.js","hash":"0c3192b500a4fd550e483cf77a49806a5872185b","modified":1581028822860},{"_id":"themes/BlueLake/source/js/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1584536984004},{"_id":"source/_posts/JVM/JVM.png","hash":"86c5aaaf9e85e01ed803341b9abcf5167f17a0fe","modified":1584071248290},{"_id":"source/_posts/JVM/JVM随着JDK的变化.png","hash":"1cdee70e0cf64217ac0b362f410ae0ecffda843d","modified":1584077279320},{"_id":"source/_posts/面试专题/Collection.png","hash":"52063647b844d1d266f764ec911494ac551658d1","modified":1585049066735},{"_id":"source/_posts/面试专题/JAVA跨平台.png","hash":"84d6c1bef4304c8e7827a6ecaed56749da06ff0a","modified":1584883530533},{"_id":"source/_posts/面试专题/JVM.png","hash":"f2db51313bb61de2f84ffc896f6b4b7b8b8d9fb6","modified":1584885960909},{"_id":"source/_posts/面试专题/JVM内存模型.png","hash":"9d57332de597652eae728135a0f6877bf17a4d89","modified":1584956685927},{"_id":"source/_posts/面试专题/socket.jpg","hash":"10df03dc4861ec221eda67de96c897dd5c685194","modified":1584607827673},{"_id":"source/_posts/面试专题/类加载.png","hash":"17fa052948c7841f0f5509dd39cb887048f72230","modified":1584951330017},{"_id":"themes/BlueLake/source/img/bg-dark.jpg","hash":"0d2c406f1a9b3b74d6defda398239b0113737787","modified":1581028822856},{"_id":"themes/BlueLake/source/lib/fancybox/.bower.json","hash":"9c0e38750e26eb9e83e2b5ab9e069b66f0965ce4","modified":1584536736660},{"_id":"themes/BlueLake/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1584536736660},{"_id":"themes/BlueLake/source/lib/fancybox/LICENSE","hash":"7713a1753ce88f2c7e6b054ecc8e4c786df76300","modified":1584536736669},{"_id":"themes/BlueLake/source/lib/fancybox/README.md","hash":"675189c5c79e391d6934d690370f6a648ed4653f","modified":1584536736673},{"_id":"themes/BlueLake/source/js/jquery.fancybox.pack.js","hash":"1151808c52451d1b39e74fb48283195adf40b9a1","modified":1584537015363},{"_id":"themes/BlueLake/source/share/css/share.styl","hash":"e1337f4029ddd37e8d9657d1b05023b5ea715acf","modified":1581028822864},{"_id":"themes/BlueLake/source/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1581028822866},{"_id":"themes/BlueLake/source/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1581028822865},{"_id":"themes/BlueLake/source/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1581028822867},{"_id":"themes/BlueLake/source/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1581028822867},{"_id":"themes/BlueLake/source/share/js/qrcode.js","hash":"962ad9cb87afa140a644178e5f3c53e2514ea1e5","modified":1581028822869},{"_id":"themes/BlueLake/source/share/js/social-share.js","hash":"fe73d3b1c63a498f18f885fc83d631c2b63535e7","modified":1581028822869},{"_id":"source/_posts/面试专题/Node_X.png","hash":"e2d3eac93431ac8184bb54c8bec816ba53df796f","modified":1584805916393},{"_id":"source/_posts/面试专题/redis_node_c.png","hash":"c991dc9e0fa7860269ca42f918060bdeede8e1f9","modified":1584805708783},{"_id":"source/_posts/面试专题/三次握手.png","hash":"681684166f32d0b0e4d406db74f11e2f9692bba8","modified":1584547008342},{"_id":"source/_posts/面试专题/vitual_node.png","hash":"aec2f4be515a9bfbe4c8d28cae7147777cc104cd","modified":1584806123197},{"_id":"source/_posts/面试专题/TCP报文.png","hash":"8b5d9935bf882653b38221d2c7b832f21a9a5104","modified":1584541502817},{"_id":"themes/BlueLake/source/lib/fancybox/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1584536736631},{"_id":"themes/BlueLake/source/lib/fancybox/.git/config","hash":"6d27bad8831d14b10d7b775812c49acbe18b2af4","modified":1584536736639},{"_id":"themes/BlueLake/source/lib/fancybox/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1584536672311},{"_id":"themes/BlueLake/source/lib/fancybox/.git/index","hash":"ed5ba93809adaa45f0cc048e722707d0ec593b82","modified":1584609185773},{"_id":"themes/BlueLake/source/lib/fancybox/.git/packed-refs","hash":"b6ffcdb23c4f9b3e5576fe104e8596ea71603c84","modified":1584536736619},{"_id":"themes/BlueLake/source/lib/fancybox/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1584536736664},{"_id":"themes/BlueLake/source/lib/fancybox/source/jquery.fancybox.css","hash":"b6964babd10efdeff086f91822b59c810a06d43d","modified":1584536736677},{"_id":"themes/BlueLake/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1584536736681},{"_id":"source/_posts/面试专题/七层.jpg","hash":"b1bc101d4fff4a9e49d367b54f1a52ba9b564c79","modified":1584339092499},{"_id":"themes/BlueLake/source/lib/fancybox/source/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1584536736685},{"_id":"themes/BlueLake/source/lib/fancybox/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1584536672317},{"_id":"themes/BlueLake/source/lib/fancybox/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1584536672321},{"_id":"themes/BlueLake/source/lib/fancybox/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1584536672327},{"_id":"themes/BlueLake/source/lib/fancybox/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1584536672331},{"_id":"themes/BlueLake/source/lib/fancybox/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1584536672336},{"_id":"themes/BlueLake/source/lib/fancybox/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1584536672341},{"_id":"themes/BlueLake/source/lib/fancybox/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1584536672346},{"_id":"themes/BlueLake/source/lib/fancybox/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1584536672353},{"_id":"themes/BlueLake/source/lib/fancybox/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1584536672357},{"_id":"themes/BlueLake/source/lib/fancybox/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1584536672362},{"_id":"themes/BlueLake/source/lib/fancybox/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1584536672368},{"_id":"themes/BlueLake/source/lib/fancybox/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1584536672372},{"_id":"themes/BlueLake/source/lib/fancybox/.git/logs/HEAD","hash":"8dd857a281ea275234602cbefb27ab3fada27e38","modified":1584536736634},{"_id":"source/_posts/面试专题/双亲委派.png","hash":"c0268606b0f1b592fe8127d02817856439c59f4c","modified":1584948176417},{"_id":"source/_posts/面试专题/四次挥手.png","hash":"d470f2f315248dbd080c2eab4715623c24e5cd71","modified":1584546514627},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/00/c03f6be011e8878608eec12f68caf42b73f38e","hash":"8516bd35bc8f9223e13de5877778c8d14d49d6db","modified":1584536736538},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1584536687934},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/16/b01254a56610f4c6b7721c534ed4fc40ae51dd","hash":"88ca5fd99322d3a4067e0711af79f41c078f2ef5","modified":1584536692835},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/19/3567a3107003507fafacd255c349857e417926","hash":"ef5eab75e8c6998cb223edb4eb8a26c4cfc9415c","modified":1584536732667},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/1f/a2c5f332b7e304431213aec21012e53f8781d7","hash":"7632806182aa989d3b7029579d5c03c34b113ee3","modified":1584536687911},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1584536687936},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/36/9bab09306448a2970d378b59bb21c059edad63","hash":"877e0c15623d0d6ff8f09bb627fc60a489f3c105","modified":1584536690215},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/3d/521bfc64755e348870094e85323dc1b9c96a6b","hash":"e9660fc4f89ecb176b0ab6e4860579c1bfe9f9cb","modified":1584536687928},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/40/9607f1ba381a64c3ccb8d5440299e8ef868ef8","hash":"a462f7a9efebb70c4051f92c09ccbd9885132c77","modified":1584536736545},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/47/d427b6c52396bbab53a05f57aaa82b52c805b1","hash":"c5626bbb62f4d1d1e39034e7f44baf4c509410d6","modified":1584536715088},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/51/cf05811ed7d35e92551db1ba5a6e267ce781a5","hash":"99c009035ea86e3876b586577677d4d62ae12379","modified":1584536687922},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/53/ceaabe0f8677333c5be196778b3e40840a1869","hash":"7bc1c1c42059d5402335b5293bfb5e54bee22557","modified":1584536687917},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/63/c555caede30ab06d6dba16644a827e9574c8cb","hash":"846603220288272ad5d35ebdc3c917cc4adce424","modified":1584536687904},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/78/068b93f813cecbbd50c8247de547035009d512","hash":"4bc2bee779bd7e3cca13ee34801cf1e12585e5ae","modified":1584536690220},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/54/0a7b36ee26decfc3f0f34bf73bc85c48899128","hash":"2e5447a9dd879d71368e9dddd34d93849d00b934","modified":1584536736544},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/64/c47e893a0fef71c8c0930975ef114d9812da56","hash":"eaad75fab15724f9c2b069fc1ce9b8216be149d7","modified":1584536690222},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/7c/c60b295fa2dcb82537a63792c9b3b3c2e74c33","hash":"b2dc23c71b13726c391aaefaa5312227a9b6ab7e","modified":1584536692837},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/80/6b27034bd69d563e4243c2f12b43c7064b32dd","hash":"b7d3e8020767ae60a2029da8eccb0068623dc618","modified":1584536715086},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/7b/15d3cb03fda86241f8b2b335f04e9b9de0e1c4","hash":"d1fe3bd82c90f7d93874798a8ee8ebf1391d7207","modified":1584536731232},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/89/9d7a75b543fbed2a785f67d995bc77e06eb2e9","hash":"5651e2b80703225f642625c0fb2646543096d2cf","modified":1584536687912},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/92/4369c371444afb18fb86309229f5b4c24c6cf4","hash":"9eb6fa8ff9081e6650f6bee350d21567df105737","modified":1584536732665},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/94/a9ed024d3859793618152ea559a168bbcbb5e2","hash":"1c2d080a86f03eb960e112a94910a5115addf57a","modified":1584536690213},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/9b/fe9361836240600c1bcc3cab9d42b35e731fad","hash":"3d38ffc7ac1ae85224691ef15d7f32e40c40b3a2","modified":1584536692829},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/aa/654e17af8c354994f706c4e33bba6b5b70caeb","hash":"22b1bdf0b0974bf5e9022953ac26066056c235ff","modified":1584536736537},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/ac/97c2cc9f61c52753abe4174a4a74b2064e5af0","hash":"272e74036b0612de83d9d0aa9604d3edf888b249","modified":1584536731230},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/ad/569256343419017e8832a38faaa1c786716a1d","hash":"0538e4abd112b0a843035f28a511edabbe73f2ce","modified":1584536687908},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/b3/b3098638624b56be968573e2dab1684f8a7f06","hash":"6fa11a2d904dff2b8f4ae1bd88bdbb66736438a1","modified":1584536699078},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/b6/c361c8dcf2f5a7572e81b956272e4cfe1198c1","hash":"3e160c605dbd94dcef2b9692a4a5a82bddb76264","modified":1584536736549},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/bd/e1f741357b44b49290d43fdd193125202fef81","hash":"9beefc75cc0c37d04e98dd13b51ad85df40e77b9","modified":1584536687930},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/c2/fc5def1b6c38369e5e8b849adb956bd79b549e","hash":"27f03b9616e615b2724bac0fa4507d152697f3f1","modified":1584536687915},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/ce/c0e316bee5d497ee834dbd29e0c5aad8331052","hash":"3d769fa5f55014841d10bb3bdf1b9725c43e9043","modified":1584536736547},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/d5/d10f6be62acc10fec6e11e8dc4affe1184a17b","hash":"cec51b2539349d2aba1ec5d11eaded3815eccdc5","modified":1584536699090},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/f6/bb280a0b2c68256a8e906b35c6976c80c1b3be","hash":"5daaee11fc384fbe0f02c7123036c954ee9a73fd","modified":1584536687932},{"_id":"themes/BlueLake/source/lib/fancybox/.git/refs/heads/master","hash":"0b56bdb897316a3b4ec6c120673249f65f4cb420","modified":1584536736633},{"_id":"themes/BlueLake/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"1151808c52451d1b39e74fb48283195adf40b9a1","modified":1584536736692},{"_id":"themes/BlueLake/source/lib/fancybox/.git/logs/refs/heads/master","hash":"8dd857a281ea275234602cbefb27ab3fada27e38","modified":1584536736634},{"_id":"themes/BlueLake/source/lib/fancybox/.git/objects/7c/00ef8195b73793d477d22e723ecdac9553ebf3","hash":"fd8c4fd143b32fb3e86367f123feb7c35b305262","modified":1584536715075},{"_id":"themes/BlueLake/source/lib/fancybox/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1584536736631},{"_id":"themes/BlueLake/source/lib/fancybox/.git/logs/refs/remotes/origin/HEAD","hash":"8dd857a281ea275234602cbefb27ab3fada27e38","modified":1584536736630},{"_id":"themes/BlueLake/db.json","hash":"519ac6fb4d9188e4fed686964b25686503015a7f","modified":1584536793846},{"_id":"source/_posts/img/2020-03-30-17-35-10.png","hash":"8a2d759dc9a9e24b7512888a12d222f5fbf205e4","modified":1585560911360},{"_id":"source/_posts/img/2020-03-30-17-38-47.png","hash":"d864979a49f70bbc8fb53e7f408a2f1f4f77bb5f","modified":1585561127615},{"_id":"public/baidusitemap.xml","hash":"c27bb8a931f9f6495ffbab78def07dad3a79c900","modified":1585561182063},{"_id":"public/sitemap.xml","hash":"93f528d6f659bc503665878978730e2b5058812c","modified":1585561182088},{"_id":"public/content.json","hash":"9b4b630eadb15363c1f578b1405fc64eaa028453","modified":1585561182089},{"_id":"public/about/index.html","hash":"6bb11f83c39b92628b8864ed7817c5496eb284d4","modified":1585561182124},{"_id":"public/2020/03/17/Zookeeper/index.html","hash":"9c07c6b35eb1647089a24c8dd3a4c0e716ccc36d","modified":1585561182124},{"_id":"public/2020/03/16/Kubernetes/index.html","hash":"5972f7c7669c940ffc8b2c89de9fc28b94d3a10c","modified":1585561182125},{"_id":"public/2020/03/12/hashmap/index.html","hash":"e6e7fe0d20ee9b719972a3424c0f304520086f68","modified":1585561182125},{"_id":"public/2020/03/09/Spring-IOC/index.html","hash":"19593a9c8c49d1308aca90a4cc3a7ca2512e4aa5","modified":1585561182125},{"_id":"public/2020/03/08/Spring-AOP/index.html","hash":"61b6d86098594a20b24b54293ebc74b4d5bb7051","modified":1585561182125},{"_id":"public/2019/10/01/Spring-boot入门/index.html","hash":"ef5239d00dcdeba3a441f29c571a1c97c266c592","modified":1585561182125},{"_id":"public/2019/09/26/主席树/index.html","hash":"15545caffebe8f29f37d99fa9bb24385ef008a0d","modified":1585561182125},{"_id":"public/2019/09/23/hexo的一些使用记录/index.html","hash":"ba00b71578eb33abae4a8d3b3f3cec8d7b3845fe","modified":1585561182125},{"_id":"public/2019/09/23/给博客添加live2d/index.html","hash":"1020ba6b129019c51b4eb4a8e63e2a8329ea2090","modified":1585561182125},{"_id":"public/2019/02/20/蓝桥杯试题集/index.html","hash":"cb94d9d884b04394c3ad4826c9662baa1ee0ec39","modified":1585561182125},{"_id":"public/2019/02/20/蓝桥杯试题集-算法训练/index.html","hash":"118dca1a92cbec681aa7624bc20d50002a02ddd0","modified":1585561182125},{"_id":"public/2019/02/20/蓝桥杯试题集-算法提高/index.html","hash":"894ab2fca34a0f86f6851268987840508cf45cc0","modified":1585561182125},{"_id":"public/2019/02/20/蓝桥杯试题集-历届试题/index.html","hash":"cee28de4dc8620c954d611e4f8f5c36e8bc93940","modified":1585561182125},{"_id":"public/2018/09/22/配置apache-tomcat/index.html","hash":"f4d363a5f6ab9522a55afcf5157c2ffec39959ed","modified":1585561182125},{"_id":"public/2018/09/18/python-Django初识/index.html","hash":"dc650700a92805c74f98e37458b86d7ac6732416","modified":1585561182125},{"_id":"public/2018/09/10/Python文件处理/index.html","hash":"e15b313b142ae3490608eac24cb6ad007aad98b9","modified":1585561182125},{"_id":"public/2018/09/03/Python3-PIL图像处理/index.html","hash":"7e20d055c39536d1b8a97499c63e65331a422122","modified":1585561182126},{"_id":"public/2018/04/27/JS/index.html","hash":"afd738f9b3a41780c1ecbb052504f7c441c28b1d","modified":1585561182126},{"_id":"public/2018/04/14/string-的使用/index.html","hash":"a5c7b24fe81bd2094422872b695e9da76dc28031","modified":1585561182126},{"_id":"public/2018/04/06/乘积尾零数目/index.html","hash":"d96fd5a6c609a2b8d3a7c140839384a4c551fd10","modified":1585561182126},{"_id":"public/2018/03/31/VSCode/index.html","hash":"1886c8b734687513037cab89786bee6031d044c0","modified":1585561182126},{"_id":"public/2018/03/31/chocolatey/index.html","hash":"86add5bca57f58399d45d5cef16e3c06b8383ce2","modified":1585561182126},{"_id":"public/2018/03/31/git/index.html","hash":"5f3cad09cb448a2adbf567f83b7a2067b63739e2","modified":1585561182126},{"_id":"public/2018/03/30/合并数字/index.html","hash":"e9b81904c87f2818cb499990c956442f764b5a6e","modified":1585561182126},{"_id":"public/2018/03/28/STL之sort和unique/index.html","hash":"e058cec0ce0f3cf9e69ca7a8312b18d3047b6a1a","modified":1585561182126},{"_id":"public/2018/03/20/网站/index.html","hash":"f09648c610bb14aa43c815c5dc23886d1d60410f","modified":1585561182126},{"_id":"public/archives/index.html","hash":"1c4512ba894ea91207a70cf91e3a7fba624fabc1","modified":1585561182126},{"_id":"public/archives/page/2/index.html","hash":"70dca0b3defc9381fbaa809d89b11c1c1ee11442","modified":1585561182126},{"_id":"public/archives/page/3/index.html","hash":"c95d1ac666cddbcb67fca78e6f125c2568d3b391","modified":1585561182126},{"_id":"public/archives/page/4/index.html","hash":"0a255d23be98d14e6c05b9acef6ea8e34d9d4486","modified":1585561619931},{"_id":"public/archives/page/5/index.html","hash":"fe164bbf810793776e98f7deaa096ce641fcc8d4","modified":1585561182126},{"_id":"public/archives/page/6/index.html","hash":"8379956dbac825b265ae16c6c11b12c7af98b76e","modified":1585561182127},{"_id":"public/archives/page/7/index.html","hash":"69ffe37872648b2034e333c579bb51dde338faff","modified":1585561182127},{"_id":"public/archives/2018/index.html","hash":"01d99ad45d7117b3aac26a80bbbc4af306c93633","modified":1585561182127},{"_id":"public/archives/2018/page/2/index.html","hash":"23d168ce051c8918ad8974a3aeca0842ffd13f8b","modified":1585561619931},{"_id":"public/archives/2018/page/3/index.html","hash":"901145c64e936b476b5912118bab7d5e14ce17cd","modified":1585561182127},{"_id":"public/archives/2018/page/4/index.html","hash":"bd3b17e2f9a1bb1658d30af6c84c4a25cc949fa1","modified":1585561182127},{"_id":"public/archives/2018/01/index.html","hash":"1d75688e60fd193de334b32c9fbcc74a7799ce93","modified":1585561182127},{"_id":"public/archives/2018/03/index.html","hash":"e9bbb29c5d0e3f909407bc3b8195231cdd4513d4","modified":1585561619931},{"_id":"public/archives/2018/03/page/2/index.html","hash":"a6dd06d0abac52cd7981b4b4c56e686b363b2926","modified":1585561182127},{"_id":"public/archives/2018/03/page/3/index.html","hash":"280ffb4cdc918f252e153f85c6e5ce1f2987de7d","modified":1585561182127},{"_id":"public/archives/2019/index.html","hash":"35a7dfe38d91144df1f9ecf1c11ca2c088d0a648","modified":1585561182127},{"_id":"public/archives/2019/page/2/index.html","hash":"5d10584293a9daf46e0c714b9be2e0be2d3ea34d","modified":1585561182127},{"_id":"public/archives/2018/04/index.html","hash":"a1b77b006abe164273ba2109311f593f034cf7cd","modified":1585561182127},{"_id":"public/archives/2019/02/index.html","hash":"f85ac738e4922bc2f9ef532195d25ac4d505f54a","modified":1585561182127},{"_id":"public/archives/2018/09/index.html","hash":"56aa61c2836a6bc2b693742bbab9e4a0db376595","modified":1585561182127},{"_id":"public/archives/2019/09/index.html","hash":"5df63194599ed07e75f84aae77ffae751c817585","modified":1585561182127},{"_id":"public/archives/2020/index.html","hash":"bbfe77be3ae7017a43c09743b7a7868b1be74751","modified":1585561182127},{"_id":"public/archives/2019/10/index.html","hash":"d2acbb4e30f117aa90861774945d98fc58511474","modified":1585561182127},{"_id":"public/archives/2020/03/index.html","hash":"bbfe77be3ae7017a43c09743b7a7868b1be74751","modified":1585561182128},{"_id":"public/categories/C-C/index.html","hash":"83beb69907611d9920dd24091402f4c95389d3ff","modified":1585561182128},{"_id":"public/categories/C-C/page/2/index.html","hash":"b56e6f5d87da42b36a343d445312699bf8d83d4f","modified":1585561619931},{"_id":"public/categories/HTML/index.html","hash":"d7ba2eb278464a0883b0d072eac88037d104dc35","modified":1585561182128},{"_id":"public/categories/C-C/page/3/index.html","hash":"a698c21ea491d91ef0ae55af7b51a3c0135d178e","modified":1585561182128},{"_id":"public/categories/Java/index.html","hash":"d5469c6f253d1ba6f6dc71fc99df77e54e9908ca","modified":1585561182128},{"_id":"public/categories/Python3/index.html","hash":"e237f45134af86ad8c0a2d8f8f8f1cea1c66c5a3","modified":1585561182128},{"_id":"public/categories/JS/index.html","hash":"3149d8d724e3cd7be29ba1ebad208f993ac34e7e","modified":1585561182128},{"_id":"public/categories/JAVA/index.html","hash":"d7c76335debf3f1c46033a60906579a364f629c7","modified":1585561182128},{"_id":"public/categories/系统/index.html","hash":"26dfd3b3780f3a1e9719875d5751b8e2f185b305","modified":1585561182128},{"_id":"public/categories/SpringBoot/index.html","hash":"40a53c3bf7fc2abfd302a48de9b73066a0e315b6","modified":1585561182128},{"_id":"public/categories/SQL/index.html","hash":"40a182d214840d75babb618032b01e13a4f9ffde","modified":1585561182128},{"_id":"public/index.html","hash":"41d23cc0c2e508d973a5300daeec21043ba87722","modified":1585561182128},{"_id":"public/categories/应用/index.html","hash":"bd98360dab673e1aba05fc5f3a05b3984a690a13","modified":1585561182128},{"_id":"public/page/2/index.html","hash":"ef0a8ebe6ce6db36d2d26fae00fef83a3b1faab1","modified":1585561182128},{"_id":"public/categories/网站/index.html","hash":"89d7962913f433e1c79494e7782bf75730c8e618","modified":1585561182128},{"_id":"public/page/3/index.html","hash":"867e05af651e2d0548dbbfd5d6fd2d8ea6baf7c3","modified":1585561182128},{"_id":"public/categories/Python/index.html","hash":"f96a6e0b589552b19859850550833fc50f4c92f8","modified":1585561182128},{"_id":"public/page/4/index.html","hash":"50b24de8a0efb9391ee8cfb071ed0c5526cfcf90","modified":1585561182129},{"_id":"public/page/5/index.html","hash":"ab93ece9bfc7c2ffdecbd3326af77a05619d9444","modified":1585561182129},{"_id":"public/tags/BFS/index.html","hash":"2449302907fd251ae306cd2e5966fee6f270fed3","modified":1585561182129},{"_id":"public/page/7/index.html","hash":"da32db85c2d478f415c6e8df15ecf673512374ba","modified":1585561182129},{"_id":"public/page/6/index.html","hash":"333a79c8767544fa5ec0f6d4e3e52d26cae7f2b8","modified":1585561182129},{"_id":"public/tags/STL/index.html","hash":"8d39bb727fbdc8ee44fa48c5c9b8507e2cf917ce","modified":1585561182129},{"_id":"public/tags/JS/index.html","hash":"d5ab386a20fb9d10eb4557536783e12088554959","modified":1585561182129},{"_id":"public/tags/模板/index.html","hash":"dbc61ffd00a268fa0cfe0662f4a7e58c2c7bb2f3","modified":1585561182129},{"_id":"public/tags/HTML/index.html","hash":"46e8647c1c35df2044b4aeb817e8584126d0229b","modified":1585561182129},{"_id":"public/tags/Interview/index.html","hash":"b878c2874048dac2e67add0409004c63b2cdaaa9","modified":1585561182129},{"_id":"public/tags/Java/index.html","hash":"734e6923176d0ebce2a945189d240e4318db67eb","modified":1585561182129},{"_id":"public/tags/Linux/index.html","hash":"057686cf353f79a543a1dff7779180b664642a96","modified":1585561182129},{"_id":"public/tags/python3小练手/index.html","hash":"4a4bff7b1d82fb332470ee1960fcbd8eb09d1a69","modified":1585561182129},{"_id":"public/tags/栈/index.html","hash":"73ae09dac06806d8c4b8e07285748158a0a9342a","modified":1585561182129},{"_id":"public/tags/SpringBoot/index.html","hash":"e557b677c5103a0be5ecc8657b1039bd888cc351","modified":1585561182129},{"_id":"public/tags/Spring/index.html","hash":"8707a6a8e9db633140bbe220bba92e0ea5a9571a","modified":1585561182129},{"_id":"public/tags/Ubuntu/index.html","hash":"96f7af98d72081d1431eda25d2f120eb33f6f71e","modified":1585561182129},{"_id":"public/tags/应用/index.html","hash":"0a0a4776feb511dc037391ad2a519d34ca8ba330","modified":1585561182130},{"_id":"public/tags/SQL/index.html","hash":"1515a36d5bdcc6b11124e89f6830c1bbcd81b1f3","modified":1585561182130},{"_id":"public/tags/hexo/index.html","hash":"1f5e19df718223088dd919c6be32f05527d82191","modified":1585561182130},{"_id":"public/tags/python3项目/index.html","hash":"4b1505484f397394ed3ad25dd9795184040e00b4","modified":1585561182130},{"_id":"public/tags/网站/index.html","hash":"aeb68e892b3b378b67617e6507dfd49789ad54ac","modified":1585561182130},{"_id":"public/tags/Python/index.html","hash":"96f5729adaeec2d98224ef813e7b0a235920f11c","modified":1585561182130},{"_id":"public/tags/动态规划/index.html","hash":"8786b02ae933538cb385e4b467198a067d118f5d","modified":1585561182130},{"_id":"public/tags/DFS/index.html","hash":"b42dc85df1852d9214d2524c50cf43cfe63de802","modified":1585561182130},{"_id":"public/tags/递归/index.html","hash":"3881e6d54490ff48c5b947074c7ed5ebc0bbfeb7","modified":1585561182130},{"_id":"public/tags/C-C-题目/index.html","hash":"ac1713609c46f94d60730b98e627b320124c5f60","modified":1585561182130},{"_id":"public/tags/经历/index.html","hash":"b56b73fdc2b11923950b4c125ec62d83464145d7","modified":1585561182130},{"_id":"public/tags/蓝桥杯/index.html","hash":"2259fb426edcaa6f35672ab0f9dad650d4da87d4","modified":1585561182130},{"_id":"public/2020/03/13/面试专题/index.html","hash":"f37af90181cefbcbd30dd01ac99e37b4cf21a22b","modified":1585561182130},{"_id":"public/2020/03/12/JVM/index.html","hash":"55e10dd82ce1aceb80801d8df7664965a549141c","modified":1585561182130},{"_id":"public/2019/10/09/自建SS服务/index.html","hash":"ce863e8ef72dba88e291ed47fdfcdc2d151413d5","modified":1585561182130},{"_id":"public/2019/10/02/Spring-boot第一个应用的开发/index.html","hash":"189a5fc630f02ff73aa64c729ecbed8f0a70a4a1","modified":1585561182130},{"_id":"public/2019/09/23/线段树模板/index.html","hash":"a7c05b2c550ecb3f4fd38087a5cc69f81f5df143","modified":1585561182131},{"_id":"public/2019/09/22/docker/index.html","hash":"ee5db578c5d9c975df897be6872e92370a203570","modified":1585561182131},{"_id":"public/2019/02/20/蓝桥杯试题集-基础练习/index.html","hash":"302ad7cb27802e5d0fef2e1e58bad5a745e9c53a","modified":1585561182131},{"_id":"public/2019/02/20/蓝桥杯试题集-入门训练/index.html","hash":"2bdded6fc7a35fb46c0a2088680a1bc652c9946b","modified":1585561182131},{"_id":"public/2018/09/05/redis配置与使用/index.html","hash":"9ff9d3f0c86b66b65252444f87897f118e948737","modified":1585561182131},{"_id":"public/2018/09/03/PyMySQL初识/index.html","hash":"8725f0c254fbc9884bc6737bc708a272e2891f86","modified":1585561182131},{"_id":"public/2018/09/03/python爬取hdu题库/index.html","hash":"4fd37044ae3fce03e2ff8dff4199bbe5a0bc5c46","modified":1585561182131},{"_id":"public/2018/09/03/补蓝桥杯国赛/index.html","hash":"fe22888e3bae5c3d2dfbd197f5b653afc0e6ec2e","modified":1585561182131},{"_id":"public/2018/09/02/Ubuntu-18-之旅/index.html","hash":"41f9cdd326bfbd20e4a2d4532f7adb970962af15","modified":1585561182131},{"_id":"public/2018/04/06/解决写wyh的矩阵出现内存占用超过限制的问题/index.html","hash":"6af8e3f0f6c6fcd178cced81d6c76df858ae9243","modified":1585561182131},{"_id":"public/2018/04/05/第九届蓝桥杯试题、答案以及比赛经历/index.html","hash":"64deb7ef3a8360a1c10b099d794227d7412de7b0","modified":1585561182131},{"_id":"public/2018/03/31/不要62/index.html","hash":"fb3bc7521dc6de0cf5b343951eac3e1fc2ba698c","modified":1585561182131},{"_id":"public/2018/03/31/Dungeon-Master/index.html","hash":"312e07b7440f144f686654287335faf79dbb5a7e","modified":1585561182131},{"_id":"public/2018/03/31/ACM_Template/index.html","hash":"da432090fd535c95a59f4734029451e52214e3c5","modified":1585561182131},{"_id":"public/2018/03/31/Catch-That-Cow/index.html","hash":"2cf73d64106e7dbbecc61d6149378a42e307d147","modified":1585561182131},{"_id":"public/2018/03/31/Linux_Communication/index.html","hash":"b598a320be16e21c973022f0d891cd890a83cf5c","modified":1585561182131},{"_id":"public/2018/03/31/mysql/index.html","hash":"2eb7c7fc8905a84c447f2074e77cd6882f18ec87","modified":1585561182131},{"_id":"public/2018/03/31/棋盘问题/index.html","hash":"c40ae752c37e12a2df11353a93310c037195bbba","modified":1585561182132},{"_id":"public/2018/03/30/全排列/index.html","hash":"72d562d3fe8e64515d163bf66a2a618430ed482e","modified":1585561182132},{"_id":"public/2018/03/30/STL之stack-queue/index.html","hash":"2831032bb6200118aec63962c72fef036745bac3","modified":1585561182132},{"_id":"public/2018/03/29/STL之list/index.html","hash":"62f93df7b0948b41a08cd7f2e2a1dcd0454486a1","modified":1585561182132},{"_id":"public/2018/03/29/STL之map/index.html","hash":"b5bd13ba390df4af78a64aa59c55f621a6a6e35f","modified":1585561182132},{"_id":"public/2018/03/28/STL之set/index.html","hash":"698653e24cd99484fd9118a36333af950fcc7f45","modified":1585561182132},{"_id":"public/2018/03/28/STL之string/index.html","hash":"8fd191d69f6ed62545938a74c9d9ed574e03e67c","modified":1585561182132},{"_id":"public/2018/03/28/STL之vector/index.html","hash":"f220c3455b68a6bc58d0556526169c9c362118f4","modified":1585561182132},{"_id":"public/2018/03/27/最长公共子串LCS/index.html","hash":"216b5c11be91cbd598868da211312efde9805ff5","modified":1585561182132},{"_id":"public/2018/03/27/最长递增序列LIS(n^2和nlog2n)/index.html","hash":"776c89761a344fb1de63fea0fd8ffe9617d00cca","modified":1585561182132},{"_id":"public/2018/03/23/HTML/index.html","hash":"355eb32c01e29e27b5151ebf5a456de533fbbe11","modified":1585561182132},{"_id":"public/2018/03/20/背包/index.html","hash":"2ea024b8f712ec8c05b07307c6dc15a936504a5c","modified":1585561182132},{"_id":"public/2018/01/24/hexo-Bluelake主题/index.html","hash":"9c3ddc4441fee1599ef85eed8cdcb8959b336d6f","modified":1585561182132},{"_id":"public/2018/01/24/hexo-github搭建个人博客/index.html","hash":"8f7ad6f0d0029e763ed14a07957b57d2becd5d3b","modified":1585561182132},{"_id":"public/css/blog-encrypt.css","hash":"22e25b0d16ea053d25eb971e038c817a4c9cb584","modified":1585561182147},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1585561182147},{"_id":"public/lib/blog-encrypt.js","hash":"91fda12d550323056762c5408623eb8a1d201ecc","modified":1585561182147},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1585561182147},{"_id":"public/live2dw/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1585561182147},{"_id":"public/live2dw/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1585561182147},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1585561182147},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1585561182147},{"_id":"public/live2dw/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1585561182147},{"_id":"public/live2dw/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1585561182148},{"_id":"public/live2dw/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1585561182148},{"_id":"public/live2dw/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1585561182148},{"_id":"public/live2dw/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1585561182148},{"_id":"public/live2dw/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1585561182148},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1585561182148},{"_id":"public/live2dw/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1585561182148},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1585561182150},{"_id":"public/live2dw/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1585561182150},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1585561182154},{"_id":"public/live2dw/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1585561184022},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1585561184107},{"_id":"source/_posts/img/2020-03-30-17-44-25.png","hash":"5b2ff98dbe9fcb27e72f1e8a555f6754b4df2aa9","modified":1585561465592},{"_id":"source/_posts/img/2020-03-30-17-44-29.png","hash":"5b2ff98dbe9fcb27e72f1e8a555f6754b4df2aa9","modified":1585561470030},{"_id":"source/_posts/img/2020-03-30-17-44-31.png","hash":"5b2ff98dbe9fcb27e72f1e8a555f6754b4df2aa9","modified":1585561472046},{"_id":"source/_posts/img/2020-03-30-17-45-44.png","hash":"98f0d10d4b4da91af3197baa9ed7e16097a8a96f","modified":1585561544456},{"_id":"source/_posts/img/2020-03-30-17-46-24.png","hash":"4ffa8d83b7fef48136e56198bb4364e2e07a3775","modified":1585561584761}],"Category":[{"name":"C/C++","_id":"ck871n96s000324uw1uzozzjw"},{"name":"JS","_id":"ck871n970000824uwkjaxiaa7"},{"name":"HTML","_id":"ck871n97s000k24uw6065mirx"},{"name":"Java","_id":"ck871n987000r24uwzqlshe8r"},{"name":"系统","_id":"ck871n98i000y24uwimzn2rbc"},{"name":"Python3","_id":"ck871n98o001724uwx8n63t8d"},{"name":"SpringBoot","_id":"ck871n992001v24uw4zbbg8p5"},{"name":"JAVA","_id":"ck871n99b002b24uwguqmbvrq"},{"name":"应用","_id":"ck871n99l002p24uwe7lt3i23"},{"name":"SQL","_id":"ck871n9a6003k24uwnyd6o6u4"},{"name":"网站","_id":"ck871n9ab003s24uwbtxw4nm4"},{"name":"Python","_id":"ck871n9ar004e24uw6ghpn5ik"}],"Data":[],"Page":[{"title":"about","date":"2018-03-29T04:44:04.000Z","_content":"\n人群： 广东潮汕人\n学府： 国立中央大学皇家林学院(南京林业大学)\n院系： 信息科学技术学院\n专业： 计算机科学与技术\n简介： 热爱计算机技术，虽然有时很宅，但也很爱运动。总之呢，开朗、骚气十足的程序员未养成。。。。。\n\n\n**so~ now! MAKE MORE TIME!!!**","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-03-29 12:44:04\n---\n\n人群： 广东潮汕人\n学府： 国立中央大学皇家林学院(南京林业大学)\n院系： 信息科学技术学院\n专业： 计算机科学与技术\n简介： 热爱计算机技术，虽然有时很宅，但也很爱运动。总之呢，开朗、骚气十足的程序员未养成。。。。。\n\n\n**so~ now! MAKE MORE TIME!!!**","updated":"2020-02-06T22:40:22.808Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck871n96n000124uwrbo56xdv","content":"<p>人群： 广东潮汕人<br>学府： 国立中央大学皇家林学院(南京林业大学)<br>院系： 信息科学技术学院<br>专业： 计算机科学与技术<br>简介： 热爱计算机技术，虽然有时很宅，但也很爱运动。总之呢，开朗、骚气十足的程序员未养成。。。。。</p>\n<p><strong>so~ now! MAKE MORE TIME!!!</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>人群： 广东潮汕人<br>学府： 国立中央大学皇家林学院(南京林业大学)<br>院系： 信息科学技术学院<br>专业： 计算机科学与技术<br>简介： 热爱计算机技术，虽然有时很宅，但也很爱运动。总之呢，开朗、骚气十足的程序员未养成。。。。。</p>\n<p><strong>so~ now! MAKE MORE TIME!!!</strong></p>\n"}],"Post":[{"title":"Catch That Cow","date":"2018-03-31T12:17:43.000Z","description":"3D立体迷宫，判断是否有出路，并算出最短时间。使用了广度搜索优先和队列。","_content":"[原题链接](http://poj.org/problem?id=2251)\n### 题目内容\n\n> **Description**\nYou are trapped in a 3D dungeon and need to find the quickest way out! The dungeon is composed of unit cubes which may or may not be filled with rock. It takes one minute to move one unit north, south, east, west, up or down. You cannot move diagonally and the maze is surrounded by solid rock on all sides. \nIs an escape possible? If yes, how long will it take? \n<br>\n**Input**\nThe input consists of a number of dungeons. Each dungeon description starts with a line containing three integers L, R and C (all limited to 30 in size). \nL is the number of levels making up the dungeon. \nR and C are the number of rows and columns making up the plan of each level. \nThen there will follow L blocks of R lines each containing C characters. Each character describes one cell of the dungeon. A cell full of rock is indicated by a '#' and empty cells are represented by a '.'. Your starting position is indicated by 'S' and the exit by the letter 'E'. There's a single blank line after each level. Input is terminated by three zeroes for L, R and C.\n<br>\n**Output**\nEach maze generates one line of output. If it is possible to reach the exit, print a line of the form \nEscaped in x minute(s).\nwhere x is replaced by the shortest time it takes to escape. \nIf it is not possible to escape, print the line \nTrapped!\n\n> **Sample Input**\n> <br>\n> 3 4 5\n> S....\n> .###.\n> .##..\n> ###.#  \n> <br>\n> #####\n> #####\n> ##.##\n> ##.\\..  \n> <br>\n> #####\n> #####\n> #.###\n> ####E  \n> <br>\n> 1 3 3\n> S##\n> #E#\n> ###\n> <br>\n> 0 0 0\n\n> **Sample Output**\n> <br>\n> Escaped in 11 minute(s).\n> Trapped!\n\n题解:\n```C++\n#include<iostream>\n#include<cstring>\n#include<queue>\nusing namespace std;\nint L,R,C;\nchar a[31][31][31];\nbool vis[31][31][31];\nint sx,sy,sz,ex,ey,ez;\nstruct node{\n    int x,y,z,step;\n};\nint d[6][3]={{0,0,1},{0,0,-1},{0,1,0},{0,-1,0},{1,0,0},{-1,0,0}};\nint bfs(){\n\tqueue<node>q;\n\tnode now,next;\n\tnow.x=sx;now.y=sy;now.z=sz,now.step=0;\n\tvis[now.x][now.y][now.z]=true;\n\tq.push(now);\n    while(!q.empty()){\n        now=q.front();\n        q.pop();\n        if(now.x==ex&&now.y==ey&&now.z==ez)\n            return now.step;\n        for(int i=0;i<6;i++)\n        {\n            next.x=now.x+d[i][0];\n            next.y=now.y+d[i][1];\n            next.z=now.z+d[i][2];\n            if(a[next.x][next.y][next.z]!='#'&&next.x>=0&&next.x<L&&next.y>=0)\n                if(next.y<R&&next.z>=0&&next.z<C&&!vis[next.x][next.y][next.z]){\n                //分开写是因为太长了  比较难看=。=\n                vis[next.x][next.y][next.z]++;\n                next.step=now.step+1;\n                q.push(next);\n            }\n        }\n    }\n    return 0;\n}\nint main() {\n\twhile(scanf(\"%d %d %d\",&L,&R,&C),L){\n\t\tmemset(a,'\\0',sizeof(a));\n\t\tmemset(vis,false,sizeof(vis)); \n\t\t\n\t\tfor(int l=0;l<L;l++){\n\t\t\tgetchar();\n\t\t\tfor(int r=0;r<R;r++){\n\t\t\t\tfor(int c=0;c<C;c++){\n\t\t\t\t\ta[l][r][c]=getchar();\n\t\t\t\t\t if(a[l][r][c]=='S') {\n                        sx=l;\n                        sy=r;\n                        sz=c;\n                    }\n                    if(a[l][r][c]=='E'){\n                        ex=l;\n                        ey=r;\n                        ez=c;\n                    }\n\t\t\t\t}\n\t\t\t\tgetchar();\n\t\t\t}\n\t\t}\n\t\tint ans=bfs();\n\t\tif(ans)\n\t\t\tprintf(\"Escaped in %d minute(s).\\n\",ans);\n\t\telse\n\t\t\tprintf(\"Trapped!\\n\");\n\t}\n\treturn 0;\n}\n```\n\n已AC....by edxuanlen\n\n","source":"_posts/Catch-That-Cow.md","raw":"---\ntitle: Catch That Cow\ndate: 2018-03-31 20:17:43\ntags: \n    - BFS\n    - STL\ncategories: C/C++\ndescription: 3D立体迷宫，判断是否有出路，并算出最短时间。使用了广度搜索优先和队列。\n---\n[原题链接](http://poj.org/problem?id=2251)\n### 题目内容\n\n> **Description**\nYou are trapped in a 3D dungeon and need to find the quickest way out! The dungeon is composed of unit cubes which may or may not be filled with rock. It takes one minute to move one unit north, south, east, west, up or down. You cannot move diagonally and the maze is surrounded by solid rock on all sides. \nIs an escape possible? If yes, how long will it take? \n<br>\n**Input**\nThe input consists of a number of dungeons. Each dungeon description starts with a line containing three integers L, R and C (all limited to 30 in size). \nL is the number of levels making up the dungeon. \nR and C are the number of rows and columns making up the plan of each level. \nThen there will follow L blocks of R lines each containing C characters. Each character describes one cell of the dungeon. A cell full of rock is indicated by a '#' and empty cells are represented by a '.'. Your starting position is indicated by 'S' and the exit by the letter 'E'. There's a single blank line after each level. Input is terminated by three zeroes for L, R and C.\n<br>\n**Output**\nEach maze generates one line of output. If it is possible to reach the exit, print a line of the form \nEscaped in x minute(s).\nwhere x is replaced by the shortest time it takes to escape. \nIf it is not possible to escape, print the line \nTrapped!\n\n> **Sample Input**\n> <br>\n> 3 4 5\n> S....\n> .###.\n> .##..\n> ###.#  \n> <br>\n> #####\n> #####\n> ##.##\n> ##.\\..  \n> <br>\n> #####\n> #####\n> #.###\n> ####E  \n> <br>\n> 1 3 3\n> S##\n> #E#\n> ###\n> <br>\n> 0 0 0\n\n> **Sample Output**\n> <br>\n> Escaped in 11 minute(s).\n> Trapped!\n\n题解:\n```C++\n#include<iostream>\n#include<cstring>\n#include<queue>\nusing namespace std;\nint L,R,C;\nchar a[31][31][31];\nbool vis[31][31][31];\nint sx,sy,sz,ex,ey,ez;\nstruct node{\n    int x,y,z,step;\n};\nint d[6][3]={{0,0,1},{0,0,-1},{0,1,0},{0,-1,0},{1,0,0},{-1,0,0}};\nint bfs(){\n\tqueue<node>q;\n\tnode now,next;\n\tnow.x=sx;now.y=sy;now.z=sz,now.step=0;\n\tvis[now.x][now.y][now.z]=true;\n\tq.push(now);\n    while(!q.empty()){\n        now=q.front();\n        q.pop();\n        if(now.x==ex&&now.y==ey&&now.z==ez)\n            return now.step;\n        for(int i=0;i<6;i++)\n        {\n            next.x=now.x+d[i][0];\n            next.y=now.y+d[i][1];\n            next.z=now.z+d[i][2];\n            if(a[next.x][next.y][next.z]!='#'&&next.x>=0&&next.x<L&&next.y>=0)\n                if(next.y<R&&next.z>=0&&next.z<C&&!vis[next.x][next.y][next.z]){\n                //分开写是因为太长了  比较难看=。=\n                vis[next.x][next.y][next.z]++;\n                next.step=now.step+1;\n                q.push(next);\n            }\n        }\n    }\n    return 0;\n}\nint main() {\n\twhile(scanf(\"%d %d %d\",&L,&R,&C),L){\n\t\tmemset(a,'\\0',sizeof(a));\n\t\tmemset(vis,false,sizeof(vis)); \n\t\t\n\t\tfor(int l=0;l<L;l++){\n\t\t\tgetchar();\n\t\t\tfor(int r=0;r<R;r++){\n\t\t\t\tfor(int c=0;c<C;c++){\n\t\t\t\t\ta[l][r][c]=getchar();\n\t\t\t\t\t if(a[l][r][c]=='S') {\n                        sx=l;\n                        sy=r;\n                        sz=c;\n                    }\n                    if(a[l][r][c]=='E'){\n                        ex=l;\n                        ey=r;\n                        ez=c;\n                    }\n\t\t\t\t}\n\t\t\t\tgetchar();\n\t\t\t}\n\t\t}\n\t\tint ans=bfs();\n\t\tif(ans)\n\t\t\tprintf(\"Escaped in %d minute(s).\\n\",ans);\n\t\telse\n\t\t\tprintf(\"Trapped!\\n\");\n\t}\n\treturn 0;\n}\n```\n\n已AC....by edxuanlen\n\n","slug":"Catch-That-Cow","published":1,"updated":"2020-02-06T22:40:22.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n96g000024uw3y5nwen7","content":"<p><a href=\"http://poj.org/problem?id=2251\" target=\"_blank\" rel=\"noopener\">原题链接</a></p>\n<h3 id=\"题目内容\"><a href=\"#题目内容\" class=\"headerlink\" title=\"题目内容\"></a>题目内容</h3><blockquote>\n<p><strong>Description</strong><br>You are trapped in a 3D dungeon and need to find the quickest way out! The dungeon is composed of unit cubes which may or may not be filled with rock. It takes one minute to move one unit north, south, east, west, up or down. You cannot move diagonally and the maze is surrounded by solid rock on all sides.<br>Is an escape possible? If yes, how long will it take?<br><br><br><strong>Input</strong><br>The input consists of a number of dungeons. Each dungeon description starts with a line containing three integers L, R and C (all limited to 30 in size).<br>L is the number of levels making up the dungeon.<br>R and C are the number of rows and columns making up the plan of each level.<br>Then there will follow L blocks of R lines each containing C characters. Each character describes one cell of the dungeon. A cell full of rock is indicated by a ‘#’ and empty cells are represented by a ‘.’. Your starting position is indicated by ‘S’ and the exit by the letter ‘E’. There’s a single blank line after each level. Input is terminated by three zeroes for L, R and C.<br><br><br><strong>Output</strong><br>Each maze generates one line of output. If it is possible to reach the exit, print a line of the form<br>Escaped in x minute(s).<br>where x is replaced by the shortest time it takes to escape.<br>If it is not possible to escape, print the line<br>Trapped!</p>\n</blockquote>\n<blockquote>\n<p><strong>Sample Input</strong><br><br><br>3 4 5<br>S….<br>.###.<br>.##..<br>###.#<br><br><br>#####<br>#####<br>##.##<br>##...<br><br><br>#####<br>#####<br>#.###<br>####E<br><br><br>1 3 3<br>S##<br>#E#<br>###<br><br><br>0 0 0</p>\n</blockquote>\n<blockquote>\n<p><strong>Sample Output</strong><br><br><br>Escaped in 11 minute(s).<br>Trapped!</p>\n</blockquote>\n<p>题解:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> L,R,C;</span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">31</span>][<span class=\"number\">31</span>][<span class=\"number\">31</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">31</span>][<span class=\"number\">31</span>][<span class=\"number\">31</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sx,sy,sz,ex,ey,ez;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,z,step;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[<span class=\"number\">6</span>][<span class=\"number\">3</span>]=&#123;&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">queue</span>&lt;node&gt;q;</span><br><span class=\"line\">\tnode now,next;</span><br><span class=\"line\">\tnow.x=sx;now.y=sy;now.z=sz,now.step=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tvis[now.x][now.y][now.z]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\tq.push(now);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        now=q.front();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now.x==ex&amp;&amp;now.y==ey&amp;&amp;now.z==ez)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> now.step;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            next.x=now.x+d[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">            next.y=now.y+d[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            next.z=now.z+d[i][<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[next.x][next.y][next.z]!=<span class=\"string\">'#'</span>&amp;&amp;next.x&gt;=<span class=\"number\">0</span>&amp;&amp;next.x&lt;L&amp;&amp;next.y&gt;=<span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(next.y&lt;R&amp;&amp;next.z&gt;=<span class=\"number\">0</span>&amp;&amp;next.z&lt;C&amp;&amp;!vis[next.x][next.y][next.z])&#123;</span><br><span class=\"line\">                <span class=\"comment\">//分开写是因为太长了  比较难看=。=</span></span><br><span class=\"line\">                vis[next.x][next.y][next.z]++;</span><br><span class=\"line\">                next.step=now.step+<span class=\"number\">1</span>;</span><br><span class=\"line\">                q.push(next);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d\"</span>,&amp;L,&amp;R,&amp;C),L)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(a,<span class=\"string\">'\\0'</span>,<span class=\"keyword\">sizeof</span>(a));</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(vis,<span class=\"literal\">false</span>,<span class=\"keyword\">sizeof</span>(vis)); </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;l&lt;L;l++)&#123;</span><br><span class=\"line\">\t\t\tgetchar();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> r=<span class=\"number\">0</span>;r&lt;R;r++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> c=<span class=\"number\">0</span>;c&lt;C;c++)&#123;</span><br><span class=\"line\">\t\t\t\t\ta[l][r][c]=getchar();</span><br><span class=\"line\">\t\t\t\t\t <span class=\"keyword\">if</span>(a[l][r][c]==<span class=\"string\">'S'</span>) &#123;</span><br><span class=\"line\">                        sx=l;</span><br><span class=\"line\">                        sy=r;</span><br><span class=\"line\">                        sz=c;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(a[l][r][c]==<span class=\"string\">'E'</span>)&#123;</span><br><span class=\"line\">                        ex=l;</span><br><span class=\"line\">                        ey=r;</span><br><span class=\"line\">                        ez=c;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tgetchar();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ans=bfs();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ans)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Escaped in %d minute(s).\\n\"</span>,ans);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Trapped!\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>已AC….by edxuanlen</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://poj.org/problem?id=2251\" target=\"_blank\" rel=\"noopener\">原题链接</a></p>\n<h3 id=\"题目内容\"><a href=\"#题目内容\" class=\"headerlink\" title=\"题目内容\"></a>题目内容</h3><blockquote>\n<p><strong>Description</strong><br>You are trapped in a 3D dungeon and need to find the quickest way out! The dungeon is composed of unit cubes which may or may not be filled with rock. It takes one minute to move one unit north, south, east, west, up or down. You cannot move diagonally and the maze is surrounded by solid rock on all sides.<br>Is an escape possible? If yes, how long will it take?<br><br><br><strong>Input</strong><br>The input consists of a number of dungeons. Each dungeon description starts with a line containing three integers L, R and C (all limited to 30 in size).<br>L is the number of levels making up the dungeon.<br>R and C are the number of rows and columns making up the plan of each level.<br>Then there will follow L blocks of R lines each containing C characters. Each character describes one cell of the dungeon. A cell full of rock is indicated by a ‘#’ and empty cells are represented by a ‘.’. Your starting position is indicated by ‘S’ and the exit by the letter ‘E’. There’s a single blank line after each level. Input is terminated by three zeroes for L, R and C.<br><br><br><strong>Output</strong><br>Each maze generates one line of output. If it is possible to reach the exit, print a line of the form<br>Escaped in x minute(s).<br>where x is replaced by the shortest time it takes to escape.<br>If it is not possible to escape, print the line<br>Trapped!</p>\n</blockquote>\n<blockquote>\n<p><strong>Sample Input</strong><br><br><br>3 4 5<br>S….<br>.###.<br>.##..<br>###.#<br><br><br>#####<br>#####<br>##.##<br>##...<br><br><br>#####<br>#####<br>#.###<br>####E<br><br><br>1 3 3<br>S##<br>#E#<br>###<br><br><br>0 0 0</p>\n</blockquote>\n<blockquote>\n<p><strong>Sample Output</strong><br><br><br>Escaped in 11 minute(s).<br>Trapped!</p>\n</blockquote>\n<p>题解:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> L,R,C;</span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">31</span>][<span class=\"number\">31</span>][<span class=\"number\">31</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">31</span>][<span class=\"number\">31</span>][<span class=\"number\">31</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sx,sy,sz,ex,ey,ez;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,z,step;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[<span class=\"number\">6</span>][<span class=\"number\">3</span>]=&#123;&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">queue</span>&lt;node&gt;q;</span><br><span class=\"line\">\tnode now,next;</span><br><span class=\"line\">\tnow.x=sx;now.y=sy;now.z=sz,now.step=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tvis[now.x][now.y][now.z]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\tq.push(now);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        now=q.front();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now.x==ex&amp;&amp;now.y==ey&amp;&amp;now.z==ez)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> now.step;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            next.x=now.x+d[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">            next.y=now.y+d[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            next.z=now.z+d[i][<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[next.x][next.y][next.z]!=<span class=\"string\">'#'</span>&amp;&amp;next.x&gt;=<span class=\"number\">0</span>&amp;&amp;next.x&lt;L&amp;&amp;next.y&gt;=<span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(next.y&lt;R&amp;&amp;next.z&gt;=<span class=\"number\">0</span>&amp;&amp;next.z&lt;C&amp;&amp;!vis[next.x][next.y][next.z])&#123;</span><br><span class=\"line\">                <span class=\"comment\">//分开写是因为太长了  比较难看=。=</span></span><br><span class=\"line\">                vis[next.x][next.y][next.z]++;</span><br><span class=\"line\">                next.step=now.step+<span class=\"number\">1</span>;</span><br><span class=\"line\">                q.push(next);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d\"</span>,&amp;L,&amp;R,&amp;C),L)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(a,<span class=\"string\">'\\0'</span>,<span class=\"keyword\">sizeof</span>(a));</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(vis,<span class=\"literal\">false</span>,<span class=\"keyword\">sizeof</span>(vis)); </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;l&lt;L;l++)&#123;</span><br><span class=\"line\">\t\t\tgetchar();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> r=<span class=\"number\">0</span>;r&lt;R;r++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> c=<span class=\"number\">0</span>;c&lt;C;c++)&#123;</span><br><span class=\"line\">\t\t\t\t\ta[l][r][c]=getchar();</span><br><span class=\"line\">\t\t\t\t\t <span class=\"keyword\">if</span>(a[l][r][c]==<span class=\"string\">'S'</span>) &#123;</span><br><span class=\"line\">                        sx=l;</span><br><span class=\"line\">                        sy=r;</span><br><span class=\"line\">                        sz=c;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(a[l][r][c]==<span class=\"string\">'E'</span>)&#123;</span><br><span class=\"line\">                        ex=l;</span><br><span class=\"line\">                        ey=r;</span><br><span class=\"line\">                        ez=c;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tgetchar();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ans=bfs();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ans)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Escaped in %d minute(s).\\n\"</span>,ans);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Trapped!\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>已AC….by edxuanlen</p>\n"},{"title":"JS","date":"2018-04-27T06:29:52.000Z","description":"HTML中的Javascript。","_content":"\n## 内部的script\n```Javascript\n<script type=\"text/javascript\"></script>\n```\n## 外部的script\nscript标签内用arc\n## 作用","source":"_posts/JS.md","raw":"---\ntitle: JS\ndate: 2018-04-27 14:29:52\ntags: JS\ncategories: JS\ndescription: HTML中的Javascript。\n---\n\n## 内部的script\n```Javascript\n<script type=\"text/javascript\"></script>\n```\n## 外部的script\nscript标签内用arc\n## 作用","slug":"JS","published":1,"updated":"2020-02-06T22:40:22.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n96p000224uw7cs68amr","content":"<h2 id=\"内部的script\"><a href=\"#内部的script\" class=\"headerlink\" title=\"内部的script\"></a>内部的script</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"外部的script\"><a href=\"#外部的script\" class=\"headerlink\" title=\"外部的script\"></a>外部的script</h2><p>script标签内用arc</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内部的script\"><a href=\"#内部的script\" class=\"headerlink\" title=\"内部的script\"></a>内部的script</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"外部的script\"><a href=\"#外部的script\" class=\"headerlink\" title=\"外部的script\"></a>外部的script</h2><p>script标签内用arc</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2>"},{"title":"Template","date":"2018-03-31T12:17:43.000Z","top":true,"description":"ICPC模板","_content":"\n<!-- # Template -->\n\n## number theory(数论)\n\n### 扩展欧几里得相关\n\n``` C++\n// ax + by = gcd(a, b)\nLL exgcd(LL a, LL b, LL &x, LL &y) {\n    if (!b) {\n        x = 1, y = 0;\n        return a;\n    }\n    else{\n        LL d = exgcd(b, a % b, y, x);\n        y -= x * (a / b);\n        return d;\n    }\n}\n\n// ax + by = c\nbool linear_equation(LL a, LL b, LL c, LL &x, LL &y){\n    LL d = exgcd (a, b, x, y);\n    if( c % d )\n        return false;\n    LL k = c / d;\n    x *= k; y *= k;\n    return true;\n    // 其他解为 x + b / d * t; y - a / d * t; t为任意整数\n}\n\n// ax ≡ b (mod n)\nbool modular_linear_equation(LL a, LL b, LL n, LL &x, LL &y){\n    LL x0, i;\n    LL d = exgcd(a, n, x, y);\n    if( b % d ) return false;\n    x0 = x * ( b / d ) % n;\n    for(i = 1; i <= d; i ++)\n        printf(\"%d\\n\", ( x0 + i * ( n / d ) ) % n );\n    return true;\n}\n\n// inverse\nint inverse(LL a, LL m, LL x, LL y){\n    LL d = exgcd(a, m, x, y);\n    return (x + m) % m;\n}\n```\n\n### 勾股数组\n\n取n $\\lt$ m且满足(n & 1) ^ (m & 1)为1（这里的^为异或，此表达式说明二者奇偶不同），同时gcd(n, m) = 1（即二者互素），则可得到满足 $a^2 + b^2 = c^2$ 的勾股数组：\n\n$ a = m^2 - n^2 $\n$ b = 2 * n * m $\n$ c = m^2 + n^2 $\n\n按照顺序枚举满足上述条件（奇偶不同的互素n $\\lt$ m二元组（n, m）），就可以得到所有的本源勾股数组，同时它们的整数倍也是勾股数组。这个方法可以取得所有的勾股数组。\n\n### 欧拉线性筛\n\n欧拉线性筛求判断素数和求最小质因子\n\n```C++\n// MinFactor[i] = x 表示为i最小质因子为 x\n// p[i] = x 表示为第 i+1 个素数为x\n// MinFactor 只求素数可换为 bool 类型判断 not_prime\nvoid euler(){\n    int t = 0;\n    pos = 0;\n    for(int i = 2; i < LIM; i ++){\n        if ( !MinFactor[i] ) p[pos ++] = MinFactor[i] =  i;\n        for(int j = 0; (t = i * p[j]) < LIM; j ++){\n            MinFactor[t] = p[j];\n            if( !(i % p[j]) ) break;\n        }\n    }\n}\n```\n\n### 欧拉函数\n\nphi(i) 意义： 小于 i 且与 i 互质的正整数的个数\n\n1. 打表时间复杂度 O(n)\n\n    ```C++\n    void init_phi(){\n        int t;\n        phi[1] = 1;\n        for(int i = 2; i < LIM; i ++){\n            if( !phi[i] ){\n                phi[i] = i - 1;\n                p[cnt ++] = i;\n            }\n            for(int j = 0; (t = i * p[j]) < LIM; j ++){\n                if( i % p[j] ) phi[t] = phi[i] * (p[j] - 1);\n                else {\n                    phi[t] = phi[i] * p[j];\n                    break;\n                }\n            }\n        }\n    }\n    ```\n\n2. 单个时间复杂度为 O($\\sqrt{n}$)\n\n    ```C++\n    LL phi(LL n) {  \n        LL ret = 1;\n        for (LL i = 2; i * i <= n; i++) {\n            if (!(n % i)) {\n                ret *= i - 1;\n                n /= i;\n                while (!(n % i))\n                    ret *= i, n /= i;\n            }\n        }\n        if (n ^ 1) ret *= (n - 1);\n        return ret;\n    }\n    ```\n\n## Numberical Methods(数值方法)\n\n### 高精度平方根\n\n牛顿逼近法\n\n```java\npublic static BigDecimal sqrt(BigDecimal b, BigDecimal eps) {\n    BigDecimal crt = new BigDecimal(b.toString());\n    BigDecimal two = BigDecimal.valueOf(2);\n    int scale = eps.scale() + 2;\n    Boolean isNegtive = false;\n    if (crt.compareTo(BigDecimal.valueOf(0)) < 0) {\n        b = b.negate();\n        crt = crt.negate();\n        isNegtive = true;\n    }\n    while (true) {\n        BigDecimal nxt = crt.subtract(crt.multiply(crt).subtract(b).divide(two.multiply(crt),\n            scale, BigDecimal.ROUND_DOWN));\n        // test\n        // System.out.println(nxt);\n        if (nxt.subtract(crt).abs().compareTo(eps) <= 0) {\n            crt = nxt;\n            break;\n        }\n        crt = nxt;\n    }\n    if (isNegtive) {\n        b = b.negate();\n        crt = crt.negate();\n    }\n    return crt;\n}\npublic static BigDecimal sqrt(BigDecimal b) {\n    BigDecimal eps = new BigDecimal(\"0.00000000000000000000000001\");\n    return sqrt(b, eps);\n}\npublic static BigDecimal sqrt(BigInteger b, BigDecimal eps) {\n    BigDecimal tmp = new BigDecimal(b.toString());\n    return sqrt(tmp, eps);\n}\npublic static BigDecimal sqrt(BigInteger b) {\n    BigDecimal tmp = new BigDecimal(b.toString());\n    return sqrt(tmp);\n}\n```\n\n### 快速求幂取模法\n\n```C++\n//计算(a*b)%c\nlong long mul(long long a,long long b,long long mod) {\n    long long res = 0;\n    while(b > 0){\n        if( (b&1) != 0)  // 二进制最低位是1 --> 加上 a的 2^i 倍, 快速幂是乘上a的2^i ）\n            res  = ( res + a) % mod;\n        a = (a << 1) % mod;    // a = a * 2    a随着b中二进制位数而扩大 每次 扩大两倍。\n        b >>= 1;               // b -> b/2     右移  去掉最后一位 因为当前最后一位我们用完了，\n    }\n    return res;\n}\n\n//幂取模函数\nlong long pow1(long long a,long long n,long long mod){\n    long long res = 1;\n    while(n > 0){\n        if(n&1)\n            res = (res * a)%mod;\n        a = (a * a)%mod;\n        n >>= 1;\n    }\n    return res;\n}\n\n\n// 计算 ret = (a^n)%mod\nlong long pow2(long long a,long long n,long long mod) {\n    long long res = 1;\n    while(n > 0) {\n        if(n & 1)\n            res = mul(res,a,mod);\n        a = mul(a,a,mod);\n        n >>= 1;\n    }\n    return res;\n}\n```\n\n### 矩阵乘法和快速幂\n\n```C++\nstruct matrix{\n    LL m[10][10];\n    matrix(){ memset(m,0,sizeof(m)); }\n};\nmatrix operator * (const matrix & a,const matrix & b){\n    matrix c;\n    for (int i=1; i<=9; i++)\n        for (int j=1; j<=9; j++){\n            c.m[i][j]=0;\n            for (int k=1; k<=9; k++)\n                c.m[i][j]=(c.m[i][j]+a.m[i][k]*b.m[k][j])%mod;//一般题目都要求要modulo一个数\n        }\n    return c;\n}\nmatrix quick(matrix base,int pow){\n    matrix a;\n    for (int i=1; i<=9; i++) a.m[i][i]=1;\n    while (pow)    {\n        if (pow&1) a=a*base;\n        base=base*base;\n        pow>>=1;\n    }\n    return a;\n}\n```\n\n## 组合数学\n\n### Contar康托展开\n\n由一个排列计算它是全排列中的第几个排列的方法。\n\n```C++\nint fac[15];\nvoid factor(){\n    fac[0] = fac[1] = 1;\n    for(int i = 2; i < 13; ++ i)\n        fac[i] = fac[i - 1] * i;\n}\n//逆康托\nstring uncantor(int x, int k) {\n    string res;\n    int i, j, l, t;\n    bool h[100];\n    for (i = 1; i <= k; i++) {\n        t = x / fac[k - i];\n        x -= t * fac[k - i];\n        for (j = 1, l = 0; l <= t; j++)\n            if ( !h[j] ) l++;\n        j --;\n        h[j] = true;\n        res += j + '0';\n    }\n    return res;\n}\n//康托\nint cantor(int* a, int len){\n    int ans = 0;\n    for(int i = 0; i < len; ++ i){\n        int t = 0;\n        for(int j = i + 1; j < len; ++j)\n            if(a[j] < a[i]) t ++;\n        ans += fac[len - i - 1] * t;\n    }\n    return ans + 1;\n}\n```\n\n### Catalan Number 卡特兰数\n\n$C_n = \\frac{4n - 2}{n + 1} C_{n-1}$\n\n相关问题\n\n1. Cn可以表示长度为2n的Dyck Words的种类数，Dyck Words由n个A字符与n个B字符组成，且满足在任意位置上，前缀中A的数量不小于B的数量，如果A用(代替，把B用)代替，就是一个典型的括号表达式，因此也可以用来表示合法的表达式个数。\n2. Cn可以表示有n个结点的不同构的二叉树的种类数。\n3. Cn可以表示有2n + 1个结点的不同构的满二叉树的种类数。\n4. Cn可以表示在n*n的格点中从左下角延格线走到右上角且始终不超过对角线的方案数。\n5. Cn可以表示通过连接顶点将n + 2个顶点的凸多边形划分成三角形的方案数。\n6. Cn表示有n个元素的出栈顺序的种类数。\n7. Cn可以用在买票找零钱问题上，对于2n的观众，收银台初始没有钱，无法找零，接下来有n个人拿a元买票，n个人拿2a元买票（需要找零钱数为a），能够保证每一个需要找零的观众来的时候都能够得到找零的合法方案数。\n8. Cn可以表示在二维直角坐标系中，从(0, 0)走到(2n, 0)点，每个相邻整数点的纵坐标差值的绝对值为1，且点始终不会落到x轴下方的方案数。\n\n## 高精度\n\n### 大数操作BigInteger\n\n```JAVA\nimport java.math.BigInteger;\nimport java.util.Scanner;\npublic class BI {\n    public static void main(String[] args) {\n        Scanner in = new Scanner (System.in);\n        BigInteger a, b;\n        a = in.nextBigInteger();\n        b = in.nextBigInteger();\n        System.out.println(a.add(b));\n        System.out.println(a.subtract(b));\n        System.out.println(a.multiply(b));\n        System.out.println(a.divide(b));\n        BigInteger mod = BigInteger.valueOf(3);\n        System.out.println(b.mod(mod));\n    }\n}\n```\n\n### 小数操作BigDecimal\n\n```JAVA\nimport java.math.BigDecimal;\nimport java.util.*;\npublic class BD {\n    public static void main(String[] args) {\n        BigDecimal a = new BigDecimal(10);\n        BigDecimal b = new BigDecimal(10.5);\n        BigDecimal c = new BigDecimal(123456789101222L);\n        BigDecimal d = new BigDecimal(\"-123456.31\");\n        System.out.println(a);\n        System.out.println(b);\n        System.out.println(c);\n        System.out.println(d);\n        System.out.println(a.add(b).add(c).add(d));\n        System.out.println(a.subtract(b).subtract(a));\n        System.out.println(a.multiply(b).multiply(c));\n        System.out.println(c.divide(a).divide(new BigDecimal(20)));\n        System.out.println(d.divide(a));\n        System.out.println(d.doubleValue());\n        System.out.println(a.compareTo(b));// -1\n        System.out.println(a.equals(b));// flase\n    }\n}\n```\n\n### 生成排列\n\nnext_permutation() 生成下一个排列\nprev_permutation() 生成上一个排列\n\n```C++\ndo{\n    cout << str << endl;\n// }while (next_permutation(str.begin(), str.end()));\n}while (prev_permutation(str.begin(), str.end()));\n```\n\n## Graph 图论\n\n### topu 拓扑排序\n\n```C++\nint in[maxn];//存入度数\nvector <int > edge[maxn]; //存边\n\nint topu_sort(){\n    queue<int>q;\n    for (int i = 1; i <= n; i++)\n        if (!in[i]) q.push(i); //取出入度为0的点放\n    while (!q.empty()){\n        int u = q.front(); q.pop();\n        for (int i = 0; i < edge[u].size(); i++){ //删边与统计操作\n            int v = edge[u][i];\n            in[v] --;  //删边\n            if ( ! in[v] ) q.push(v);\n        }\n        printf (\"%d \", u);\n    }\n    for (int i = 1; i <= n; i++) //若存在全部遍历完仍存在入度不为0的点说明存在环\n        if (in[i]) return -1;\n}\n```\n\n### Shortest Path 最短路\n\n#### Dijstra\n\n```C++\ntypedef pair<int, int> P;\nint pre[2501];   // 路径记录\nvoid Dijkstra( int s ){\n    priority_queue< P, vector<P>, greater<P> > q;\n    fill (d + 1, d + n + 1, INF);\n    d[s] = 0;\n    q.push(P(0, s));\n    while (q.size()){\n        P p = q.top(); q.pop();\n        int h = p.second;\n        if( d[h] < p.first ) continue;\n        for(int i = 0; i < v[h].size(); i ++){\n            edge e = v[h][i];\n            if( d[e.to] > d[h] + e.cost ){\n                d[e.to] = d[h] + e.cost;\n                q.push(P(d[e.to], e.to));\n                pre[e.to] = h;  // 记录前驱\n            }\n        }\n    }\n}\n```\n\n#### SPFA\n\n从起点到任意一个点最短距离经过的点最多只有 n 个，用 cnt[ i ] 表示从起点（假设就是 1）到 i 的最短距离包含点的个数，初始化 cnt[ 1 ] = 1，那么当我们能够用点 u 松弛点 v 时，当我们能够用点 u 松弛点 v 时，松弛时同时更新 cnt[ v ] = cnt[ u ] + 1，若发现此时 cnt[ v ] > n，那么就存在负环\n\n```C++\nbool SPFA( int s ){\n    queue<int > q;\n    fill(d + 1, d + n + 1, INF);\n    d[s] = 0;\n    q.push(s);\n    vis[s] = 1;\n    while ( q.size() ){\n        int t = q.front(); q.pop();\n        vis[t] = 1;\n        for(auto i = v[t].begin(); i != v[t].end(); i ++ ){\n            if( i -> cost + d[t] < d[i -> to] ){\n                d[i -> to] = i -> cost + d[t];\n                // cnt[ i -> to ] = 1 + cnt[t];\n                // if(cnt[i -> to] > n ) return false;\n                if( !vis[i -> to] )\n                    q.push(i -> to);\n            }\n        }\n    }\n    return true;\n}\n```\n\n### MST 最小生成树\n\n#### Kruskal\n\n```C++\nvoid init(){\n    for(int i = 1; i <= n; i ++)\n        p[i] = i;\n}\nint find( int x ){\n    return x == p[x] ? x : p[x] = find(p[x]);\n}\nll Kruskal(){\n    ll res = 0;\n    sort(E, E + m, cmp);\n    init();\n    int cnt = 0;\n        for (int i = 0; i < m; i ++ ){\n        edge e = E[i];\n        int x = find(e.from);\n        int y = find(e.to);\n        if( x != y ){\n            p[x] = p[y];\n            cnt ++;\n            res += (ll) e.cost;\n        }\n        if( cnt == n - 1 ) break;\n    }\n    return res;\n}\n```\n\n#### Prim\n\n```C++\nll Prim(){\n    fill (cost + 1, cost + n + 1, INF);\n    cost[1] = 0;\n    priority_queue <P, vector<P>, greater<P> > q;\n    q.push(P(0, 1));\n    ll res = 0;\n    while ( q.size() && cnt < n ){\n        P p = q.top(); q.pop();\n        int v = p.second;\n        if( !vis[v] ){\n            cnt ++;\n            vis[v] = 1;\n            res += p.first;\n            for(int i = 0; i < E[v].size(); i ++){\n                edge e = E[v][i];\n                if( cost[e.to] > e.cost ){\n                    cost[e.to] = e.cost;\n                    q.push(P(cost[e.to], e.to));\n                }\n            }\n        }\n    }\n    return res;\n}\n```\n\n#### 最大流\n\n```C++\ntypedef struct node{\n    int to, cap, rev;\n}edge;\n\nbool vis[101];\nvector <edge > G[101];\nint dfs(int v, int t, int f){\n    if(v == t) return f;\n    vis[v] = 1;\n    for(int i = 0; i < G[v].size(); i ++){\n        edge e = G[v][i];\n        if( !vis[e.to] && e.cap > 0 ){\n            int d = dfs(e.to, t, min(f, e.cap));\n            if( d > 0 ){\n                e.cap -= d;\n                G[e.to][e.rev].cap += d;\n                return d;\n            }\n        }\n    }\n}\n\nint max_flow(int s, int t){\n    int flow = 0;\n    while(true){\n        memset(vis, 0, sizeof(vis));\n        int f = dfs(s, t, INF);\n        if( !f ) return flow;\n        flow += f;\n    }\n}\n\nint main(){\n    int n, m;\n    cin >> n >> m;\n    int from, to, s = 0, t = n + m + 1;\n    for(int i = 1; i <= m; i ++{\n        G[s].push_back({i, 1, G[i].size()});\n        G[i].push_back({s, 0, G[s].size() - 1});\n    }\n    for(int j = m + 1; j <= n + m; j ++){\n        G[j].push_back({t, 1, G[t].size()});\n        G[t].push_back({j, 0, G[j].size() - 1});\n    }\n    while ( scanf(\"%d%d\", &from, &to), from != -1){\n        G[to].push_back({from, 1, G[from].size()});\n        G[from].push_back({to, 0, G[to].size() - 1});\n    }\n    cout << max_flow(s, t) << endl;\n    return 0;\n}\n```\n\n### 欧拉路和欧拉回路\n\n有向图\n\n```C++\ninline void dfs(int x, int lst) {\n    register int &i=lnk[x];\n    for(;i;i=e[i].nxt){\n        if(vis[i]) continue;\n        vis[i]=1,dfs(e[i].to,i);\n    }\n    if(lst) res[++res_]=lst;\n}\n```\n\n无向图\n\n```C++\ninline void dfs(int x,int lst) {\n    register int &i=lnk[x];\n    for(;i;i=e[i].nxt){\n        if(vis[i+1>>1]) continue;\n        vis[i+1>>1]=1,dfs(e[i].to,i&1?(i+1>>1):-(i+1>>1));\n    }\n    if(lst) res[++res_]=lst;\n}\n```\n\n## Dynamic Programming 动态规划\n\n### LIS 最长上升子序列\n\n```C++\nvoid solve(){\n    memset(dp, 0, sizeof(dp));\n    int res = 0;\n    for(int i = 0; i < n; i ++){\n        dp[i] = 1;\n        for(int j = 0; j < i; j ++)\n            if( a[j] < a[i] )\n                dp[i] = max (dp[i], dp[j] + 1);\n        res = max (res, dp[i]);\n    }\n    printf(\"%d\", res);\n}\n```\n\n### 数划分\n\n```C++\n1.问题描述：\n    给定一个正整数N和K\n\n    1. 将n划分成若干正整数之和的划分数。\n    2. 将n划分成k个正整数之和的划分数。\n    3. 将n划分成最大数不超过k的划分数。\n    4. 将n划分成若干奇正整数之和的划分数。\n    5. 将n划分成若干不同整数之和的划分数。\n\n2.问题分类：总的来说这些都是背包问题；\n\n第一个问：就是一个完全背包，物品有 1 --- N 种，第 i 种物品的重量为 i ，价值为 i\n\n        dp[0] = 1;\n        for (i = 1;i <= N;i++)\n            for (j = i;j <= N;j++)\n                dp[j] += dp[j-i];\n\n其中 dp[j] 是用前 i 个数能构成 j 的种类数，则结果就为 dp[N]\n\n看完这个问题了，那么 第3个问就知道了 ， 即用前 K 种物品所得结果，\n只需把第一层循环的 i <= N 改为 i <= K 即可；\n\n        dp[0] = 1;\n        for (i = 1;i <= K;i++)\n            for (j = i;j <= N;j++)\n                dp[j] += dp[j-i];   结果同样为 dp[N] ;\n\n那么第四个问呢，想想是奇数，那么 i = 2，4，6，…… 等等值就不能取了，\n因为这些物品不合要求，这很简单啊  i++ 改为 i += 2 不就行了；\n\n        dp[0] = 1;\n        for (i = 1;i <= N;i+=2)\n            for (j = i;j <= N;j++)\n                dp[j] += dp[j-i];   结果同样为 dp[N] ;\n\n再看看第五个问，若干个不同的就是一种物品最多只能用一次\n这是经典的 01背包 啊，与第一个问的不同就是第二层循环的顺序而已；\n\n        dp[0] = 1;\n        for (i = 1;i <= N;i++)\n            for (j = n;j >= i ;j--)\n                dp[j] += dp[j-i];\n\n最后我们来思考第二个问：\n\n   要求只要 K 个，这怎么办呢？？？想想特殊情况…… 如果 K = 1 呢，只能是 N 咯\n   若果 N = 0 呢， 结果只能是 0 中可能啊，那同样N < K 的话，不可能分啊 结果为 0\n   那么我们再考虑，分的结果中有没有 1 ，如果有那么就把剩下的 N - 1 分成 K - 1 份\n   如果没有，那么我们先拿出 K 份给每一堆一个1，再把剩下的 N - K 分成 K 份就行了\n\n        int work(int n,int k){\n            if (k == 1) return 1;\n            if (n == 0) return 0;\n            if (n < k) return 0;\n            return work(n-k,k) + work(n-1,k-1);\n        }\n```\n\n","source":"_posts/ACM_Template.md","raw":"---\ntitle: Template\ndate: 2018-03-31 20:17:43\ntags: \n    - 模板\ntop: true\ncategories: C/C++\ndescription: ICPC模板\n---\n\n<!-- # Template -->\n\n## number theory(数论)\n\n### 扩展欧几里得相关\n\n``` C++\n// ax + by = gcd(a, b)\nLL exgcd(LL a, LL b, LL &x, LL &y) {\n    if (!b) {\n        x = 1, y = 0;\n        return a;\n    }\n    else{\n        LL d = exgcd(b, a % b, y, x);\n        y -= x * (a / b);\n        return d;\n    }\n}\n\n// ax + by = c\nbool linear_equation(LL a, LL b, LL c, LL &x, LL &y){\n    LL d = exgcd (a, b, x, y);\n    if( c % d )\n        return false;\n    LL k = c / d;\n    x *= k; y *= k;\n    return true;\n    // 其他解为 x + b / d * t; y - a / d * t; t为任意整数\n}\n\n// ax ≡ b (mod n)\nbool modular_linear_equation(LL a, LL b, LL n, LL &x, LL &y){\n    LL x0, i;\n    LL d = exgcd(a, n, x, y);\n    if( b % d ) return false;\n    x0 = x * ( b / d ) % n;\n    for(i = 1; i <= d; i ++)\n        printf(\"%d\\n\", ( x0 + i * ( n / d ) ) % n );\n    return true;\n}\n\n// inverse\nint inverse(LL a, LL m, LL x, LL y){\n    LL d = exgcd(a, m, x, y);\n    return (x + m) % m;\n}\n```\n\n### 勾股数组\n\n取n $\\lt$ m且满足(n & 1) ^ (m & 1)为1（这里的^为异或，此表达式说明二者奇偶不同），同时gcd(n, m) = 1（即二者互素），则可得到满足 $a^2 + b^2 = c^2$ 的勾股数组：\n\n$ a = m^2 - n^2 $\n$ b = 2 * n * m $\n$ c = m^2 + n^2 $\n\n按照顺序枚举满足上述条件（奇偶不同的互素n $\\lt$ m二元组（n, m）），就可以得到所有的本源勾股数组，同时它们的整数倍也是勾股数组。这个方法可以取得所有的勾股数组。\n\n### 欧拉线性筛\n\n欧拉线性筛求判断素数和求最小质因子\n\n```C++\n// MinFactor[i] = x 表示为i最小质因子为 x\n// p[i] = x 表示为第 i+1 个素数为x\n// MinFactor 只求素数可换为 bool 类型判断 not_prime\nvoid euler(){\n    int t = 0;\n    pos = 0;\n    for(int i = 2; i < LIM; i ++){\n        if ( !MinFactor[i] ) p[pos ++] = MinFactor[i] =  i;\n        for(int j = 0; (t = i * p[j]) < LIM; j ++){\n            MinFactor[t] = p[j];\n            if( !(i % p[j]) ) break;\n        }\n    }\n}\n```\n\n### 欧拉函数\n\nphi(i) 意义： 小于 i 且与 i 互质的正整数的个数\n\n1. 打表时间复杂度 O(n)\n\n    ```C++\n    void init_phi(){\n        int t;\n        phi[1] = 1;\n        for(int i = 2; i < LIM; i ++){\n            if( !phi[i] ){\n                phi[i] = i - 1;\n                p[cnt ++] = i;\n            }\n            for(int j = 0; (t = i * p[j]) < LIM; j ++){\n                if( i % p[j] ) phi[t] = phi[i] * (p[j] - 1);\n                else {\n                    phi[t] = phi[i] * p[j];\n                    break;\n                }\n            }\n        }\n    }\n    ```\n\n2. 单个时间复杂度为 O($\\sqrt{n}$)\n\n    ```C++\n    LL phi(LL n) {  \n        LL ret = 1;\n        for (LL i = 2; i * i <= n; i++) {\n            if (!(n % i)) {\n                ret *= i - 1;\n                n /= i;\n                while (!(n % i))\n                    ret *= i, n /= i;\n            }\n        }\n        if (n ^ 1) ret *= (n - 1);\n        return ret;\n    }\n    ```\n\n## Numberical Methods(数值方法)\n\n### 高精度平方根\n\n牛顿逼近法\n\n```java\npublic static BigDecimal sqrt(BigDecimal b, BigDecimal eps) {\n    BigDecimal crt = new BigDecimal(b.toString());\n    BigDecimal two = BigDecimal.valueOf(2);\n    int scale = eps.scale() + 2;\n    Boolean isNegtive = false;\n    if (crt.compareTo(BigDecimal.valueOf(0)) < 0) {\n        b = b.negate();\n        crt = crt.negate();\n        isNegtive = true;\n    }\n    while (true) {\n        BigDecimal nxt = crt.subtract(crt.multiply(crt).subtract(b).divide(two.multiply(crt),\n            scale, BigDecimal.ROUND_DOWN));\n        // test\n        // System.out.println(nxt);\n        if (nxt.subtract(crt).abs().compareTo(eps) <= 0) {\n            crt = nxt;\n            break;\n        }\n        crt = nxt;\n    }\n    if (isNegtive) {\n        b = b.negate();\n        crt = crt.negate();\n    }\n    return crt;\n}\npublic static BigDecimal sqrt(BigDecimal b) {\n    BigDecimal eps = new BigDecimal(\"0.00000000000000000000000001\");\n    return sqrt(b, eps);\n}\npublic static BigDecimal sqrt(BigInteger b, BigDecimal eps) {\n    BigDecimal tmp = new BigDecimal(b.toString());\n    return sqrt(tmp, eps);\n}\npublic static BigDecimal sqrt(BigInteger b) {\n    BigDecimal tmp = new BigDecimal(b.toString());\n    return sqrt(tmp);\n}\n```\n\n### 快速求幂取模法\n\n```C++\n//计算(a*b)%c\nlong long mul(long long a,long long b,long long mod) {\n    long long res = 0;\n    while(b > 0){\n        if( (b&1) != 0)  // 二进制最低位是1 --> 加上 a的 2^i 倍, 快速幂是乘上a的2^i ）\n            res  = ( res + a) % mod;\n        a = (a << 1) % mod;    // a = a * 2    a随着b中二进制位数而扩大 每次 扩大两倍。\n        b >>= 1;               // b -> b/2     右移  去掉最后一位 因为当前最后一位我们用完了，\n    }\n    return res;\n}\n\n//幂取模函数\nlong long pow1(long long a,long long n,long long mod){\n    long long res = 1;\n    while(n > 0){\n        if(n&1)\n            res = (res * a)%mod;\n        a = (a * a)%mod;\n        n >>= 1;\n    }\n    return res;\n}\n\n\n// 计算 ret = (a^n)%mod\nlong long pow2(long long a,long long n,long long mod) {\n    long long res = 1;\n    while(n > 0) {\n        if(n & 1)\n            res = mul(res,a,mod);\n        a = mul(a,a,mod);\n        n >>= 1;\n    }\n    return res;\n}\n```\n\n### 矩阵乘法和快速幂\n\n```C++\nstruct matrix{\n    LL m[10][10];\n    matrix(){ memset(m,0,sizeof(m)); }\n};\nmatrix operator * (const matrix & a,const matrix & b){\n    matrix c;\n    for (int i=1; i<=9; i++)\n        for (int j=1; j<=9; j++){\n            c.m[i][j]=0;\n            for (int k=1; k<=9; k++)\n                c.m[i][j]=(c.m[i][j]+a.m[i][k]*b.m[k][j])%mod;//一般题目都要求要modulo一个数\n        }\n    return c;\n}\nmatrix quick(matrix base,int pow){\n    matrix a;\n    for (int i=1; i<=9; i++) a.m[i][i]=1;\n    while (pow)    {\n        if (pow&1) a=a*base;\n        base=base*base;\n        pow>>=1;\n    }\n    return a;\n}\n```\n\n## 组合数学\n\n### Contar康托展开\n\n由一个排列计算它是全排列中的第几个排列的方法。\n\n```C++\nint fac[15];\nvoid factor(){\n    fac[0] = fac[1] = 1;\n    for(int i = 2; i < 13; ++ i)\n        fac[i] = fac[i - 1] * i;\n}\n//逆康托\nstring uncantor(int x, int k) {\n    string res;\n    int i, j, l, t;\n    bool h[100];\n    for (i = 1; i <= k; i++) {\n        t = x / fac[k - i];\n        x -= t * fac[k - i];\n        for (j = 1, l = 0; l <= t; j++)\n            if ( !h[j] ) l++;\n        j --;\n        h[j] = true;\n        res += j + '0';\n    }\n    return res;\n}\n//康托\nint cantor(int* a, int len){\n    int ans = 0;\n    for(int i = 0; i < len; ++ i){\n        int t = 0;\n        for(int j = i + 1; j < len; ++j)\n            if(a[j] < a[i]) t ++;\n        ans += fac[len - i - 1] * t;\n    }\n    return ans + 1;\n}\n```\n\n### Catalan Number 卡特兰数\n\n$C_n = \\frac{4n - 2}{n + 1} C_{n-1}$\n\n相关问题\n\n1. Cn可以表示长度为2n的Dyck Words的种类数，Dyck Words由n个A字符与n个B字符组成，且满足在任意位置上，前缀中A的数量不小于B的数量，如果A用(代替，把B用)代替，就是一个典型的括号表达式，因此也可以用来表示合法的表达式个数。\n2. Cn可以表示有n个结点的不同构的二叉树的种类数。\n3. Cn可以表示有2n + 1个结点的不同构的满二叉树的种类数。\n4. Cn可以表示在n*n的格点中从左下角延格线走到右上角且始终不超过对角线的方案数。\n5. Cn可以表示通过连接顶点将n + 2个顶点的凸多边形划分成三角形的方案数。\n6. Cn表示有n个元素的出栈顺序的种类数。\n7. Cn可以用在买票找零钱问题上，对于2n的观众，收银台初始没有钱，无法找零，接下来有n个人拿a元买票，n个人拿2a元买票（需要找零钱数为a），能够保证每一个需要找零的观众来的时候都能够得到找零的合法方案数。\n8. Cn可以表示在二维直角坐标系中，从(0, 0)走到(2n, 0)点，每个相邻整数点的纵坐标差值的绝对值为1，且点始终不会落到x轴下方的方案数。\n\n## 高精度\n\n### 大数操作BigInteger\n\n```JAVA\nimport java.math.BigInteger;\nimport java.util.Scanner;\npublic class BI {\n    public static void main(String[] args) {\n        Scanner in = new Scanner (System.in);\n        BigInteger a, b;\n        a = in.nextBigInteger();\n        b = in.nextBigInteger();\n        System.out.println(a.add(b));\n        System.out.println(a.subtract(b));\n        System.out.println(a.multiply(b));\n        System.out.println(a.divide(b));\n        BigInteger mod = BigInteger.valueOf(3);\n        System.out.println(b.mod(mod));\n    }\n}\n```\n\n### 小数操作BigDecimal\n\n```JAVA\nimport java.math.BigDecimal;\nimport java.util.*;\npublic class BD {\n    public static void main(String[] args) {\n        BigDecimal a = new BigDecimal(10);\n        BigDecimal b = new BigDecimal(10.5);\n        BigDecimal c = new BigDecimal(123456789101222L);\n        BigDecimal d = new BigDecimal(\"-123456.31\");\n        System.out.println(a);\n        System.out.println(b);\n        System.out.println(c);\n        System.out.println(d);\n        System.out.println(a.add(b).add(c).add(d));\n        System.out.println(a.subtract(b).subtract(a));\n        System.out.println(a.multiply(b).multiply(c));\n        System.out.println(c.divide(a).divide(new BigDecimal(20)));\n        System.out.println(d.divide(a));\n        System.out.println(d.doubleValue());\n        System.out.println(a.compareTo(b));// -1\n        System.out.println(a.equals(b));// flase\n    }\n}\n```\n\n### 生成排列\n\nnext_permutation() 生成下一个排列\nprev_permutation() 生成上一个排列\n\n```C++\ndo{\n    cout << str << endl;\n// }while (next_permutation(str.begin(), str.end()));\n}while (prev_permutation(str.begin(), str.end()));\n```\n\n## Graph 图论\n\n### topu 拓扑排序\n\n```C++\nint in[maxn];//存入度数\nvector <int > edge[maxn]; //存边\n\nint topu_sort(){\n    queue<int>q;\n    for (int i = 1; i <= n; i++)\n        if (!in[i]) q.push(i); //取出入度为0的点放\n    while (!q.empty()){\n        int u = q.front(); q.pop();\n        for (int i = 0; i < edge[u].size(); i++){ //删边与统计操作\n            int v = edge[u][i];\n            in[v] --;  //删边\n            if ( ! in[v] ) q.push(v);\n        }\n        printf (\"%d \", u);\n    }\n    for (int i = 1; i <= n; i++) //若存在全部遍历完仍存在入度不为0的点说明存在环\n        if (in[i]) return -1;\n}\n```\n\n### Shortest Path 最短路\n\n#### Dijstra\n\n```C++\ntypedef pair<int, int> P;\nint pre[2501];   // 路径记录\nvoid Dijkstra( int s ){\n    priority_queue< P, vector<P>, greater<P> > q;\n    fill (d + 1, d + n + 1, INF);\n    d[s] = 0;\n    q.push(P(0, s));\n    while (q.size()){\n        P p = q.top(); q.pop();\n        int h = p.second;\n        if( d[h] < p.first ) continue;\n        for(int i = 0; i < v[h].size(); i ++){\n            edge e = v[h][i];\n            if( d[e.to] > d[h] + e.cost ){\n                d[e.to] = d[h] + e.cost;\n                q.push(P(d[e.to], e.to));\n                pre[e.to] = h;  // 记录前驱\n            }\n        }\n    }\n}\n```\n\n#### SPFA\n\n从起点到任意一个点最短距离经过的点最多只有 n 个，用 cnt[ i ] 表示从起点（假设就是 1）到 i 的最短距离包含点的个数，初始化 cnt[ 1 ] = 1，那么当我们能够用点 u 松弛点 v 时，当我们能够用点 u 松弛点 v 时，松弛时同时更新 cnt[ v ] = cnt[ u ] + 1，若发现此时 cnt[ v ] > n，那么就存在负环\n\n```C++\nbool SPFA( int s ){\n    queue<int > q;\n    fill(d + 1, d + n + 1, INF);\n    d[s] = 0;\n    q.push(s);\n    vis[s] = 1;\n    while ( q.size() ){\n        int t = q.front(); q.pop();\n        vis[t] = 1;\n        for(auto i = v[t].begin(); i != v[t].end(); i ++ ){\n            if( i -> cost + d[t] < d[i -> to] ){\n                d[i -> to] = i -> cost + d[t];\n                // cnt[ i -> to ] = 1 + cnt[t];\n                // if(cnt[i -> to] > n ) return false;\n                if( !vis[i -> to] )\n                    q.push(i -> to);\n            }\n        }\n    }\n    return true;\n}\n```\n\n### MST 最小生成树\n\n#### Kruskal\n\n```C++\nvoid init(){\n    for(int i = 1; i <= n; i ++)\n        p[i] = i;\n}\nint find( int x ){\n    return x == p[x] ? x : p[x] = find(p[x]);\n}\nll Kruskal(){\n    ll res = 0;\n    sort(E, E + m, cmp);\n    init();\n    int cnt = 0;\n        for (int i = 0; i < m; i ++ ){\n        edge e = E[i];\n        int x = find(e.from);\n        int y = find(e.to);\n        if( x != y ){\n            p[x] = p[y];\n            cnt ++;\n            res += (ll) e.cost;\n        }\n        if( cnt == n - 1 ) break;\n    }\n    return res;\n}\n```\n\n#### Prim\n\n```C++\nll Prim(){\n    fill (cost + 1, cost + n + 1, INF);\n    cost[1] = 0;\n    priority_queue <P, vector<P>, greater<P> > q;\n    q.push(P(0, 1));\n    ll res = 0;\n    while ( q.size() && cnt < n ){\n        P p = q.top(); q.pop();\n        int v = p.second;\n        if( !vis[v] ){\n            cnt ++;\n            vis[v] = 1;\n            res += p.first;\n            for(int i = 0; i < E[v].size(); i ++){\n                edge e = E[v][i];\n                if( cost[e.to] > e.cost ){\n                    cost[e.to] = e.cost;\n                    q.push(P(cost[e.to], e.to));\n                }\n            }\n        }\n    }\n    return res;\n}\n```\n\n#### 最大流\n\n```C++\ntypedef struct node{\n    int to, cap, rev;\n}edge;\n\nbool vis[101];\nvector <edge > G[101];\nint dfs(int v, int t, int f){\n    if(v == t) return f;\n    vis[v] = 1;\n    for(int i = 0; i < G[v].size(); i ++){\n        edge e = G[v][i];\n        if( !vis[e.to] && e.cap > 0 ){\n            int d = dfs(e.to, t, min(f, e.cap));\n            if( d > 0 ){\n                e.cap -= d;\n                G[e.to][e.rev].cap += d;\n                return d;\n            }\n        }\n    }\n}\n\nint max_flow(int s, int t){\n    int flow = 0;\n    while(true){\n        memset(vis, 0, sizeof(vis));\n        int f = dfs(s, t, INF);\n        if( !f ) return flow;\n        flow += f;\n    }\n}\n\nint main(){\n    int n, m;\n    cin >> n >> m;\n    int from, to, s = 0, t = n + m + 1;\n    for(int i = 1; i <= m; i ++{\n        G[s].push_back({i, 1, G[i].size()});\n        G[i].push_back({s, 0, G[s].size() - 1});\n    }\n    for(int j = m + 1; j <= n + m; j ++){\n        G[j].push_back({t, 1, G[t].size()});\n        G[t].push_back({j, 0, G[j].size() - 1});\n    }\n    while ( scanf(\"%d%d\", &from, &to), from != -1){\n        G[to].push_back({from, 1, G[from].size()});\n        G[from].push_back({to, 0, G[to].size() - 1});\n    }\n    cout << max_flow(s, t) << endl;\n    return 0;\n}\n```\n\n### 欧拉路和欧拉回路\n\n有向图\n\n```C++\ninline void dfs(int x, int lst) {\n    register int &i=lnk[x];\n    for(;i;i=e[i].nxt){\n        if(vis[i]) continue;\n        vis[i]=1,dfs(e[i].to,i);\n    }\n    if(lst) res[++res_]=lst;\n}\n```\n\n无向图\n\n```C++\ninline void dfs(int x,int lst) {\n    register int &i=lnk[x];\n    for(;i;i=e[i].nxt){\n        if(vis[i+1>>1]) continue;\n        vis[i+1>>1]=1,dfs(e[i].to,i&1?(i+1>>1):-(i+1>>1));\n    }\n    if(lst) res[++res_]=lst;\n}\n```\n\n## Dynamic Programming 动态规划\n\n### LIS 最长上升子序列\n\n```C++\nvoid solve(){\n    memset(dp, 0, sizeof(dp));\n    int res = 0;\n    for(int i = 0; i < n; i ++){\n        dp[i] = 1;\n        for(int j = 0; j < i; j ++)\n            if( a[j] < a[i] )\n                dp[i] = max (dp[i], dp[j] + 1);\n        res = max (res, dp[i]);\n    }\n    printf(\"%d\", res);\n}\n```\n\n### 数划分\n\n```C++\n1.问题描述：\n    给定一个正整数N和K\n\n    1. 将n划分成若干正整数之和的划分数。\n    2. 将n划分成k个正整数之和的划分数。\n    3. 将n划分成最大数不超过k的划分数。\n    4. 将n划分成若干奇正整数之和的划分数。\n    5. 将n划分成若干不同整数之和的划分数。\n\n2.问题分类：总的来说这些都是背包问题；\n\n第一个问：就是一个完全背包，物品有 1 --- N 种，第 i 种物品的重量为 i ，价值为 i\n\n        dp[0] = 1;\n        for (i = 1;i <= N;i++)\n            for (j = i;j <= N;j++)\n                dp[j] += dp[j-i];\n\n其中 dp[j] 是用前 i 个数能构成 j 的种类数，则结果就为 dp[N]\n\n看完这个问题了，那么 第3个问就知道了 ， 即用前 K 种物品所得结果，\n只需把第一层循环的 i <= N 改为 i <= K 即可；\n\n        dp[0] = 1;\n        for (i = 1;i <= K;i++)\n            for (j = i;j <= N;j++)\n                dp[j] += dp[j-i];   结果同样为 dp[N] ;\n\n那么第四个问呢，想想是奇数，那么 i = 2，4，6，…… 等等值就不能取了，\n因为这些物品不合要求，这很简单啊  i++ 改为 i += 2 不就行了；\n\n        dp[0] = 1;\n        for (i = 1;i <= N;i+=2)\n            for (j = i;j <= N;j++)\n                dp[j] += dp[j-i];   结果同样为 dp[N] ;\n\n再看看第五个问，若干个不同的就是一种物品最多只能用一次\n这是经典的 01背包 啊，与第一个问的不同就是第二层循环的顺序而已；\n\n        dp[0] = 1;\n        for (i = 1;i <= N;i++)\n            for (j = n;j >= i ;j--)\n                dp[j] += dp[j-i];\n\n最后我们来思考第二个问：\n\n   要求只要 K 个，这怎么办呢？？？想想特殊情况…… 如果 K = 1 呢，只能是 N 咯\n   若果 N = 0 呢， 结果只能是 0 中可能啊，那同样N < K 的话，不可能分啊 结果为 0\n   那么我们再考虑，分的结果中有没有 1 ，如果有那么就把剩下的 N - 1 分成 K - 1 份\n   如果没有，那么我们先拿出 K 份给每一堆一个1，再把剩下的 N - K 分成 K 份就行了\n\n        int work(int n,int k){\n            if (k == 1) return 1;\n            if (n == 0) return 0;\n            if (n < k) return 0;\n            return work(n-k,k) + work(n-1,k-1);\n        }\n```\n\n","slug":"ACM_Template","published":1,"updated":"2020-02-06T22:40:22.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n96v000524uwueevo25v","content":"<!-- # Template -->\n\n<h2 id=\"number-theory-数论\"><a href=\"#number-theory-数论\" class=\"headerlink\" title=\"number theory(数论)\"></a>number theory(数论)</h2><h3 id=\"扩展欧几里得相关\"><a href=\"#扩展欧几里得相关\" class=\"headerlink\" title=\"扩展欧几里得相关\"></a>扩展欧几里得相关</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ax + by = gcd(a, b)</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">exgcd</span><span class=\"params\">(LL a, LL b, LL &amp;x, LL &amp;y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!b) &#123;</span><br><span class=\"line\">        x = <span class=\"number\">1</span>, y = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        LL d = exgcd(b, a % b, y, x);</span><br><span class=\"line\">        y -= x * (a / b);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ax + by = c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">linear_equation</span><span class=\"params\">(LL a, LL b, LL c, LL &amp;x, LL &amp;y)</span></span>&#123;</span><br><span class=\"line\">    LL d = exgcd (a, b, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( c % d )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    LL k = c / d;</span><br><span class=\"line\">    x *= k; y *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 其他解为 x + b / d * t; y - a / d * t; t为任意整数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ax ≡ b (mod n)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">modular_linear_equation</span><span class=\"params\">(LL a, LL b, LL n, LL &amp;x, LL &amp;y)</span></span>&#123;</span><br><span class=\"line\">    LL x0, i;</span><br><span class=\"line\">    LL d = exgcd(a, n, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( b % d ) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    x0 = x * ( b / d ) % n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= d; i ++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ( x0 + i * ( n / d ) ) % n );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// inverse</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">inverse</span><span class=\"params\">(LL a, LL m, LL x, LL y)</span></span>&#123;</span><br><span class=\"line\">    LL d = exgcd(a, m, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x + m) % m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"勾股数组\"><a href=\"#勾股数组\" class=\"headerlink\" title=\"勾股数组\"></a>勾股数组</h3><p>取n $\\lt$ m且满足(n &amp; 1) ^ (m &amp; 1)为1（这里的^为异或，此表达式说明二者奇偶不同），同时gcd(n, m) = 1（即二者互素），则可得到满足 $a^2 + b^2 = c^2$ 的勾股数组：</p>\n<p>$ a = m^2 - n^2 $<br>$ b = 2 * n * m $<br>$ c = m^2 + n^2 $</p>\n<p>按照顺序枚举满足上述条件（奇偶不同的互素n $\\lt$ m二元组（n, m）），就可以得到所有的本源勾股数组，同时它们的整数倍也是勾股数组。这个方法可以取得所有的勾股数组。</p>\n<h3 id=\"欧拉线性筛\"><a href=\"#欧拉线性筛\" class=\"headerlink\" title=\"欧拉线性筛\"></a>欧拉线性筛</h3><p>欧拉线性筛求判断素数和求最小质因子</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MinFactor[i] = x 表示为i最小质因子为 x</span></span><br><span class=\"line\"><span class=\"comment\">// p[i] = x 表示为第 i+1 个素数为x</span></span><br><span class=\"line\"><span class=\"comment\">// MinFactor 只求素数可换为 bool 类型判断 not_prime</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">euler</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; LIM; i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !MinFactor[i] ) p[pos ++] = MinFactor[i] =  i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; (t = i * p[j]) &lt; LIM; j ++)&#123;</span><br><span class=\"line\">            MinFactor[t] = p[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( !(i % p[j]) ) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"欧拉函数\"><a href=\"#欧拉函数\" class=\"headerlink\" title=\"欧拉函数\"></a>欧拉函数</h3><p>phi(i) 意义： 小于 i 且与 i 互质的正整数的个数</p>\n<ol>\n<li><p>打表时间复杂度 O(n)</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init_phi</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;</span><br><span class=\"line\">    phi[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; LIM; i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( !phi[i] )&#123;</span><br><span class=\"line\">            phi[i] = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            p[cnt ++] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; (t = i * p[j]) &lt; LIM; j ++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( i % p[j] ) phi[t] = phi[i] * (p[j] - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                phi[t] = phi[i] * p[j];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单个时间复杂度为 O($\\sqrt{n}$)</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LL <span class=\"title\">phi</span><span class=\"params\">(LL n)</span> </span>&#123;  </span><br><span class=\"line\">    LL ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = <span class=\"number\">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(n % i)) &#123;</span><br><span class=\"line\">            ret *= i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            n /= i;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!(n % i))</span><br><span class=\"line\">                ret *= i, n /= i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n ^ <span class=\"number\">1</span>) ret *= (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"Numberical-Methods-数值方法\"><a href=\"#Numberical-Methods-数值方法\" class=\"headerlink\" title=\"Numberical Methods(数值方法)\"></a>Numberical Methods(数值方法)</h2><h3 id=\"高精度平方根\"><a href=\"#高精度平方根\" class=\"headerlink\" title=\"高精度平方根\"></a>高精度平方根</h3><p>牛顿逼近法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title\">sqrt</span><span class=\"params\">(BigDecimal b, BigDecimal eps)</span> </span>&#123;</span><br><span class=\"line\">    BigDecimal crt = <span class=\"keyword\">new</span> BigDecimal(b.toString());</span><br><span class=\"line\">    BigDecimal two = BigDecimal.valueOf(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> scale = eps.scale() + <span class=\"number\">2</span>;</span><br><span class=\"line\">    Boolean isNegtive = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (crt.compareTo(BigDecimal.valueOf(<span class=\"number\">0</span>)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        b = b.negate();</span><br><span class=\"line\">        crt = crt.negate();</span><br><span class=\"line\">        isNegtive = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        BigDecimal nxt = crt.subtract(crt.multiply(crt).subtract(b).divide(two.multiply(crt),</span><br><span class=\"line\">            scale, BigDecimal.ROUND_DOWN));</span><br><span class=\"line\">        <span class=\"comment\">// test</span></span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(nxt);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nxt.subtract(crt).abs().compareTo(eps) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            crt = nxt;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        crt = nxt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNegtive) &#123;</span><br><span class=\"line\">        b = b.negate();</span><br><span class=\"line\">        crt = crt.negate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> crt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title\">sqrt</span><span class=\"params\">(BigDecimal b)</span> </span>&#123;</span><br><span class=\"line\">    BigDecimal eps = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"0.00000000000000000000000001\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sqrt(b, eps);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title\">sqrt</span><span class=\"params\">(BigInteger b, BigDecimal eps)</span> </span>&#123;</span><br><span class=\"line\">    BigDecimal tmp = <span class=\"keyword\">new</span> BigDecimal(b.toString());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sqrt(tmp, eps);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title\">sqrt</span><span class=\"params\">(BigInteger b)</span> </span>&#123;</span><br><span class=\"line\">    BigDecimal tmp = <span class=\"keyword\">new</span> BigDecimal(b.toString());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sqrt(tmp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快速求幂取模法\"><a href=\"#快速求幂取模法\" class=\"headerlink\" title=\"快速求幂取模法\"></a>快速求幂取模法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//计算(a*b)%c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">mul</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mod)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( (b&amp;<span class=\"number\">1</span>) != <span class=\"number\">0</span>)  <span class=\"comment\">// 二进制最低位是1 --&gt; 加上 a的 2^i 倍, 快速幂是乘上a的2^i ）</span></span><br><span class=\"line\">            res  = ( res + a) % mod;</span><br><span class=\"line\">        a = (a &lt;&lt; <span class=\"number\">1</span>) % mod;    <span class=\"comment\">// a = a * 2    a随着b中二进制位数而扩大 每次 扩大两倍。</span></span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;               <span class=\"comment\">// b -&gt; b/2     右移  去掉最后一位 因为当前最后一位我们用完了，</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//幂取模函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">pow1</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mod)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            res = (res * a)%mod;</span><br><span class=\"line\">        a = (a * a)%mod;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算 ret = (a^n)%mod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">pow2</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mod)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = mul(res,a,mod);</span><br><span class=\"line\">        a = mul(a,a,mod);</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"矩阵乘法和快速幂\"><a href=\"#矩阵乘法和快速幂\" class=\"headerlink\" title=\"矩阵乘法和快速幂\"></a>矩阵乘法和快速幂</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">matrix</span>&#123;</span></span><br><span class=\"line\">    LL m[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</span><br><span class=\"line\">    matrix()&#123; <span class=\"built_in\">memset</span>(m,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(m)); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">matrix <span class=\"keyword\">operator</span> * (<span class=\"keyword\">const</span> matrix &amp; a,<span class=\"keyword\">const</span> matrix &amp; b)&#123;</span><br><span class=\"line\">    matrix c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">9</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=<span class=\"number\">9</span>; j++)&#123;</span><br><span class=\"line\">            c.m[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>; k&lt;=<span class=\"number\">9</span>; k++)</span><br><span class=\"line\">                c.m[i][j]=(c.m[i][j]+a.m[i][k]*b.m[k][j])%mod;<span class=\"comment\">//一般题目都要求要modulo一个数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">matrix <span class=\"title\">quick</span><span class=\"params\">(matrix base,<span class=\"keyword\">int</span> <span class=\"built_in\">pow</span>)</span></span>&#123;</span><br><span class=\"line\">    matrix a;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">9</span>; i++) a.m[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">pow</span>)    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">pow</span>&amp;<span class=\"number\">1</span>) a=a*base;</span><br><span class=\"line\">        base=base*base;</span><br><span class=\"line\">        <span class=\"built_in\">pow</span>&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组合数学\"><a href=\"#组合数学\" class=\"headerlink\" title=\"组合数学\"></a>组合数学</h2><h3 id=\"Contar康托展开\"><a href=\"#Contar康托展开\" class=\"headerlink\" title=\"Contar康托展开\"></a>Contar康托展开</h3><p>由一个排列计算它是全排列中的第几个排列的方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> fac[<span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">factor</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fac[<span class=\"number\">0</span>] = fac[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; <span class=\"number\">13</span>; ++ i)</span><br><span class=\"line\">        fac[i] = fac[i - <span class=\"number\">1</span>] * i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//逆康托</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">uncantor</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> res;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, l, t;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> h[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= k; i++) &#123;</span><br><span class=\"line\">        t = x / fac[k - i];</span><br><span class=\"line\">        x -= t * fac[k - i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>, l = <span class=\"number\">0</span>; l &lt;= t; j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( !h[j] ) l++;</span><br><span class=\"line\">        j --;</span><br><span class=\"line\">        h[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        res += j + <span class=\"string\">'0'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//康托</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cantor</span><span class=\"params\">(<span class=\"keyword\">int</span>* a, <span class=\"keyword\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++ i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; len; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[j] &lt; a[i]) t ++;</span><br><span class=\"line\">        ans += fac[len - i - <span class=\"number\">1</span>] * t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Catalan-Number-卡特兰数\"><a href=\"#Catalan-Number-卡特兰数\" class=\"headerlink\" title=\"Catalan Number 卡特兰数\"></a>Catalan Number 卡特兰数</h3><p>$C_n = \\frac{4n - 2}{n + 1} C_{n-1}$</p>\n<p>相关问题</p>\n<ol>\n<li>Cn可以表示长度为2n的Dyck Words的种类数，Dyck Words由n个A字符与n个B字符组成，且满足在任意位置上，前缀中A的数量不小于B的数量，如果A用(代替，把B用)代替，就是一个典型的括号表达式，因此也可以用来表示合法的表达式个数。</li>\n<li>Cn可以表示有n个结点的不同构的二叉树的种类数。</li>\n<li>Cn可以表示有2n + 1个结点的不同构的满二叉树的种类数。</li>\n<li>Cn可以表示在n*n的格点中从左下角延格线走到右上角且始终不超过对角线的方案数。</li>\n<li>Cn可以表示通过连接顶点将n + 2个顶点的凸多边形划分成三角形的方案数。</li>\n<li>Cn表示有n个元素的出栈顺序的种类数。</li>\n<li>Cn可以用在买票找零钱问题上，对于2n的观众，收银台初始没有钱，无法找零，接下来有n个人拿a元买票，n个人拿2a元买票（需要找零钱数为a），能够保证每一个需要找零的观众来的时候都能够得到找零的合法方案数。</li>\n<li>Cn可以表示在二维直角坐标系中，从(0, 0)走到(2n, 0)点，每个相邻整数点的纵坐标差值的绝对值为1，且点始终不会落到x轴下方的方案数。</li>\n</ol>\n<h2 id=\"高精度\"><a href=\"#高精度\" class=\"headerlink\" title=\"高精度\"></a>高精度</h2><h3 id=\"大数操作BigInteger\"><a href=\"#大数操作BigInteger\" class=\"headerlink\" title=\"大数操作BigInteger\"></a>大数操作BigInteger</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BI</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Scanner in = <span class=\"keyword\">new</span> Scanner (System.in);</span><br><span class=\"line\">        BigInteger a, b;</span><br><span class=\"line\">        a = in.nextBigInteger();</span><br><span class=\"line\">        b = in.nextBigInteger();</span><br><span class=\"line\">        System.out.println(a.add(b));</span><br><span class=\"line\">        System.out.println(a.subtract(b));</span><br><span class=\"line\">        System.out.println(a.multiply(b));</span><br><span class=\"line\">        System.out.println(a.divide(b));</span><br><span class=\"line\">        BigInteger mod = BigInteger.valueOf(<span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(b.mod(mod));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小数操作BigDecimal\"><a href=\"#小数操作BigDecimal\" class=\"headerlink\" title=\"小数操作BigDecimal\"></a>小数操作BigDecimal</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BD</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        BigDecimal a = <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">10</span>);</span><br><span class=\"line\">        BigDecimal b = <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">10.5</span>);</span><br><span class=\"line\">        BigDecimal c = <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">123456789101222L</span>);</span><br><span class=\"line\">        BigDecimal d = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"-123456.31\"</span>);</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">        System.out.println(c);</span><br><span class=\"line\">        System.out.println(d);</span><br><span class=\"line\">        System.out.println(a.add(b).add(c).add(d));</span><br><span class=\"line\">        System.out.println(a.subtract(b).subtract(a));</span><br><span class=\"line\">        System.out.println(a.multiply(b).multiply(c));</span><br><span class=\"line\">        System.out.println(c.divide(a).divide(<span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">20</span>)));</span><br><span class=\"line\">        System.out.println(d.divide(a));</span><br><span class=\"line\">        System.out.println(d.doubleValue());</span><br><span class=\"line\">        System.out.println(a.compareTo(b));<span class=\"comment\">// -1</span></span><br><span class=\"line\">        System.out.println(a.equals(b));<span class=\"comment\">// flase</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成排列\"><a href=\"#生成排列\" class=\"headerlink\" title=\"生成排列\"></a>生成排列</h3><p>next_permutation() 生成下一个排列<br>prev_permutation() 生成上一个排列</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"comment\">// &#125;while (next_permutation(str.begin(), str.end()));</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span> (prev_permutation(str.begin(), str.end()));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Graph-图论\"><a href=\"#Graph-图论\" class=\"headerlink\" title=\"Graph 图论\"></a>Graph 图论</h2><h3 id=\"topu-拓扑排序\"><a href=\"#topu-拓扑排序\" class=\"headerlink\" title=\"topu 拓扑排序\"></a>topu 拓扑排序</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> in[maxn];<span class=\"comment\">//存入度数</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span> &lt;<span class=\"keyword\">int</span> &gt; edge[maxn]; <span class=\"comment\">//存边</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">topu_sort</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!in[i]) q.push(i); <span class=\"comment\">//取出入度为0的点放</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.front(); q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; edge[u].size(); i++)&#123; <span class=\"comment\">//删边与统计操作</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[u][i];</span><br><span class=\"line\">            in[v] --;  <span class=\"comment\">//删边</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( ! in[v] ) q.push(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span> (<span class=\"string\">\"%d \"</span>, u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"comment\">//若存在全部遍历完仍存在入度不为0的点说明存在环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in[i]) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Shortest-Path-最短路\"><a href=\"#Shortest-Path-最短路\" class=\"headerlink\" title=\"Shortest Path 最短路\"></a>Shortest Path 最短路</h3><h4 id=\"Dijstra\"><a href=\"#Dijstra\" class=\"headerlink\" title=\"Dijstra\"></a>Dijstra</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"keyword\">int</span> pre[<span class=\"number\">2501</span>];   <span class=\"comment\">// 路径记录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">( <span class=\"keyword\">int</span> s )</span></span>&#123;</span><br><span class=\"line\">    priority_queue&lt; P, <span class=\"built_in\">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; q;</span><br><span class=\"line\">    fill (d + <span class=\"number\">1</span>, d + n + <span class=\"number\">1</span>, INF);</span><br><span class=\"line\">    d[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q.push(P(<span class=\"number\">0</span>, s));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q.size())&#123;</span><br><span class=\"line\">        P p = q.top(); q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h = p.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( d[h] &lt; p.first ) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v[h].size(); i ++)&#123;</span><br><span class=\"line\">            edge e = v[h][i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( d[e.to] &gt; d[h] + e.cost )&#123;</span><br><span class=\"line\">                d[e.to] = d[h] + e.cost;</span><br><span class=\"line\">                q.push(P(d[e.to], e.to));</span><br><span class=\"line\">                pre[e.to] = h;  <span class=\"comment\">// 记录前驱</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SPFA\"><a href=\"#SPFA\" class=\"headerlink\" title=\"SPFA\"></a>SPFA</h4><p>从起点到任意一个点最短距离经过的点最多只有 n 个，用 cnt[ i ] 表示从起点（假设就是 1）到 i 的最短距离包含点的个数，初始化 cnt[ 1 ] = 1，那么当我们能够用点 u 松弛点 v 时，当我们能够用点 u 松弛点 v 时，松弛时同时更新 cnt[ v ] = cnt[ u ] + 1，若发现此时 cnt[ v ] &gt; n，那么就存在负环</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">( <span class=\"keyword\">int</span> s )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span> &gt; q;</span><br><span class=\"line\">    fill(d + <span class=\"number\">1</span>, d + n + <span class=\"number\">1</span>, INF);</span><br><span class=\"line\">    d[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    vis[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( q.size() )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = q.front(); q.pop();</span><br><span class=\"line\">        vis[t] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i = v[t].begin(); i != v[t].end(); i ++ )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( i -&gt; cost + d[t] &lt; d[i -&gt; to] )&#123;</span><br><span class=\"line\">                d[i -&gt; to] = i -&gt; cost + d[t];</span><br><span class=\"line\">                <span class=\"comment\">// cnt[ i -&gt; to ] = 1 + cnt[t];</span></span><br><span class=\"line\">                <span class=\"comment\">// if(cnt[i -&gt; to] &gt; n ) return false;</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>( !vis[i -&gt; to] )</span><br><span class=\"line\">                    q.push(i -&gt; to);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MST-最小生成树\"><a href=\"#MST-最小生成树\" class=\"headerlink\" title=\"MST 最小生成树\"></a>MST 最小生成树</h3><h4 id=\"Kruskal\"><a href=\"#Kruskal\" class=\"headerlink\" title=\"Kruskal\"></a>Kruskal</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">        p[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">( <span class=\"keyword\">int</span> x )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x == p[x] ? x : p[x] = find(p[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Kruskal</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ll res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sort(E, E + m, cmp);</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i ++ )&#123;</span><br><span class=\"line\">        edge e = E[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = find(e.from);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = find(e.to);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( x != y )&#123;</span><br><span class=\"line\">            p[x] = p[y];</span><br><span class=\"line\">            cnt ++;</span><br><span class=\"line\">            res += (ll) e.cost;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( cnt == n - <span class=\"number\">1</span> ) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Prim\"><a href=\"#Prim\" class=\"headerlink\" title=\"Prim\"></a>Prim</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Prim</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fill (cost + <span class=\"number\">1</span>, cost + n + <span class=\"number\">1</span>, INF);</span><br><span class=\"line\">    cost[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    priority_queue &lt;P, <span class=\"built_in\">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; q;</span><br><span class=\"line\">    q.push(P(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">    ll res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( q.size() &amp;&amp; cnt &lt; n )&#123;</span><br><span class=\"line\">        P p = q.top(); q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = p.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( !vis[v] )&#123;</span><br><span class=\"line\">            cnt ++;</span><br><span class=\"line\">            vis[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            res += p.first;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; E[v].size(); i ++)&#123;</span><br><span class=\"line\">                edge e = E[v][i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>( cost[e.to] &gt; e.cost )&#123;</span><br><span class=\"line\">                    cost[e.to] = e.cost;</span><br><span class=\"line\">                    q.push(P(cost[e.to], e.to));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"最大流\"><a href=\"#最大流\" class=\"headerlink\" title=\"最大流\"></a>最大流</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to, cap, rev;</span><br><span class=\"line\">&#125;edge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">101</span>];</span><br><span class=\"line\"><span class=\"built_in\">vector</span> &lt;edge &gt; G[<span class=\"number\">101</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v == t) <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">    vis[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[v].size(); i ++)&#123;</span><br><span class=\"line\">        edge e = G[v][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( !vis[e.to] &amp;&amp; e.cap &gt; <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d = dfs(e.to, t, min(f, e.cap));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( d &gt; <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">                e.cap -= d;</span><br><span class=\"line\">                G[e.to][e.rev].cap += d;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max_flow</span><span class=\"params\">(<span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> t)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> f = dfs(s, t, INF);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( !f ) <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">        flow += f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> from, to, s = <span class=\"number\">0</span>, t = n + m + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i ++&#123;</span><br><span class=\"line\">        G[s].push_back(&#123;i, <span class=\"number\">1</span>, G[i].size()&#125;);</span><br><span class=\"line\">        G[i].push_back(&#123;s, <span class=\"number\">0</span>, G[s].size() - <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = m + <span class=\"number\">1</span>; j &lt;= n + m; j ++)&#123;</span><br><span class=\"line\">        G[j].push_back(&#123;t, <span class=\"number\">1</span>, G[t].size()&#125;);</span><br><span class=\"line\">        G[t].push_back(&#123;j, <span class=\"number\">0</span>, G[j].size() - <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;from, &amp;to), from != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        G[to].push_back(&#123;from, <span class=\"number\">1</span>, G[from].size()&#125;);</span><br><span class=\"line\">        G[from].push_back(&#123;to, <span class=\"number\">0</span>, G[to].size() - <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; max_flow(s, t) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"欧拉路和欧拉回路\"><a href=\"#欧拉路和欧拉回路\" class=\"headerlink\" title=\"欧拉路和欧拉回路\"></a>欧拉路和欧拉回路</h3><p>有向图</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> lst)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> &amp;i=lnk[x];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;i;i=e[i].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[i]=<span class=\"number\">1</span>,dfs(e[i].to,i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lst) res[++res_]=lst;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>无向图</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> lst)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> &amp;i=lnk[x];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;i;i=e[i].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[i+<span class=\"number\">1</span>&gt;&gt;<span class=\"number\">1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[i+<span class=\"number\">1</span>&gt;&gt;<span class=\"number\">1</span>]=<span class=\"number\">1</span>,dfs(e[i].to,i&amp;<span class=\"number\">1</span>?(i+<span class=\"number\">1</span>&gt;&gt;<span class=\"number\">1</span>):-(i+<span class=\"number\">1</span>&gt;&gt;<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lst) res[++res_]=lst;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dynamic-Programming-动态规划\"><a href=\"#Dynamic-Programming-动态规划\" class=\"headerlink\" title=\"Dynamic Programming 动态规划\"></a>Dynamic Programming 动态规划</h2><h3 id=\"LIS-最长上升子序列\"><a href=\"#LIS-最长上升子序列\" class=\"headerlink\" title=\"LIS 最长上升子序列\"></a>LIS 最长上升子序列</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(dp));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)&#123;</span><br><span class=\"line\">        dp[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j ++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( a[j] &lt; a[i] )</span><br><span class=\"line\">                dp[i] = max (dp[i], dp[j] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        res = max (res, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数划分\"><a href=\"#数划分\" class=\"headerlink\" title=\"数划分\"></a>数划分</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>问题描述：</span><br><span class=\"line\">    给定一个正整数N和K</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">1.</span> 将n划分成若干正整数之和的划分数。</span><br><span class=\"line\">    <span class=\"number\">2.</span> 将n划分成k个正整数之和的划分数。</span><br><span class=\"line\">    <span class=\"number\">3.</span> 将n划分成最大数不超过k的划分数。</span><br><span class=\"line\">    <span class=\"number\">4.</span> 将n划分成若干奇正整数之和的划分数。</span><br><span class=\"line\">    <span class=\"number\">5.</span> 将n划分成若干不同整数之和的划分数。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>问题分类：总的来说这些都是背包问题；</span><br><span class=\"line\"></span><br><span class=\"line\">第一个问：就是一个完全背包，物品有 <span class=\"number\">1</span> --- N 种，第 i 种物品的重量为 i ，价值为 i</span><br><span class=\"line\"></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>;i &lt;= N;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = i;j &lt;= N;j++)</span><br><span class=\"line\">                dp[j] += dp[j-i];</span><br><span class=\"line\"></span><br><span class=\"line\">其中 dp[j] 是用前 i 个数能构成 j 的种类数，则结果就为 dp[N]</span><br><span class=\"line\"></span><br><span class=\"line\">看完这个问题了，那么 第<span class=\"number\">3</span>个问就知道了 ， 即用前 K 种物品所得结果，</span><br><span class=\"line\">只需把第一层循环的 i &lt;= N 改为 i &lt;= K 即可；</span><br><span class=\"line\"></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>;i &lt;= K;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = i;j &lt;= N;j++)</span><br><span class=\"line\">                dp[j] += dp[j-i];   结果同样为 dp[N] ;</span><br><span class=\"line\"></span><br><span class=\"line\">那么第四个问呢，想想是奇数，那么 i = <span class=\"number\">2</span>，<span class=\"number\">4</span>，<span class=\"number\">6</span>，…… 等等值就不能取了，</span><br><span class=\"line\">因为这些物品不合要求，这很简单啊  i++ 改为 i += <span class=\"number\">2</span> 不就行了；</span><br><span class=\"line\"></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>;i &lt;= N;i+=<span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = i;j &lt;= N;j++)</span><br><span class=\"line\">                dp[j] += dp[j-i];   结果同样为 dp[N] ;</span><br><span class=\"line\"></span><br><span class=\"line\">再看看第五个问，若干个不同的就是一种物品最多只能用一次</span><br><span class=\"line\">这是经典的 <span class=\"number\">01</span>背包 啊，与第一个问的不同就是第二层循环的顺序而已；</span><br><span class=\"line\"></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>;i &lt;= N;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = n;j &gt;= i ;j--)</span><br><span class=\"line\">                dp[j] += dp[j-i];</span><br><span class=\"line\"></span><br><span class=\"line\">最后我们来思考第二个问：</span><br><span class=\"line\"></span><br><span class=\"line\">   要求只要 K 个，这怎么办呢？？？想想特殊情况…… 如果 K = <span class=\"number\">1</span> 呢，只能是 N 咯</span><br><span class=\"line\">   若果 N = <span class=\"number\">0</span> 呢， 结果只能是 <span class=\"number\">0</span> 中可能啊，那同样N &lt; K 的话，不可能分啊 结果为 <span class=\"number\">0</span></span><br><span class=\"line\">   那么我们再考虑，分的结果中有没有 <span class=\"number\">1</span> ，如果有那么就把剩下的 N - <span class=\"number\">1</span> 分成 K - <span class=\"number\">1</span> 份</span><br><span class=\"line\">   如果没有，那么我们先拿出 K 份给每一堆一个<span class=\"number\">1</span>，再把剩下的 N - K 分成 K 份就行了</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> work(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> k)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &lt; k) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> work(n-k,k) + work(n<span class=\"number\">-1</span>,k<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<!-- # Template -->\n\n<h2 id=\"number-theory-数论\"><a href=\"#number-theory-数论\" class=\"headerlink\" title=\"number theory(数论)\"></a>number theory(数论)</h2><h3 id=\"扩展欧几里得相关\"><a href=\"#扩展欧几里得相关\" class=\"headerlink\" title=\"扩展欧几里得相关\"></a>扩展欧几里得相关</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ax + by = gcd(a, b)</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">exgcd</span><span class=\"params\">(LL a, LL b, LL &amp;x, LL &amp;y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!b) &#123;</span><br><span class=\"line\">        x = <span class=\"number\">1</span>, y = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        LL d = exgcd(b, a % b, y, x);</span><br><span class=\"line\">        y -= x * (a / b);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ax + by = c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">linear_equation</span><span class=\"params\">(LL a, LL b, LL c, LL &amp;x, LL &amp;y)</span></span>&#123;</span><br><span class=\"line\">    LL d = exgcd (a, b, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( c % d )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    LL k = c / d;</span><br><span class=\"line\">    x *= k; y *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 其他解为 x + b / d * t; y - a / d * t; t为任意整数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ax ≡ b (mod n)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">modular_linear_equation</span><span class=\"params\">(LL a, LL b, LL n, LL &amp;x, LL &amp;y)</span></span>&#123;</span><br><span class=\"line\">    LL x0, i;</span><br><span class=\"line\">    LL d = exgcd(a, n, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( b % d ) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    x0 = x * ( b / d ) % n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= d; i ++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ( x0 + i * ( n / d ) ) % n );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// inverse</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">inverse</span><span class=\"params\">(LL a, LL m, LL x, LL y)</span></span>&#123;</span><br><span class=\"line\">    LL d = exgcd(a, m, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x + m) % m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"勾股数组\"><a href=\"#勾股数组\" class=\"headerlink\" title=\"勾股数组\"></a>勾股数组</h3><p>取n $\\lt$ m且满足(n &amp; 1) ^ (m &amp; 1)为1（这里的^为异或，此表达式说明二者奇偶不同），同时gcd(n, m) = 1（即二者互素），则可得到满足 $a^2 + b^2 = c^2$ 的勾股数组：</p>\n<p>$ a = m^2 - n^2 $<br>$ b = 2 * n * m $<br>$ c = m^2 + n^2 $</p>\n<p>按照顺序枚举满足上述条件（奇偶不同的互素n $\\lt$ m二元组（n, m）），就可以得到所有的本源勾股数组，同时它们的整数倍也是勾股数组。这个方法可以取得所有的勾股数组。</p>\n<h3 id=\"欧拉线性筛\"><a href=\"#欧拉线性筛\" class=\"headerlink\" title=\"欧拉线性筛\"></a>欧拉线性筛</h3><p>欧拉线性筛求判断素数和求最小质因子</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MinFactor[i] = x 表示为i最小质因子为 x</span></span><br><span class=\"line\"><span class=\"comment\">// p[i] = x 表示为第 i+1 个素数为x</span></span><br><span class=\"line\"><span class=\"comment\">// MinFactor 只求素数可换为 bool 类型判断 not_prime</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">euler</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; LIM; i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !MinFactor[i] ) p[pos ++] = MinFactor[i] =  i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; (t = i * p[j]) &lt; LIM; j ++)&#123;</span><br><span class=\"line\">            MinFactor[t] = p[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( !(i % p[j]) ) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"欧拉函数\"><a href=\"#欧拉函数\" class=\"headerlink\" title=\"欧拉函数\"></a>欧拉函数</h3><p>phi(i) 意义： 小于 i 且与 i 互质的正整数的个数</p>\n<ol>\n<li><p>打表时间复杂度 O(n)</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init_phi</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;</span><br><span class=\"line\">    phi[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; LIM; i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( !phi[i] )&#123;</span><br><span class=\"line\">            phi[i] = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            p[cnt ++] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; (t = i * p[j]) &lt; LIM; j ++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( i % p[j] ) phi[t] = phi[i] * (p[j] - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                phi[t] = phi[i] * p[j];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单个时间复杂度为 O($\\sqrt{n}$)</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LL <span class=\"title\">phi</span><span class=\"params\">(LL n)</span> </span>&#123;  </span><br><span class=\"line\">    LL ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = <span class=\"number\">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(n % i)) &#123;</span><br><span class=\"line\">            ret *= i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            n /= i;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!(n % i))</span><br><span class=\"line\">                ret *= i, n /= i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n ^ <span class=\"number\">1</span>) ret *= (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"Numberical-Methods-数值方法\"><a href=\"#Numberical-Methods-数值方法\" class=\"headerlink\" title=\"Numberical Methods(数值方法)\"></a>Numberical Methods(数值方法)</h2><h3 id=\"高精度平方根\"><a href=\"#高精度平方根\" class=\"headerlink\" title=\"高精度平方根\"></a>高精度平方根</h3><p>牛顿逼近法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title\">sqrt</span><span class=\"params\">(BigDecimal b, BigDecimal eps)</span> </span>&#123;</span><br><span class=\"line\">    BigDecimal crt = <span class=\"keyword\">new</span> BigDecimal(b.toString());</span><br><span class=\"line\">    BigDecimal two = BigDecimal.valueOf(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> scale = eps.scale() + <span class=\"number\">2</span>;</span><br><span class=\"line\">    Boolean isNegtive = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (crt.compareTo(BigDecimal.valueOf(<span class=\"number\">0</span>)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        b = b.negate();</span><br><span class=\"line\">        crt = crt.negate();</span><br><span class=\"line\">        isNegtive = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        BigDecimal nxt = crt.subtract(crt.multiply(crt).subtract(b).divide(two.multiply(crt),</span><br><span class=\"line\">            scale, BigDecimal.ROUND_DOWN));</span><br><span class=\"line\">        <span class=\"comment\">// test</span></span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(nxt);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nxt.subtract(crt).abs().compareTo(eps) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            crt = nxt;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        crt = nxt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNegtive) &#123;</span><br><span class=\"line\">        b = b.negate();</span><br><span class=\"line\">        crt = crt.negate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> crt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title\">sqrt</span><span class=\"params\">(BigDecimal b)</span> </span>&#123;</span><br><span class=\"line\">    BigDecimal eps = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"0.00000000000000000000000001\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sqrt(b, eps);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title\">sqrt</span><span class=\"params\">(BigInteger b, BigDecimal eps)</span> </span>&#123;</span><br><span class=\"line\">    BigDecimal tmp = <span class=\"keyword\">new</span> BigDecimal(b.toString());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sqrt(tmp, eps);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BigDecimal <span class=\"title\">sqrt</span><span class=\"params\">(BigInteger b)</span> </span>&#123;</span><br><span class=\"line\">    BigDecimal tmp = <span class=\"keyword\">new</span> BigDecimal(b.toString());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sqrt(tmp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快速求幂取模法\"><a href=\"#快速求幂取模法\" class=\"headerlink\" title=\"快速求幂取模法\"></a>快速求幂取模法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//计算(a*b)%c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">mul</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mod)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( (b&amp;<span class=\"number\">1</span>) != <span class=\"number\">0</span>)  <span class=\"comment\">// 二进制最低位是1 --&gt; 加上 a的 2^i 倍, 快速幂是乘上a的2^i ）</span></span><br><span class=\"line\">            res  = ( res + a) % mod;</span><br><span class=\"line\">        a = (a &lt;&lt; <span class=\"number\">1</span>) % mod;    <span class=\"comment\">// a = a * 2    a随着b中二进制位数而扩大 每次 扩大两倍。</span></span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;               <span class=\"comment\">// b -&gt; b/2     右移  去掉最后一位 因为当前最后一位我们用完了，</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//幂取模函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">pow1</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mod)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            res = (res * a)%mod;</span><br><span class=\"line\">        a = (a * a)%mod;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算 ret = (a^n)%mod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">pow2</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mod)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = mul(res,a,mod);</span><br><span class=\"line\">        a = mul(a,a,mod);</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"矩阵乘法和快速幂\"><a href=\"#矩阵乘法和快速幂\" class=\"headerlink\" title=\"矩阵乘法和快速幂\"></a>矩阵乘法和快速幂</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">matrix</span>&#123;</span></span><br><span class=\"line\">    LL m[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</span><br><span class=\"line\">    matrix()&#123; <span class=\"built_in\">memset</span>(m,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(m)); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">matrix <span class=\"keyword\">operator</span> * (<span class=\"keyword\">const</span> matrix &amp; a,<span class=\"keyword\">const</span> matrix &amp; b)&#123;</span><br><span class=\"line\">    matrix c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">9</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=<span class=\"number\">9</span>; j++)&#123;</span><br><span class=\"line\">            c.m[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>; k&lt;=<span class=\"number\">9</span>; k++)</span><br><span class=\"line\">                c.m[i][j]=(c.m[i][j]+a.m[i][k]*b.m[k][j])%mod;<span class=\"comment\">//一般题目都要求要modulo一个数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">matrix <span class=\"title\">quick</span><span class=\"params\">(matrix base,<span class=\"keyword\">int</span> <span class=\"built_in\">pow</span>)</span></span>&#123;</span><br><span class=\"line\">    matrix a;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">9</span>; i++) a.m[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">pow</span>)    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">pow</span>&amp;<span class=\"number\">1</span>) a=a*base;</span><br><span class=\"line\">        base=base*base;</span><br><span class=\"line\">        <span class=\"built_in\">pow</span>&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组合数学\"><a href=\"#组合数学\" class=\"headerlink\" title=\"组合数学\"></a>组合数学</h2><h3 id=\"Contar康托展开\"><a href=\"#Contar康托展开\" class=\"headerlink\" title=\"Contar康托展开\"></a>Contar康托展开</h3><p>由一个排列计算它是全排列中的第几个排列的方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> fac[<span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">factor</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fac[<span class=\"number\">0</span>] = fac[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; <span class=\"number\">13</span>; ++ i)</span><br><span class=\"line\">        fac[i] = fac[i - <span class=\"number\">1</span>] * i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//逆康托</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">uncantor</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> res;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, l, t;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> h[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= k; i++) &#123;</span><br><span class=\"line\">        t = x / fac[k - i];</span><br><span class=\"line\">        x -= t * fac[k - i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>, l = <span class=\"number\">0</span>; l &lt;= t; j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( !h[j] ) l++;</span><br><span class=\"line\">        j --;</span><br><span class=\"line\">        h[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        res += j + <span class=\"string\">'0'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//康托</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cantor</span><span class=\"params\">(<span class=\"keyword\">int</span>* a, <span class=\"keyword\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++ i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; len; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[j] &lt; a[i]) t ++;</span><br><span class=\"line\">        ans += fac[len - i - <span class=\"number\">1</span>] * t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Catalan-Number-卡特兰数\"><a href=\"#Catalan-Number-卡特兰数\" class=\"headerlink\" title=\"Catalan Number 卡特兰数\"></a>Catalan Number 卡特兰数</h3><p>$C_n = \\frac{4n - 2}{n + 1} C_{n-1}$</p>\n<p>相关问题</p>\n<ol>\n<li>Cn可以表示长度为2n的Dyck Words的种类数，Dyck Words由n个A字符与n个B字符组成，且满足在任意位置上，前缀中A的数量不小于B的数量，如果A用(代替，把B用)代替，就是一个典型的括号表达式，因此也可以用来表示合法的表达式个数。</li>\n<li>Cn可以表示有n个结点的不同构的二叉树的种类数。</li>\n<li>Cn可以表示有2n + 1个结点的不同构的满二叉树的种类数。</li>\n<li>Cn可以表示在n*n的格点中从左下角延格线走到右上角且始终不超过对角线的方案数。</li>\n<li>Cn可以表示通过连接顶点将n + 2个顶点的凸多边形划分成三角形的方案数。</li>\n<li>Cn表示有n个元素的出栈顺序的种类数。</li>\n<li>Cn可以用在买票找零钱问题上，对于2n的观众，收银台初始没有钱，无法找零，接下来有n个人拿a元买票，n个人拿2a元买票（需要找零钱数为a），能够保证每一个需要找零的观众来的时候都能够得到找零的合法方案数。</li>\n<li>Cn可以表示在二维直角坐标系中，从(0, 0)走到(2n, 0)点，每个相邻整数点的纵坐标差值的绝对值为1，且点始终不会落到x轴下方的方案数。</li>\n</ol>\n<h2 id=\"高精度\"><a href=\"#高精度\" class=\"headerlink\" title=\"高精度\"></a>高精度</h2><h3 id=\"大数操作BigInteger\"><a href=\"#大数操作BigInteger\" class=\"headerlink\" title=\"大数操作BigInteger\"></a>大数操作BigInteger</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BI</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Scanner in = <span class=\"keyword\">new</span> Scanner (System.in);</span><br><span class=\"line\">        BigInteger a, b;</span><br><span class=\"line\">        a = in.nextBigInteger();</span><br><span class=\"line\">        b = in.nextBigInteger();</span><br><span class=\"line\">        System.out.println(a.add(b));</span><br><span class=\"line\">        System.out.println(a.subtract(b));</span><br><span class=\"line\">        System.out.println(a.multiply(b));</span><br><span class=\"line\">        System.out.println(a.divide(b));</span><br><span class=\"line\">        BigInteger mod = BigInteger.valueOf(<span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(b.mod(mod));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小数操作BigDecimal\"><a href=\"#小数操作BigDecimal\" class=\"headerlink\" title=\"小数操作BigDecimal\"></a>小数操作BigDecimal</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BD</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        BigDecimal a = <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">10</span>);</span><br><span class=\"line\">        BigDecimal b = <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">10.5</span>);</span><br><span class=\"line\">        BigDecimal c = <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">123456789101222L</span>);</span><br><span class=\"line\">        BigDecimal d = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"-123456.31\"</span>);</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">        System.out.println(c);</span><br><span class=\"line\">        System.out.println(d);</span><br><span class=\"line\">        System.out.println(a.add(b).add(c).add(d));</span><br><span class=\"line\">        System.out.println(a.subtract(b).subtract(a));</span><br><span class=\"line\">        System.out.println(a.multiply(b).multiply(c));</span><br><span class=\"line\">        System.out.println(c.divide(a).divide(<span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">20</span>)));</span><br><span class=\"line\">        System.out.println(d.divide(a));</span><br><span class=\"line\">        System.out.println(d.doubleValue());</span><br><span class=\"line\">        System.out.println(a.compareTo(b));<span class=\"comment\">// -1</span></span><br><span class=\"line\">        System.out.println(a.equals(b));<span class=\"comment\">// flase</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成排列\"><a href=\"#生成排列\" class=\"headerlink\" title=\"生成排列\"></a>生成排列</h3><p>next_permutation() 生成下一个排列<br>prev_permutation() 生成上一个排列</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"comment\">// &#125;while (next_permutation(str.begin(), str.end()));</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span> (prev_permutation(str.begin(), str.end()));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Graph-图论\"><a href=\"#Graph-图论\" class=\"headerlink\" title=\"Graph 图论\"></a>Graph 图论</h2><h3 id=\"topu-拓扑排序\"><a href=\"#topu-拓扑排序\" class=\"headerlink\" title=\"topu 拓扑排序\"></a>topu 拓扑排序</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> in[maxn];<span class=\"comment\">//存入度数</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span> &lt;<span class=\"keyword\">int</span> &gt; edge[maxn]; <span class=\"comment\">//存边</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">topu_sort</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!in[i]) q.push(i); <span class=\"comment\">//取出入度为0的点放</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.front(); q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; edge[u].size(); i++)&#123; <span class=\"comment\">//删边与统计操作</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[u][i];</span><br><span class=\"line\">            in[v] --;  <span class=\"comment\">//删边</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( ! in[v] ) q.push(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span> (<span class=\"string\">\"%d \"</span>, u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"comment\">//若存在全部遍历完仍存在入度不为0的点说明存在环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in[i]) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Shortest-Path-最短路\"><a href=\"#Shortest-Path-最短路\" class=\"headerlink\" title=\"Shortest Path 最短路\"></a>Shortest Path 最短路</h3><h4 id=\"Dijstra\"><a href=\"#Dijstra\" class=\"headerlink\" title=\"Dijstra\"></a>Dijstra</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"keyword\">int</span> pre[<span class=\"number\">2501</span>];   <span class=\"comment\">// 路径记录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">( <span class=\"keyword\">int</span> s )</span></span>&#123;</span><br><span class=\"line\">    priority_queue&lt; P, <span class=\"built_in\">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; q;</span><br><span class=\"line\">    fill (d + <span class=\"number\">1</span>, d + n + <span class=\"number\">1</span>, INF);</span><br><span class=\"line\">    d[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q.push(P(<span class=\"number\">0</span>, s));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q.size())&#123;</span><br><span class=\"line\">        P p = q.top(); q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h = p.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( d[h] &lt; p.first ) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v[h].size(); i ++)&#123;</span><br><span class=\"line\">            edge e = v[h][i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( d[e.to] &gt; d[h] + e.cost )&#123;</span><br><span class=\"line\">                d[e.to] = d[h] + e.cost;</span><br><span class=\"line\">                q.push(P(d[e.to], e.to));</span><br><span class=\"line\">                pre[e.to] = h;  <span class=\"comment\">// 记录前驱</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SPFA\"><a href=\"#SPFA\" class=\"headerlink\" title=\"SPFA\"></a>SPFA</h4><p>从起点到任意一个点最短距离经过的点最多只有 n 个，用 cnt[ i ] 表示从起点（假设就是 1）到 i 的最短距离包含点的个数，初始化 cnt[ 1 ] = 1，那么当我们能够用点 u 松弛点 v 时，当我们能够用点 u 松弛点 v 时，松弛时同时更新 cnt[ v ] = cnt[ u ] + 1，若发现此时 cnt[ v ] &gt; n，那么就存在负环</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">( <span class=\"keyword\">int</span> s )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span> &gt; q;</span><br><span class=\"line\">    fill(d + <span class=\"number\">1</span>, d + n + <span class=\"number\">1</span>, INF);</span><br><span class=\"line\">    d[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    vis[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( q.size() )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = q.front(); q.pop();</span><br><span class=\"line\">        vis[t] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i = v[t].begin(); i != v[t].end(); i ++ )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( i -&gt; cost + d[t] &lt; d[i -&gt; to] )&#123;</span><br><span class=\"line\">                d[i -&gt; to] = i -&gt; cost + d[t];</span><br><span class=\"line\">                <span class=\"comment\">// cnt[ i -&gt; to ] = 1 + cnt[t];</span></span><br><span class=\"line\">                <span class=\"comment\">// if(cnt[i -&gt; to] &gt; n ) return false;</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>( !vis[i -&gt; to] )</span><br><span class=\"line\">                    q.push(i -&gt; to);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MST-最小生成树\"><a href=\"#MST-最小生成树\" class=\"headerlink\" title=\"MST 最小生成树\"></a>MST 最小生成树</h3><h4 id=\"Kruskal\"><a href=\"#Kruskal\" class=\"headerlink\" title=\"Kruskal\"></a>Kruskal</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">        p[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">( <span class=\"keyword\">int</span> x )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x == p[x] ? x : p[x] = find(p[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Kruskal</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ll res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sort(E, E + m, cmp);</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i ++ )&#123;</span><br><span class=\"line\">        edge e = E[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = find(e.from);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = find(e.to);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( x != y )&#123;</span><br><span class=\"line\">            p[x] = p[y];</span><br><span class=\"line\">            cnt ++;</span><br><span class=\"line\">            res += (ll) e.cost;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( cnt == n - <span class=\"number\">1</span> ) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Prim\"><a href=\"#Prim\" class=\"headerlink\" title=\"Prim\"></a>Prim</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Prim</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fill (cost + <span class=\"number\">1</span>, cost + n + <span class=\"number\">1</span>, INF);</span><br><span class=\"line\">    cost[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    priority_queue &lt;P, <span class=\"built_in\">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; q;</span><br><span class=\"line\">    q.push(P(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">    ll res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( q.size() &amp;&amp; cnt &lt; n )&#123;</span><br><span class=\"line\">        P p = q.top(); q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = p.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( !vis[v] )&#123;</span><br><span class=\"line\">            cnt ++;</span><br><span class=\"line\">            vis[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            res += p.first;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; E[v].size(); i ++)&#123;</span><br><span class=\"line\">                edge e = E[v][i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>( cost[e.to] &gt; e.cost )&#123;</span><br><span class=\"line\">                    cost[e.to] = e.cost;</span><br><span class=\"line\">                    q.push(P(cost[e.to], e.to));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"最大流\"><a href=\"#最大流\" class=\"headerlink\" title=\"最大流\"></a>最大流</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to, cap, rev;</span><br><span class=\"line\">&#125;edge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">101</span>];</span><br><span class=\"line\"><span class=\"built_in\">vector</span> &lt;edge &gt; G[<span class=\"number\">101</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v == t) <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">    vis[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[v].size(); i ++)&#123;</span><br><span class=\"line\">        edge e = G[v][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( !vis[e.to] &amp;&amp; e.cap &gt; <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d = dfs(e.to, t, min(f, e.cap));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( d &gt; <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">                e.cap -= d;</span><br><span class=\"line\">                G[e.to][e.rev].cap += d;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max_flow</span><span class=\"params\">(<span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> t)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> f = dfs(s, t, INF);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( !f ) <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">        flow += f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> from, to, s = <span class=\"number\">0</span>, t = n + m + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i ++&#123;</span><br><span class=\"line\">        G[s].push_back(&#123;i, <span class=\"number\">1</span>, G[i].size()&#125;);</span><br><span class=\"line\">        G[i].push_back(&#123;s, <span class=\"number\">0</span>, G[s].size() - <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = m + <span class=\"number\">1</span>; j &lt;= n + m; j ++)&#123;</span><br><span class=\"line\">        G[j].push_back(&#123;t, <span class=\"number\">1</span>, G[t].size()&#125;);</span><br><span class=\"line\">        G[t].push_back(&#123;j, <span class=\"number\">0</span>, G[j].size() - <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;from, &amp;to), from != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        G[to].push_back(&#123;from, <span class=\"number\">1</span>, G[from].size()&#125;);</span><br><span class=\"line\">        G[from].push_back(&#123;to, <span class=\"number\">0</span>, G[to].size() - <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; max_flow(s, t) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"欧拉路和欧拉回路\"><a href=\"#欧拉路和欧拉回路\" class=\"headerlink\" title=\"欧拉路和欧拉回路\"></a>欧拉路和欧拉回路</h3><p>有向图</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> lst)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> &amp;i=lnk[x];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;i;i=e[i].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[i]=<span class=\"number\">1</span>,dfs(e[i].to,i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lst) res[++res_]=lst;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>无向图</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> lst)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> &amp;i=lnk[x];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;i;i=e[i].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[i+<span class=\"number\">1</span>&gt;&gt;<span class=\"number\">1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[i+<span class=\"number\">1</span>&gt;&gt;<span class=\"number\">1</span>]=<span class=\"number\">1</span>,dfs(e[i].to,i&amp;<span class=\"number\">1</span>?(i+<span class=\"number\">1</span>&gt;&gt;<span class=\"number\">1</span>):-(i+<span class=\"number\">1</span>&gt;&gt;<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lst) res[++res_]=lst;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dynamic-Programming-动态规划\"><a href=\"#Dynamic-Programming-动态规划\" class=\"headerlink\" title=\"Dynamic Programming 动态规划\"></a>Dynamic Programming 动态规划</h2><h3 id=\"LIS-最长上升子序列\"><a href=\"#LIS-最长上升子序列\" class=\"headerlink\" title=\"LIS 最长上升子序列\"></a>LIS 最长上升子序列</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(dp));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)&#123;</span><br><span class=\"line\">        dp[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j ++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( a[j] &lt; a[i] )</span><br><span class=\"line\">                dp[i] = max (dp[i], dp[j] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        res = max (res, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数划分\"><a href=\"#数划分\" class=\"headerlink\" title=\"数划分\"></a>数划分</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>问题描述：</span><br><span class=\"line\">    给定一个正整数N和K</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">1.</span> 将n划分成若干正整数之和的划分数。</span><br><span class=\"line\">    <span class=\"number\">2.</span> 将n划分成k个正整数之和的划分数。</span><br><span class=\"line\">    <span class=\"number\">3.</span> 将n划分成最大数不超过k的划分数。</span><br><span class=\"line\">    <span class=\"number\">4.</span> 将n划分成若干奇正整数之和的划分数。</span><br><span class=\"line\">    <span class=\"number\">5.</span> 将n划分成若干不同整数之和的划分数。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>问题分类：总的来说这些都是背包问题；</span><br><span class=\"line\"></span><br><span class=\"line\">第一个问：就是一个完全背包，物品有 <span class=\"number\">1</span> --- N 种，第 i 种物品的重量为 i ，价值为 i</span><br><span class=\"line\"></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>;i &lt;= N;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = i;j &lt;= N;j++)</span><br><span class=\"line\">                dp[j] += dp[j-i];</span><br><span class=\"line\"></span><br><span class=\"line\">其中 dp[j] 是用前 i 个数能构成 j 的种类数，则结果就为 dp[N]</span><br><span class=\"line\"></span><br><span class=\"line\">看完这个问题了，那么 第<span class=\"number\">3</span>个问就知道了 ， 即用前 K 种物品所得结果，</span><br><span class=\"line\">只需把第一层循环的 i &lt;= N 改为 i &lt;= K 即可；</span><br><span class=\"line\"></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>;i &lt;= K;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = i;j &lt;= N;j++)</span><br><span class=\"line\">                dp[j] += dp[j-i];   结果同样为 dp[N] ;</span><br><span class=\"line\"></span><br><span class=\"line\">那么第四个问呢，想想是奇数，那么 i = <span class=\"number\">2</span>，<span class=\"number\">4</span>，<span class=\"number\">6</span>，…… 等等值就不能取了，</span><br><span class=\"line\">因为这些物品不合要求，这很简单啊  i++ 改为 i += <span class=\"number\">2</span> 不就行了；</span><br><span class=\"line\"></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>;i &lt;= N;i+=<span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = i;j &lt;= N;j++)</span><br><span class=\"line\">                dp[j] += dp[j-i];   结果同样为 dp[N] ;</span><br><span class=\"line\"></span><br><span class=\"line\">再看看第五个问，若干个不同的就是一种物品最多只能用一次</span><br><span class=\"line\">这是经典的 <span class=\"number\">01</span>背包 啊，与第一个问的不同就是第二层循环的顺序而已；</span><br><span class=\"line\"></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>;i &lt;= N;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = n;j &gt;= i ;j--)</span><br><span class=\"line\">                dp[j] += dp[j-i];</span><br><span class=\"line\"></span><br><span class=\"line\">最后我们来思考第二个问：</span><br><span class=\"line\"></span><br><span class=\"line\">   要求只要 K 个，这怎么办呢？？？想想特殊情况…… 如果 K = <span class=\"number\">1</span> 呢，只能是 N 咯</span><br><span class=\"line\">   若果 N = <span class=\"number\">0</span> 呢， 结果只能是 <span class=\"number\">0</span> 中可能啊，那同样N &lt; K 的话，不可能分啊 结果为 <span class=\"number\">0</span></span><br><span class=\"line\">   那么我们再考虑，分的结果中有没有 <span class=\"number\">1</span> ，如果有那么就把剩下的 N - <span class=\"number\">1</span> 分成 K - <span class=\"number\">1</span> 份</span><br><span class=\"line\">   如果没有，那么我们先拿出 K 份给每一堆一个<span class=\"number\">1</span>，再把剩下的 N - K 分成 K 份就行了</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> work(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> k)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &lt; k) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> work(n-k,k) + work(n<span class=\"number\">-1</span>,k<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"HTML","date":"2018-03-23T06:04:56.000Z","description":"HTML的初步学习，包括HTML段落、列表、超链接、表格、图像和多媒体......","_content":"\n# HTML 段落\n\n```md\n1. 分六个等级的字体(h1-h6)\n2. 换行<br>(line break)\n3. 水平线<hr>(horizontal rule)\n\n4. 字体特性设定<font></font>:\n\t字体大小size;\n\t字体颜色color;\n\t字体名称face 如<font face=标楷体> 标楷体</font>\n\t\n5. 文本格式化：\n\t<b><strong>定义粗体字体\n\t<em> 定义着重文字\n\t<i><em>定义斜体字\n\t<small>、<big>定义小、大号字\n\t<sub> <sup>上下标\n\t<ins><del>定义插入字、删除字\n\t\n\t<abbr><acronym>定义缩写、定义地址\n\t<bdo>定义文字方向 如<p><bdo dir=\"rtl\"\t\n\t<blockquote>定义长的引用\n\t<q>短的引用定义\n\t<address>定义地址\n\t<cite>定义引用、引证\n```\n\n# HTML 列表\n\n```md\n1. 无序列表ul：\n\t<ul>\n\t\t<li>Coffee</li>\n\t\t<li>Mile</li>\n\t</ul>\n\n2. 有序列表ol：\n\t<ol type=\"a\"/\"A\"/\"Ⅰ\"/\"1\">\n\t\t<li>Coffee</li>\n\t\t<li>Mile</li>\n\t</ol>\n\t\n3. 定义列表dl:\n\t<dt>标题\n\t<dd>内容\n列表可嵌套\n\n```\n\n# HTML 超链接<a>\n\n```md\n1. href=\"\": 链接地址\n2. 标签间可以为文字描绘或图片\n3. target: 打开位置  ex:_top、_blank、_self、_parent\n4. 定义位置<a id=\"\"></a>\n5. iflame 独立模块\n```\n\t\n# HTML 图像\n\n```md\n1. <img>定义图像(包含属性，并且灭有闭合标签)\n2. src源属性: <img src=\"\">\n3. alt替代文本属性: 如:<img src=\"\" alt=\"属性文本\">\n4. height、width、border属性\n```\n\t\n# HTMl 多媒体\n\n```md\n1. 音乐播放器： <audio src=\"\"  controls=\"controls\" /*循环：loop*/>不显示提示</audio>\n2. 视频播放器:  <video source> 多个格式播放\n```\n\n# HTML 表格(table)\n\n```md\n1. rowspan\n```\n# 无语义元素\n1. div模块\n2. span\n**span更改文段中某一小段文字的属性。**\n\n# 语义元素\n1. header\n2. section\n3. article\n4. nav\n5. aside\n6. footer\n\n# 微格式\n<time>\n<pubdate>\n<time datetime=\"YYYY-MM-DDThh-mm-ssTZD\">T规定时间分隔符 TZD时区标识符\n\n<input>元素类型\n\ndate month\tweek time datetime_local \n\t\nemail search tel url\n\n其他表单元素：\nselect option optgroup  textarea\n\t\n\t\n\t\n\t\n\t\n\t\n\t","source":"_posts/HTML.md","raw":"---\ntitle: HTML\ndate: 2018-03-23 14:04:56\ntags: HTML\ncategories: HTML\ndescription: HTML的初步学习，包括HTML段落、列表、超链接、表格、图像和多媒体......\n---\n\n# HTML 段落\n\n```md\n1. 分六个等级的字体(h1-h6)\n2. 换行<br>(line break)\n3. 水平线<hr>(horizontal rule)\n\n4. 字体特性设定<font></font>:\n\t字体大小size;\n\t字体颜色color;\n\t字体名称face 如<font face=标楷体> 标楷体</font>\n\t\n5. 文本格式化：\n\t<b><strong>定义粗体字体\n\t<em> 定义着重文字\n\t<i><em>定义斜体字\n\t<small>、<big>定义小、大号字\n\t<sub> <sup>上下标\n\t<ins><del>定义插入字、删除字\n\t\n\t<abbr><acronym>定义缩写、定义地址\n\t<bdo>定义文字方向 如<p><bdo dir=\"rtl\"\t\n\t<blockquote>定义长的引用\n\t<q>短的引用定义\n\t<address>定义地址\n\t<cite>定义引用、引证\n```\n\n# HTML 列表\n\n```md\n1. 无序列表ul：\n\t<ul>\n\t\t<li>Coffee</li>\n\t\t<li>Mile</li>\n\t</ul>\n\n2. 有序列表ol：\n\t<ol type=\"a\"/\"A\"/\"Ⅰ\"/\"1\">\n\t\t<li>Coffee</li>\n\t\t<li>Mile</li>\n\t</ol>\n\t\n3. 定义列表dl:\n\t<dt>标题\n\t<dd>内容\n列表可嵌套\n\n```\n\n# HTML 超链接<a>\n\n```md\n1. href=\"\": 链接地址\n2. 标签间可以为文字描绘或图片\n3. target: 打开位置  ex:_top、_blank、_self、_parent\n4. 定义位置<a id=\"\"></a>\n5. iflame 独立模块\n```\n\t\n# HTML 图像\n\n```md\n1. <img>定义图像(包含属性，并且灭有闭合标签)\n2. src源属性: <img src=\"\">\n3. alt替代文本属性: 如:<img src=\"\" alt=\"属性文本\">\n4. height、width、border属性\n```\n\t\n# HTMl 多媒体\n\n```md\n1. 音乐播放器： <audio src=\"\"  controls=\"controls\" /*循环：loop*/>不显示提示</audio>\n2. 视频播放器:  <video source> 多个格式播放\n```\n\n# HTML 表格(table)\n\n```md\n1. rowspan\n```\n# 无语义元素\n1. div模块\n2. span\n**span更改文段中某一小段文字的属性。**\n\n# 语义元素\n1. header\n2. section\n3. article\n4. nav\n5. aside\n6. footer\n\n# 微格式\n<time>\n<pubdate>\n<time datetime=\"YYYY-MM-DDThh-mm-ssTZD\">T规定时间分隔符 TZD时区标识符\n\n<input>元素类型\n\ndate month\tweek time datetime_local \n\t\nemail search tel url\n\n其他表单元素：\nselect option optgroup  textarea\n\t\n\t\n\t\n\t\n\t\n\t\n\t","slug":"HTML","published":1,"updated":"2020-02-06T22:40:22.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n96x000624uw6emuo67l","content":"<h1 id=\"HTML-段落\"><a href=\"#HTML-段落\" class=\"headerlink\" title=\"HTML 段落\"></a>HTML 段落</h1><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>分六个等级的字体(h1-h6)</span><br><span class=\"line\"><span class=\"bullet\">2. </span>换行<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span>(line break)</span><br><span class=\"line\"><span class=\"bullet\">3. </span>水平线<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span>(horizontal rule)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">4. </span>字体特性设定<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">font</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span>:</span><br><span class=\"line\"><span class=\"code\">\t字体大小size;</span></span><br><span class=\"line\"><span class=\"code\">\t字体颜色color;</span></span><br><span class=\"line\"><span class=\"code\">\t字体名称face 如&lt;font face=标楷体&gt; 标楷体&lt;/font&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"bullet\">5. </span>文本格式化：</span><br><span class=\"line\"><span class=\"code\">\t&lt;b&gt;&lt;strong&gt;定义粗体字体</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;em&gt; 定义着重文字</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;i&gt;&lt;em&gt;定义斜体字</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;small&gt;、&lt;big&gt;定义小、大号字</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;sub&gt; &lt;sup&gt;上下标</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;ins&gt;&lt;del&gt;定义插入字、删除字</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;abbr&gt;&lt;acronym&gt;定义缩写、定义地址</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;bdo&gt;定义文字方向 如&lt;p&gt;&lt;bdo dir=\"rtl\"\t</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;blockquote&gt;定义长的引用</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;q&gt;短的引用定义</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;address&gt;定义地址</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;cite&gt;定义引用、引证</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTML-列表\"><a href=\"#HTML-列表\" class=\"headerlink\" title=\"HTML 列表\"></a>HTML 列表</h1><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>无序列表ul：</span><br><span class=\"line\"><span class=\"code\">\t&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t\t&lt;li&gt;Coffee&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t\t&lt;li&gt;Mile&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;/ul&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">2. </span>有序列表ol：</span><br><span class=\"line\"><span class=\"code\">\t&lt;ol type=\"a\"/\"A\"/\"Ⅰ\"/\"1\"&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t\t&lt;li&gt;Coffee&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t\t&lt;li&gt;Mile&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;/ol&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"bullet\">3. </span>定义列表dl:</span><br><span class=\"line\"><span class=\"code\">\t&lt;dt&gt;标题</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;dd&gt;内容</span></span><br><span class=\"line\">列表可嵌套</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTML-超链接\"><a href=\"#HTML-超链接\" class=\"headerlink\" title=\"HTML 超链接\"></a>HTML 超链接<a></a></h1><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>href=\"\": 链接地址</span><br><span class=\"line\"><span class=\"bullet\">2. </span>标签间可以为文字描绘或图片</span><br><span class=\"line\"><span class=\"bullet\">3. </span>target: 打开位置  ex:<span class=\"emphasis\">_top、_</span>blank、<span class=\"emphasis\">_self、_</span>parent</span><br><span class=\"line\"><span class=\"bullet\">4. </span>定义位置<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"bullet\">5. </span>iflame 独立模块</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"HTML-图像\"><a href=\"#HTML-图像\" class=\"headerlink\" title=\"HTML 图像\"></a>HTML 图像</h1><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span>&gt;</span></span>定义图像(包含属性，并且灭有闭合标签)</span><br><span class=\"line\"><span class=\"bullet\">2. </span>src源属性: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"bullet\">3. </span>alt替代文本属性: 如:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"属性文本\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"bullet\">4. </span>height、width、border属性</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"HTMl-多媒体\"><a href=\"#HTMl-多媒体\" class=\"headerlink\" title=\"HTMl 多媒体\"></a>HTMl 多媒体</h1><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>音乐播放器： <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span>  <span class=\"attr\">controls</span>=<span class=\"string\">\"controls\"</span> /*循环：<span class=\"attr\">loop</span>*/&gt;</span></span>不显示提示<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"bullet\">2. </span>视频播放器:  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">source</span>&gt;</span></span> 多个格式播放</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTML-表格-table\"><a href=\"#HTML-表格-table\" class=\"headerlink\" title=\"HTML 表格(table)\"></a>HTML 表格(table)</h1><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>rowspan</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"无语义元素\"><a href=\"#无语义元素\" class=\"headerlink\" title=\"无语义元素\"></a>无语义元素</h1><ol>\n<li>div模块</li>\n<li>span</li>\n</ol>\n<p><strong>span更改文段中某一小段文字的属性。</strong></p>\n<h1 id=\"语义元素\"><a href=\"#语义元素\" class=\"headerlink\" title=\"语义元素\"></a>语义元素</h1><ol>\n<li>header</li>\n<li>section</li>\n<li>article</li>\n<li>nav</li>\n<li>aside</li>\n<li>footer</li>\n</ol>\n<h1 id=\"微格式\"><a href=\"#微格式\" class=\"headerlink\" title=\"微格式\"></a>微格式</h1><time>\n<pubdate>\n<time datetime=\"YYYY-MM-DDThh-mm-ssTZD\">T规定时间分隔符 TZD时区标识符\n\n<p><input>元素类型</p>\n<p>date month    week time datetime_local </p>\n<p>email search tel url</p>\n<p>其他表单元素：<br>select option optgroup  textarea</p>\n</time></pubdate></time>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"HTML-段落\"><a href=\"#HTML-段落\" class=\"headerlink\" title=\"HTML 段落\"></a>HTML 段落</h1><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>分六个等级的字体(h1-h6)</span><br><span class=\"line\"><span class=\"bullet\">2. </span>换行<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span>(line break)</span><br><span class=\"line\"><span class=\"bullet\">3. </span>水平线<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span>(horizontal rule)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">4. </span>字体特性设定<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">font</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span>:</span><br><span class=\"line\"><span class=\"code\">\t字体大小size;</span></span><br><span class=\"line\"><span class=\"code\">\t字体颜色color;</span></span><br><span class=\"line\"><span class=\"code\">\t字体名称face 如&lt;font face=标楷体&gt; 标楷体&lt;/font&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"bullet\">5. </span>文本格式化：</span><br><span class=\"line\"><span class=\"code\">\t&lt;b&gt;&lt;strong&gt;定义粗体字体</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;em&gt; 定义着重文字</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;i&gt;&lt;em&gt;定义斜体字</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;small&gt;、&lt;big&gt;定义小、大号字</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;sub&gt; &lt;sup&gt;上下标</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;ins&gt;&lt;del&gt;定义插入字、删除字</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;abbr&gt;&lt;acronym&gt;定义缩写、定义地址</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;bdo&gt;定义文字方向 如&lt;p&gt;&lt;bdo dir=\"rtl\"\t</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;blockquote&gt;定义长的引用</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;q&gt;短的引用定义</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;address&gt;定义地址</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;cite&gt;定义引用、引证</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTML-列表\"><a href=\"#HTML-列表\" class=\"headerlink\" title=\"HTML 列表\"></a>HTML 列表</h1><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>无序列表ul：</span><br><span class=\"line\"><span class=\"code\">\t&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t\t&lt;li&gt;Coffee&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t\t&lt;li&gt;Mile&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;/ul&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">2. </span>有序列表ol：</span><br><span class=\"line\"><span class=\"code\">\t&lt;ol type=\"a\"/\"A\"/\"Ⅰ\"/\"1\"&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t\t&lt;li&gt;Coffee&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t\t&lt;li&gt;Mile&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;/ol&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"bullet\">3. </span>定义列表dl:</span><br><span class=\"line\"><span class=\"code\">\t&lt;dt&gt;标题</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;dd&gt;内容</span></span><br><span class=\"line\">列表可嵌套</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTML-超链接\"><a href=\"#HTML-超链接\" class=\"headerlink\" title=\"HTML 超链接\"></a>HTML 超链接<a></a></h1><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>href=\"\": 链接地址</span><br><span class=\"line\"><span class=\"bullet\">2. </span>标签间可以为文字描绘或图片</span><br><span class=\"line\"><span class=\"bullet\">3. </span>target: 打开位置  ex:<span class=\"emphasis\">_top、_</span>blank、<span class=\"emphasis\">_self、_</span>parent</span><br><span class=\"line\"><span class=\"bullet\">4. </span>定义位置<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"bullet\">5. </span>iflame 独立模块</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"HTML-图像\"><a href=\"#HTML-图像\" class=\"headerlink\" title=\"HTML 图像\"></a>HTML 图像</h1><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span>&gt;</span></span>定义图像(包含属性，并且灭有闭合标签)</span><br><span class=\"line\"><span class=\"bullet\">2. </span>src源属性: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"bullet\">3. </span>alt替代文本属性: 如:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"属性文本\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"bullet\">4. </span>height、width、border属性</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"HTMl-多媒体\"><a href=\"#HTMl-多媒体\" class=\"headerlink\" title=\"HTMl 多媒体\"></a>HTMl 多媒体</h1><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>音乐播放器： <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span>  <span class=\"attr\">controls</span>=<span class=\"string\">\"controls\"</span> /*循环：<span class=\"attr\">loop</span>*/&gt;</span></span>不显示提示<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"bullet\">2. </span>视频播放器:  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">source</span>&gt;</span></span> 多个格式播放</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTML-表格-table\"><a href=\"#HTML-表格-table\" class=\"headerlink\" title=\"HTML 表格(table)\"></a>HTML 表格(table)</h1><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>rowspan</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"无语义元素\"><a href=\"#无语义元素\" class=\"headerlink\" title=\"无语义元素\"></a>无语义元素</h1><ol>\n<li>div模块</li>\n<li>span</li>\n</ol>\n<p><strong>span更改文段中某一小段文字的属性。</strong></p>\n<h1 id=\"语义元素\"><a href=\"#语义元素\" class=\"headerlink\" title=\"语义元素\"></a>语义元素</h1><ol>\n<li>header</li>\n<li>section</li>\n<li>article</li>\n<li>nav</li>\n<li>aside</li>\n<li>footer</li>\n</ol>\n<h1 id=\"微格式\"><a href=\"#微格式\" class=\"headerlink\" title=\"微格式\"></a>微格式</h1><time>\n<pubdate>\n<time datetime=\"YYYY-MM-DDThh-mm-ssTZD\">T规定时间分隔符 TZD时区标识符\n\n<p><input>元素类型</p>\n<p>date month    week time datetime_local </p>\n<p>email search tel url</p>\n<p>其他表单元素：<br>select option optgroup  textarea</p>\n</time></pubdate></time>"},{"title":"Dungeon Master","date":"2018-03-31T12:18:01.000Z","description":"人抓牛，三种状态。使用BFS和队列可以解决问题。","_content":"[原题链接](http://poj.org/problem?id=3278)\n### 题目内容\n\n> **Description**\nFarmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.\n* Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute\n* Teleporting: FJ can move from any point X to the point 2 × X in a single minute.\nIf the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?\n<br>\n**Input**\nLine 1: Two space-separated integers: N and K\n<br>\n**Output**\nLine 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.\n\n> **Sample Input**\n> <br>\n5 17\n\n> **Sample Output**\n> <br>\n4\n\n> **Hint**\nThe fastest way for Farmer John to reach the fugitive cow is to move along the following path: 5-10-9-18-17, which takes 4 minutes.\n\n题解:\n```C++\n#include<iostream>\n#include<stdio.h>\n#include<string.h>\n#include<queue>\nusing namespace std;\nqueue<int> q;\nbool vis[100001];\nint step[100001];\nint n,k;\nint bfs(){\n\tq.push(n);\n\tvis[n]=true;\n\twhile(!q.empty()){\n\t\tn=q.front();\n\t\tq.pop();\n\t\tint nn=n;\n\t\tfor(int i=0;i<3;i++){\n\t\t\tif(i==0) n=nn+1;\n\t\t\telse if(i==1) n=nn-1;\n\t\t\telse n=nn*2;\n\t\t\tif(n>=0&&n<=100000&&!vis[n]){\n\t\t\t\tq.push(n);\n\t\t\t\tstep[n]=step[nn]+1;\n\t\t\t\tvis[n]=true;\n\t\t\t}\n\t\t\tif(n==k)return step[n];\n\t\t}\n\t}\n}\nint main(){\n\twhile(scanf(\"%d%d\",&n,&k)!=EOF){\n\t\tmemset(vis,false,sizeof(vis));\n\t\twhile(!q.empty())q.pop();\n\t\tprintf(\"%d\\n\",bfs());\n\t}\n\treturn 0;\n}\n```\n\n已AC....by edxuanlen\n\n","source":"_posts/Dungeon-Master.md","raw":"---\ntitle: Dungeon Master\ndate: 2018-03-31 20:18:01\ntags: \n    - BFS\n    - STL\ncategories: C/C++\ndescription: 人抓牛，三种状态。使用BFS和队列可以解决问题。\n---\n[原题链接](http://poj.org/problem?id=3278)\n### 题目内容\n\n> **Description**\nFarmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.\n* Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute\n* Teleporting: FJ can move from any point X to the point 2 × X in a single minute.\nIf the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?\n<br>\n**Input**\nLine 1: Two space-separated integers: N and K\n<br>\n**Output**\nLine 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.\n\n> **Sample Input**\n> <br>\n5 17\n\n> **Sample Output**\n> <br>\n4\n\n> **Hint**\nThe fastest way for Farmer John to reach the fugitive cow is to move along the following path: 5-10-9-18-17, which takes 4 minutes.\n\n题解:\n```C++\n#include<iostream>\n#include<stdio.h>\n#include<string.h>\n#include<queue>\nusing namespace std;\nqueue<int> q;\nbool vis[100001];\nint step[100001];\nint n,k;\nint bfs(){\n\tq.push(n);\n\tvis[n]=true;\n\twhile(!q.empty()){\n\t\tn=q.front();\n\t\tq.pop();\n\t\tint nn=n;\n\t\tfor(int i=0;i<3;i++){\n\t\t\tif(i==0) n=nn+1;\n\t\t\telse if(i==1) n=nn-1;\n\t\t\telse n=nn*2;\n\t\t\tif(n>=0&&n<=100000&&!vis[n]){\n\t\t\t\tq.push(n);\n\t\t\t\tstep[n]=step[nn]+1;\n\t\t\t\tvis[n]=true;\n\t\t\t}\n\t\t\tif(n==k)return step[n];\n\t\t}\n\t}\n}\nint main(){\n\twhile(scanf(\"%d%d\",&n,&k)!=EOF){\n\t\tmemset(vis,false,sizeof(vis));\n\t\twhile(!q.empty())q.pop();\n\t\tprintf(\"%d\\n\",bfs());\n\t}\n\treturn 0;\n}\n```\n\n已AC....by edxuanlen\n\n","slug":"Dungeon-Master","published":1,"updated":"2020-02-06T22:40:22.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n96z000724uw2jh7k4c7","content":"<p><a href=\"http://poj.org/problem?id=3278\" target=\"_blank\" rel=\"noopener\">原题链接</a></p>\n<h3 id=\"题目内容\"><a href=\"#题目内容\" class=\"headerlink\" title=\"题目内容\"></a>题目内容</h3><blockquote>\n<p><strong>Description</strong><br>Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.</p>\n</blockquote>\n<ul>\n<li>Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute</li>\n<li>Teleporting: FJ can move from any point X to the point 2 × X in a single minute.<br>If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?<br></li>\n<li><em>Input*</em><br>Line 1: Two space-separated integers: N and K<br></li>\n<li><em>Output*</em><br>Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.</li>\n</ul>\n<blockquote>\n<p><strong>Sample Input</strong><br><br><br>5 17</p>\n</blockquote>\n<blockquote>\n<p><strong>Sample Output</strong><br><br><br>4</p>\n</blockquote>\n<blockquote>\n<p><strong>Hint</strong><br>The fastest way for Farmer John to reach the fugitive cow is to move along the following path: 5-10-9-18-17, which takes 4 minutes.</p>\n</blockquote>\n<p>题解:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> step[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,k;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tq.push(n);</span><br><span class=\"line\">\tvis[n]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">\t\tn=q.front();</span><br><span class=\"line\">\t\tq.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> nn=n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i==<span class=\"number\">0</span>) n=nn+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>) n=nn<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> n=nn*<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(n&gt;=<span class=\"number\">0</span>&amp;&amp;n&lt;=<span class=\"number\">100000</span>&amp;&amp;!vis[n])&#123;</span><br><span class=\"line\">\t\t\t\tq.push(n);</span><br><span class=\"line\">\t\t\t\tstep[n]=step[nn]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tvis[n]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(n==k)<span class=\"keyword\">return</span> step[n];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;k)!=EOF)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(vis,<span class=\"literal\">false</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!q.empty())q.pop();</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,bfs());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>已AC….by edxuanlen</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://poj.org/problem?id=3278\" target=\"_blank\" rel=\"noopener\">原题链接</a></p>\n<h3 id=\"题目内容\"><a href=\"#题目内容\" class=\"headerlink\" title=\"题目内容\"></a>题目内容</h3><blockquote>\n<p><strong>Description</strong><br>Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.</p>\n</blockquote>\n<ul>\n<li>Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute</li>\n<li>Teleporting: FJ can move from any point X to the point 2 × X in a single minute.<br>If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?<br></li>\n<li><em>Input*</em><br>Line 1: Two space-separated integers: N and K<br></li>\n<li><em>Output*</em><br>Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.</li>\n</ul>\n<blockquote>\n<p><strong>Sample Input</strong><br><br><br>5 17</p>\n</blockquote>\n<blockquote>\n<p><strong>Sample Output</strong><br><br><br>4</p>\n</blockquote>\n<blockquote>\n<p><strong>Hint</strong><br>The fastest way for Farmer John to reach the fugitive cow is to move along the following path: 5-10-9-18-17, which takes 4 minutes.</p>\n</blockquote>\n<p>题解:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> step[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,k;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tq.push(n);</span><br><span class=\"line\">\tvis[n]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">\t\tn=q.front();</span><br><span class=\"line\">\t\tq.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> nn=n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i==<span class=\"number\">0</span>) n=nn+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>) n=nn<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> n=nn*<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(n&gt;=<span class=\"number\">0</span>&amp;&amp;n&lt;=<span class=\"number\">100000</span>&amp;&amp;!vis[n])&#123;</span><br><span class=\"line\">\t\t\t\tq.push(n);</span><br><span class=\"line\">\t\t\t\tstep[n]=step[nn]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tvis[n]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(n==k)<span class=\"keyword\">return</span> step[n];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;k)!=EOF)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(vis,<span class=\"literal\">false</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!q.empty())q.pop();</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,bfs());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>已AC….by edxuanlen</p>\n"},{"title":"JVM","author":"edxuanlen","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2020-03-12T06:52:47.000Z","img":null,"coverImg":null,"password":null,"summary":null,"description":"JVM要点","_content":"\n### JVM的内存布局\n\n![JVM内存布局](JVM.png)\n\n程序计数器: 记录程序的下一跳，像代码行号的指示器\n\nJAVA虚拟机栈: 每个方法在被调用的时候就会创建一个栈帧，每个方法从调用到执行的过程，就对应着一个栈帧入栈到出栈的过程。\n\nJAVA虚拟机堆: 是Java虚拟机所管理的内存中最大的一块。被所有线程共享的内存区域，对象实例在这里分配内存。是垃圾收集器(GC)管理的主要区域。\n\n方法区: 存储被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，运行时常量池(RunTime Constant Pool)是方法区的一部分。\n\n直接内存: 直接内存(Direct Memory) 并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。\n\n![JVM随JDK的变化](JVM/JVM随着JDK的变化.png)\n\n<span style=\"color:red;\">1.6 运行时常量池在方法区，1.7后在堆中，1.8移除了方法区，多了元空间 </span>\n\n### 垃圾回收机制\n\n#### 标记-清楚算法\n\n(Mark-Sweep)  \n内存碎片，内存不规整\n\n#### 复制算法\n\n空间浪费，总有一半以上的空间没被使用\n\n#### 标记-整理算法\n\n(Mark-Compact)  \n内存区域块的移动，性能有所影响\n\n#### 把算法都用上\n\n分代收集，分新生代、年老代  \n并行式垃圾回收  \n\n传统的GC收集器将连续的内存空间划分为新生代，老年代和永久代（JDK 8移除了永久代，约会了元空间Metaspace），这种划分的特点是各代的存储地址（逻辑地址，下同）是连续的。如下图所示：传统GC内存布局\n\n![传统GC划分](传统GC划分.png)\n\n而G1的各代存储地址是不连续的，每一代都使用了n个不连续的大小相同的区域，每个区域占有一块连续的虚拟内存地址。如下图所示：\n\n![G1划分](G1划分.png)\n\n新生代 复制算法， 老年代 用了标记清除算法\n**G1** 不再是划分为两大块，划分得更加详细，提出了很多性能上的提升。\n\n参考文章: [美团技术团队](https://tech.meituan.com/2016/09/23/g1.html)\n\n#### G1 GC模式\n\nG1提供了两种GC模式，Young GC和混合GC，两个都是完全停止世界的。* Young GC：允许所有年轻代里的区域。通过控制年轻代的区域个数，即年轻代内存*混合GC：将所有年轻代里的区域，外加根据全局并发标记统计转换收集收益高的多个老年代区域。在用户指定的目标范围内进行调整选择收益高的老年代地区。\n\n由上面的描述可知，混合GC不是完整GC，它只能回收部分老年代的区域，如果混合GC实在无法跟上程序分配内存的速度，导致老年代填满无法继续进行混合GC，就会使用串行所以我们可以知道，G1是不提供完整GC的。\n\n上文中，多次提到了全局并发标记，它的执行过程类似CMS，但是不同的是，在G1 GC中，它主要是为混合GC提供标记服务的，而不是一次GC过程的一个必须重叠。 *并发标记（Concurrent Marking）。这个阶段从GC Root开始对堆。*并发标记（Concurrent Marking）。这个阶段从GC Root开始对堆。 *最终标记（Remark，STW）。标记那些在并发标记阶段发生变化的对象，将被回收。*清除垃圾（Cleanup）。清除空区域（没有存活对象的），加入免费列表。\n\n第一阶段初始标记是共享了Young GC的暂停，这是因为他们可以替换root scan操作，所以可以说global并发标记是伴随Young GC而发生的。第四阶段清理只是回收了没有存活对象的Region ，所以它并不需要STW。\n\n*是G1HeapWastePercent：在全局并发标记结束之后，，实际上是由一些参数控制着的，另外也控制着其中老年代Region会被选入CSet。 * G1MixedGCLiveThresholdPercent，我们可以知道旧时代地区中有多少空间要被回收，在每次YGC之后和再次发生混合GC之前，会检查垃圾占比是否达到此参数，只有达到了，下次才会发生混合GC。 ：旧世代区域中的存活对象的占比，只有在此后的参数之下，才会被选入CSet。* G1MixedGCCountTarget：一次全局并发标记之后，最大执行混合GC的次数。* G1OldCSetRegionThresholdPercent：一次混合GC中能被选入CSet的最多的上一代地区数量。\n\n除了以上的参数，G1 GC相关的其他主要的参数有：\n\n|参数|意味着|\n|:----:|:----:|:----:|\n|-XX：G1HeapRegionSize = n | 设置Region大小，并非最终值|\n|-XX：MaxGCPauseMillis| \t设置G1收集过程目标时间，设置值200ms，不是硬性条件|\n|-XX：G1NewSizePercent|新生代系数，预设值5％|\n|-XX：G1MaxNewSizePercent|新生代变量，预设值60％|\n|-XX：ParallelGCThreads|STW期间，并行GC线程数|\n|-XX：ConcGCThreads = n|\t并发标记阶段，并行执行的线程数|\n|-XX：正在启动堆占用率|\t设置触发标记周期的Java堆占用率阈值。默认值是45％。这里的java堆占比指的是non_young_capacity_bytes，包括old + humongous|\n\n### 杂\n\n多线程下 i-- 不是一个原子性操作\n\nCPU 线程 1:1 关系，时间片轮转机制\n\nAtomicInteger 底层原理  CAS (compare and swap)\n\nABA 问题\n\nSync 解决  synchronized(非公平), Lock （ReentrantLock 可重入锁）\n\n","source":"_posts/JVM.md","raw":"---\ntitle: JVM\nauthor: edxuanlen\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2020-03-12 14:52:47\nimg:\ncoverImg:\npassword:\nsummary:\ntags:\n    - Interview\n    - Java\ncategories:\n    - Java\ndescription: JVM要点\n---\n\n### JVM的内存布局\n\n![JVM内存布局](JVM.png)\n\n程序计数器: 记录程序的下一跳，像代码行号的指示器\n\nJAVA虚拟机栈: 每个方法在被调用的时候就会创建一个栈帧，每个方法从调用到执行的过程，就对应着一个栈帧入栈到出栈的过程。\n\nJAVA虚拟机堆: 是Java虚拟机所管理的内存中最大的一块。被所有线程共享的内存区域，对象实例在这里分配内存。是垃圾收集器(GC)管理的主要区域。\n\n方法区: 存储被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，运行时常量池(RunTime Constant Pool)是方法区的一部分。\n\n直接内存: 直接内存(Direct Memory) 并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。\n\n![JVM随JDK的变化](JVM/JVM随着JDK的变化.png)\n\n<span style=\"color:red;\">1.6 运行时常量池在方法区，1.7后在堆中，1.8移除了方法区，多了元空间 </span>\n\n### 垃圾回收机制\n\n#### 标记-清楚算法\n\n(Mark-Sweep)  \n内存碎片，内存不规整\n\n#### 复制算法\n\n空间浪费，总有一半以上的空间没被使用\n\n#### 标记-整理算法\n\n(Mark-Compact)  \n内存区域块的移动，性能有所影响\n\n#### 把算法都用上\n\n分代收集，分新生代、年老代  \n并行式垃圾回收  \n\n传统的GC收集器将连续的内存空间划分为新生代，老年代和永久代（JDK 8移除了永久代，约会了元空间Metaspace），这种划分的特点是各代的存储地址（逻辑地址，下同）是连续的。如下图所示：传统GC内存布局\n\n![传统GC划分](传统GC划分.png)\n\n而G1的各代存储地址是不连续的，每一代都使用了n个不连续的大小相同的区域，每个区域占有一块连续的虚拟内存地址。如下图所示：\n\n![G1划分](G1划分.png)\n\n新生代 复制算法， 老年代 用了标记清除算法\n**G1** 不再是划分为两大块，划分得更加详细，提出了很多性能上的提升。\n\n参考文章: [美团技术团队](https://tech.meituan.com/2016/09/23/g1.html)\n\n#### G1 GC模式\n\nG1提供了两种GC模式，Young GC和混合GC，两个都是完全停止世界的。* Young GC：允许所有年轻代里的区域。通过控制年轻代的区域个数，即年轻代内存*混合GC：将所有年轻代里的区域，外加根据全局并发标记统计转换收集收益高的多个老年代区域。在用户指定的目标范围内进行调整选择收益高的老年代地区。\n\n由上面的描述可知，混合GC不是完整GC，它只能回收部分老年代的区域，如果混合GC实在无法跟上程序分配内存的速度，导致老年代填满无法继续进行混合GC，就会使用串行所以我们可以知道，G1是不提供完整GC的。\n\n上文中，多次提到了全局并发标记，它的执行过程类似CMS，但是不同的是，在G1 GC中，它主要是为混合GC提供标记服务的，而不是一次GC过程的一个必须重叠。 *并发标记（Concurrent Marking）。这个阶段从GC Root开始对堆。*并发标记（Concurrent Marking）。这个阶段从GC Root开始对堆。 *最终标记（Remark，STW）。标记那些在并发标记阶段发生变化的对象，将被回收。*清除垃圾（Cleanup）。清除空区域（没有存活对象的），加入免费列表。\n\n第一阶段初始标记是共享了Young GC的暂停，这是因为他们可以替换root scan操作，所以可以说global并发标记是伴随Young GC而发生的。第四阶段清理只是回收了没有存活对象的Region ，所以它并不需要STW。\n\n*是G1HeapWastePercent：在全局并发标记结束之后，，实际上是由一些参数控制着的，另外也控制着其中老年代Region会被选入CSet。 * G1MixedGCLiveThresholdPercent，我们可以知道旧时代地区中有多少空间要被回收，在每次YGC之后和再次发生混合GC之前，会检查垃圾占比是否达到此参数，只有达到了，下次才会发生混合GC。 ：旧世代区域中的存活对象的占比，只有在此后的参数之下，才会被选入CSet。* G1MixedGCCountTarget：一次全局并发标记之后，最大执行混合GC的次数。* G1OldCSetRegionThresholdPercent：一次混合GC中能被选入CSet的最多的上一代地区数量。\n\n除了以上的参数，G1 GC相关的其他主要的参数有：\n\n|参数|意味着|\n|:----:|:----:|:----:|\n|-XX：G1HeapRegionSize = n | 设置Region大小，并非最终值|\n|-XX：MaxGCPauseMillis| \t设置G1收集过程目标时间，设置值200ms，不是硬性条件|\n|-XX：G1NewSizePercent|新生代系数，预设值5％|\n|-XX：G1MaxNewSizePercent|新生代变量，预设值60％|\n|-XX：ParallelGCThreads|STW期间，并行GC线程数|\n|-XX：ConcGCThreads = n|\t并发标记阶段，并行执行的线程数|\n|-XX：正在启动堆占用率|\t设置触发标记周期的Java堆占用率阈值。默认值是45％。这里的java堆占比指的是non_young_capacity_bytes，包括old + humongous|\n\n### 杂\n\n多线程下 i-- 不是一个原子性操作\n\nCPU 线程 1:1 关系，时间片轮转机制\n\nAtomicInteger 底层原理  CAS (compare and swap)\n\nABA 问题\n\nSync 解决  synchronized(非公平), Lock （ReentrantLock 可重入锁）\n\n","slug":"JVM","published":1,"updated":"2020-03-22T14:00:23.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n972000a24uwm14cec0z","content":"<h3 id=\"JVM的内存布局\"><a href=\"#JVM的内存布局\" class=\"headerlink\" title=\"JVM的内存布局\"></a>JVM的内存布局</h3><p><img src=\"JVM.png\" alt=\"JVM内存布局\"></p>\n<p>程序计数器: 记录程序的下一跳，像代码行号的指示器</p>\n<p>JAVA虚拟机栈: 每个方法在被调用的时候就会创建一个栈帧，每个方法从调用到执行的过程，就对应着一个栈帧入栈到出栈的过程。</p>\n<p>JAVA虚拟机堆: 是Java虚拟机所管理的内存中最大的一块。被所有线程共享的内存区域，对象实例在这里分配内存。是垃圾收集器(GC)管理的主要区域。</p>\n<p>方法区: 存储被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，运行时常量池(RunTime Constant Pool)是方法区的一部分。</p>\n<p>直接内存: 直接内存(Direct Memory) 并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。</p>\n<p><img src=\"JVM/JVM%E9%9A%8F%E7%9D%80JDK%E7%9A%84%E5%8F%98%E5%8C%96.png\" alt=\"JVM随JDK的变化\"></p>\n<p><span style=\"color:red;\">1.6 运行时常量池在方法区，1.7后在堆中，1.8移除了方法区，多了元空间 </span></p>\n<h3 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h3><h4 id=\"标记-清楚算法\"><a href=\"#标记-清楚算法\" class=\"headerlink\" title=\"标记-清楚算法\"></a>标记-清楚算法</h4><p>(Mark-Sweep)<br>内存碎片，内存不规整</p>\n<h4 id=\"复制算法\"><a href=\"#复制算法\" class=\"headerlink\" title=\"复制算法\"></a>复制算法</h4><p>空间浪费，总有一半以上的空间没被使用</p>\n<h4 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h4><p>(Mark-Compact)<br>内存区域块的移动，性能有所影响</p>\n<h4 id=\"把算法都用上\"><a href=\"#把算法都用上\" class=\"headerlink\" title=\"把算法都用上\"></a>把算法都用上</h4><p>分代收集，分新生代、年老代<br>并行式垃圾回收  </p>\n<p>传统的GC收集器将连续的内存空间划分为新生代，老年代和永久代（JDK 8移除了永久代，约会了元空间Metaspace），这种划分的特点是各代的存储地址（逻辑地址，下同）是连续的。如下图所示：传统GC内存布局</p>\n<p><img src=\"%E4%BC%A0%E7%BB%9FGC%E5%88%92%E5%88%86.png\" alt=\"传统GC划分\"></p>\n<p>而G1的各代存储地址是不连续的，每一代都使用了n个不连续的大小相同的区域，每个区域占有一块连续的虚拟内存地址。如下图所示：</p>\n<p><img src=\"G1%E5%88%92%E5%88%86.png\" alt=\"G1划分\"></p>\n<p>新生代 复制算法， 老年代 用了标记清除算法<br><strong>G1</strong> 不再是划分为两大块，划分得更加详细，提出了很多性能上的提升。</p>\n<p>参考文章: <a href=\"https://tech.meituan.com/2016/09/23/g1.html\" target=\"_blank\" rel=\"noopener\">美团技术团队</a></p>\n<h4 id=\"G1-GC模式\"><a href=\"#G1-GC模式\" class=\"headerlink\" title=\"G1 GC模式\"></a>G1 GC模式</h4><p>G1提供了两种GC模式，Young GC和混合GC，两个都是完全停止世界的。* Young GC：允许所有年轻代里的区域。通过控制年轻代的区域个数，即年轻代内存*混合GC：将所有年轻代里的区域，外加根据全局并发标记统计转换收集收益高的多个老年代区域。在用户指定的目标范围内进行调整选择收益高的老年代地区。</p>\n<p>由上面的描述可知，混合GC不是完整GC，它只能回收部分老年代的区域，如果混合GC实在无法跟上程序分配内存的速度，导致老年代填满无法继续进行混合GC，就会使用串行所以我们可以知道，G1是不提供完整GC的。</p>\n<p>上文中，多次提到了全局并发标记，它的执行过程类似CMS，但是不同的是，在G1 GC中，它主要是为混合GC提供标记服务的，而不是一次GC过程的一个必须重叠。 <em>并发标记（Concurrent Marking）。这个阶段从GC Root开始对堆。</em>并发标记（Concurrent Marking）。这个阶段从GC Root开始对堆。 <em>最终标记（Remark，STW）。标记那些在并发标记阶段发生变化的对象，将被回收。</em>清除垃圾（Cleanup）。清除空区域（没有存活对象的），加入免费列表。</p>\n<p>第一阶段初始标记是共享了Young GC的暂停，这是因为他们可以替换root scan操作，所以可以说global并发标记是伴随Young GC而发生的。第四阶段清理只是回收了没有存活对象的Region ，所以它并不需要STW。</p>\n<p><em>是G1HeapWastePercent：在全局并发标记结束之后，，实际上是由一些参数控制着的，另外也控制着其中老年代Region会被选入CSet。 * G1MixedGCLiveThresholdPercent，我们可以知道旧时代地区中有多少空间要被回收，在每次YGC之后和再次发生混合GC之前，会检查垃圾占比是否达到此参数，只有达到了，下次才会发生混合GC。 ：旧世代区域中的存活对象的占比，只有在此后的参数之下，才会被选入CSet。</em> G1MixedGCCountTarget：一次全局并发标记之后，最大执行混合GC的次数。* G1OldCSetRegionThresholdPercent：一次混合GC中能被选入CSet的最多的上一代地区数量。</p>\n<p>除了以上的参数，G1 GC相关的其他主要的参数有：</p>\n<p>|参数|意味着|<br>|:—-:|:—-:|:—-:|<br>|-XX：G1HeapRegionSize = n | 设置Region大小，并非最终值|<br>|-XX：MaxGCPauseMillis|     设置G1收集过程目标时间，设置值200ms，不是硬性条件|<br>|-XX：G1NewSizePercent|新生代系数，预设值5％|<br>|-XX：G1MaxNewSizePercent|新生代变量，预设值60％|<br>|-XX：ParallelGCThreads|STW期间，并行GC线程数|<br>|-XX：ConcGCThreads = n|    并发标记阶段，并行执行的线程数|<br>|-XX：正在启动堆占用率|    设置触发标记周期的Java堆占用率阈值。默认值是45％。这里的java堆占比指的是non_young_capacity_bytes，包括old + humongous|</p>\n<h3 id=\"杂\"><a href=\"#杂\" class=\"headerlink\" title=\"杂\"></a>杂</h3><p>多线程下 i– 不是一个原子性操作</p>\n<p>CPU 线程 1:1 关系，时间片轮转机制</p>\n<p>AtomicInteger 底层原理  CAS (compare and swap)</p>\n<p>ABA 问题</p>\n<p>Sync 解决  synchronized(非公平), Lock （ReentrantLock 可重入锁）</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JVM的内存布局\"><a href=\"#JVM的内存布局\" class=\"headerlink\" title=\"JVM的内存布局\"></a>JVM的内存布局</h3><p><img src=\"JVM.png\" alt=\"JVM内存布局\"></p>\n<p>程序计数器: 记录程序的下一跳，像代码行号的指示器</p>\n<p>JAVA虚拟机栈: 每个方法在被调用的时候就会创建一个栈帧，每个方法从调用到执行的过程，就对应着一个栈帧入栈到出栈的过程。</p>\n<p>JAVA虚拟机堆: 是Java虚拟机所管理的内存中最大的一块。被所有线程共享的内存区域，对象实例在这里分配内存。是垃圾收集器(GC)管理的主要区域。</p>\n<p>方法区: 存储被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，运行时常量池(RunTime Constant Pool)是方法区的一部分。</p>\n<p>直接内存: 直接内存(Direct Memory) 并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。</p>\n<p><img src=\"JVM/JVM%E9%9A%8F%E7%9D%80JDK%E7%9A%84%E5%8F%98%E5%8C%96.png\" alt=\"JVM随JDK的变化\"></p>\n<p><span style=\"color:red;\">1.6 运行时常量池在方法区，1.7后在堆中，1.8移除了方法区，多了元空间 </span></p>\n<h3 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h3><h4 id=\"标记-清楚算法\"><a href=\"#标记-清楚算法\" class=\"headerlink\" title=\"标记-清楚算法\"></a>标记-清楚算法</h4><p>(Mark-Sweep)<br>内存碎片，内存不规整</p>\n<h4 id=\"复制算法\"><a href=\"#复制算法\" class=\"headerlink\" title=\"复制算法\"></a>复制算法</h4><p>空间浪费，总有一半以上的空间没被使用</p>\n<h4 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h4><p>(Mark-Compact)<br>内存区域块的移动，性能有所影响</p>\n<h4 id=\"把算法都用上\"><a href=\"#把算法都用上\" class=\"headerlink\" title=\"把算法都用上\"></a>把算法都用上</h4><p>分代收集，分新生代、年老代<br>并行式垃圾回收  </p>\n<p>传统的GC收集器将连续的内存空间划分为新生代，老年代和永久代（JDK 8移除了永久代，约会了元空间Metaspace），这种划分的特点是各代的存储地址（逻辑地址，下同）是连续的。如下图所示：传统GC内存布局</p>\n<p><img src=\"%E4%BC%A0%E7%BB%9FGC%E5%88%92%E5%88%86.png\" alt=\"传统GC划分\"></p>\n<p>而G1的各代存储地址是不连续的，每一代都使用了n个不连续的大小相同的区域，每个区域占有一块连续的虚拟内存地址。如下图所示：</p>\n<p><img src=\"G1%E5%88%92%E5%88%86.png\" alt=\"G1划分\"></p>\n<p>新生代 复制算法， 老年代 用了标记清除算法<br><strong>G1</strong> 不再是划分为两大块，划分得更加详细，提出了很多性能上的提升。</p>\n<p>参考文章: <a href=\"https://tech.meituan.com/2016/09/23/g1.html\" target=\"_blank\" rel=\"noopener\">美团技术团队</a></p>\n<h4 id=\"G1-GC模式\"><a href=\"#G1-GC模式\" class=\"headerlink\" title=\"G1 GC模式\"></a>G1 GC模式</h4><p>G1提供了两种GC模式，Young GC和混合GC，两个都是完全停止世界的。* Young GC：允许所有年轻代里的区域。通过控制年轻代的区域个数，即年轻代内存*混合GC：将所有年轻代里的区域，外加根据全局并发标记统计转换收集收益高的多个老年代区域。在用户指定的目标范围内进行调整选择收益高的老年代地区。</p>\n<p>由上面的描述可知，混合GC不是完整GC，它只能回收部分老年代的区域，如果混合GC实在无法跟上程序分配内存的速度，导致老年代填满无法继续进行混合GC，就会使用串行所以我们可以知道，G1是不提供完整GC的。</p>\n<p>上文中，多次提到了全局并发标记，它的执行过程类似CMS，但是不同的是，在G1 GC中，它主要是为混合GC提供标记服务的，而不是一次GC过程的一个必须重叠。 <em>并发标记（Concurrent Marking）。这个阶段从GC Root开始对堆。</em>并发标记（Concurrent Marking）。这个阶段从GC Root开始对堆。 <em>最终标记（Remark，STW）。标记那些在并发标记阶段发生变化的对象，将被回收。</em>清除垃圾（Cleanup）。清除空区域（没有存活对象的），加入免费列表。</p>\n<p>第一阶段初始标记是共享了Young GC的暂停，这是因为他们可以替换root scan操作，所以可以说global并发标记是伴随Young GC而发生的。第四阶段清理只是回收了没有存活对象的Region ，所以它并不需要STW。</p>\n<p><em>是G1HeapWastePercent：在全局并发标记结束之后，，实际上是由一些参数控制着的，另外也控制着其中老年代Region会被选入CSet。 * G1MixedGCLiveThresholdPercent，我们可以知道旧时代地区中有多少空间要被回收，在每次YGC之后和再次发生混合GC之前，会检查垃圾占比是否达到此参数，只有达到了，下次才会发生混合GC。 ：旧世代区域中的存活对象的占比，只有在此后的参数之下，才会被选入CSet。</em> G1MixedGCCountTarget：一次全局并发标记之后，最大执行混合GC的次数。* G1OldCSetRegionThresholdPercent：一次混合GC中能被选入CSet的最多的上一代地区数量。</p>\n<p>除了以上的参数，G1 GC相关的其他主要的参数有：</p>\n<p>|参数|意味着|<br>|:—-:|:—-:|:—-:|<br>|-XX：G1HeapRegionSize = n | 设置Region大小，并非最终值|<br>|-XX：MaxGCPauseMillis|     设置G1收集过程目标时间，设置值200ms，不是硬性条件|<br>|-XX：G1NewSizePercent|新生代系数，预设值5％|<br>|-XX：G1MaxNewSizePercent|新生代变量，预设值60％|<br>|-XX：ParallelGCThreads|STW期间，并行GC线程数|<br>|-XX：ConcGCThreads = n|    并发标记阶段，并行执行的线程数|<br>|-XX：正在启动堆占用率|    设置触发标记周期的Java堆占用率阈值。默认值是45％。这里的java堆占比指的是non_young_capacity_bytes，包括old + humongous|</p>\n<h3 id=\"杂\"><a href=\"#杂\" class=\"headerlink\" title=\"杂\"></a>杂</h3><p>多线程下 i– 不是一个原子性操作</p>\n<p>CPU 线程 1:1 关系，时间片轮转机制</p>\n<p>AtomicInteger 底层原理  CAS (compare and swap)</p>\n<p>ABA 问题</p>\n<p>Sync 解决  synchronized(非公平), Lock （ReentrantLock 可重入锁）</p>\n"},{"title":"Linux_Communication","date":"2018-03-31T12:17:43.000Z","description":"linux 通信，操作系统的一些学习记录。","_content":"\n\n## 使用信号\n\n信号在头文件signal.h中定义，信号都以SIG开头\n常用信号有\n\n- SIGALRM (由alarm函数设置的定时器产生)\n- SIGHUP由一个处于非连接状态的终端发送给控制进程，或者由控制进程在自身结束时发送给每个前台进程\n- SIGINT一般由Ctrl+C或者预先设置好的终端字符产生\n- SIGPIPE如果向管道写数据时没有与之对应的读进程产生的信号\n- SIGTERM作为一个请求被发送，要求进程结束运行。(是KILL命令默认发送的信号)\n- SIGUSR1,SIGUSR2进程之间可以用这个信号进行通信，例如让进程报告状态信息\n\n### 信号处理--signal函数\n\n```C++\n# include <bits/stdc++.h>\n# include <unistd.h>\n\n// 原型\n// void (*signal(int sig, void (*func)(int)))(int);\nvoid handle(int sign){\n    //sign 是信号类型\n    signal(SIGINT, SIG_DFL); // 恢复终端中断信号的默认行为\n}\n\nint main(){\n    //改变终端中断信号SIGINT的默认行为，使之执行handle函数\n\tsignal(SIGINT, handle);\n    while (true){\n        printf(\"i'm running\\n\");\n        sleep(1);\n    }\n    return 0;\n}\n```\n\n### 信号处理--sigaction函数\n\n```C++\n# include <bits/stdc++.h>\n# include <unistd.h>\n\n// 原型\n// int sigaction(int sig, const struct sigaction *act, struct sigaction *oact);\n\n# include <bits/stdc++.h>\n#include <unistd.h>\n\nvoid handle(int sign){\n}\n\nint main(){\n    struct sigaction act;\n    act.sa_handler = handle;\n    // 创建空的信号屏蔽集，即不屏蔽任何信息\n    sigemptyset(&act.sa_mask);\n    // 使sigaction函数重置为默认行为\n    act.sa_flags = SA_RESETHAND;\n    sigaction(SIGINT, &act, 0);\n    while (true){\n        printf(\"i'm running\\n\");\n        sleep(1);\n    }\n    return 0;\n}\n```\n\n### 发送信号--kill & alarm\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\n// int kill (pid_t pid, int sig);\n// unsigned int alarm(unsigned int seconds);\n```\n\n> kill调用失败返回-1，调用失败通常有三大原因：\n> 给定的信号无效（errno = EINVAL)\n> 发送权限不够( errno = EPERM ）\n> 目标进程不存在( errno = ESRCH )\n\n## 使用信号量\n\n### semget函数\n\n```C++\n// 原型\n// int semget(key_t key, int num_sems, int sem_flags);\n// int semop(int sem_id, struct sembuf *sem_opa, size_t num_sem_ops);\n// semctl\n\n```\n","source":"_posts/Linux_Communication.md","raw":"---\ntitle: Linux_Communication \ndate: 2018-03-31 20:17:43\ntags: \n    - Linux\ncategories: 系统\ndescription: linux 通信，操作系统的一些学习记录。\n---\n\n\n## 使用信号\n\n信号在头文件signal.h中定义，信号都以SIG开头\n常用信号有\n\n- SIGALRM (由alarm函数设置的定时器产生)\n- SIGHUP由一个处于非连接状态的终端发送给控制进程，或者由控制进程在自身结束时发送给每个前台进程\n- SIGINT一般由Ctrl+C或者预先设置好的终端字符产生\n- SIGPIPE如果向管道写数据时没有与之对应的读进程产生的信号\n- SIGTERM作为一个请求被发送，要求进程结束运行。(是KILL命令默认发送的信号)\n- SIGUSR1,SIGUSR2进程之间可以用这个信号进行通信，例如让进程报告状态信息\n\n### 信号处理--signal函数\n\n```C++\n# include <bits/stdc++.h>\n# include <unistd.h>\n\n// 原型\n// void (*signal(int sig, void (*func)(int)))(int);\nvoid handle(int sign){\n    //sign 是信号类型\n    signal(SIGINT, SIG_DFL); // 恢复终端中断信号的默认行为\n}\n\nint main(){\n    //改变终端中断信号SIGINT的默认行为，使之执行handle函数\n\tsignal(SIGINT, handle);\n    while (true){\n        printf(\"i'm running\\n\");\n        sleep(1);\n    }\n    return 0;\n}\n```\n\n### 信号处理--sigaction函数\n\n```C++\n# include <bits/stdc++.h>\n# include <unistd.h>\n\n// 原型\n// int sigaction(int sig, const struct sigaction *act, struct sigaction *oact);\n\n# include <bits/stdc++.h>\n#include <unistd.h>\n\nvoid handle(int sign){\n}\n\nint main(){\n    struct sigaction act;\n    act.sa_handler = handle;\n    // 创建空的信号屏蔽集，即不屏蔽任何信息\n    sigemptyset(&act.sa_mask);\n    // 使sigaction函数重置为默认行为\n    act.sa_flags = SA_RESETHAND;\n    sigaction(SIGINT, &act, 0);\n    while (true){\n        printf(\"i'm running\\n\");\n        sleep(1);\n    }\n    return 0;\n}\n```\n\n### 发送信号--kill & alarm\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\n// int kill (pid_t pid, int sig);\n// unsigned int alarm(unsigned int seconds);\n```\n\n> kill调用失败返回-1，调用失败通常有三大原因：\n> 给定的信号无效（errno = EINVAL)\n> 发送权限不够( errno = EPERM ）\n> 目标进程不存在( errno = ESRCH )\n\n## 使用信号量\n\n### semget函数\n\n```C++\n// 原型\n// int semget(key_t key, int num_sems, int sem_flags);\n// int semop(int sem_id, struct sembuf *sem_opa, size_t num_sem_ops);\n// semctl\n\n```\n","slug":"Linux_Communication","published":1,"updated":"2020-02-06T22:40:22.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n97d000b24uwrvvg8s21","content":"<h2 id=\"使用信号\"><a href=\"#使用信号\" class=\"headerlink\" title=\"使用信号\"></a>使用信号</h2><p>信号在头文件signal.h中定义，信号都以SIG开头<br>常用信号有</p>\n<ul>\n<li>SIGALRM (由alarm函数设置的定时器产生)</li>\n<li>SIGHUP由一个处于非连接状态的终端发送给控制进程，或者由控制进程在自身结束时发送给每个前台进程</li>\n<li>SIGINT一般由Ctrl+C或者预先设置好的终端字符产生</li>\n<li>SIGPIPE如果向管道写数据时没有与之对应的读进程产生的信号</li>\n<li>SIGTERM作为一个请求被发送，要求进程结束运行。(是KILL命令默认发送的信号)</li>\n<li>SIGUSR1,SIGUSR2进程之间可以用这个信号进行通信，例如让进程报告状态信息</li>\n</ul>\n<h3 id=\"信号处理–signal函数\"><a href=\"#信号处理–signal函数\" class=\"headerlink\" title=\"信号处理–signal函数\"></a>信号处理–signal函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原型</span></span><br><span class=\"line\"><span class=\"comment\">// void (*signal(int sig, void (*func)(int)))(int);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(<span class=\"keyword\">int</span> sign)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//sign 是信号类型</span></span><br><span class=\"line\">    signal(SIGINT, SIG_DFL); <span class=\"comment\">// 恢复终端中断信号的默认行为</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//改变终端中断信号SIGINT的默认行为，使之执行handle函数</span></span><br><span class=\"line\">\tsignal(SIGINT, handle);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"i'm running\\n\"</span>);</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"信号处理–sigaction函数\"><a href=\"#信号处理–sigaction函数\" class=\"headerlink\" title=\"信号处理–sigaction函数\"></a>信号处理–sigaction函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原型</span></span><br><span class=\"line\"><span class=\"comment\">// int sigaction(int sig, const struct sigaction *act, struct sigaction *oact);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(<span class=\"keyword\">int</span> sign)</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">act</span>;</span></span><br><span class=\"line\">    act.sa_handler = handle;</span><br><span class=\"line\">    <span class=\"comment\">// 创建空的信号屏蔽集，即不屏蔽任何信息</span></span><br><span class=\"line\">    sigemptyset(&amp;act.sa_mask);</span><br><span class=\"line\">    <span class=\"comment\">// 使sigaction函数重置为默认行为</span></span><br><span class=\"line\">    act.sa_flags = SA_RESETHAND;</span><br><span class=\"line\">    sigaction(SIGINT, &amp;act, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"i'm running\\n\"</span>);</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送信号–kill-amp-alarm\"><a href=\"#发送信号–kill-amp-alarm\" class=\"headerlink\" title=\"发送信号–kill &amp; alarm\"></a>发送信号–kill &amp; alarm</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// int kill (pid_t pid, int sig);</span></span><br><span class=\"line\"><span class=\"comment\">// unsigned int alarm(unsigned int seconds);</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>kill调用失败返回-1，调用失败通常有三大原因：<br>给定的信号无效（errno = EINVAL)<br>发送权限不够( errno = EPERM ）<br>目标进程不存在( errno = ESRCH )</p>\n</blockquote>\n<h2 id=\"使用信号量\"><a href=\"#使用信号量\" class=\"headerlink\" title=\"使用信号量\"></a>使用信号量</h2><h3 id=\"semget函数\"><a href=\"#semget函数\" class=\"headerlink\" title=\"semget函数\"></a>semget函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原型</span></span><br><span class=\"line\"><span class=\"comment\">// int semget(key_t key, int num_sems, int sem_flags);</span></span><br><span class=\"line\"><span class=\"comment\">// int semop(int sem_id, struct sembuf *sem_opa, size_t num_sem_ops);</span></span><br><span class=\"line\"><span class=\"comment\">// semctl</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用信号\"><a href=\"#使用信号\" class=\"headerlink\" title=\"使用信号\"></a>使用信号</h2><p>信号在头文件signal.h中定义，信号都以SIG开头<br>常用信号有</p>\n<ul>\n<li>SIGALRM (由alarm函数设置的定时器产生)</li>\n<li>SIGHUP由一个处于非连接状态的终端发送给控制进程，或者由控制进程在自身结束时发送给每个前台进程</li>\n<li>SIGINT一般由Ctrl+C或者预先设置好的终端字符产生</li>\n<li>SIGPIPE如果向管道写数据时没有与之对应的读进程产生的信号</li>\n<li>SIGTERM作为一个请求被发送，要求进程结束运行。(是KILL命令默认发送的信号)</li>\n<li>SIGUSR1,SIGUSR2进程之间可以用这个信号进行通信，例如让进程报告状态信息</li>\n</ul>\n<h3 id=\"信号处理–signal函数\"><a href=\"#信号处理–signal函数\" class=\"headerlink\" title=\"信号处理–signal函数\"></a>信号处理–signal函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原型</span></span><br><span class=\"line\"><span class=\"comment\">// void (*signal(int sig, void (*func)(int)))(int);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(<span class=\"keyword\">int</span> sign)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//sign 是信号类型</span></span><br><span class=\"line\">    signal(SIGINT, SIG_DFL); <span class=\"comment\">// 恢复终端中断信号的默认行为</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//改变终端中断信号SIGINT的默认行为，使之执行handle函数</span></span><br><span class=\"line\">\tsignal(SIGINT, handle);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"i'm running\\n\"</span>);</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"信号处理–sigaction函数\"><a href=\"#信号处理–sigaction函数\" class=\"headerlink\" title=\"信号处理–sigaction函数\"></a>信号处理–sigaction函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原型</span></span><br><span class=\"line\"><span class=\"comment\">// int sigaction(int sig, const struct sigaction *act, struct sigaction *oact);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(<span class=\"keyword\">int</span> sign)</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">act</span>;</span></span><br><span class=\"line\">    act.sa_handler = handle;</span><br><span class=\"line\">    <span class=\"comment\">// 创建空的信号屏蔽集，即不屏蔽任何信息</span></span><br><span class=\"line\">    sigemptyset(&amp;act.sa_mask);</span><br><span class=\"line\">    <span class=\"comment\">// 使sigaction函数重置为默认行为</span></span><br><span class=\"line\">    act.sa_flags = SA_RESETHAND;</span><br><span class=\"line\">    sigaction(SIGINT, &amp;act, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"i'm running\\n\"</span>);</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送信号–kill-amp-alarm\"><a href=\"#发送信号–kill-amp-alarm\" class=\"headerlink\" title=\"发送信号–kill &amp; alarm\"></a>发送信号–kill &amp; alarm</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// int kill (pid_t pid, int sig);</span></span><br><span class=\"line\"><span class=\"comment\">// unsigned int alarm(unsigned int seconds);</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>kill调用失败返回-1，调用失败通常有三大原因：<br>给定的信号无效（errno = EINVAL)<br>发送权限不够( errno = EPERM ）<br>目标进程不存在( errno = ESRCH )</p>\n</blockquote>\n<h2 id=\"使用信号量\"><a href=\"#使用信号量\" class=\"headerlink\" title=\"使用信号量\"></a>使用信号量</h2><h3 id=\"semget函数\"><a href=\"#semget函数\" class=\"headerlink\" title=\"semget函数\"></a>semget函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原型</span></span><br><span class=\"line\"><span class=\"comment\">// int semget(key_t key, int num_sems, int sem_flags);</span></span><br><span class=\"line\"><span class=\"comment\">// int semop(int sem_id, struct sembuf *sem_opa, size_t num_sem_ops);</span></span><br><span class=\"line\"><span class=\"comment\">// semctl</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"PyMySQL初识","date":"2018-09-03T14:53:15.000Z","description":"Python与MySQL的连接。","_content":"\n先用pip 下载PyMySQL的库\n然后就是mysql 的配置\n然后是sql语句的使用\n了解MySQL的游标含义\n使用pymysql对MySQL进行操作\n\n坑： ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\n不能直接输入mysql连接\n官网有很全的安装指南\nhttps://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#apt-repo-fresh-install\n\n安装后登录的时候输入\nmysql -h<locolhost> -uroot -p<密码>\n记得 -h和-p后面都不能加空格\n如 mysql -h127.0.0.1 -uroot -p88888888\n导出问题（https://stackoverflow.com/questions/34102562/mysql-error-1290-hy000-secure-file-priv-option）\n\nshow variables like '%secure%';\n找出secure_file_priv的目录，输出到该目录下即可\n\n## 题目：做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）？并将其保存到MySQL关系型数据库中。\n## 代码：\n```python3\nimport random\nimport pymysql\n\n## 创建新的数据库\ncon = pymysql.connect(host='127.0.0.1', user='root', passwd='88609723')\ncursor = con.cursor() # 获取游标\nsql = 'DROP DATABASE Code'\ncursor.execute(sql)\nsql = 'CREATE DATABASE Code'\ncursor.execute(sql)\nsql = 'USE Code'\ncursor.execute(sql)\nsql = 'CREATE TABLE Code(Code_id int NOT NULL,Code VARCHAR(100) NOT NULL)'\ncursor.execute(sql)\n\n# 输入文件\n# file = open('code.txt','w')\n# for j in range(200):\n#     Code = ''\n#     Code = Code + str(j + 1) + ': '\n#     for i in range(16):\n#         f = random.randint(0,2) # randint 跟range范围不同\n#         if f == 0:\n#             Code = Code + chr(random.randint(48,57))\n#         if f == 1:\n#             Code = Code + chr(random.randint(65,90))\n#         if f == 2:\n#             Code = Code + chr(random.randint(97,122))\n#         if (i + 1) % 4 == 0 and i != 15:\n#             Code = Code + '-'\n#     Code = Code + '\\n'\n#     file.write(Code)\n\nfor j in range(200):\n    Code = ''\n    for i in range(16):\n        f = random.randint(0,2)\n        if f == 0:\n            Code = Code + chr(random.randint(48,57))\n        if f == 1:\n            Code = Code + chr(random.randint(65,90))\n        if f == 2:\n            Code = Code + chr(random.randint(97,122))\n        if (i + 1) % 4 == 0 and i != 15:\n            Code = Code + '-'\n    sql = 'INSERT INTO Code(Code_id,Code) VALUES ( \"%d\",\"%s\")' %((j+1),Code)\n    cursor.execute(sql)\n\n\nsql = ' SELECT * FROM Code INTO OUTFILE \"/var/lib/mysql-files/Code.txt\" '\ncursor.execute(sql)\n\n# 关闭连接，释放资源\ncursor.close()\ncon.commit()\ncon.close()\n```\n","source":"_posts/PyMySQL初识.md","raw":"---\ntitle: PyMySQL初识\ndate: 2018-09-03 22:53:15\ntags:\n    - python3小练手\ncategories:\n    - Python3\ndescription:\n    Python与MySQL的连接。\n\n---\n\n先用pip 下载PyMySQL的库\n然后就是mysql 的配置\n然后是sql语句的使用\n了解MySQL的游标含义\n使用pymysql对MySQL进行操作\n\n坑： ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\n不能直接输入mysql连接\n官网有很全的安装指南\nhttps://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#apt-repo-fresh-install\n\n安装后登录的时候输入\nmysql -h<locolhost> -uroot -p<密码>\n记得 -h和-p后面都不能加空格\n如 mysql -h127.0.0.1 -uroot -p88888888\n导出问题（https://stackoverflow.com/questions/34102562/mysql-error-1290-hy000-secure-file-priv-option）\n\nshow variables like '%secure%';\n找出secure_file_priv的目录，输出到该目录下即可\n\n## 题目：做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）？并将其保存到MySQL关系型数据库中。\n## 代码：\n```python3\nimport random\nimport pymysql\n\n## 创建新的数据库\ncon = pymysql.connect(host='127.0.0.1', user='root', passwd='88609723')\ncursor = con.cursor() # 获取游标\nsql = 'DROP DATABASE Code'\ncursor.execute(sql)\nsql = 'CREATE DATABASE Code'\ncursor.execute(sql)\nsql = 'USE Code'\ncursor.execute(sql)\nsql = 'CREATE TABLE Code(Code_id int NOT NULL,Code VARCHAR(100) NOT NULL)'\ncursor.execute(sql)\n\n# 输入文件\n# file = open('code.txt','w')\n# for j in range(200):\n#     Code = ''\n#     Code = Code + str(j + 1) + ': '\n#     for i in range(16):\n#         f = random.randint(0,2) # randint 跟range范围不同\n#         if f == 0:\n#             Code = Code + chr(random.randint(48,57))\n#         if f == 1:\n#             Code = Code + chr(random.randint(65,90))\n#         if f == 2:\n#             Code = Code + chr(random.randint(97,122))\n#         if (i + 1) % 4 == 0 and i != 15:\n#             Code = Code + '-'\n#     Code = Code + '\\n'\n#     file.write(Code)\n\nfor j in range(200):\n    Code = ''\n    for i in range(16):\n        f = random.randint(0,2)\n        if f == 0:\n            Code = Code + chr(random.randint(48,57))\n        if f == 1:\n            Code = Code + chr(random.randint(65,90))\n        if f == 2:\n            Code = Code + chr(random.randint(97,122))\n        if (i + 1) % 4 == 0 and i != 15:\n            Code = Code + '-'\n    sql = 'INSERT INTO Code(Code_id,Code) VALUES ( \"%d\",\"%s\")' %((j+1),Code)\n    cursor.execute(sql)\n\n\nsql = ' SELECT * FROM Code INTO OUTFILE \"/var/lib/mysql-files/Code.txt\" '\ncursor.execute(sql)\n\n# 关闭连接，释放资源\ncursor.close()\ncon.commit()\ncon.close()\n```\n","slug":"PyMySQL初识","published":1,"updated":"2020-02-06T22:40:22.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n97k000f24uwt01k1yjm","content":"<p>先用pip 下载PyMySQL的库<br>然后就是mysql 的配置<br>然后是sql语句的使用<br>了解MySQL的游标含义<br>使用pymysql对MySQL进行操作</p>\n<p>坑： ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’ (2)<br>不能直接输入mysql连接<br>官网有很全的安装指南<br><a href=\"https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#apt-repo-fresh-install\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#apt-repo-fresh-install</a></p>\n<p>安装后登录的时候输入<br>mysql -h<locolhost> -uroot -p&lt;密码&gt;<br>记得 -h和-p后面都不能加空格<br>如 mysql -h127.0.0.1 -uroot -p88888888<br>导出问题（<a href=\"https://stackoverflow.com/questions/34102562/mysql-error-1290-hy000-secure-file-priv-option）\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/34102562/mysql-error-1290-hy000-secure-file-priv-option）</a></locolhost></p>\n<p>show variables like ‘%secure%’;<br>找出secure_file_priv的目录，输出到该目录下即可</p>\n<h2 id=\"题目：做为-Apple-Store-App-独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用-Python-如何生成-200-个激活码（或者优惠券）？并将其保存到MySQL关系型数据库中。\"><a href=\"#题目：做为-Apple-Store-App-独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用-Python-如何生成-200-个激活码（或者优惠券）？并将其保存到MySQL关系型数据库中。\" class=\"headerlink\" title=\"题目：做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）？并将其保存到MySQL关系型数据库中。\"></a>题目：做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）？并将其保存到MySQL关系型数据库中。</h2><h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\"></span><br><span class=\"line\">## 创建新的数据库</span><br><span class=\"line\">con = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, passwd=&apos;88609723&apos;)</span><br><span class=\"line\">cursor = con.cursor() # 获取游标</span><br><span class=\"line\">sql = &apos;DROP DATABASE Code&apos;</span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\">sql = &apos;CREATE DATABASE Code&apos;</span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\">sql = &apos;USE Code&apos;</span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\">sql = &apos;CREATE TABLE Code(Code_id int NOT NULL,Code VARCHAR(100) NOT NULL)&apos;</span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\"># 输入文件</span><br><span class=\"line\"># file = open(&apos;code.txt&apos;,&apos;w&apos;)</span><br><span class=\"line\"># for j in range(200):</span><br><span class=\"line\">#     Code = &apos;&apos;</span><br><span class=\"line\">#     Code = Code + str(j + 1) + &apos;: &apos;</span><br><span class=\"line\">#     for i in range(16):</span><br><span class=\"line\">#         f = random.randint(0,2) # randint 跟range范围不同</span><br><span class=\"line\">#         if f == 0:</span><br><span class=\"line\">#             Code = Code + chr(random.randint(48,57))</span><br><span class=\"line\">#         if f == 1:</span><br><span class=\"line\">#             Code = Code + chr(random.randint(65,90))</span><br><span class=\"line\">#         if f == 2:</span><br><span class=\"line\">#             Code = Code + chr(random.randint(97,122))</span><br><span class=\"line\">#         if (i + 1) % 4 == 0 and i != 15:</span><br><span class=\"line\">#             Code = Code + &apos;-&apos;</span><br><span class=\"line\">#     Code = Code + &apos;\\n&apos;</span><br><span class=\"line\">#     file.write(Code)</span><br><span class=\"line\"></span><br><span class=\"line\">for j in range(200):</span><br><span class=\"line\">    Code = &apos;&apos;</span><br><span class=\"line\">    for i in range(16):</span><br><span class=\"line\">        f = random.randint(0,2)</span><br><span class=\"line\">        if f == 0:</span><br><span class=\"line\">            Code = Code + chr(random.randint(48,57))</span><br><span class=\"line\">        if f == 1:</span><br><span class=\"line\">            Code = Code + chr(random.randint(65,90))</span><br><span class=\"line\">        if f == 2:</span><br><span class=\"line\">            Code = Code + chr(random.randint(97,122))</span><br><span class=\"line\">        if (i + 1) % 4 == 0 and i != 15:</span><br><span class=\"line\">            Code = Code + &apos;-&apos;</span><br><span class=\"line\">    sql = &apos;INSERT INTO Code(Code_id,Code) VALUES ( &quot;%d&quot;,&quot;%s&quot;)&apos; %((j+1),Code)</span><br><span class=\"line\">    cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sql = &apos; SELECT * FROM Code INTO OUTFILE &quot;/var/lib/mysql-files/Code.txt&quot; &apos;</span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭连接，释放资源</span><br><span class=\"line\">cursor.close()</span><br><span class=\"line\">con.commit()</span><br><span class=\"line\">con.close()</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>先用pip 下载PyMySQL的库<br>然后就是mysql 的配置<br>然后是sql语句的使用<br>了解MySQL的游标含义<br>使用pymysql对MySQL进行操作</p>\n<p>坑： ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’ (2)<br>不能直接输入mysql连接<br>官网有很全的安装指南<br><a href=\"https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#apt-repo-fresh-install\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#apt-repo-fresh-install</a></p>\n<p>安装后登录的时候输入<br>mysql -h<locolhost> -uroot -p&lt;密码&gt;<br>记得 -h和-p后面都不能加空格<br>如 mysql -h127.0.0.1 -uroot -p88888888<br>导出问题（<a href=\"https://stackoverflow.com/questions/34102562/mysql-error-1290-hy000-secure-file-priv-option）\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/34102562/mysql-error-1290-hy000-secure-file-priv-option）</a></locolhost></p>\n<p>show variables like ‘%secure%’;<br>找出secure_file_priv的目录，输出到该目录下即可</p>\n<h2 id=\"题目：做为-Apple-Store-App-独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用-Python-如何生成-200-个激活码（或者优惠券）？并将其保存到MySQL关系型数据库中。\"><a href=\"#题目：做为-Apple-Store-App-独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用-Python-如何生成-200-个激活码（或者优惠券）？并将其保存到MySQL关系型数据库中。\" class=\"headerlink\" title=\"题目：做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）？并将其保存到MySQL关系型数据库中。\"></a>题目：做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）？并将其保存到MySQL关系型数据库中。</h2><h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\"></span><br><span class=\"line\">## 创建新的数据库</span><br><span class=\"line\">con = pymysql.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, passwd=&apos;88609723&apos;)</span><br><span class=\"line\">cursor = con.cursor() # 获取游标</span><br><span class=\"line\">sql = &apos;DROP DATABASE Code&apos;</span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\">sql = &apos;CREATE DATABASE Code&apos;</span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\">sql = &apos;USE Code&apos;</span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\">sql = &apos;CREATE TABLE Code(Code_id int NOT NULL,Code VARCHAR(100) NOT NULL)&apos;</span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\"># 输入文件</span><br><span class=\"line\"># file = open(&apos;code.txt&apos;,&apos;w&apos;)</span><br><span class=\"line\"># for j in range(200):</span><br><span class=\"line\">#     Code = &apos;&apos;</span><br><span class=\"line\">#     Code = Code + str(j + 1) + &apos;: &apos;</span><br><span class=\"line\">#     for i in range(16):</span><br><span class=\"line\">#         f = random.randint(0,2) # randint 跟range范围不同</span><br><span class=\"line\">#         if f == 0:</span><br><span class=\"line\">#             Code = Code + chr(random.randint(48,57))</span><br><span class=\"line\">#         if f == 1:</span><br><span class=\"line\">#             Code = Code + chr(random.randint(65,90))</span><br><span class=\"line\">#         if f == 2:</span><br><span class=\"line\">#             Code = Code + chr(random.randint(97,122))</span><br><span class=\"line\">#         if (i + 1) % 4 == 0 and i != 15:</span><br><span class=\"line\">#             Code = Code + &apos;-&apos;</span><br><span class=\"line\">#     Code = Code + &apos;\\n&apos;</span><br><span class=\"line\">#     file.write(Code)</span><br><span class=\"line\"></span><br><span class=\"line\">for j in range(200):</span><br><span class=\"line\">    Code = &apos;&apos;</span><br><span class=\"line\">    for i in range(16):</span><br><span class=\"line\">        f = random.randint(0,2)</span><br><span class=\"line\">        if f == 0:</span><br><span class=\"line\">            Code = Code + chr(random.randint(48,57))</span><br><span class=\"line\">        if f == 1:</span><br><span class=\"line\">            Code = Code + chr(random.randint(65,90))</span><br><span class=\"line\">        if f == 2:</span><br><span class=\"line\">            Code = Code + chr(random.randint(97,122))</span><br><span class=\"line\">        if (i + 1) % 4 == 0 and i != 15:</span><br><span class=\"line\">            Code = Code + &apos;-&apos;</span><br><span class=\"line\">    sql = &apos;INSERT INTO Code(Code_id,Code) VALUES ( &quot;%d&quot;,&quot;%s&quot;)&apos; %((j+1),Code)</span><br><span class=\"line\">    cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sql = &apos; SELECT * FROM Code INTO OUTFILE &quot;/var/lib/mysql-files/Code.txt&quot; &apos;</span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭连接，释放资源</span><br><span class=\"line\">cursor.close()</span><br><span class=\"line\">con.commit()</span><br><span class=\"line\">con.close()</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Python3 图像的基本处理","date":"2018-09-03T02:44:02.000Z","description":"对图像的基本处理","_content":"\n\n# python3 图像的基本处理\n## 图像的大小\n```python3\njpg = Image.open(\"**.jpg\")\nx , y = jpg.size\n```\n此时， xy分别为图像的高和宽\n\n官方文档如下：\nhttps://pillow.readthedocs.io/en/4.0.x/reference/ImageDraw.html\n\n```python3\nfrom PIL import Image, ImageDraw , ImageFont\n\njpg = Image.open(\"old.jpg\")\ndraw = ImageDraw.Draw(jpg)\nx , y = jpg.size\nprint (x,y)\nfont = ImageFont.truetype('Ubuntu-RI.ttf', 40)\ndraw.text((250 , 20), \"中文？\", \"red\" , font = font )\n# jpg.save(\"old.jpg\")\njpg.show()\n```\n\n## 题目：\n将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 类似于图中效果\n\n## 代码：\n```python\nfrom PIL import Image, ImageDraw , ImageFont\njpg = Image.open(\"new.jpg\")\n#\ndraw = ImageDraw.Draw(jpg)\nx , y = jpg.size\nprint (x,y)\n# draw.test( (10, y - 40) , \"4\" , \"red\" , font = 'LiberationSans-Regular.ttf')\n\nfont = ImageFont.truetype('Ubuntu-RI.ttf', 40)\ndraw.text((250 , 20), \"中文？\", \"red\" , font =  font )\njpg.save(\"new.jpg\")\n\njpg.show()\n```\n\n## 效果\n{% asset_img 1.jpg %}\n","source":"_posts/Python3-PIL图像处理.md","raw":"---\ntitle: Python3 图像的基本处理\ndate: 2018-09-03 10:44:02\ntags:\n    - python3小练手\ncategories:\n    - Python3\ndescription:\n    对图像的基本处理\n---\n\n\n# python3 图像的基本处理\n## 图像的大小\n```python3\njpg = Image.open(\"**.jpg\")\nx , y = jpg.size\n```\n此时， xy分别为图像的高和宽\n\n官方文档如下：\nhttps://pillow.readthedocs.io/en/4.0.x/reference/ImageDraw.html\n\n```python3\nfrom PIL import Image, ImageDraw , ImageFont\n\njpg = Image.open(\"old.jpg\")\ndraw = ImageDraw.Draw(jpg)\nx , y = jpg.size\nprint (x,y)\nfont = ImageFont.truetype('Ubuntu-RI.ttf', 40)\ndraw.text((250 , 20), \"中文？\", \"red\" , font = font )\n# jpg.save(\"old.jpg\")\njpg.show()\n```\n\n## 题目：\n将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 类似于图中效果\n\n## 代码：\n```python\nfrom PIL import Image, ImageDraw , ImageFont\njpg = Image.open(\"new.jpg\")\n#\ndraw = ImageDraw.Draw(jpg)\nx , y = jpg.size\nprint (x,y)\n# draw.test( (10, y - 40) , \"4\" , \"red\" , font = 'LiberationSans-Regular.ttf')\n\nfont = ImageFont.truetype('Ubuntu-RI.ttf', 40)\ndraw.text((250 , 20), \"中文？\", \"red\" , font =  font )\njpg.save(\"new.jpg\")\n\njpg.show()\n```\n\n## 效果\n{% asset_img 1.jpg %}\n","slug":"Python3-PIL图像处理","published":1,"updated":"2020-02-06T22:40:22.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n97r000i24uwhce0npyf","content":"<h1 id=\"python3-图像的基本处理\"><a href=\"#python3-图像的基本处理\" class=\"headerlink\" title=\"python3 图像的基本处理\"></a>python3 图像的基本处理</h1><h2 id=\"图像的大小\"><a href=\"#图像的大小\" class=\"headerlink\" title=\"图像的大小\"></a>图像的大小</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jpg = Image.open(&quot;**.jpg&quot;)</span><br><span class=\"line\">x , y = jpg.size</span><br></pre></td></tr></table></figure>\n\n<p>此时， xy分别为图像的高和宽</p>\n<p>官方文档如下：<br><a href=\"https://pillow.readthedocs.io/en/4.0.x/reference/ImageDraw.html\" target=\"_blank\" rel=\"noopener\">https://pillow.readthedocs.io/en/4.0.x/reference/ImageDraw.html</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from PIL import Image, ImageDraw , ImageFont</span><br><span class=\"line\"></span><br><span class=\"line\">jpg = Image.open(&quot;old.jpg&quot;)</span><br><span class=\"line\">draw = ImageDraw.Draw(jpg)</span><br><span class=\"line\">x , y = jpg.size</span><br><span class=\"line\">print (x,y)</span><br><span class=\"line\">font = ImageFont.truetype(&apos;Ubuntu-RI.ttf&apos;, 40)</span><br><span class=\"line\">draw.text((250 , 20), &quot;中文？&quot;, &quot;red&quot; , font = font )</span><br><span class=\"line\"># jpg.save(&quot;old.jpg&quot;)</span><br><span class=\"line\">jpg.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h2><p>将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 类似于图中效果</p>\n<h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageDraw , ImageFont</span><br><span class=\"line\">jpg = Image.open(<span class=\"string\">\"new.jpg\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">draw = ImageDraw.Draw(jpg)</span><br><span class=\"line\">x , y = jpg.size</span><br><span class=\"line\"><span class=\"keyword\">print</span> (x,y)</span><br><span class=\"line\"><span class=\"comment\"># draw.test( (10, y - 40) , \"4\" , \"red\" , font = 'LiberationSans-Regular.ttf')</span></span><br><span class=\"line\"></span><br><span class=\"line\">font = ImageFont.truetype(<span class=\"string\">'Ubuntu-RI.ttf'</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\">draw.text((<span class=\"number\">250</span> , <span class=\"number\">20</span>), <span class=\"string\">\"中文？\"</span>, <span class=\"string\">\"red\"</span> , font =  font )</span><br><span class=\"line\">jpg.save(<span class=\"string\">\"new.jpg\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">jpg.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><img src=\"/2018/09/03/Python3-PIL图像处理/1.jpg\">\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python3-图像的基本处理\"><a href=\"#python3-图像的基本处理\" class=\"headerlink\" title=\"python3 图像的基本处理\"></a>python3 图像的基本处理</h1><h2 id=\"图像的大小\"><a href=\"#图像的大小\" class=\"headerlink\" title=\"图像的大小\"></a>图像的大小</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jpg = Image.open(&quot;**.jpg&quot;)</span><br><span class=\"line\">x , y = jpg.size</span><br></pre></td></tr></table></figure>\n\n<p>此时， xy分别为图像的高和宽</p>\n<p>官方文档如下：<br><a href=\"https://pillow.readthedocs.io/en/4.0.x/reference/ImageDraw.html\" target=\"_blank\" rel=\"noopener\">https://pillow.readthedocs.io/en/4.0.x/reference/ImageDraw.html</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from PIL import Image, ImageDraw , ImageFont</span><br><span class=\"line\"></span><br><span class=\"line\">jpg = Image.open(&quot;old.jpg&quot;)</span><br><span class=\"line\">draw = ImageDraw.Draw(jpg)</span><br><span class=\"line\">x , y = jpg.size</span><br><span class=\"line\">print (x,y)</span><br><span class=\"line\">font = ImageFont.truetype(&apos;Ubuntu-RI.ttf&apos;, 40)</span><br><span class=\"line\">draw.text((250 , 20), &quot;中文？&quot;, &quot;red&quot; , font = font )</span><br><span class=\"line\"># jpg.save(&quot;old.jpg&quot;)</span><br><span class=\"line\">jpg.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h2><p>将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 类似于图中效果</p>\n<h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageDraw , ImageFont</span><br><span class=\"line\">jpg = Image.open(<span class=\"string\">\"new.jpg\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">draw = ImageDraw.Draw(jpg)</span><br><span class=\"line\">x , y = jpg.size</span><br><span class=\"line\"><span class=\"keyword\">print</span> (x,y)</span><br><span class=\"line\"><span class=\"comment\"># draw.test( (10, y - 40) , \"4\" , \"red\" , font = 'LiberationSans-Regular.ttf')</span></span><br><span class=\"line\"></span><br><span class=\"line\">font = ImageFont.truetype(<span class=\"string\">'Ubuntu-RI.ttf'</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\">draw.text((<span class=\"number\">250</span> , <span class=\"number\">20</span>), <span class=\"string\">\"中文？\"</span>, <span class=\"string\">\"red\"</span> , font =  font )</span><br><span class=\"line\">jpg.save(<span class=\"string\">\"new.jpg\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">jpg.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><img src=\"/2018/09/03/Python3-PIL图像处理/1.jpg\">\n"},{"title":"Kubernetes","author":"edxuanlen","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2020-03-16T01:00:12.000Z","img":null,"coverImg":null,"password":null,"summary":null,"description":null,"_content":"\n### 安装\n\n\nkubectl\n\n```bash\ncurl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/windows/amd64/kubectl.exe\n```\n\n\nminikube  \n\n```bash\nhttps://github.com/kubernetes/minikube/releases\n```\n\nor\n\n```bash\nchoco install minikube\n```\n\n在 Kubernetes 上使用 Kubernetes 命令行工具 kubectl 部署和管理应用程序。使用 kubectl，您可以检查集群资源；创建、删除和更新组件；查看您的新集群；并启动实例应用程序。\n\nMinikube 是一种可以让您在本地轻松运行 Kubernetes 的工具。Minikube 在笔记本电脑上的虚拟机（VM）中运行单节点 Kubernetes 集群，供那些希望尝试 Kubernetes 或进行日常开发的用户使用。\n\nMinikube 支持以下 Kubernetes 功能：\n\n- DNS\n- NodePorts\n- ConfigMaps 和 Secrets\n- Dashboards\n- 容器运行时: Docker、CRI-O 以及 containerd\n- 启用 CNI （容器网络接口）\n- Ingress\n\n","source":"_posts/Kubernetes.md","raw":"---\ntitle: Kubernetes\nauthor: edxuanlen\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2020-03-16 09:00:12\nimg:\ncoverImg:\npassword:\nsummary:\ntags:\ncategories:\ndescription:\n---\n\n### 安装\n\n\nkubectl\n\n```bash\ncurl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/windows/amd64/kubectl.exe\n```\n\n\nminikube  \n\n```bash\nhttps://github.com/kubernetes/minikube/releases\n```\n\nor\n\n```bash\nchoco install minikube\n```\n\n在 Kubernetes 上使用 Kubernetes 命令行工具 kubectl 部署和管理应用程序。使用 kubectl，您可以检查集群资源；创建、删除和更新组件；查看您的新集群；并启动实例应用程序。\n\nMinikube 是一种可以让您在本地轻松运行 Kubernetes 的工具。Minikube 在笔记本电脑上的虚拟机（VM）中运行单节点 Kubernetes 集群，供那些希望尝试 Kubernetes 或进行日常开发的用户使用。\n\nMinikube 支持以下 Kubernetes 功能：\n\n- DNS\n- NodePorts\n- ConfigMaps 和 Secrets\n- Dashboards\n- 容器运行时: Docker、CRI-O 以及 containerd\n- 启用 CNI （容器网络接口）\n- Ingress\n\n","slug":"Kubernetes","published":1,"updated":"2020-03-16T02:53:42.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n97y000n24uwldy1dfkw","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>kubectl</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/windows/amd64/kubectl.exe</span><br></pre></td></tr></table></figure>\n\n<p>minikube  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/kubernetes/minikube/releases</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install minikube</span><br></pre></td></tr></table></figure>\n\n<p>在 Kubernetes 上使用 Kubernetes 命令行工具 kubectl 部署和管理应用程序。使用 kubectl，您可以检查集群资源；创建、删除和更新组件；查看您的新集群；并启动实例应用程序。</p>\n<p>Minikube 是一种可以让您在本地轻松运行 Kubernetes 的工具。Minikube 在笔记本电脑上的虚拟机（VM）中运行单节点 Kubernetes 集群，供那些希望尝试 Kubernetes 或进行日常开发的用户使用。</p>\n<p>Minikube 支持以下 Kubernetes 功能：</p>\n<ul>\n<li>DNS</li>\n<li>NodePorts</li>\n<li>ConfigMaps 和 Secrets</li>\n<li>Dashboards</li>\n<li>容器运行时: Docker、CRI-O 以及 containerd</li>\n<li>启用 CNI （容器网络接口）</li>\n<li>Ingress</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>kubectl</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/windows/amd64/kubectl.exe</span><br></pre></td></tr></table></figure>\n\n<p>minikube  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/kubernetes/minikube/releases</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install minikube</span><br></pre></td></tr></table></figure>\n\n<p>在 Kubernetes 上使用 Kubernetes 命令行工具 kubectl 部署和管理应用程序。使用 kubectl，您可以检查集群资源；创建、删除和更新组件；查看您的新集群；并启动实例应用程序。</p>\n<p>Minikube 是一种可以让您在本地轻松运行 Kubernetes 的工具。Minikube 在笔记本电脑上的虚拟机（VM）中运行单节点 Kubernetes 集群，供那些希望尝试 Kubernetes 或进行日常开发的用户使用。</p>\n<p>Minikube 支持以下 Kubernetes 功能：</p>\n<ul>\n<li>DNS</li>\n<li>NodePorts</li>\n<li>ConfigMaps 和 Secrets</li>\n<li>Dashboards</li>\n<li>容器运行时: Docker、CRI-O 以及 containerd</li>\n<li>启用 CNI （容器网络接口）</li>\n<li>Ingress</li>\n</ul>\n"},{"title":"STL之map","date":"2018-03-29T04:01:49.000Z","description":"map也是使用红黑树，是一个键值对(key:value映射)，遍历时依然默认按照key程序的方式遍历(与set相同)。","_content":"\n### map映照容器\n\n{% asset_img map1.png %}\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tmap<string,double>m;\n\tm[\"li\"]=123.4;\n\tm[\"wang\"]=23.1;\n\tm[\"zhang\"]=-21.9;\n\tm[\"abc\"]=12.1;\n\tfor(map<string,double>::iterator i=m.begin();i!=m.end();i++)\n\t\tcout<<(*i).first<<\":\"<<(*i).second<<endl;\n\treturn 0; \n}\n```\n运行结果：\n{% asset_img map.png %}\n\n\n### map实现数字分离\n#### string->number\n下面给出例子，可以实现超级大数的每位相加！！！\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    map<char,int> m;\n    for(int i = 0; i < 10; ++i)\n        m['0' + i] = i;\n    string s;\n    s = \"9876543210123456789876543210123456789\";\n    int sum = 0;\n    for( int i = 0; i < s.size(); ++i)\n        sum += m[s[i]];\n    cout << sum << endl;\n    return 0;\n}\n```\n运行结果：\n> 171\n\n#### number->string\n与上面的转换原理相同。\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    map<long long int,char> m;\n    long long i;\n    for(i = 0; i < 10; ++i){\n        m[i] = '0' + i;\n    }\n    long long  n[10] ={1,2,3,4,5,6,7,8,9,0};\n    for(int i=0;i<10;i++)\n   \t\tcout <<m[n[i]] ;\n    return 0;\n}\n```\n运行结果：\n> 1234567890\n\n### multimap\nmultimap与map的关系和multiset与set的关系相同，允许重复的元素，所以元素的插入删除和查找都与map不同。\n>  multimap<string,double> m;\n>  m.insert(pair<string,double>(\"Abc\",123.2));\n上述插入方法同样适用于map。\n\n### find & erase\n\n在上面的代码加上\n``C++ printf(\"%d\",m.find('5')->second);``\n可以得到‘5’对应的数字 5。\n\n```C++ m.erase(\"1\");```\n会使这一个map删除。\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/STL之map.md","raw":"---\ntitle: STL之map\ndate: 2018-03-29 12:01:49\ntags: STL\ncategories: C/C++\ndescription: map也是使用红黑树，是一个键值对(key:value映射)，遍历时依然默认按照key程序的方式遍历(与set相同)。\n---\n\n### map映照容器\n\n{% asset_img map1.png %}\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tmap<string,double>m;\n\tm[\"li\"]=123.4;\n\tm[\"wang\"]=23.1;\n\tm[\"zhang\"]=-21.9;\n\tm[\"abc\"]=12.1;\n\tfor(map<string,double>::iterator i=m.begin();i!=m.end();i++)\n\t\tcout<<(*i).first<<\":\"<<(*i).second<<endl;\n\treturn 0; \n}\n```\n运行结果：\n{% asset_img map.png %}\n\n\n### map实现数字分离\n#### string->number\n下面给出例子，可以实现超级大数的每位相加！！！\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    map<char,int> m;\n    for(int i = 0; i < 10; ++i)\n        m['0' + i] = i;\n    string s;\n    s = \"9876543210123456789876543210123456789\";\n    int sum = 0;\n    for( int i = 0; i < s.size(); ++i)\n        sum += m[s[i]];\n    cout << sum << endl;\n    return 0;\n}\n```\n运行结果：\n> 171\n\n#### number->string\n与上面的转换原理相同。\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    map<long long int,char> m;\n    long long i;\n    for(i = 0; i < 10; ++i){\n        m[i] = '0' + i;\n    }\n    long long  n[10] ={1,2,3,4,5,6,7,8,9,0};\n    for(int i=0;i<10;i++)\n   \t\tcout <<m[n[i]] ;\n    return 0;\n}\n```\n运行结果：\n> 1234567890\n\n### multimap\nmultimap与map的关系和multiset与set的关系相同，允许重复的元素，所以元素的插入删除和查找都与map不同。\n>  multimap<string,double> m;\n>  m.insert(pair<string,double>(\"Abc\",123.2));\n上述插入方法同样适用于map。\n\n### find & erase\n\n在上面的代码加上\n``C++ printf(\"%d\",m.find('5')->second);``\n可以得到‘5’对应的数字 5。\n\n```C++ m.erase(\"1\");```\n会使这一个map删除。\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"STL之map","published":1,"updated":"2020-02-06T22:40:22.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n983000p24uw0wyihmcb","content":"<h3 id=\"map映照容器\"><a href=\"#map映照容器\" class=\"headerlink\" title=\"map映照容器\"></a>map映照容器</h3><img src=\"/2018/03/29/STL之map/map1.png\">\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>,<span class=\"keyword\">double</span>&gt;m;</span><br><span class=\"line\">\tm[<span class=\"string\">\"li\"</span>]=<span class=\"number\">123.4</span>;</span><br><span class=\"line\">\tm[<span class=\"string\">\"wang\"</span>]=<span class=\"number\">23.1</span>;</span><br><span class=\"line\">\tm[<span class=\"string\">\"zhang\"</span>]=<span class=\"number\">-21.9</span>;</span><br><span class=\"line\">\tm[<span class=\"string\">\"abc\"</span>]=<span class=\"number\">12.1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>,<span class=\"keyword\">double</span>&gt;::iterator i=m.begin();i!=m.end();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;(*i).first&lt;&lt;<span class=\"string\">\":\"</span>&lt;&lt;(*i).second&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<img src=\"/2018/03/29/STL之map/map.png\">\n\n\n<h3 id=\"map实现数字分离\"><a href=\"#map实现数字分离\" class=\"headerlink\" title=\"map实现数字分离\"></a>map实现数字分离</h3><h4 id=\"string-gt-number\"><a href=\"#string-gt-number\" class=\"headerlink\" title=\"string-&gt;number\"></a>string-&gt;number</h4><p>下面给出例子，可以实现超级大数的每位相加！！！</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">        m[<span class=\"string\">'0'</span> + i] = i;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">    s = <span class=\"string\">\"9876543210123456789876543210123456789\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.size(); ++i)</span><br><span class=\"line\">        sum += m[s[i]];</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<blockquote>\n<p>171</p>\n</blockquote>\n<h4 id=\"number-gt-string\"><a href=\"#number-gt-string\" class=\"headerlink\" title=\"number-&gt;string\"></a>number-&gt;string</h4><p>与上面的转换原理相同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    map&lt;long long int,char&gt; m;</span><br><span class=\"line\">    long long i;</span><br><span class=\"line\">    for(i = 0; i &lt; 10; ++i)&#123;</span><br><span class=\"line\">        m[i] = &apos;0&apos; + i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    long long  n[10] =&#123;1,2,3,4,5,6,7,8,9,0&#125;;</span><br><span class=\"line\">    for(int i=0;i&lt;10;i++)</span><br><span class=\"line\">   \t\tcout &lt;&lt;m[n[i]] ;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<blockquote>\n<p>1234567890</p>\n</blockquote>\n<h3 id=\"multimap\"><a href=\"#multimap\" class=\"headerlink\" title=\"multimap\"></a>multimap</h3><p>multimap与map的关系和multiset与set的关系相同，允许重复的元素，所以元素的插入删除和查找都与map不同。</p>\n<blockquote>\n<p> multimap&lt;string,double&gt; m;<br> m.insert(pair&lt;string,double&gt;(“Abc”,123.2));<br>上述插入方法同样适用于map。</p>\n</blockquote>\n<h3 id=\"find-amp-erase\"><a href=\"#find-amp-erase\" class=\"headerlink\" title=\"find &amp; erase\"></a>find &amp; erase</h3><p>在上面的代码加上<br><code>C++ printf(&quot;%d&quot;,m.find(&#39;5&#39;)-&gt;second);</code><br>可以得到‘5’对应的数字 5。</p>\n<p><code>C++ m.erase(&quot;1&quot;);</code><br>会使这一个map删除。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"map映照容器\"><a href=\"#map映照容器\" class=\"headerlink\" title=\"map映照容器\"></a>map映照容器</h3><img src=\"/2018/03/29/STL之map/map1.png\">\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>,<span class=\"keyword\">double</span>&gt;m;</span><br><span class=\"line\">\tm[<span class=\"string\">\"li\"</span>]=<span class=\"number\">123.4</span>;</span><br><span class=\"line\">\tm[<span class=\"string\">\"wang\"</span>]=<span class=\"number\">23.1</span>;</span><br><span class=\"line\">\tm[<span class=\"string\">\"zhang\"</span>]=<span class=\"number\">-21.9</span>;</span><br><span class=\"line\">\tm[<span class=\"string\">\"abc\"</span>]=<span class=\"number\">12.1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>,<span class=\"keyword\">double</span>&gt;::iterator i=m.begin();i!=m.end();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;(*i).first&lt;&lt;<span class=\"string\">\":\"</span>&lt;&lt;(*i).second&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<img src=\"/2018/03/29/STL之map/map.png\">\n\n\n<h3 id=\"map实现数字分离\"><a href=\"#map实现数字分离\" class=\"headerlink\" title=\"map实现数字分离\"></a>map实现数字分离</h3><h4 id=\"string-gt-number\"><a href=\"#string-gt-number\" class=\"headerlink\" title=\"string-&gt;number\"></a>string-&gt;number</h4><p>下面给出例子，可以实现超级大数的每位相加！！！</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"keyword\">int</span>&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">        m[<span class=\"string\">'0'</span> + i] = i;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">    s = <span class=\"string\">\"9876543210123456789876543210123456789\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.size(); ++i)</span><br><span class=\"line\">        sum += m[s[i]];</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<blockquote>\n<p>171</p>\n</blockquote>\n<h4 id=\"number-gt-string\"><a href=\"#number-gt-string\" class=\"headerlink\" title=\"number-&gt;string\"></a>number-&gt;string</h4><p>与上面的转换原理相同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    map&lt;long long int,char&gt; m;</span><br><span class=\"line\">    long long i;</span><br><span class=\"line\">    for(i = 0; i &lt; 10; ++i)&#123;</span><br><span class=\"line\">        m[i] = &apos;0&apos; + i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    long long  n[10] =&#123;1,2,3,4,5,6,7,8,9,0&#125;;</span><br><span class=\"line\">    for(int i=0;i&lt;10;i++)</span><br><span class=\"line\">   \t\tcout &lt;&lt;m[n[i]] ;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<blockquote>\n<p>1234567890</p>\n</blockquote>\n<h3 id=\"multimap\"><a href=\"#multimap\" class=\"headerlink\" title=\"multimap\"></a>multimap</h3><p>multimap与map的关系和multiset与set的关系相同，允许重复的元素，所以元素的插入删除和查找都与map不同。</p>\n<blockquote>\n<p> multimap&lt;string,double&gt; m;<br> m.insert(pair&lt;string,double&gt;(“Abc”,123.2));<br>上述插入方法同样适用于map。</p>\n</blockquote>\n<h3 id=\"find-amp-erase\"><a href=\"#find-amp-erase\" class=\"headerlink\" title=\"find &amp; erase\"></a>find &amp; erase</h3><p>在上面的代码加上<br><code>C++ printf(&quot;%d&quot;,m.find(&#39;5&#39;)-&gt;second);</code><br>可以得到‘5’对应的数字 5。</p>\n<p><code>C++ m.erase(&quot;1&quot;);</code><br>会使这一个map删除。</p>\n"},{"title":"Python文件处理","date":"2018-09-10T00:23:03.000Z","description":"用python对文件的基本处理，字典的使用","_content":"\n# 题目\n 任一个英文的纯文本文件，统计其中的单词出现的个数。\n\n```python3\nimport re\nf = open('words.txt')\n\nwords_dict = {}\nList = []\nfor line in f :\n    # for i in line:\n        E = re.findall(r'[^a-zA-Z]+', line)\n        for j in E:\n            line = line.replace( j , ' ')\n        List = line.split()\n        for j in List:\n            if j not in words_dict:\n                words_dict[j] = 1\n            else:\n                words_dict[j] = words_dict[j] + 1\n\nprint(words_dict)\nwords_dict = sorted ( words_dict.items() ,key=lambda item: item[1] )\n\nprint(words_dict)\n# for i in words_dict:\n#     print (i  , words_dict[i] )\n```\n","source":"_posts/Python文件处理.md","raw":"---\ntitle: Python文件处理\ndate: 2018-09-10 08:23:03\ntags:\n    - python3小练手\ncategories:\n    - Python3\ndescription:\n    用python对文件的基本处理，字典的使用\n---\n\n# 题目\n 任一个英文的纯文本文件，统计其中的单词出现的个数。\n\n```python3\nimport re\nf = open('words.txt')\n\nwords_dict = {}\nList = []\nfor line in f :\n    # for i in line:\n        E = re.findall(r'[^a-zA-Z]+', line)\n        for j in E:\n            line = line.replace( j , ' ')\n        List = line.split()\n        for j in List:\n            if j not in words_dict:\n                words_dict[j] = 1\n            else:\n                words_dict[j] = words_dict[j] + 1\n\nprint(words_dict)\nwords_dict = sorted ( words_dict.items() ,key=lambda item: item[1] )\n\nprint(words_dict)\n# for i in words_dict:\n#     print (i  , words_dict[i] )\n```\n","slug":"Python文件处理","published":1,"updated":"2020-02-06T22:40:22.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n988000t24uwqp3lskyp","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p> 任一个英文的纯文本文件，统计其中的单词出现的个数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">f = open(&apos;words.txt&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">words_dict = &#123;&#125;</span><br><span class=\"line\">List = []</span><br><span class=\"line\">for line in f :</span><br><span class=\"line\">    # for i in line:</span><br><span class=\"line\">        E = re.findall(r&apos;[^a-zA-Z]+&apos;, line)</span><br><span class=\"line\">        for j in E:</span><br><span class=\"line\">            line = line.replace( j , &apos; &apos;)</span><br><span class=\"line\">        List = line.split()</span><br><span class=\"line\">        for j in List:</span><br><span class=\"line\">            if j not in words_dict:</span><br><span class=\"line\">                words_dict[j] = 1</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                words_dict[j] = words_dict[j] + 1</span><br><span class=\"line\"></span><br><span class=\"line\">print(words_dict)</span><br><span class=\"line\">words_dict = sorted ( words_dict.items() ,key=lambda item: item[1] )</span><br><span class=\"line\"></span><br><span class=\"line\">print(words_dict)</span><br><span class=\"line\"># for i in words_dict:</span><br><span class=\"line\">#     print (i  , words_dict[i] )</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p> 任一个英文的纯文本文件，统计其中的单词出现的个数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">f = open(&apos;words.txt&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">words_dict = &#123;&#125;</span><br><span class=\"line\">List = []</span><br><span class=\"line\">for line in f :</span><br><span class=\"line\">    # for i in line:</span><br><span class=\"line\">        E = re.findall(r&apos;[^a-zA-Z]+&apos;, line)</span><br><span class=\"line\">        for j in E:</span><br><span class=\"line\">            line = line.replace( j , &apos; &apos;)</span><br><span class=\"line\">        List = line.split()</span><br><span class=\"line\">        for j in List:</span><br><span class=\"line\">            if j not in words_dict:</span><br><span class=\"line\">                words_dict[j] = 1</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                words_dict[j] = words_dict[j] + 1</span><br><span class=\"line\"></span><br><span class=\"line\">print(words_dict)</span><br><span class=\"line\">words_dict = sorted ( words_dict.items() ,key=lambda item: item[1] )</span><br><span class=\"line\"></span><br><span class=\"line\">print(words_dict)</span><br><span class=\"line\"># for i in words_dict:</span><br><span class=\"line\">#     print (i  , words_dict[i] )</span><br></pre></td></tr></table></figure>\n\n"},{"title":"STL之list","date":"2018-03-29T10:37:29.000Z","description":"list与数据结构中的双向链表有点相似。","_content":"\n### list\nlist的插入，遍历，删除，查找，排序都与vector容器相似。下面直接在实例中展示。\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    list<int>l,l1;\n    for(int i=0;i<3;i++)\n    \tl1.push_back(i*i);\n    l.push_back(3);\n    l.push_front(1);\n    l.insert(++l.begin(),2);  //list 的迭代器只能++--不能+n-n \n    l.insert(l.end(),l1.begin(),l1.end());\n    // 正向遍历 \n\tfor(list<int>::iterator i=l.begin();i!=l.end();i++)\n    \tcout<<*i<<\" \";  \n    cout<<endl;\n    //  反向遍历 \n    for(list<int>::reverse_iterator i=l.rbegin();i!=l.rend();i++)\n    \tcout<<*i<<\" \";\n    cout<<endl;\n    // 排序&去重 \n\tl.sort();\n\tl.unique();\n\tfor(list<int>::iterator i=l.begin();i!=l.end();i++)\n    \tcout<<*i<<\" \";\n    cout<<endl;\n    //查找元素以及删除迭代器位置的元素 \n    l.erase(find(l.begin(),l.end(),4));\n    for(list<int>::iterator i=l.begin();i!=l.end();i++)\n    \tcout<<*i<<\" \";\n    cout<<endl;\n    srand(time(0));\n    // pop首、尾的弹出 \n    for(int i=0;i<4;i++){\n    \tif(i%2)\n\t\t\tl.pop_back();\n\t\telse l.pop_front();\n\t\tfor(list<int>::iterator i=l.begin();i!=l.end();i++)\n    \t\tcout<<*i<<\" \";\n\t\tcout<<endl;\n\t}\n    return 0;\t\n}\n```\n运行结果：\n{% asset_img list.png %}\n\n**主要注意点是list的迭代器只能用++ -- 到达想要的位置**\n","source":"_posts/STL之list.md","raw":"---\ntitle: STL之list\ndate: 2018-03-29 18:37:29\ntags: STL\ncategories: C/C++\ndescription: list与数据结构中的双向链表有点相似。\n---\n\n### list\nlist的插入，遍历，删除，查找，排序都与vector容器相似。下面直接在实例中展示。\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    list<int>l,l1;\n    for(int i=0;i<3;i++)\n    \tl1.push_back(i*i);\n    l.push_back(3);\n    l.push_front(1);\n    l.insert(++l.begin(),2);  //list 的迭代器只能++--不能+n-n \n    l.insert(l.end(),l1.begin(),l1.end());\n    // 正向遍历 \n\tfor(list<int>::iterator i=l.begin();i!=l.end();i++)\n    \tcout<<*i<<\" \";  \n    cout<<endl;\n    //  反向遍历 \n    for(list<int>::reverse_iterator i=l.rbegin();i!=l.rend();i++)\n    \tcout<<*i<<\" \";\n    cout<<endl;\n    // 排序&去重 \n\tl.sort();\n\tl.unique();\n\tfor(list<int>::iterator i=l.begin();i!=l.end();i++)\n    \tcout<<*i<<\" \";\n    cout<<endl;\n    //查找元素以及删除迭代器位置的元素 \n    l.erase(find(l.begin(),l.end(),4));\n    for(list<int>::iterator i=l.begin();i!=l.end();i++)\n    \tcout<<*i<<\" \";\n    cout<<endl;\n    srand(time(0));\n    // pop首、尾的弹出 \n    for(int i=0;i<4;i++){\n    \tif(i%2)\n\t\t\tl.pop_back();\n\t\telse l.pop_front();\n\t\tfor(list<int>::iterator i=l.begin();i!=l.end();i++)\n    \t\tcout<<*i<<\" \";\n\t\tcout<<endl;\n\t}\n    return 0;\t\n}\n```\n运行结果：\n{% asset_img list.png %}\n\n**主要注意点是list的迭代器只能用++ -- 到达想要的位置**\n","slug":"STL之list","published":1,"updated":"2020-02-06T22:40:22.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n98d000v24uw5fpt9kje","content":"<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><p>list的插入，遍历，删除，查找，排序都与vector容器相似。下面直接在实例中展示。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;l,l1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)</span><br><span class=\"line\">    \tl1.push_back(i*i);</span><br><span class=\"line\">    l.push_back(<span class=\"number\">3</span>);</span><br><span class=\"line\">    l.push_front(<span class=\"number\">1</span>);</span><br><span class=\"line\">    l.insert(++l.begin(),<span class=\"number\">2</span>);  <span class=\"comment\">//list 的迭代器只能++--不能+n-n </span></span><br><span class=\"line\">    l.insert(l.end(),l1.begin(),l1.end());</span><br><span class=\"line\">    <span class=\"comment\">// 正向遍历 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=l.begin();i!=l.end();i++)</span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span>&lt;&lt;*i&lt;&lt;<span class=\"string\">\" \"</span>;  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//  反向遍历 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::reverse_iterator i=l.rbegin();i!=l.rend();i++)</span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span>&lt;&lt;*i&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 排序&amp;去重 </span></span><br><span class=\"line\">\tl.sort();</span><br><span class=\"line\">\tl.unique();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=l.begin();i!=l.end();i++)</span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span>&lt;&lt;*i&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//查找元素以及删除迭代器位置的元素 </span></span><br><span class=\"line\">    l.erase(find(l.begin(),l.end(),<span class=\"number\">4</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=l.begin();i!=l.end();i++)</span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span>&lt;&lt;*i&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    srand(time(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"comment\">// pop首、尾的弹出 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(i%<span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\tl.pop_back();</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> l.pop_front();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=l.begin();i!=l.end();i++)</span><br><span class=\"line\">    \t\t<span class=\"built_in\">cout</span>&lt;&lt;*i&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<img src=\"/2018/03/29/STL之list/list.png\">\n\n<p><strong>主要注意点是list的迭代器只能用++ – 到达想要的位置</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><p>list的插入，遍历，删除，查找，排序都与vector容器相似。下面直接在实例中展示。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;l,l1;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)</span><br><span class=\"line\">    \tl1.push_back(i*i);</span><br><span class=\"line\">    l.push_back(<span class=\"number\">3</span>);</span><br><span class=\"line\">    l.push_front(<span class=\"number\">1</span>);</span><br><span class=\"line\">    l.insert(++l.begin(),<span class=\"number\">2</span>);  <span class=\"comment\">//list 的迭代器只能++--不能+n-n </span></span><br><span class=\"line\">    l.insert(l.end(),l1.begin(),l1.end());</span><br><span class=\"line\">    <span class=\"comment\">// 正向遍历 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=l.begin();i!=l.end();i++)</span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span>&lt;&lt;*i&lt;&lt;<span class=\"string\">\" \"</span>;  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//  反向遍历 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::reverse_iterator i=l.rbegin();i!=l.rend();i++)</span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span>&lt;&lt;*i&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 排序&amp;去重 </span></span><br><span class=\"line\">\tl.sort();</span><br><span class=\"line\">\tl.unique();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=l.begin();i!=l.end();i++)</span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span>&lt;&lt;*i&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//查找元素以及删除迭代器位置的元素 </span></span><br><span class=\"line\">    l.erase(find(l.begin(),l.end(),<span class=\"number\">4</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=l.begin();i!=l.end();i++)</span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span>&lt;&lt;*i&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    srand(time(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"comment\">// pop首、尾的弹出 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(i%<span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\tl.pop_back();</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> l.pop_front();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=l.begin();i!=l.end();i++)</span><br><span class=\"line\">    \t\t<span class=\"built_in\">cout</span>&lt;&lt;*i&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<img src=\"/2018/03/29/STL之list/list.png\">\n\n<p><strong>主要注意点是list的迭代器只能用++ – 到达想要的位置</strong></p>\n"},{"title":"STL之set","date":"2018-03-28T14:48:14.000Z","description":"set容器它会自动调节二叉树排列，把元素放到适合的位置，确保每个子树根节点的键值大于左子树所有的值、小于右子树所有的值，插入重复数据时会忽略。","_content":"\n### set容器\nset是用红黑树的平衡二叉索引树的数据结构来实现的，插入时，它会自动调节二叉树排列，\n把元素放到适合的位置，确保每个子树根节点的键值大于左子树所有的值、小于右子树所有的值，\n插入重复数据时会忽略。set迭代器采用中序遍历，检索效率高于vector、deque、list，\n并且会将元素按照升序的序列遍历。set容器中的数值，一经更改，set会根据新值旋转二叉树，\n以保证平衡，构建set就是为了快速检索（python中的set一旦建立就是一个常量，不能改的）。\n![平衡检索二叉树(set集合)示意图](https://ws1.sinaimg.cn/large/005xm8nggy1fpsxcunkc5j30fz09et9m.jpg)\n**multiset，与set不同之处就是它允许有重复的键值。**\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tset<int>s;\n\tsrand(time(NULL));  //生成随机数种子 \n\tfor(int i=0;i<10;i++)\n\t\ts.insert(rand()%10);\n\tfor(set<int>::iterator i=s.begin();i!=s.end();i++)\n\t\tprintf(\"%d \",*i);\n\tcout<<endl;\n\tfor(set<int>::reverse_iterator i=s.rbegin();i!=s.rend();i++)\n\t\tprintf(\"%d \",*i);\n\treturn 0;\n}\n```\n运行结果：\n{% asset_img set1.png %}\n由于重复的被删去，所以可能输出不够十个数。而用上面把set改成上面提及的multiset就可以支持重复数字。\n{% asset_img set2.png %}\n在上面set的代码将set改为multiset即可。\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tmultiset<int>s;\n\tsrand(time(NULL));  //生成随机数种子 \n\tfor(int i=0;i<10;i++)\n\t\ts.insert(rand()%10);\n\tfor(multiset<int>::iterator i=s.begin();i!=s.end();i++)\n\t\tprintf(\"%d \",*i);\n\tcout<<endl;\n\tint a=rand()%10;\n\tcout<<\"delete the num as :\"<<a<<endl;\n\tint h=s.erase(a);      //multiset的erase函数删除所有要删除的数并返回个数\n\tcout<<\"delete \"<<h<<\" \"<<\"\\\"\"<<a<<\"\\\"\"<<endl;\n\tcout<<\"after delete \"<<a<<\":\";\n\tfor(multiset<int>::reverse_iterator i=s.rbegin();i!=s.rend();i++)\n\t\tprintf(\"%d \",*i);\n\treturn 0;\n}\n```\n运行结果:\n{% asset_img set3.png %}\n\n### set的重载\n重载可改变排序依据。\nset的重载会与priority_queue放一起比较，[详情点此跳转](https://edxuanlen.tk/2018/03/30/STL%E4%B9%8Bstack-queue/#set%E7%9A%84%E9%87%8D%E8%BD%BD)！\n","source":"_posts/STL之set.md","raw":"---\ntitle: STL之set\ndate: 2018-03-28 22:48:14\ntags: STL\ncategories: C/C++\ndescription: set容器它会自动调节二叉树排列，把元素放到适合的位置，确保每个子树根节点的键值大于左子树所有的值、小于右子树所有的值，插入重复数据时会忽略。\n---\n\n### set容器\nset是用红黑树的平衡二叉索引树的数据结构来实现的，插入时，它会自动调节二叉树排列，\n把元素放到适合的位置，确保每个子树根节点的键值大于左子树所有的值、小于右子树所有的值，\n插入重复数据时会忽略。set迭代器采用中序遍历，检索效率高于vector、deque、list，\n并且会将元素按照升序的序列遍历。set容器中的数值，一经更改，set会根据新值旋转二叉树，\n以保证平衡，构建set就是为了快速检索（python中的set一旦建立就是一个常量，不能改的）。\n![平衡检索二叉树(set集合)示意图](https://ws1.sinaimg.cn/large/005xm8nggy1fpsxcunkc5j30fz09et9m.jpg)\n**multiset，与set不同之处就是它允许有重复的键值。**\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tset<int>s;\n\tsrand(time(NULL));  //生成随机数种子 \n\tfor(int i=0;i<10;i++)\n\t\ts.insert(rand()%10);\n\tfor(set<int>::iterator i=s.begin();i!=s.end();i++)\n\t\tprintf(\"%d \",*i);\n\tcout<<endl;\n\tfor(set<int>::reverse_iterator i=s.rbegin();i!=s.rend();i++)\n\t\tprintf(\"%d \",*i);\n\treturn 0;\n}\n```\n运行结果：\n{% asset_img set1.png %}\n由于重复的被删去，所以可能输出不够十个数。而用上面把set改成上面提及的multiset就可以支持重复数字。\n{% asset_img set2.png %}\n在上面set的代码将set改为multiset即可。\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tmultiset<int>s;\n\tsrand(time(NULL));  //生成随机数种子 \n\tfor(int i=0;i<10;i++)\n\t\ts.insert(rand()%10);\n\tfor(multiset<int>::iterator i=s.begin();i!=s.end();i++)\n\t\tprintf(\"%d \",*i);\n\tcout<<endl;\n\tint a=rand()%10;\n\tcout<<\"delete the num as :\"<<a<<endl;\n\tint h=s.erase(a);      //multiset的erase函数删除所有要删除的数并返回个数\n\tcout<<\"delete \"<<h<<\" \"<<\"\\\"\"<<a<<\"\\\"\"<<endl;\n\tcout<<\"after delete \"<<a<<\":\";\n\tfor(multiset<int>::reverse_iterator i=s.rbegin();i!=s.rend();i++)\n\t\tprintf(\"%d \",*i);\n\treturn 0;\n}\n```\n运行结果:\n{% asset_img set3.png %}\n\n### set的重载\n重载可改变排序依据。\nset的重载会与priority_queue放一起比较，[详情点此跳转](https://edxuanlen.tk/2018/03/30/STL%E4%B9%8Bstack-queue/#set%E7%9A%84%E9%87%8D%E8%BD%BD)！\n","slug":"STL之set","published":1,"updated":"2020-02-06T22:40:22.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n98i000z24uwbl86xzzr","content":"<h3 id=\"set容器\"><a href=\"#set容器\" class=\"headerlink\" title=\"set容器\"></a>set容器</h3><p>set是用红黑树的平衡二叉索引树的数据结构来实现的，插入时，它会自动调节二叉树排列，<br>把元素放到适合的位置，确保每个子树根节点的键值大于左子树所有的值、小于右子树所有的值，<br>插入重复数据时会忽略。set迭代器采用中序遍历，检索效率高于vector、deque、list，<br>并且会将元素按照升序的序列遍历。set容器中的数值，一经更改，set会根据新值旋转二叉树，<br>以保证平衡，构建set就是为了快速检索（python中的set一旦建立就是一个常量，不能改的）。<br><img src=\"https://ws1.sinaimg.cn/large/005xm8nggy1fpsxcunkc5j30fz09et9m.jpg\" alt=\"平衡检索二叉树(set集合)示意图\"><br><strong>multiset，与set不同之处就是它允许有重复的键值。</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;s;</span><br><span class=\"line\">\tsrand(time(<span class=\"literal\">NULL</span>));  <span class=\"comment\">//生成随机数种子 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\ts.insert(rand()%<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=s.begin();i!=s.end();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,*i);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::reverse_iterator i=s.rbegin();i!=s.rend();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,*i);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<img src=\"/2018/03/28/STL之set/set1.png\">\n<p>由于重复的被删去，所以可能输出不够十个数。而用上面把set改成上面提及的multiset就可以支持重复数字。</p>\n<img src=\"/2018/03/28/STL之set/set2.png\">\n<p>在上面set的代码将set改为multiset即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">multiset</span>&lt;<span class=\"keyword\">int</span>&gt;s;</span><br><span class=\"line\">\tsrand(time(<span class=\"literal\">NULL</span>));  <span class=\"comment\">//生成随机数种子 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\ts.insert(rand()%<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">multiset</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=s.begin();i!=s.end();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,*i);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a=rand()%<span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"delete the num as :\"</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> h=s.erase(a);      <span class=\"comment\">//multiset的erase函数删除所有要删除的数并返回个数</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"delete \"</span>&lt;&lt;h&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;<span class=\"string\">\"\\\"\"</span>&lt;&lt;a&lt;&lt;<span class=\"string\">\"\\\"\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"after delete \"</span>&lt;&lt;a&lt;&lt;<span class=\"string\">\":\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">multiset</span>&lt;<span class=\"keyword\">int</span>&gt;::reverse_iterator i=s.rbegin();i!=s.rend();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,*i);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果:</p>\n<img src=\"/2018/03/28/STL之set/set3.png\">\n\n<h3 id=\"set的重载\"><a href=\"#set的重载\" class=\"headerlink\" title=\"set的重载\"></a>set的重载</h3><p>重载可改变排序依据。<br>set的重载会与priority_queue放一起比较，<a href=\"https://edxuanlen.tk/2018/03/30/STL%E4%B9%8Bstack-queue/#set%E7%9A%84%E9%87%8D%E8%BD%BD\">详情点此跳转</a>！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"set容器\"><a href=\"#set容器\" class=\"headerlink\" title=\"set容器\"></a>set容器</h3><p>set是用红黑树的平衡二叉索引树的数据结构来实现的，插入时，它会自动调节二叉树排列，<br>把元素放到适合的位置，确保每个子树根节点的键值大于左子树所有的值、小于右子树所有的值，<br>插入重复数据时会忽略。set迭代器采用中序遍历，检索效率高于vector、deque、list，<br>并且会将元素按照升序的序列遍历。set容器中的数值，一经更改，set会根据新值旋转二叉树，<br>以保证平衡，构建set就是为了快速检索（python中的set一旦建立就是一个常量，不能改的）。<br><img src=\"https://ws1.sinaimg.cn/large/005xm8nggy1fpsxcunkc5j30fz09et9m.jpg\" alt=\"平衡检索二叉树(set集合)示意图\"><br><strong>multiset，与set不同之处就是它允许有重复的键值。</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;s;</span><br><span class=\"line\">\tsrand(time(<span class=\"literal\">NULL</span>));  <span class=\"comment\">//生成随机数种子 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\ts.insert(rand()%<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=s.begin();i!=s.end();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,*i);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::reverse_iterator i=s.rbegin();i!=s.rend();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,*i);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<img src=\"/2018/03/28/STL之set/set1.png\">\n<p>由于重复的被删去，所以可能输出不够十个数。而用上面把set改成上面提及的multiset就可以支持重复数字。</p>\n<img src=\"/2018/03/28/STL之set/set2.png\">\n<p>在上面set的代码将set改为multiset即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">multiset</span>&lt;<span class=\"keyword\">int</span>&gt;s;</span><br><span class=\"line\">\tsrand(time(<span class=\"literal\">NULL</span>));  <span class=\"comment\">//生成随机数种子 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\ts.insert(rand()%<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">multiset</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=s.begin();i!=s.end();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,*i);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a=rand()%<span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"delete the num as :\"</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> h=s.erase(a);      <span class=\"comment\">//multiset的erase函数删除所有要删除的数并返回个数</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"delete \"</span>&lt;&lt;h&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;<span class=\"string\">\"\\\"\"</span>&lt;&lt;a&lt;&lt;<span class=\"string\">\"\\\"\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"after delete \"</span>&lt;&lt;a&lt;&lt;<span class=\"string\">\":\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">multiset</span>&lt;<span class=\"keyword\">int</span>&gt;::reverse_iterator i=s.rbegin();i!=s.rend();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,*i);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果:</p>\n<img src=\"/2018/03/28/STL之set/set3.png\">\n\n<h3 id=\"set的重载\"><a href=\"#set的重载\" class=\"headerlink\" title=\"set的重载\"></a>set的重载</h3><p>重载可改变排序依据。<br>set的重载会与priority_queue放一起比较，<a href=\"https://edxuanlen.tk/2018/03/30/STL%E4%B9%8Bstack-queue/#set%E7%9A%84%E9%87%8D%E8%BD%BD\">详情点此跳转</a>！</p>\n"},{"title":"STL之stack&queue","date":"2018-03-29T16:47:44.000Z","description":"本文介绍栈(stack)和队列(queue)以及优先级队列(priority_queue)。","_content":"\n### 栈(stack)\nstack堆栈是一个**后进先出**的线性表插入和删除元素都只能在表的一端进行。\n插入元素的一端称为栈顶(另一端称为栈底)。插入元素为入栈(Push)，删除为出栈(Pop)。\n{% asset_img stack.png %}\n过程就像压入和弹出数据。\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tstack<int> s;\n\t//压入数据\n    s.push(1);\n    s.push(2);\n    s.push(4);\n    s.push(5);\n    cout << s.size() << endl;\n    while(s.empty() != true){\n        cout << s.top() << endl;\n        s.pop();//弹出数据\n    }\n    return 0;\n}\n```\n输出:\n> 4\n> 5 4 2 1\n\n### 队列(queue)\nqueue队列容器是一个**先进先出**的线性存储表，元素插入只能在队尾，删除只能在队首。\n将上面的代码 stack改为queue ，s.top改为s.front 可得到：\n> 4\n> 1 2 4 5\n\n### 优先队列(priority_queue)\npriority_queue与队列一样只能在队尾插入元素，队首删除元素，但是队首永远是队列中的最大元素。\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tpriority_queue<int> pq;\n    pq.push(1);\n    pq.push(3);\n    pq.push(2);\n    pq.push(8);\n    pq.push(9);\n    pq.push(0);\n    cout << \"size: \" << pq.size() << endl;\n    while(pq.empty() != true){\n        cout << pq.top() <<\" \";\n        pq.pop();\n    }\n    return 0;\n}\n```\n运行结果：\n{% asset_img queue.png %}\n\n### set和priority_queue的重载\n#### set的重载\nset的重载与sort函数的重载相似。\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nstruct Comp\n{\n    bool operator()(int a,int b)\n    {\n        return a > b;\n    }\n};\nint main()\n{\n    set<int,Comp> v;\n    v.insert(1);\n    v.insert(3);\n    v.insert(5);\n    v.insert(2);\n    v.insert(4);\n    v.insert(3);\n    for(set<int,Comp>::iterator it = v.begin(); it != v.end(); ++it)\n        cout << *it << \" \";\n    cout << endl;\n    for(set<int,Comp>::reverse_iterator rit = v.rbegin(); rit != v.rend(); ++rit)\n        cout << *rit << \" \";\n    cout << endl;\n    return 0;\n}\n```\n输出结果为：\n> 5 4 3 2 1\n> 1 2 3 4 5\n#### priority_queue的重载\npriority_queue的重载与set的重载差不多，但中间需要一个多一个容器作为参数(暂时我也不知道为啥==)。\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\n//重载\nstruct C{\n\tbool operator()(int a,int b){\n\t\treturn a>b;\n\t}\n} ;\nint main(){\n\tpriority_queue<int,vector<int>,C> pq;  //少了vector报错\n    pq.push(1);\n    pq.push(3);\n    pq.push(2);\n    pq.push(8);\n    pq.push(9);\n    pq.push(0);\n    cout << \"size: \" << pq.size() << endl;\n    while(pq.empty() != true){\n        cout << pq.top() <<\" \";\n        pq.pop();\n    }\n    return 0;\n}\n```\n数据与上面优先队列的例子相同，重载后输出结果为:\n{% asset_img queue1.png %}\n","source":"_posts/STL之stack-queue.md","raw":"---\ntitle: STL之stack&queue\ndate: 2018-03-30 00:47:44\ntags:\n  - STL\n  - 栈\ncategories: C/C++\ndescription: 本文介绍栈(stack)和队列(queue)以及优先级队列(priority_queue)。\n---\n\n### 栈(stack)\nstack堆栈是一个**后进先出**的线性表插入和删除元素都只能在表的一端进行。\n插入元素的一端称为栈顶(另一端称为栈底)。插入元素为入栈(Push)，删除为出栈(Pop)。\n{% asset_img stack.png %}\n过程就像压入和弹出数据。\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tstack<int> s;\n\t//压入数据\n    s.push(1);\n    s.push(2);\n    s.push(4);\n    s.push(5);\n    cout << s.size() << endl;\n    while(s.empty() != true){\n        cout << s.top() << endl;\n        s.pop();//弹出数据\n    }\n    return 0;\n}\n```\n输出:\n> 4\n> 5 4 2 1\n\n### 队列(queue)\nqueue队列容器是一个**先进先出**的线性存储表，元素插入只能在队尾，删除只能在队首。\n将上面的代码 stack改为queue ，s.top改为s.front 可得到：\n> 4\n> 1 2 4 5\n\n### 优先队列(priority_queue)\npriority_queue与队列一样只能在队尾插入元素，队首删除元素，但是队首永远是队列中的最大元素。\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tpriority_queue<int> pq;\n    pq.push(1);\n    pq.push(3);\n    pq.push(2);\n    pq.push(8);\n    pq.push(9);\n    pq.push(0);\n    cout << \"size: \" << pq.size() << endl;\n    while(pq.empty() != true){\n        cout << pq.top() <<\" \";\n        pq.pop();\n    }\n    return 0;\n}\n```\n运行结果：\n{% asset_img queue.png %}\n\n### set和priority_queue的重载\n#### set的重载\nset的重载与sort函数的重载相似。\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nstruct Comp\n{\n    bool operator()(int a,int b)\n    {\n        return a > b;\n    }\n};\nint main()\n{\n    set<int,Comp> v;\n    v.insert(1);\n    v.insert(3);\n    v.insert(5);\n    v.insert(2);\n    v.insert(4);\n    v.insert(3);\n    for(set<int,Comp>::iterator it = v.begin(); it != v.end(); ++it)\n        cout << *it << \" \";\n    cout << endl;\n    for(set<int,Comp>::reverse_iterator rit = v.rbegin(); rit != v.rend(); ++rit)\n        cout << *rit << \" \";\n    cout << endl;\n    return 0;\n}\n```\n输出结果为：\n> 5 4 3 2 1\n> 1 2 3 4 5\n#### priority_queue的重载\npriority_queue的重载与set的重载差不多，但中间需要一个多一个容器作为参数(暂时我也不知道为啥==)。\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\n//重载\nstruct C{\n\tbool operator()(int a,int b){\n\t\treturn a>b;\n\t}\n} ;\nint main(){\n\tpriority_queue<int,vector<int>,C> pq;  //少了vector报错\n    pq.push(1);\n    pq.push(3);\n    pq.push(2);\n    pq.push(8);\n    pq.push(9);\n    pq.push(0);\n    cout << \"size: \" << pq.size() << endl;\n    while(pq.empty() != true){\n        cout << pq.top() <<\" \";\n        pq.pop();\n    }\n    return 0;\n}\n```\n数据与上面优先队列的例子相同，重载后输出结果为:\n{% asset_img queue1.png %}\n","slug":"STL之stack-queue","published":1,"updated":"2020-02-06T22:40:22.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n98l001324uws2n3lwh2","content":"<h3 id=\"栈-stack\"><a href=\"#栈-stack\" class=\"headerlink\" title=\"栈(stack)\"></a>栈(stack)</h3><p>stack堆栈是一个<strong>后进先出</strong>的线性表插入和删除元素都只能在表的一端进行。<br>插入元素的一端称为栈顶(另一端称为栈底)。插入元素为入栈(Push)，删除为出栈(Pop)。</p>\n<img src=\"/2018/03/30/STL之stack-queue/stack.png\">\n<p>过程就像压入和弹出数据。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">\t<span class=\"comment\">//压入数据</span></span><br><span class=\"line\">    s.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">    s.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">    s.push(<span class=\"number\">4</span>);</span><br><span class=\"line\">    s.push(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; s.size() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s.empty() != <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; s.top() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        s.pop();<span class=\"comment\">//弹出数据</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出:</p>\n<blockquote>\n<p>4<br>5 4 2 1</p>\n</blockquote>\n<h3 id=\"队列-queue\"><a href=\"#队列-queue\" class=\"headerlink\" title=\"队列(queue)\"></a>队列(queue)</h3><p>queue队列容器是一个<strong>先进先出</strong>的线性存储表，元素插入只能在队尾，删除只能在队首。<br>将上面的代码 stack改为queue ，s.top改为s.front 可得到：</p>\n<blockquote>\n<p>4<br>1 2 4 5</p>\n</blockquote>\n<h3 id=\"优先队列-priority-queue\"><a href=\"#优先队列-priority-queue\" class=\"headerlink\" title=\"优先队列(priority_queue)\"></a>优先队列(priority_queue)</h3><p>priority_queue与队列一样只能在队尾插入元素，队首删除元素，但是队首永远是队列中的最大元素。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tpriority_queue&lt;<span class=\"keyword\">int</span>&gt; pq;</span><br><span class=\"line\">    pq.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">3</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">8</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">9</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size: \"</span> &lt;&lt; pq.size() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pq.empty() != <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; pq.top() &lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        pq.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<img src=\"/2018/03/30/STL之stack-queue/queue.png\">\n\n<h3 id=\"set和priority-queue的重载\"><a href=\"#set和priority-queue的重载\" class=\"headerlink\" title=\"set和priority_queue的重载\"></a>set和priority_queue的重载</h3><h4 id=\"set的重载\"><a href=\"#set的重载\" class=\"headerlink\" title=\"set的重载\"></a>set的重载</h4><p>set的重载与sort函数的重载相似。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Comp</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a &gt; b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>,Comp&gt; v;</span><br><span class=\"line\">    v.insert(<span class=\"number\">1</span>);</span><br><span class=\"line\">    v.insert(<span class=\"number\">3</span>);</span><br><span class=\"line\">    v.insert(<span class=\"number\">5</span>);</span><br><span class=\"line\">    v.insert(<span class=\"number\">2</span>);</span><br><span class=\"line\">    v.insert(<span class=\"number\">4</span>);</span><br><span class=\"line\">    v.insert(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>,Comp&gt;::iterator it = v.begin(); it != v.end(); ++it)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>,Comp&gt;::reverse_iterator rit = v.rbegin(); rit != v.rend(); ++rit)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *rit &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<blockquote>\n<p>5 4 3 2 1<br>1 2 3 4 5</p>\n</blockquote>\n<h4 id=\"priority-queue的重载\"><a href=\"#priority-queue的重载\" class=\"headerlink\" title=\"priority_queue的重载\"></a>priority_queue的重载</h4><p>priority_queue的重载与set的重载差不多，但中间需要一个多一个容器作为参数(暂时我也不知道为啥==)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"comment\">//重载</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">C</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a&gt;b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tpriority_queue&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;,C&gt; pq;  <span class=\"comment\">//少了vector报错</span></span><br><span class=\"line\">    pq.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">3</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">8</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">9</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size: \"</span> &lt;&lt; pq.size() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pq.empty() != <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; pq.top() &lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        pq.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数据与上面优先队列的例子相同，重载后输出结果为:</p>\n<img src=\"/2018/03/30/STL之stack-queue/queue1.png\">\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"栈-stack\"><a href=\"#栈-stack\" class=\"headerlink\" title=\"栈(stack)\"></a>栈(stack)</h3><p>stack堆栈是一个<strong>后进先出</strong>的线性表插入和删除元素都只能在表的一端进行。<br>插入元素的一端称为栈顶(另一端称为栈底)。插入元素为入栈(Push)，删除为出栈(Pop)。</p>\n<img src=\"/2018/03/30/STL之stack-queue/stack.png\">\n<p>过程就像压入和弹出数据。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">\t<span class=\"comment\">//压入数据</span></span><br><span class=\"line\">    s.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">    s.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">    s.push(<span class=\"number\">4</span>);</span><br><span class=\"line\">    s.push(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; s.size() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s.empty() != <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; s.top() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        s.pop();<span class=\"comment\">//弹出数据</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出:</p>\n<blockquote>\n<p>4<br>5 4 2 1</p>\n</blockquote>\n<h3 id=\"队列-queue\"><a href=\"#队列-queue\" class=\"headerlink\" title=\"队列(queue)\"></a>队列(queue)</h3><p>queue队列容器是一个<strong>先进先出</strong>的线性存储表，元素插入只能在队尾，删除只能在队首。<br>将上面的代码 stack改为queue ，s.top改为s.front 可得到：</p>\n<blockquote>\n<p>4<br>1 2 4 5</p>\n</blockquote>\n<h3 id=\"优先队列-priority-queue\"><a href=\"#优先队列-priority-queue\" class=\"headerlink\" title=\"优先队列(priority_queue)\"></a>优先队列(priority_queue)</h3><p>priority_queue与队列一样只能在队尾插入元素，队首删除元素，但是队首永远是队列中的最大元素。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tpriority_queue&lt;<span class=\"keyword\">int</span>&gt; pq;</span><br><span class=\"line\">    pq.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">3</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">8</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">9</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size: \"</span> &lt;&lt; pq.size() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pq.empty() != <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; pq.top() &lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        pq.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<img src=\"/2018/03/30/STL之stack-queue/queue.png\">\n\n<h3 id=\"set和priority-queue的重载\"><a href=\"#set和priority-queue的重载\" class=\"headerlink\" title=\"set和priority_queue的重载\"></a>set和priority_queue的重载</h3><h4 id=\"set的重载\"><a href=\"#set的重载\" class=\"headerlink\" title=\"set的重载\"></a>set的重载</h4><p>set的重载与sort函数的重载相似。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Comp</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a &gt; b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>,Comp&gt; v;</span><br><span class=\"line\">    v.insert(<span class=\"number\">1</span>);</span><br><span class=\"line\">    v.insert(<span class=\"number\">3</span>);</span><br><span class=\"line\">    v.insert(<span class=\"number\">5</span>);</span><br><span class=\"line\">    v.insert(<span class=\"number\">2</span>);</span><br><span class=\"line\">    v.insert(<span class=\"number\">4</span>);</span><br><span class=\"line\">    v.insert(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>,Comp&gt;::iterator it = v.begin(); it != v.end(); ++it)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>,Comp&gt;::reverse_iterator rit = v.rbegin(); rit != v.rend(); ++rit)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *rit &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<blockquote>\n<p>5 4 3 2 1<br>1 2 3 4 5</p>\n</blockquote>\n<h4 id=\"priority-queue的重载\"><a href=\"#priority-queue的重载\" class=\"headerlink\" title=\"priority_queue的重载\"></a>priority_queue的重载</h4><p>priority_queue的重载与set的重载差不多，但中间需要一个多一个容器作为参数(暂时我也不知道为啥==)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"comment\">//重载</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">C</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a&gt;b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tpriority_queue&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;,C&gt; pq;  <span class=\"comment\">//少了vector报错</span></span><br><span class=\"line\">    pq.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">3</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">8</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">9</span>);</span><br><span class=\"line\">    pq.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size: \"</span> &lt;&lt; pq.size() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pq.empty() != <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; pq.top() &lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        pq.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数据与上面优先队列的例子相同，重载后输出结果为:</p>\n<img src=\"/2018/03/30/STL之stack-queue/queue1.png\">\n"},{"title":"STL之sort和unique","date":"2018-03-28T15:39:29.000Z","description":"常用的排序(升降序)和去重函数。","_content":"\n```C++\n#include<bits/stdc++.h> \nusing namespace std;\nbool hh(int a,int b){\t//改sort规则为降序 \n\treturn a>b;\n}\nint main(){\n\tint a[13]={1,3,6,6,8,5,7,4,9,4,2,3};\n\tint i;\n\tfor(i=0;i<12;i++)\n\t\tprintf(\"%d \",a[i]);\n\t\t\n\tprintf(\"\\nafter sort:\");\n\tsort(a,a+12);\t//默认升序 \n\tfor(i=0;i<12;i++)\n\t\tprintf(\"%d \",a[i]);\n\t\t\n\tprintf(\"\\nafter sort:\");\n\tsort(a,a+12,hh);\n\tfor(i=0;i<12;i++)\n\t\tprintf(\"%d \",a[i]);\n\t\n\tprintf(\"\\nafter unique:\");\n\tint ans=unique(a,a+12)-a;\n\tfor(i=0;i<ans;i++)\n\t\tprintf(\"%d \",a[i]);\n\treturn 0;\n}\n```\n运行结果:\n{% asset_img sort&unique.png %}","source":"_posts/STL之sort和unique.md","raw":"---\ntitle: STL之sort和unique\ndate: 2018-03-28 23:39:29\ntags: STL\ncategories: C/C++\ndescription: 常用的排序(升降序)和去重函数。\n---\n\n```C++\n#include<bits/stdc++.h> \nusing namespace std;\nbool hh(int a,int b){\t//改sort规则为降序 \n\treturn a>b;\n}\nint main(){\n\tint a[13]={1,3,6,6,8,5,7,4,9,4,2,3};\n\tint i;\n\tfor(i=0;i<12;i++)\n\t\tprintf(\"%d \",a[i]);\n\t\t\n\tprintf(\"\\nafter sort:\");\n\tsort(a,a+12);\t//默认升序 \n\tfor(i=0;i<12;i++)\n\t\tprintf(\"%d \",a[i]);\n\t\t\n\tprintf(\"\\nafter sort:\");\n\tsort(a,a+12,hh);\n\tfor(i=0;i<12;i++)\n\t\tprintf(\"%d \",a[i]);\n\t\n\tprintf(\"\\nafter unique:\");\n\tint ans=unique(a,a+12)-a;\n\tfor(i=0;i<ans;i++)\n\t\tprintf(\"%d \",a[i]);\n\treturn 0;\n}\n```\n运行结果:\n{% asset_img sort&unique.png %}","slug":"STL之sort和unique","published":1,"updated":"2020-02-06T22:40:22.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n98n001624uw112bokyu","content":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt; </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">hh</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;\t<span class=\"comment\">//改sort规则为降序 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a&gt;b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">13</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">12</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,a[i]);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nafter sort:\"</span>);</span><br><span class=\"line\">\tsort(a,a+<span class=\"number\">12</span>);\t<span class=\"comment\">//默认升序 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">12</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,a[i]);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nafter sort:\"</span>);</span><br><span class=\"line\">\tsort(a,a+<span class=\"number\">12</span>,hh);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">12</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,a[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nafter unique:\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans=unique(a,a+<span class=\"number\">12</span>)-a;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;ans;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,a[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果:</p>\n<img src=\"/2018/03/28/STL之sort和unique/sort&unique.png\">","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt; </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">hh</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;\t<span class=\"comment\">//改sort规则为降序 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a&gt;b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">13</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">12</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,a[i]);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nafter sort:\"</span>);</span><br><span class=\"line\">\tsort(a,a+<span class=\"number\">12</span>);\t<span class=\"comment\">//默认升序 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">12</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,a[i]);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nafter sort:\"</span>);</span><br><span class=\"line\">\tsort(a,a+<span class=\"number\">12</span>,hh);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">12</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,a[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nafter unique:\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans=unique(a,a+<span class=\"number\">12</span>)-a;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;ans;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,a[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果:</p>\n<img src=\"/2018/03/28/STL之sort和unique/sort&unique.png\">"},{"title":"STL之string","date":"2018-03-28T03:33:20.000Z","description":"string的常用函数以及int和string的转换。","_content":"\n### string的insert、erase和clear\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tstring s;char ss[1000];\n\tgets(ss);//无法直接gets string \n\ts=ss;\n\t//尾部添加字符字符串直接用+号 或者使用append()\n\ts+=\" wo\";\n\ts.append(\"rld!\");\n\tcout<<\"insert添加后:  \"<<s<<endl;\n\tstring::iterator i=s.begin();\n\ts.erase(s.begin()+5,i+12);\n\tcout<<\"erase删除后:  \"<<s<<endl;\n\ts.clear();\n\tcout<<\"clear后:\"<<s;\n\treturn 0;\n}\n```\n\n### string的find\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){  \n   string s=\"what are you dong\";  \n   string s1=\"are \"; \n   if(s.find(s1)<0)   //找不到返回-1\n\t\tcout<<\"not find\"<<endl;  \n   else  //找到返回位置\n    \tcout<<\"position= \"<<s.find(s1)+1<<endl;  \n   return 0;  \n}  \n```\n运行结果\n> position= 6\n\n\n### string数字处理\nc++11标准增加了全局函数std::to_string:\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nvoid StrToInt(){\n\tstring s=\"87654321\";\n\tint a=stoi(s);\n\tprintf(\"%d\\n\",a);\n} \nvoid IntToStr(){\n\tint a=12345678;\n\tstring s;\n\ts=to_string(a);\n\tcout<<s<<endl;\n}\nint main(){\n\tStrToInt();\n\tIntToStr();\t\n\treturn 0;\n}\n```\n\n运行结果\n> 87654321\n> 12345678\n\n\n### sscanf分离\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    int a,b,c;\n    char s[6]=\"4,5$6\";\n    sscanf(s,\"%d,%d$%d\",&a,&b,&c);\n    cout << a << \" \" << b << \" \" << c << endl;\n    return 0;\n}\n```\n\n运行结果:\n> 4 5 6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/STL之string.md","raw":"---\ntitle: STL之string\ndate: 2018-03-28 11:33:20\ntags: STL\ncategories: C/C++\ndescription: string的常用函数以及int和string的转换。\n---\n\n### string的insert、erase和clear\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tstring s;char ss[1000];\n\tgets(ss);//无法直接gets string \n\ts=ss;\n\t//尾部添加字符字符串直接用+号 或者使用append()\n\ts+=\" wo\";\n\ts.append(\"rld!\");\n\tcout<<\"insert添加后:  \"<<s<<endl;\n\tstring::iterator i=s.begin();\n\ts.erase(s.begin()+5,i+12);\n\tcout<<\"erase删除后:  \"<<s<<endl;\n\ts.clear();\n\tcout<<\"clear后:\"<<s;\n\treturn 0;\n}\n```\n\n### string的find\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){  \n   string s=\"what are you dong\";  \n   string s1=\"are \"; \n   if(s.find(s1)<0)   //找不到返回-1\n\t\tcout<<\"not find\"<<endl;  \n   else  //找到返回位置\n    \tcout<<\"position= \"<<s.find(s1)+1<<endl;  \n   return 0;  \n}  \n```\n运行结果\n> position= 6\n\n\n### string数字处理\nc++11标准增加了全局函数std::to_string:\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nvoid StrToInt(){\n\tstring s=\"87654321\";\n\tint a=stoi(s);\n\tprintf(\"%d\\n\",a);\n} \nvoid IntToStr(){\n\tint a=12345678;\n\tstring s;\n\ts=to_string(a);\n\tcout<<s<<endl;\n}\nint main(){\n\tStrToInt();\n\tIntToStr();\t\n\treturn 0;\n}\n```\n\n运行结果\n> 87654321\n> 12345678\n\n\n### sscanf分离\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    int a,b,c;\n    char s[6]=\"4,5$6\";\n    sscanf(s,\"%d,%d$%d\",&a,&b,&c);\n    cout << a << \" \" << b << \" \" << c << endl;\n    return 0;\n}\n```\n\n运行结果:\n> 4 5 6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"STL之string","published":1,"updated":"2020-02-06T22:40:22.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n98p001b24uwnhnk93tq","content":"<h3 id=\"string的insert、erase和clear\"><a href=\"#string的insert、erase和clear\" class=\"headerlink\" title=\"string的insert、erase和clear\"></a>string的insert、erase和clear</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s;<span class=\"keyword\">char</span> ss[<span class=\"number\">1000</span>];</span><br><span class=\"line\">\tgets(ss);<span class=\"comment\">//无法直接gets string </span></span><br><span class=\"line\">\ts=ss;</span><br><span class=\"line\">\t<span class=\"comment\">//尾部添加字符字符串直接用+号 或者使用append()</span></span><br><span class=\"line\">\ts+=<span class=\"string\">\" wo\"</span>;</span><br><span class=\"line\">\ts.append(<span class=\"string\">\"rld!\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"insert添加后:  \"</span>&lt;&lt;s&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span>::iterator i=s.begin();</span><br><span class=\"line\">\ts.erase(s.begin()+<span class=\"number\">5</span>,i+<span class=\"number\">12</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"erase删除后:  \"</span>&lt;&lt;s&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\ts.clear();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"clear后:\"</span>&lt;&lt;s;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"string的find\"><a href=\"#string的find\" class=\"headerlink\" title=\"string的find\"></a>string的find</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">   <span class=\"built_in\">string</span> s=<span class=\"string\">\"what are you dong\"</span>;  </span><br><span class=\"line\">   <span class=\"built_in\">string</span> s1=<span class=\"string\">\"are \"</span>; </span><br><span class=\"line\">   <span class=\"keyword\">if</span>(s.find(s1)&lt;<span class=\"number\">0</span>)   <span class=\"comment\">//找不到返回-1</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"not find\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">   <span class=\"keyword\">else</span>  <span class=\"comment\">//找到返回位置</span></span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"position= \"</span>&lt;&lt;s.find(s1)+<span class=\"number\">1</span>&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<blockquote>\n<p>position= 6</p>\n</blockquote>\n<h3 id=\"string数字处理\"><a href=\"#string数字处理\" class=\"headerlink\" title=\"string数字处理\"></a>string数字处理</h3><p>c++11标准增加了全局函数std::to_string:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StrToInt</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s=<span class=\"string\">\"87654321\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a=stoi(s);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,a);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IntToStr</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a=<span class=\"number\">12345678</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s;</span><br><span class=\"line\">\ts=to_string(a);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;s&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tStrToInt();</span><br><span class=\"line\">\tIntToStr();\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<blockquote>\n<p>87654321<br>12345678</p>\n</blockquote>\n<h3 id=\"sscanf分离\"><a href=\"#sscanf分离\" class=\"headerlink\" title=\"sscanf分离\"></a>sscanf分离</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b,c;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> s[<span class=\"number\">6</span>]=<span class=\"string\">\"4,5$6\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sscanf</span>(s,<span class=\"string\">\"%d,%d$%d\"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; b &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; c &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果:</p>\n<blockquote>\n<p>4 5 6</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"string的insert、erase和clear\"><a href=\"#string的insert、erase和clear\" class=\"headerlink\" title=\"string的insert、erase和clear\"></a>string的insert、erase和clear</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s;<span class=\"keyword\">char</span> ss[<span class=\"number\">1000</span>];</span><br><span class=\"line\">\tgets(ss);<span class=\"comment\">//无法直接gets string </span></span><br><span class=\"line\">\ts=ss;</span><br><span class=\"line\">\t<span class=\"comment\">//尾部添加字符字符串直接用+号 或者使用append()</span></span><br><span class=\"line\">\ts+=<span class=\"string\">\" wo\"</span>;</span><br><span class=\"line\">\ts.append(<span class=\"string\">\"rld!\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"insert添加后:  \"</span>&lt;&lt;s&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span>::iterator i=s.begin();</span><br><span class=\"line\">\ts.erase(s.begin()+<span class=\"number\">5</span>,i+<span class=\"number\">12</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"erase删除后:  \"</span>&lt;&lt;s&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\ts.clear();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"clear后:\"</span>&lt;&lt;s;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"string的find\"><a href=\"#string的find\" class=\"headerlink\" title=\"string的find\"></a>string的find</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">   <span class=\"built_in\">string</span> s=<span class=\"string\">\"what are you dong\"</span>;  </span><br><span class=\"line\">   <span class=\"built_in\">string</span> s1=<span class=\"string\">\"are \"</span>; </span><br><span class=\"line\">   <span class=\"keyword\">if</span>(s.find(s1)&lt;<span class=\"number\">0</span>)   <span class=\"comment\">//找不到返回-1</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"not find\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">   <span class=\"keyword\">else</span>  <span class=\"comment\">//找到返回位置</span></span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"position= \"</span>&lt;&lt;s.find(s1)+<span class=\"number\">1</span>&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<blockquote>\n<p>position= 6</p>\n</blockquote>\n<h3 id=\"string数字处理\"><a href=\"#string数字处理\" class=\"headerlink\" title=\"string数字处理\"></a>string数字处理</h3><p>c++11标准增加了全局函数std::to_string:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StrToInt</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s=<span class=\"string\">\"87654321\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a=stoi(s);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,a);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IntToStr</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a=<span class=\"number\">12345678</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s;</span><br><span class=\"line\">\ts=to_string(a);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;s&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tStrToInt();</span><br><span class=\"line\">\tIntToStr();\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<blockquote>\n<p>87654321<br>12345678</p>\n</blockquote>\n<h3 id=\"sscanf分离\"><a href=\"#sscanf分离\" class=\"headerlink\" title=\"sscanf分离\"></a>sscanf分离</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b,c;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> s[<span class=\"number\">6</span>]=<span class=\"string\">\"4,5$6\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sscanf</span>(s,<span class=\"string\">\"%d,%d$%d\"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; b &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; c &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果:</p>\n<blockquote>\n<p>4 5 6</p>\n</blockquote>\n"},{"title":"STL之vector","date":"2018-03-28T02:21:06.000Z","description":"介绍动态数组vector的一些基本特性","_content":"\n### vector之insert、erase\nvector有内存管理的机制，也就是说对于插入和删除，vector可以动态调整所占用的内存空间。\n常用相关函数insert、erase如下：\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tvector<int> v;\n\tfor(int i=0;i<10;i++)\n\t\tv.push_back(i); //在数组尾部插入数字\n\tvector<int> a(10);\n\tfor(int i=0;i<10;i++)\n\t\ta[i]=10-i;\n\n\tprintf(\"a[i] v[i]\\n\");\n\tfor(int i=0;i<10;i++)\n\t\tprintf(\"%2d   %2d\\n\",a[i],v[i]);\n\t//在第一个元素之前插入111  insert begin+n是在第n个元素之前插入\n\tv.insert(v.begin()+5,10);\n\tv.insert(v.end()-5,10);\n\tprintf(\"insert 插入v[i]后:  \");\n\t//iterator迭代器\n\tfor(vector<int>::iterator i=v.begin();i<v.end();i++)\n\t\tprintf(\"%d \",*i);\n\t//在最后一个元素之后插入222 insert end + n 是在n个元素之后插入\n\tprintf(\"\\nerase 删除单个数字后:  \");\n\ta.erase(a.begin()+4);\n\tfor(vector<int>::iterator i=a.begin();i<a.end();i++)\n\t\tprintf(\"%d \",*i);\n\tprintf(\"\\nerase 删除范围数字后:  \");\n\t a.erase(a.begin(),a.begin()+4);//删除这一范围内的数字\n\tfor(vector<int>::iterator i=a.begin();i<a.end();i++)\n\t\tprintf(\"%d \",*i);\n\treturn 0;\n}\n```\n\n运行截图如下:\n{% asset_img vector.png %}\n\n### vector之push_back、back、reverse、size\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main (){\n\tvector<int> a;\n\tint sum (0);\n \tfor (int i=0;i<10;i++)\n\t\ta.push_back(i);\t//结尾压入数据\n\tprintf(\"%d\\n\",a.size());\n\treverse(a.begin(),a.end());  \n\tfor (int i=0;i<10;i++)\n\t\tcout<<a[i]<<\" \";\n\tcout<<endl;\n  \twhile (!a.empty()){\n    \t sum += a.back();\n    \t a.pop_back();  //弹出最后压入的数据 (不受reverse影响)\n    \t printf(\"%d \",a.size());\n\t}\n\tprintf(\"\\n%d\\n\",a.size());\n  \tcout << \"total: \" << sum << '\\n';\n\treturn 0;\n}\n```\n\n运行结果\n{% asset_img vector1.png %}\n\n### 求和accumulate\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    vector<int> v;\n    for(int i = 0; i < 10; ++i )\n        v.push_back(i);\n    cout << accumulate(v.begin(),v.end(),0) << endl;\n    return 0;\n}\n```\n运行结果\n> 45\n","source":"_posts/STL之vector.md","raw":"---\ntitle: STL之vector\ndate: 2018-03-28 10:21:06\ntags: STL\ncategories: C/C++\ndescription: 介绍动态数组vector的一些基本特性\n---\n\n### vector之insert、erase\nvector有内存管理的机制，也就是说对于插入和删除，vector可以动态调整所占用的内存空间。\n常用相关函数insert、erase如下：\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tvector<int> v;\n\tfor(int i=0;i<10;i++)\n\t\tv.push_back(i); //在数组尾部插入数字\n\tvector<int> a(10);\n\tfor(int i=0;i<10;i++)\n\t\ta[i]=10-i;\n\n\tprintf(\"a[i] v[i]\\n\");\n\tfor(int i=0;i<10;i++)\n\t\tprintf(\"%2d   %2d\\n\",a[i],v[i]);\n\t//在第一个元素之前插入111  insert begin+n是在第n个元素之前插入\n\tv.insert(v.begin()+5,10);\n\tv.insert(v.end()-5,10);\n\tprintf(\"insert 插入v[i]后:  \");\n\t//iterator迭代器\n\tfor(vector<int>::iterator i=v.begin();i<v.end();i++)\n\t\tprintf(\"%d \",*i);\n\t//在最后一个元素之后插入222 insert end + n 是在n个元素之后插入\n\tprintf(\"\\nerase 删除单个数字后:  \");\n\ta.erase(a.begin()+4);\n\tfor(vector<int>::iterator i=a.begin();i<a.end();i++)\n\t\tprintf(\"%d \",*i);\n\tprintf(\"\\nerase 删除范围数字后:  \");\n\t a.erase(a.begin(),a.begin()+4);//删除这一范围内的数字\n\tfor(vector<int>::iterator i=a.begin();i<a.end();i++)\n\t\tprintf(\"%d \",*i);\n\treturn 0;\n}\n```\n\n运行截图如下:\n{% asset_img vector.png %}\n\n### vector之push_back、back、reverse、size\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main (){\n\tvector<int> a;\n\tint sum (0);\n \tfor (int i=0;i<10;i++)\n\t\ta.push_back(i);\t//结尾压入数据\n\tprintf(\"%d\\n\",a.size());\n\treverse(a.begin(),a.end());  \n\tfor (int i=0;i<10;i++)\n\t\tcout<<a[i]<<\" \";\n\tcout<<endl;\n  \twhile (!a.empty()){\n    \t sum += a.back();\n    \t a.pop_back();  //弹出最后压入的数据 (不受reverse影响)\n    \t printf(\"%d \",a.size());\n\t}\n\tprintf(\"\\n%d\\n\",a.size());\n  \tcout << \"total: \" << sum << '\\n';\n\treturn 0;\n}\n```\n\n运行结果\n{% asset_img vector1.png %}\n\n### 求和accumulate\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    vector<int> v;\n    for(int i = 0; i < 10; ++i )\n        v.push_back(i);\n    cout << accumulate(v.begin(),v.end(),0) << endl;\n    return 0;\n}\n```\n运行结果\n> 45\n","slug":"STL之vector","published":1,"updated":"2020-02-06T22:40:22.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n98r001e24uw32tk1nn7","content":"<h3 id=\"vector之insert、erase\"><a href=\"#vector之insert、erase\" class=\"headerlink\" title=\"vector之insert、erase\"></a>vector之insert、erase</h3><p>vector有内存管理的机制，也就是说对于插入和删除，vector可以动态调整所占用的内存空间。<br>常用相关函数insert、erase如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\tv.push_back(i); <span class=\"comment\">//在数组尾部插入数字</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; a(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\ta[i]=<span class=\"number\">10</span>-i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a[i] v[i]\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%2d   %2d\\n\"</span>,a[i],v[i]);</span><br><span class=\"line\">\t<span class=\"comment\">//在第一个元素之前插入111  insert begin+n是在第n个元素之前插入</span></span><br><span class=\"line\">\tv.insert(v.begin()+<span class=\"number\">5</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">\tv.insert(v.end()<span class=\"number\">-5</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"insert 插入v[i]后:  \"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//iterator迭代器</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=v.begin();i&lt;v.end();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,*i);</span><br><span class=\"line\">\t<span class=\"comment\">//在最后一个元素之后插入222 insert end + n 是在n个元素之后插入</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nerase 删除单个数字后:  \"</span>);</span><br><span class=\"line\">\ta.erase(a.begin()+<span class=\"number\">4</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=a.begin();i&lt;a.end();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,*i);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nerase 删除范围数字后:  \"</span>);</span><br><span class=\"line\">\t a.erase(a.begin(),a.begin()+<span class=\"number\">4</span>);<span class=\"comment\">//删除这一范围内的数字</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=a.begin();i&lt;a.end();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,*i);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行截图如下:</p>\n<img src=\"/2018/03/28/STL之vector/vector.png\">\n\n<h3 id=\"vector之push-back、back、reverse、size\"><a href=\"#vector之push-back、back、reverse、size\" class=\"headerlink\" title=\"vector之push_back、back、reverse、size\"></a>vector之push_back、back、reverse、size</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; a;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span> <span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"> \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\ta.push_back(i);\t<span class=\"comment\">//结尾压入数据</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,a.size());</span><br><span class=\"line\">\treverse(a.begin(),a.end());  </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;a[i]&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span> (!a.empty())&#123;</span><br><span class=\"line\">    \t sum += a.back();</span><br><span class=\"line\">    \t a.pop_back();  <span class=\"comment\">//弹出最后压入的数据 (不受reverse影响)</span></span><br><span class=\"line\">    \t <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,a.size());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n%d\\n\"</span>,a.size());</span><br><span class=\"line\">  \t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"total: \"</span> &lt;&lt; sum &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<img src=\"/2018/03/28/STL之vector/vector1.png\">\n\n<h3 id=\"求和accumulate\"><a href=\"#求和accumulate\" class=\"headerlink\" title=\"求和accumulate\"></a>求和accumulate</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i )</span><br><span class=\"line\">        v.push_back(i);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; accumulate(v.begin(),v.end(),<span class=\"number\">0</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<blockquote>\n<p>45</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"vector之insert、erase\"><a href=\"#vector之insert、erase\" class=\"headerlink\" title=\"vector之insert、erase\"></a>vector之insert、erase</h3><p>vector有内存管理的机制，也就是说对于插入和删除，vector可以动态调整所占用的内存空间。<br>常用相关函数insert、erase如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\tv.push_back(i); <span class=\"comment\">//在数组尾部插入数字</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; a(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\ta[i]=<span class=\"number\">10</span>-i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a[i] v[i]\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%2d   %2d\\n\"</span>,a[i],v[i]);</span><br><span class=\"line\">\t<span class=\"comment\">//在第一个元素之前插入111  insert begin+n是在第n个元素之前插入</span></span><br><span class=\"line\">\tv.insert(v.begin()+<span class=\"number\">5</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">\tv.insert(v.end()<span class=\"number\">-5</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"insert 插入v[i]后:  \"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//iterator迭代器</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=v.begin();i&lt;v.end();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,*i);</span><br><span class=\"line\">\t<span class=\"comment\">//在最后一个元素之后插入222 insert end + n 是在n个元素之后插入</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nerase 删除单个数字后:  \"</span>);</span><br><span class=\"line\">\ta.erase(a.begin()+<span class=\"number\">4</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=a.begin();i&lt;a.end();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,*i);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nerase 删除范围数字后:  \"</span>);</span><br><span class=\"line\">\t a.erase(a.begin(),a.begin()+<span class=\"number\">4</span>);<span class=\"comment\">//删除这一范围内的数字</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=a.begin();i&lt;a.end();i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,*i);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行截图如下:</p>\n<img src=\"/2018/03/28/STL之vector/vector.png\">\n\n<h3 id=\"vector之push-back、back、reverse、size\"><a href=\"#vector之push-back、back、reverse、size\" class=\"headerlink\" title=\"vector之push_back、back、reverse、size\"></a>vector之push_back、back、reverse、size</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; a;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span> <span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"> \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\ta.push_back(i);\t<span class=\"comment\">//结尾压入数据</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,a.size());</span><br><span class=\"line\">\treverse(a.begin(),a.end());  </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;a[i]&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span> (!a.empty())&#123;</span><br><span class=\"line\">    \t sum += a.back();</span><br><span class=\"line\">    \t a.pop_back();  <span class=\"comment\">//弹出最后压入的数据 (不受reverse影响)</span></span><br><span class=\"line\">    \t <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,a.size());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n%d\\n\"</span>,a.size());</span><br><span class=\"line\">  \t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"total: \"</span> &lt;&lt; sum &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<img src=\"/2018/03/28/STL之vector/vector1.png\">\n\n<h3 id=\"求和accumulate\"><a href=\"#求和accumulate\" class=\"headerlink\" title=\"求和accumulate\"></a>求和accumulate</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i )</span><br><span class=\"line\">        v.push_back(i);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; accumulate(v.begin(),v.end(),<span class=\"number\">0</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<blockquote>\n<p>45</p>\n</blockquote>\n"},{"title":"Spring-AOP","author":"edxuanlen","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2020-03-08T07:37:30.000Z","img":null,"coverImg":null,"password":null,"summary":null,"description":"Spring-AOP的学习","_content":"\n\n\n# Spring AOP\n\n> 传统OOP开发中的代码逻辑自上而下，而这些过程会产生横切性的问题。而这些问题又与主业务逻辑关系不大，散落在代码的各个地方，难以维护。\n> AOP的编程思想就是把这些问题和主业务逻辑进行分离，从而起到解耦的目的。\n\n## 技术本质\n\nAOP 底层原理： 动态代理(cglib 动态代理,JDK 动态代理)\n\n如果是接口，就是JDK 动态代理， 否则是cglib动态代理\n默认是java动态代理  ","source":"_posts/Spring-AOP.md","raw":"---\ntitle: Spring-AOP\nauthor: edxuanlen\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2020-03-08 15:37:30\nimg:\ncoverImg:\npassword: \nsummary: \ntags: \n    - SpringBoot\ncategories:\n    - SpringBoot\ndescription: Spring-AOP的学习\n---\n\n\n\n# Spring AOP\n\n> 传统OOP开发中的代码逻辑自上而下，而这些过程会产生横切性的问题。而这些问题又与主业务逻辑关系不大，散落在代码的各个地方，难以维护。\n> AOP的编程思想就是把这些问题和主业务逻辑进行分离，从而起到解耦的目的。\n\n## 技术本质\n\nAOP 底层原理： 动态代理(cglib 动态代理,JDK 动态代理)\n\n如果是接口，就是JDK 动态代理， 否则是cglib动态代理\n默认是java动态代理  ","slug":"Spring-AOP","published":1,"updated":"2020-03-12T07:22:50.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n98u001j24uwdk9y0st9","content":"<h1 id=\"Spring-AOP\"><a href=\"#Spring-AOP\" class=\"headerlink\" title=\"Spring AOP\"></a>Spring AOP</h1><blockquote>\n<p>传统OOP开发中的代码逻辑自上而下，而这些过程会产生横切性的问题。而这些问题又与主业务逻辑关系不大，散落在代码的各个地方，难以维护。<br>AOP的编程思想就是把这些问题和主业务逻辑进行分离，从而起到解耦的目的。</p>\n</blockquote>\n<h2 id=\"技术本质\"><a href=\"#技术本质\" class=\"headerlink\" title=\"技术本质\"></a>技术本质</h2><p>AOP 底层原理： 动态代理(cglib 动态代理,JDK 动态代理)</p>\n<p>如果是接口，就是JDK 动态代理， 否则是cglib动态代理<br>默认是java动态代理  </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring-AOP\"><a href=\"#Spring-AOP\" class=\"headerlink\" title=\"Spring AOP\"></a>Spring AOP</h1><blockquote>\n<p>传统OOP开发中的代码逻辑自上而下，而这些过程会产生横切性的问题。而这些问题又与主业务逻辑关系不大，散落在代码的各个地方，难以维护。<br>AOP的编程思想就是把这些问题和主业务逻辑进行分离，从而起到解耦的目的。</p>\n</blockquote>\n<h2 id=\"技术本质\"><a href=\"#技术本质\" class=\"headerlink\" title=\"技术本质\"></a>技术本质</h2><p>AOP 底层原理： 动态代理(cglib 动态代理,JDK 动态代理)</p>\n<p>如果是接口，就是JDK 动态代理， 否则是cglib动态代理<br>默认是java动态代理  </p>\n"},{"title":"Spring-IOC","author":"edxuanlen","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2020-03-09T07:08:21.000Z","img":null,"coverImg":null,"password":null,"summary":null,"description":"Spring-IOC的学习","_content":"\n\nIOC也称为依赖注入， **创建bean时注入这些依赖项**。\n\n\n为什么使用Spring？\n\n没有Spring ，处理对象依赖问题\n内部new对象： 依赖对象\n\n\n对象频繁创造，依赖关系复杂\n\n解决： \n\n1. 以来对象频繁创造 \n    单例 工厂 创建对象  newIntance() 反射\n\n2. 以来关系复杂\n    外部传入： \n        a. 构造器传参\n        b. 方法传参\n        c. 属性反射 field.set(x)\n\n\n\n    ","source":"_posts/Spring-IOC.md","raw":"---\ntitle: Spring-IOC\nauthor: edxuanlen\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2020-03-09 15:08:21\nimg:\ncoverImg:\npassword:\nsummary:\ntags: \n    - SpringBoot\ncategories:\n    - SpringBoot\ndescription: Spring-IOC的学习\n---\n\n\nIOC也称为依赖注入， **创建bean时注入这些依赖项**。\n\n\n为什么使用Spring？\n\n没有Spring ，处理对象依赖问题\n内部new对象： 依赖对象\n\n\n对象频繁创造，依赖关系复杂\n\n解决： \n\n1. 以来对象频繁创造 \n    单例 工厂 创建对象  newIntance() 反射\n\n2. 以来关系复杂\n    外部传入： \n        a. 构造器传参\n        b. 方法传参\n        c. 属性反射 field.set(x)\n\n\n\n    ","slug":"Spring-IOC","published":1,"updated":"2020-03-24T14:55:27.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n98w001m24uwbc3sgb81","content":"<p>IOC也称为依赖注入， <strong>创建bean时注入这些依赖项</strong>。</p>\n<p>为什么使用Spring？</p>\n<p>没有Spring ，处理对象依赖问题<br>内部new对象： 依赖对象</p>\n<p>对象频繁创造，依赖关系复杂</p>\n<p>解决： </p>\n<ol>\n<li><p>以来对象频繁创造<br> 单例 工厂 创建对象  newIntance() 反射</p>\n</li>\n<li><p>以来关系复杂<br> 外部传入： </p>\n<pre><code>a. 构造器传参\nb. 方法传参\nc. 属性反射 field.set(x)</code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>IOC也称为依赖注入， <strong>创建bean时注入这些依赖项</strong>。</p>\n<p>为什么使用Spring？</p>\n<p>没有Spring ，处理对象依赖问题<br>内部new对象： 依赖对象</p>\n<p>对象频繁创造，依赖关系复杂</p>\n<p>解决： </p>\n<ol>\n<li><p>以来对象频繁创造<br> 单例 工厂 创建对象  newIntance() 反射</p>\n</li>\n<li><p>以来关系复杂<br> 外部传入： </p>\n<pre><code>a. 构造器传参\nb. 方法传参\nc. 属性反射 field.set(x)</code></pre></li>\n</ol>\n"},{"title":"Spring_boot入门","date":"2019-10-01T14:17:28.000Z","description":"Sprint_boot入门的一些简述和安装以及简单的例子。","top":true,"_content":"\n## 是什么\n\n> spring boot其实就是一个启动spring项目的一个工具而已。从最根本上来讲，Spring Boot就是一些库的集合，它能够被任意项目的构建系统所使用。  \n> 其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。\n> Spring 技术栈的大整合，J2EE开发的一站式解决方案\n\n## 微服务  \n\n2014年，Martin fowler 发表了微服务的设计思想 （What are Microservices）  \n微服务其实是一种架构风格  \n一个应用应该是一组小型服务，可以通过HTTP来进行沟通  \n\n\n\n\n\n## 安装准备\n\n1. java SDK  \n    8 <= JDK <= 11\n2. Maven  \n    [Maven](https://maven.apache.org/) >= 3.3  \n    在许多操作系统上，Maven可以与软件包管理器一起安装。如果您使用OSX Homebrew，请尝试brew install maven。  \n    Ubuntu用户可以运行sudo apt-get install maven。  \n    使用Chocolatey的 Windows用户可以从提升（管理员）提示符运行choco install maven。\n3. Gradle  \n    [Gradle](https://gradle.org) >= 4.4  \n    使用sdkman安装  \n    curl -s \"https://get.sdkman.io\" | bash  \n    安装完后输入  \n    source \"$HOME/.sdkman/bin/sdkman-init.sh\"\n\n     sdk install gradle 5.6.2\n\n\n4. Sprint Boot CLI  \n    sdk install springboot  \n\n\n\n### 使用Spring CLI示例\n\n下面是一个相当简单的web应用，你可以用它测试Spring CLI安装是否成功。创建一个名叫app.groovy的文件：\n\n```java\n@RestController\nclass ThisWillActuallyRun {\n\n    @RequestMapping(\"/\")\n    String home() {\n        \"Hello World!\"\n    }\n}\n```\n\n然后只需在shell中运行以下命令：\n```sh\n$ spring run app.groovy\n```\n\n注：首次运行该应用将会花费一些时间，因为需要下载依赖，后续运行将会快很多。\n\n使用你最喜欢的浏览器打开[localhost:8080](localhost:8080)，然后就可以看到如下输出：\n\nHello World!\n\n\n下一篇 : [第一个应用的开发](https://edxuanlen.gitee.io/2019/10/02/Spring-boot%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%9A%84%E5%BC%80%E5%8F%91/)","source":"_posts/Spring-boot入门.md","raw":"---\ntitle: Spring_boot入门\ndate: 2019-10-01 22:17:28\ntags:\n    - Spring\n\ncategories:\n    - JAVA\n\ndescription: Sprint_boot入门的一些简述和安装以及简单的例子。\ntop: true\n---\n\n## 是什么\n\n> spring boot其实就是一个启动spring项目的一个工具而已。从最根本上来讲，Spring Boot就是一些库的集合，它能够被任意项目的构建系统所使用。  \n> 其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。\n> Spring 技术栈的大整合，J2EE开发的一站式解决方案\n\n## 微服务  \n\n2014年，Martin fowler 发表了微服务的设计思想 （What are Microservices）  \n微服务其实是一种架构风格  \n一个应用应该是一组小型服务，可以通过HTTP来进行沟通  \n\n\n\n\n\n## 安装准备\n\n1. java SDK  \n    8 <= JDK <= 11\n2. Maven  \n    [Maven](https://maven.apache.org/) >= 3.3  \n    在许多操作系统上，Maven可以与软件包管理器一起安装。如果您使用OSX Homebrew，请尝试brew install maven。  \n    Ubuntu用户可以运行sudo apt-get install maven。  \n    使用Chocolatey的 Windows用户可以从提升（管理员）提示符运行choco install maven。\n3. Gradle  \n    [Gradle](https://gradle.org) >= 4.4  \n    使用sdkman安装  \n    curl -s \"https://get.sdkman.io\" | bash  \n    安装完后输入  \n    source \"$HOME/.sdkman/bin/sdkman-init.sh\"\n\n     sdk install gradle 5.6.2\n\n\n4. Sprint Boot CLI  \n    sdk install springboot  \n\n\n\n### 使用Spring CLI示例\n\n下面是一个相当简单的web应用，你可以用它测试Spring CLI安装是否成功。创建一个名叫app.groovy的文件：\n\n```java\n@RestController\nclass ThisWillActuallyRun {\n\n    @RequestMapping(\"/\")\n    String home() {\n        \"Hello World!\"\n    }\n}\n```\n\n然后只需在shell中运行以下命令：\n```sh\n$ spring run app.groovy\n```\n\n注：首次运行该应用将会花费一些时间，因为需要下载依赖，后续运行将会快很多。\n\n使用你最喜欢的浏览器打开[localhost:8080](localhost:8080)，然后就可以看到如下输出：\n\nHello World!\n\n\n下一篇 : [第一个应用的开发](https://edxuanlen.gitee.io/2019/10/02/Spring-boot%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%9A%84%E5%BC%80%E5%8F%91/)","slug":"Spring-boot入门","published":1,"updated":"2020-02-06T22:40:22.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n98z001r24uwugwl6gbh","content":"<h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><blockquote>\n<p>spring boot其实就是一个启动spring项目的一个工具而已。从最根本上来讲，Spring Boot就是一些库的集合，它能够被任意项目的构建系统所使用。<br>其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。<br>Spring 技术栈的大整合，J2EE开发的一站式解决方案</p>\n</blockquote>\n<h2 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h2><p>2014年，Martin fowler 发表了微服务的设计思想 （What are Microservices）<br>微服务其实是一种架构风格<br>一个应用应该是一组小型服务，可以通过HTTP来进行沟通  </p>\n<h2 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h2><ol>\n<li><p>java SDK<br> 8 &lt;= JDK &lt;= 11</p>\n</li>\n<li><p>Maven<br> <a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven</a> &gt;= 3.3<br> 在许多操作系统上，Maven可以与软件包管理器一起安装。如果您使用OSX Homebrew，请尝试brew install maven。<br> Ubuntu用户可以运行sudo apt-get install maven。<br> 使用Chocolatey的 Windows用户可以从提升（管理员）提示符运行choco install maven。</p>\n</li>\n<li><p>Gradle<br> <a href=\"https://gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> &gt;= 4.4<br> 使用sdkman安装<br> curl -s “<a href=\"https://get.sdkman.io&quot;\" target=\"_blank\" rel=\"noopener\">https://get.sdkman.io&quot;</a> | bash<br> 安装完后输入<br> source “$HOME/.sdkman/bin/sdkman-init.sh”</p>\n<p>  sdk install gradle 5.6.2</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li>Sprint Boot CLI<br> sdk install springboot  </li>\n</ol>\n<h3 id=\"使用Spring-CLI示例\"><a href=\"#使用Spring-CLI示例\" class=\"headerlink\" title=\"使用Spring CLI示例\"></a>使用Spring CLI示例</h3><p>下面是一个相当简单的web应用，你可以用它测试Spring CLI安装是否成功。创建一个名叫app.groovy的文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThisWillActuallyRun</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">home</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"string\">\"Hello World!\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后只需在shell中运行以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ spring run app.groovy</span><br></pre></td></tr></table></figure>\n\n<p>注：首次运行该应用将会花费一些时间，因为需要下载依赖，后续运行将会快很多。</p>\n<p>使用你最喜欢的浏览器打开<a href=\"localhost:8080\" target=\"_blank\" rel=\"noopener\">localhost:8080</a>，然后就可以看到如下输出：</p>\n<p>Hello World!</p>\n<p>下一篇 : <a href=\"https://edxuanlen.gitee.io/2019/10/02/Spring-boot%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%9A%84%E5%BC%80%E5%8F%91/\" target=\"_blank\" rel=\"noopener\">第一个应用的开发</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><blockquote>\n<p>spring boot其实就是一个启动spring项目的一个工具而已。从最根本上来讲，Spring Boot就是一些库的集合，它能够被任意项目的构建系统所使用。<br>其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。<br>Spring 技术栈的大整合，J2EE开发的一站式解决方案</p>\n</blockquote>\n<h2 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h2><p>2014年，Martin fowler 发表了微服务的设计思想 （What are Microservices）<br>微服务其实是一种架构风格<br>一个应用应该是一组小型服务，可以通过HTTP来进行沟通  </p>\n<h2 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h2><ol>\n<li><p>java SDK<br> 8 &lt;= JDK &lt;= 11</p>\n</li>\n<li><p>Maven<br> <a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven</a> &gt;= 3.3<br> 在许多操作系统上，Maven可以与软件包管理器一起安装。如果您使用OSX Homebrew，请尝试brew install maven。<br> Ubuntu用户可以运行sudo apt-get install maven。<br> 使用Chocolatey的 Windows用户可以从提升（管理员）提示符运行choco install maven。</p>\n</li>\n<li><p>Gradle<br> <a href=\"https://gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> &gt;= 4.4<br> 使用sdkman安装<br> curl -s “<a href=\"https://get.sdkman.io&quot;\" target=\"_blank\" rel=\"noopener\">https://get.sdkman.io&quot;</a> | bash<br> 安装完后输入<br> source “$HOME/.sdkman/bin/sdkman-init.sh”</p>\n<p>  sdk install gradle 5.6.2</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li>Sprint Boot CLI<br> sdk install springboot  </li>\n</ol>\n<h3 id=\"使用Spring-CLI示例\"><a href=\"#使用Spring-CLI示例\" class=\"headerlink\" title=\"使用Spring CLI示例\"></a>使用Spring CLI示例</h3><p>下面是一个相当简单的web应用，你可以用它测试Spring CLI安装是否成功。创建一个名叫app.groovy的文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThisWillActuallyRun</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">home</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"string\">\"Hello World!\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后只需在shell中运行以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ spring run app.groovy</span><br></pre></td></tr></table></figure>\n\n<p>注：首次运行该应用将会花费一些时间，因为需要下载依赖，后续运行将会快很多。</p>\n<p>使用你最喜欢的浏览器打开<a href=\"localhost:8080\" target=\"_blank\" rel=\"noopener\">localhost:8080</a>，然后就可以看到如下输出：</p>\n<p>Hello World!</p>\n<p>下一篇 : <a href=\"https://edxuanlen.gitee.io/2019/10/02/Spring-boot%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%9A%84%E5%BC%80%E5%8F%91/\" target=\"_blank\" rel=\"noopener\">第一个应用的开发</a></p>\n"},{"title":"Spring_boot第一个应用的开发","date":"2019-10-02T02:45:00.000Z","description":"Spring_boot 的第一个应用","top":null,"_content":"\n## 生成项目\n\n### 使用Intellij IDEA\n\n点击菜单栏 File ➤New➤Project ➤ 选择 Spring Initializr 创建界面如下图，可以看到图中 default 指定的 Initializr Service URL 就是 Spring 官方提供的 Spring Initializr 工具地址，一般默认即可，所以这里创建的工程实际上也是基于它的 Web 工具来实现的。\n\n\n关于工程的一些信息：\n\n- Group 顾名思义就是你的公司名，一般是填写com.公司名。\n- Artifact groupId 和 artifactId 是maven管理项目包时用作区分的字段，就像是地图上的坐标。这里填写项目名即可。\n-Type 就是构建的项目类型，意思就是你希望你的项目使用什么工具构建，可选 maven 和 gradle 一般选 maven。\n- Language 顾名思义就是你的项目用啥语言开发，可选 Java、Groovy、Kotlin\n- Packaging 就是你希望你的项目打成什么形式的包，可选 Jar、War SpringBoot 项目一般选 Jar\n- Java Version 意指项目使用的 java 版本，根据你的需要选择。\n- Version 项目的初始版本，默认即可。\n- Name 项目名称。\n- Description 项目描述，默认即可。\n- Package 包名，填完 Group 和 Artifact 后自动生成，默认即可。\n\n选择需要的配置\n\n其中web中的web必选\n\n然后生成项目\n\n\n### spring 官网\n\n[spring.io](spring.io)网站包含很多Spring Boot\"入门\"指南，如果你正在找特定问题的解决方案，可以先去那瞅瞅。你也可以简化下面的步骤，直接从[start.spring.io](spring.io)的依赖搜索器选中web starter，这会自动生成一个新的项目结构。具体详情参考[文档](https://github.com/spring-io/initializr)。\n\n## POM\n\n创建Maven pom.xml文件，是构建爱你项目的处方。如下:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>myproject</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.4.1.BUILD-SNAPSHOT</version>\n    </parent>\n\n    <!-- Additional lines to be added here... -->\n\n    <!-- (you don't need this if you are using a .RELEASE version) -->\n    <repositories>\n        <repository>\n            <id>spring-snapshots</id>\n            <url>http://repo.spring.io/snapshot</url>\n            <snapshots><enabled>true</enabled></snapshots>\n        </repository>\n        <repository>\n            <id>spring-milestones</id>\n            <url>http://repo.spring.io/milestone</url>\n        </repository>\n    </repositories>\n    <pluginRepositories>\n        <pluginRepository>\n            <id>spring-snapshots</id>\n            <url>http://repo.spring.io/snapshot</url>\n        </pluginRepository>\n        <pluginRepository>\n            <id>spring-milestones</id>\n            <url>http://repo.spring.io/milestone</url>\n        </pluginRepository>\n    </pluginRepositories>\n</project>\n```\n这样一个可工作的构建就完成了，你可以通过运行mvn package测试它（暂时忽略\"jar将是空的-没有包含任何内容！\"的警告）。\n\n\n## 编写代码\n\n为了完成应用程序，我们需要创建一个单独的Java文件。Maven默认会编译src/main/java下的源码，所以你需要创建那样的文件结构，并添加一个名为src/main/java/Example.java的文件：\n\n```java\n// Example.java\n\nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@EnableAutoConfiguration\n\npublic class Example {\n\n    @RequestMapping(\"/\")\n    String home() {\n        return \"Hello World!\";\n    }\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(Example.class, args);\n    }\n\n}\n```\n\n## 解析代码\n\n### @RestController 和 @RequestMapping 注解\n\n\nExample类上使用的第一个注解是@RestController，这被称为构造型（stereotype）注解。它为阅读代码的人提供暗示（这是一个支持REST的控制器），对于Spring，该类扮演了一个特殊角色。在本示例中，我们的类是一个web @Controller，所以当web请求进来时，Spring会考虑是否使用它来处理。\n\n@RequestMapping注解提供路由信息，它告诉Spring任何来自\"/\"路径的HTTP请求都应该被映射到home方法。@RestController注解告诉Spring以字符串的形式渲染结果，并直接返回给调用者。\n\n注：@RestController和@RequestMapping是Spring MVC中的注解（它们不是Spring Boot的特定部分），具体参考Spring文档的[MVC章节](http://mvc.linesh.tw/)。\n\n### @EnableAutoConfiguration注解\n\n第二个类级别的注解是@EnableAutoConfiguration，这个注解告诉Spring Boot根据添加的jar依赖猜测你想如何配置Spring。由于spring-boot-starter-web添加了Tomcat和Spring MVC，所以auto-configuration将假定你正在开发一个web应用，并对Spring进行相应地设置。\n\nStarters和Auto-Configuration：Auto-configuration设计成可以跟\"Starters\"一起很好的使用，但这两个概念没有直接的联系。你可以自由地挑选starters以外的jar依赖，Spring Boot仍会尽最大努力去自动配置你的应用。\n\n### main方法\n\n应用程序的最后部分是main方法，这是一个标准的方法，它遵循Java对于一个应用程序入口点的约定。我们的main方法通过调用run，将业务委托给了Spring Boot的SpringApplication类。SpringApplication将引导我们的应用，启动Spring，相应地启动被自动配置的Tomcat web服务器。我们需要将Example.class作为参数传递给run方法，以此告诉SpringApplication谁是主要的Spring组件，并传递args数组以暴露所有的命令行参数。\n\n## 运行代码\n\n到此，示例应用可以工作了。由于使用了spring-boot-starter-parent POM，这样我们就有了一个非常有用的run目标来启动程序。在项目根目录下输入mvn spring-boot:run启动应用：\n\n","source":"_posts/Spring-boot第一个应用的开发.md","raw":"---\ntitle: Spring_boot第一个应用的开发\ndate: 2019-10-02 10:45:00\ntags:\n    - Spring\n\ncategories:\n    - JAVA\ndescription: Spring_boot 的第一个应用\ntop:\n---\n\n## 生成项目\n\n### 使用Intellij IDEA\n\n点击菜单栏 File ➤New➤Project ➤ 选择 Spring Initializr 创建界面如下图，可以看到图中 default 指定的 Initializr Service URL 就是 Spring 官方提供的 Spring Initializr 工具地址，一般默认即可，所以这里创建的工程实际上也是基于它的 Web 工具来实现的。\n\n\n关于工程的一些信息：\n\n- Group 顾名思义就是你的公司名，一般是填写com.公司名。\n- Artifact groupId 和 artifactId 是maven管理项目包时用作区分的字段，就像是地图上的坐标。这里填写项目名即可。\n-Type 就是构建的项目类型，意思就是你希望你的项目使用什么工具构建，可选 maven 和 gradle 一般选 maven。\n- Language 顾名思义就是你的项目用啥语言开发，可选 Java、Groovy、Kotlin\n- Packaging 就是你希望你的项目打成什么形式的包，可选 Jar、War SpringBoot 项目一般选 Jar\n- Java Version 意指项目使用的 java 版本，根据你的需要选择。\n- Version 项目的初始版本，默认即可。\n- Name 项目名称。\n- Description 项目描述，默认即可。\n- Package 包名，填完 Group 和 Artifact 后自动生成，默认即可。\n\n选择需要的配置\n\n其中web中的web必选\n\n然后生成项目\n\n\n### spring 官网\n\n[spring.io](spring.io)网站包含很多Spring Boot\"入门\"指南，如果你正在找特定问题的解决方案，可以先去那瞅瞅。你也可以简化下面的步骤，直接从[start.spring.io](spring.io)的依赖搜索器选中web starter，这会自动生成一个新的项目结构。具体详情参考[文档](https://github.com/spring-io/initializr)。\n\n## POM\n\n创建Maven pom.xml文件，是构建爱你项目的处方。如下:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>myproject</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.4.1.BUILD-SNAPSHOT</version>\n    </parent>\n\n    <!-- Additional lines to be added here... -->\n\n    <!-- (you don't need this if you are using a .RELEASE version) -->\n    <repositories>\n        <repository>\n            <id>spring-snapshots</id>\n            <url>http://repo.spring.io/snapshot</url>\n            <snapshots><enabled>true</enabled></snapshots>\n        </repository>\n        <repository>\n            <id>spring-milestones</id>\n            <url>http://repo.spring.io/milestone</url>\n        </repository>\n    </repositories>\n    <pluginRepositories>\n        <pluginRepository>\n            <id>spring-snapshots</id>\n            <url>http://repo.spring.io/snapshot</url>\n        </pluginRepository>\n        <pluginRepository>\n            <id>spring-milestones</id>\n            <url>http://repo.spring.io/milestone</url>\n        </pluginRepository>\n    </pluginRepositories>\n</project>\n```\n这样一个可工作的构建就完成了，你可以通过运行mvn package测试它（暂时忽略\"jar将是空的-没有包含任何内容！\"的警告）。\n\n\n## 编写代码\n\n为了完成应用程序，我们需要创建一个单独的Java文件。Maven默认会编译src/main/java下的源码，所以你需要创建那样的文件结构，并添加一个名为src/main/java/Example.java的文件：\n\n```java\n// Example.java\n\nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@EnableAutoConfiguration\n\npublic class Example {\n\n    @RequestMapping(\"/\")\n    String home() {\n        return \"Hello World!\";\n    }\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(Example.class, args);\n    }\n\n}\n```\n\n## 解析代码\n\n### @RestController 和 @RequestMapping 注解\n\n\nExample类上使用的第一个注解是@RestController，这被称为构造型（stereotype）注解。它为阅读代码的人提供暗示（这是一个支持REST的控制器），对于Spring，该类扮演了一个特殊角色。在本示例中，我们的类是一个web @Controller，所以当web请求进来时，Spring会考虑是否使用它来处理。\n\n@RequestMapping注解提供路由信息，它告诉Spring任何来自\"/\"路径的HTTP请求都应该被映射到home方法。@RestController注解告诉Spring以字符串的形式渲染结果，并直接返回给调用者。\n\n注：@RestController和@RequestMapping是Spring MVC中的注解（它们不是Spring Boot的特定部分），具体参考Spring文档的[MVC章节](http://mvc.linesh.tw/)。\n\n### @EnableAutoConfiguration注解\n\n第二个类级别的注解是@EnableAutoConfiguration，这个注解告诉Spring Boot根据添加的jar依赖猜测你想如何配置Spring。由于spring-boot-starter-web添加了Tomcat和Spring MVC，所以auto-configuration将假定你正在开发一个web应用，并对Spring进行相应地设置。\n\nStarters和Auto-Configuration：Auto-configuration设计成可以跟\"Starters\"一起很好的使用，但这两个概念没有直接的联系。你可以自由地挑选starters以外的jar依赖，Spring Boot仍会尽最大努力去自动配置你的应用。\n\n### main方法\n\n应用程序的最后部分是main方法，这是一个标准的方法，它遵循Java对于一个应用程序入口点的约定。我们的main方法通过调用run，将业务委托给了Spring Boot的SpringApplication类。SpringApplication将引导我们的应用，启动Spring，相应地启动被自动配置的Tomcat web服务器。我们需要将Example.class作为参数传递给run方法，以此告诉SpringApplication谁是主要的Spring组件，并传递args数组以暴露所有的命令行参数。\n\n## 运行代码\n\n到此，示例应用可以工作了。由于使用了spring-boot-starter-parent POM，这样我们就有了一个非常有用的run目标来启动程序。在项目根目录下输入mvn spring-boot:run启动应用：\n\n","slug":"Spring-boot第一个应用的开发","published":1,"updated":"2020-02-06T22:40:22.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n991001u24uwo41zng50","content":"<h2 id=\"生成项目\"><a href=\"#生成项目\" class=\"headerlink\" title=\"生成项目\"></a>生成项目</h2><h3 id=\"使用Intellij-IDEA\"><a href=\"#使用Intellij-IDEA\" class=\"headerlink\" title=\"使用Intellij IDEA\"></a>使用Intellij IDEA</h3><p>点击菜单栏 File ➤New➤Project ➤ 选择 Spring Initializr 创建界面如下图，可以看到图中 default 指定的 Initializr Service URL 就是 Spring 官方提供的 Spring Initializr 工具地址，一般默认即可，所以这里创建的工程实际上也是基于它的 Web 工具来实现的。</p>\n<p>关于工程的一些信息：</p>\n<ul>\n<li>Group 顾名思义就是你的公司名，一般是填写com.公司名。</li>\n<li>Artifact groupId 和 artifactId 是maven管理项目包时用作区分的字段，就像是地图上的坐标。这里填写项目名即可。</li>\n<li>Type 就是构建的项目类型，意思就是你希望你的项目使用什么工具构建，可选 maven 和 gradle 一般选 maven。</li>\n<li>Language 顾名思义就是你的项目用啥语言开发，可选 Java、Groovy、Kotlin</li>\n<li>Packaging 就是你希望你的项目打成什么形式的包，可选 Jar、War SpringBoot 项目一般选 Jar</li>\n<li>Java Version 意指项目使用的 java 版本，根据你的需要选择。</li>\n<li>Version 项目的初始版本，默认即可。</li>\n<li>Name 项目名称。</li>\n<li>Description 项目描述，默认即可。</li>\n<li>Package 包名，填完 Group 和 Artifact 后自动生成，默认即可。</li>\n</ul>\n<p>选择需要的配置</p>\n<p>其中web中的web必选</p>\n<p>然后生成项目</p>\n<h3 id=\"spring-官网\"><a href=\"#spring-官网\" class=\"headerlink\" title=\"spring 官网\"></a>spring 官网</h3><p><a href=\"spring.io\">spring.io</a>网站包含很多Spring Boot”入门”指南，如果你正在找特定问题的解决方案，可以先去那瞅瞅。你也可以简化下面的步骤，直接从<a href=\"spring.io\">start.spring.io</a>的依赖搜索器选中web starter，这会自动生成一个新的项目结构。具体详情参考<a href=\"https://github.com/spring-io/initializr\" target=\"_blank\" rel=\"noopener\">文档</a>。</p>\n<h2 id=\"POM\"><a href=\"#POM\" class=\"headerlink\" title=\"POM\"></a>POM</h2><p>创建Maven pom.xml文件，是构建爱你项目的处方。如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>myproject<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.1.BUILD-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Additional lines to be added here... --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- (you don't need this if you are using a .RELEASE version) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo.spring.io/snapshot<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pluginRepositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pluginRepository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo.spring.io/snapshot<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">pluginRepository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pluginRepository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">pluginRepository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">pluginRepositories</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样一个可工作的构建就完成了，你可以通过运行mvn package测试它（暂时忽略”jar将是空的-没有包含任何内容！”的警告）。</p>\n<h2 id=\"编写代码\"><a href=\"#编写代码\" class=\"headerlink\" title=\"编写代码\"></a>编写代码</h2><p>为了完成应用程序，我们需要创建一个单独的Java文件。Maven默认会编译src/main/java下的源码，所以你需要创建那样的文件结构，并添加一个名为src/main/java/Example.java的文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Example.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">home</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Example.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析代码\"><a href=\"#解析代码\" class=\"headerlink\" title=\"解析代码\"></a>解析代码</h2><h3 id=\"RestController-和-RequestMapping-注解\"><a href=\"#RestController-和-RequestMapping-注解\" class=\"headerlink\" title=\"@RestController 和 @RequestMapping 注解\"></a>@RestController 和 @RequestMapping 注解</h3><p>Example类上使用的第一个注解是@RestController，这被称为构造型（stereotype）注解。它为阅读代码的人提供暗示（这是一个支持REST的控制器），对于Spring，该类扮演了一个特殊角色。在本示例中，我们的类是一个web @Controller，所以当web请求进来时，Spring会考虑是否使用它来处理。</p>\n<p>@RequestMapping注解提供路由信息，它告诉Spring任何来自”/“路径的HTTP请求都应该被映射到home方法。@RestController注解告诉Spring以字符串的形式渲染结果，并直接返回给调用者。</p>\n<p>注：@RestController和@RequestMapping是Spring MVC中的注解（它们不是Spring Boot的特定部分），具体参考Spring文档的<a href=\"http://mvc.linesh.tw/\" target=\"_blank\" rel=\"noopener\">MVC章节</a>。</p>\n<h3 id=\"EnableAutoConfiguration注解\"><a href=\"#EnableAutoConfiguration注解\" class=\"headerlink\" title=\"@EnableAutoConfiguration注解\"></a>@EnableAutoConfiguration注解</h3><p>第二个类级别的注解是@EnableAutoConfiguration，这个注解告诉Spring Boot根据添加的jar依赖猜测你想如何配置Spring。由于spring-boot-starter-web添加了Tomcat和Spring MVC，所以auto-configuration将假定你正在开发一个web应用，并对Spring进行相应地设置。</p>\n<p>Starters和Auto-Configuration：Auto-configuration设计成可以跟”Starters”一起很好的使用，但这两个概念没有直接的联系。你可以自由地挑选starters以外的jar依赖，Spring Boot仍会尽最大努力去自动配置你的应用。</p>\n<h3 id=\"main方法\"><a href=\"#main方法\" class=\"headerlink\" title=\"main方法\"></a>main方法</h3><p>应用程序的最后部分是main方法，这是一个标准的方法，它遵循Java对于一个应用程序入口点的约定。我们的main方法通过调用run，将业务委托给了Spring Boot的SpringApplication类。SpringApplication将引导我们的应用，启动Spring，相应地启动被自动配置的Tomcat web服务器。我们需要将Example.class作为参数传递给run方法，以此告诉SpringApplication谁是主要的Spring组件，并传递args数组以暴露所有的命令行参数。</p>\n<h2 id=\"运行代码\"><a href=\"#运行代码\" class=\"headerlink\" title=\"运行代码\"></a>运行代码</h2><p>到此，示例应用可以工作了。由于使用了spring-boot-starter-parent POM，这样我们就有了一个非常有用的run目标来启动程序。在项目根目录下输入mvn spring-boot:run启动应用：</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"生成项目\"><a href=\"#生成项目\" class=\"headerlink\" title=\"生成项目\"></a>生成项目</h2><h3 id=\"使用Intellij-IDEA\"><a href=\"#使用Intellij-IDEA\" class=\"headerlink\" title=\"使用Intellij IDEA\"></a>使用Intellij IDEA</h3><p>点击菜单栏 File ➤New➤Project ➤ 选择 Spring Initializr 创建界面如下图，可以看到图中 default 指定的 Initializr Service URL 就是 Spring 官方提供的 Spring Initializr 工具地址，一般默认即可，所以这里创建的工程实际上也是基于它的 Web 工具来实现的。</p>\n<p>关于工程的一些信息：</p>\n<ul>\n<li>Group 顾名思义就是你的公司名，一般是填写com.公司名。</li>\n<li>Artifact groupId 和 artifactId 是maven管理项目包时用作区分的字段，就像是地图上的坐标。这里填写项目名即可。</li>\n<li>Type 就是构建的项目类型，意思就是你希望你的项目使用什么工具构建，可选 maven 和 gradle 一般选 maven。</li>\n<li>Language 顾名思义就是你的项目用啥语言开发，可选 Java、Groovy、Kotlin</li>\n<li>Packaging 就是你希望你的项目打成什么形式的包，可选 Jar、War SpringBoot 项目一般选 Jar</li>\n<li>Java Version 意指项目使用的 java 版本，根据你的需要选择。</li>\n<li>Version 项目的初始版本，默认即可。</li>\n<li>Name 项目名称。</li>\n<li>Description 项目描述，默认即可。</li>\n<li>Package 包名，填完 Group 和 Artifact 后自动生成，默认即可。</li>\n</ul>\n<p>选择需要的配置</p>\n<p>其中web中的web必选</p>\n<p>然后生成项目</p>\n<h3 id=\"spring-官网\"><a href=\"#spring-官网\" class=\"headerlink\" title=\"spring 官网\"></a>spring 官网</h3><p><a href=\"spring.io\">spring.io</a>网站包含很多Spring Boot”入门”指南，如果你正在找特定问题的解决方案，可以先去那瞅瞅。你也可以简化下面的步骤，直接从<a href=\"spring.io\">start.spring.io</a>的依赖搜索器选中web starter，这会自动生成一个新的项目结构。具体详情参考<a href=\"https://github.com/spring-io/initializr\" target=\"_blank\" rel=\"noopener\">文档</a>。</p>\n<h2 id=\"POM\"><a href=\"#POM\" class=\"headerlink\" title=\"POM\"></a>POM</h2><p>创建Maven pom.xml文件，是构建爱你项目的处方。如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>myproject<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.1.BUILD-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Additional lines to be added here... --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- (you don't need this if you are using a .RELEASE version) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo.spring.io/snapshot<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pluginRepositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pluginRepository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo.spring.io/snapshot<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">pluginRepository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pluginRepository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">pluginRepository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">pluginRepositories</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样一个可工作的构建就完成了，你可以通过运行mvn package测试它（暂时忽略”jar将是空的-没有包含任何内容！”的警告）。</p>\n<h2 id=\"编写代码\"><a href=\"#编写代码\" class=\"headerlink\" title=\"编写代码\"></a>编写代码</h2><p>为了完成应用程序，我们需要创建一个单独的Java文件。Maven默认会编译src/main/java下的源码，所以你需要创建那样的文件结构，并添加一个名为src/main/java/Example.java的文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Example.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">home</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Example.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析代码\"><a href=\"#解析代码\" class=\"headerlink\" title=\"解析代码\"></a>解析代码</h2><h3 id=\"RestController-和-RequestMapping-注解\"><a href=\"#RestController-和-RequestMapping-注解\" class=\"headerlink\" title=\"@RestController 和 @RequestMapping 注解\"></a>@RestController 和 @RequestMapping 注解</h3><p>Example类上使用的第一个注解是@RestController，这被称为构造型（stereotype）注解。它为阅读代码的人提供暗示（这是一个支持REST的控制器），对于Spring，该类扮演了一个特殊角色。在本示例中，我们的类是一个web @Controller，所以当web请求进来时，Spring会考虑是否使用它来处理。</p>\n<p>@RequestMapping注解提供路由信息，它告诉Spring任何来自”/“路径的HTTP请求都应该被映射到home方法。@RestController注解告诉Spring以字符串的形式渲染结果，并直接返回给调用者。</p>\n<p>注：@RestController和@RequestMapping是Spring MVC中的注解（它们不是Spring Boot的特定部分），具体参考Spring文档的<a href=\"http://mvc.linesh.tw/\" target=\"_blank\" rel=\"noopener\">MVC章节</a>。</p>\n<h3 id=\"EnableAutoConfiguration注解\"><a href=\"#EnableAutoConfiguration注解\" class=\"headerlink\" title=\"@EnableAutoConfiguration注解\"></a>@EnableAutoConfiguration注解</h3><p>第二个类级别的注解是@EnableAutoConfiguration，这个注解告诉Spring Boot根据添加的jar依赖猜测你想如何配置Spring。由于spring-boot-starter-web添加了Tomcat和Spring MVC，所以auto-configuration将假定你正在开发一个web应用，并对Spring进行相应地设置。</p>\n<p>Starters和Auto-Configuration：Auto-configuration设计成可以跟”Starters”一起很好的使用，但这两个概念没有直接的联系。你可以自由地挑选starters以外的jar依赖，Spring Boot仍会尽最大努力去自动配置你的应用。</p>\n<h3 id=\"main方法\"><a href=\"#main方法\" class=\"headerlink\" title=\"main方法\"></a>main方法</h3><p>应用程序的最后部分是main方法，这是一个标准的方法，它遵循Java对于一个应用程序入口点的约定。我们的main方法通过调用run，将业务委托给了Spring Boot的SpringApplication类。SpringApplication将引导我们的应用，启动Spring，相应地启动被自动配置的Tomcat web服务器。我们需要将Example.class作为参数传递给run方法，以此告诉SpringApplication谁是主要的Spring组件，并传递args数组以暴露所有的命令行参数。</p>\n<h2 id=\"运行代码\"><a href=\"#运行代码\" class=\"headerlink\" title=\"运行代码\"></a>运行代码</h2><p>到此，示例应用可以工作了。由于使用了spring-boot-starter-parent POM，这样我们就有了一个非常有用的run目标来启动程序。在项目根目录下输入mvn spring-boot:run启动应用：</p>\n"},{"title":"Ubuntu-18 之旅","date":"2018-09-02T11:35:40.000Z","description":"配置 Ubuntu18的全过程，供自己以后方便使用。","_content":"\n# Ubuntu的安装\n如果在安装过程中最后提醒grub安装失败，是因为开机启动项安装失败，会导致无法进入系统\n我一开始比较丧心病狂，直接把整块硬盘格式化后装Ubuntu就可以了\n比较好的的处理方法如下==\nhttps://blog.csdn.net/qq_40883132/article/details/80538539\n\n# HEXO 配置\n网上有很多教程\n想看的可以百度一下\n这里我是想说，把整个文件夹保存下来才是王道，直接可以使用\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\n配置下信息\n若出现报错 ：修改： themes/BlueLake (修改的内容, 未跟踪的内容) 修改尚未加入提交\ngit status\ngit rm -f --cached themes/BlueLake/\ngit add themes/BlueLake/\ngit add .\ngit commit -m \"\"\n如果是要建立分支\n```\ngit checkout -b hexo                 //创建并切换\ngit remote rm origin                                        //清除当前设备\ngit remote add origin git@github.com:edxuanlen/github.io.git//添加远程设备\ngit remote -v                                               //查看当前设备\ngit push origin hexo                                        \n```\n\n# 网易云\n抛弃了kali再回到Ubuntu的怀抱，\n就是因为kali蓝牙配置搞砸了，听歌都不爽（因为想连蓝牙音箱）\n所以emmm 网易云可以直接到官网下载ubuntu版的，\nhttp://d1.music.126.net/dmusic/netease-cloud-music_1.1.0_amd64_ubuntu.deb\n下载完双击可以直接安装\n无法打开的问题自行百度\nsudo netease-cloud-music能正常使用\n1. 方法一\n用root权限修改文件/usr/share/applications/netease-cloud-music.desktop\n 比如：sudo gedit /usr/share/applications/netease-cloud-music.desktop\n--no-sandbox\n2. 方法二\nsudo gedit /etc/sudoers\n修改/etc/sudoers文件，加一行：\nYOURNAME ALL = NOPASSWD: /usr/bin/netease-cloud-music\nYOURNAME为你登录的用户名。\nsudo gedit /usr/share/applications/netease-cloud-music.desktop\n\n修改Exec=netease-cloud-music %U 为  Exec=sudo netease-cloud-music %U,\n这样点击网易云音乐图标就是以管理员权限启动的了，且不用输入密码。\n\n 网易云无法调整界面大小\n搜索.netease-cloud-music（注意前面有个\".\"）然后把搜索到的文件夹全都删掉\n或者删除了~/.cache/netease-cloud-music 目录\n\n# CLion,IdeaJ和Pycharm 三件套==\n官网都有直接，学生可以通过学校邮箱申请免费使用，获得一个Activate code。\n\n打开这三个软件，运行.sh文件，选择 Activate code，输入code\n\n\n给Pycharm添加桌面快捷键\nsudo gedit /usr/share/applications/Pycharm.desktop\n编辑\n```\n[Desktop Entry]\nType=Application\nName=Pycharm\nGenericName=Pycharm3\nComment=Pycharm3:The Python IDE\nExec=sh **/**.sh  （sh的完整路径）\nIcon= （图标所在的完整路径）\nTerminal=pycharm\nCategories=Pycharm;\n```\n\n\n# Mysql\n坑： ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\n不能直接输入mysql连接\n官网有很全的安装指南\nhttps://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#apt-repo-fresh-install\n\n安装后登录的时候输入\nmysql -h<locolhost> -uroot -p<密码>\n记得 -h和-p后面都不能加空格\n如 mysql -h127.0.0.1 -uroot -p88888888\n导出问题（https://stackoverflow.com/questions/34102562/mysql-error-1290-hy000-secure-file-priv-option）\n\nshow variables like '%secure%';\n找出secure_file_priv的目录，输出到该目录下即可\n\n\n# 还原某些桌面设置\ndconf reset -f /\n\n# 解压zip乱码\nunzip -O cp936 xxxx.zip\n\n\n\n\n\n\n\n","source":"_posts/Ubuntu-18-之旅.md","raw":"---\ntitle: Ubuntu-18 之旅\ndate: 2018-09-02 19:35:40\ntags: Ubuntu\ncategories:\n  - 系统\ndescription: 配置 Ubuntu18的全过程，供自己以后方便使用。\n---\n\n# Ubuntu的安装\n如果在安装过程中最后提醒grub安装失败，是因为开机启动项安装失败，会导致无法进入系统\n我一开始比较丧心病狂，直接把整块硬盘格式化后装Ubuntu就可以了\n比较好的的处理方法如下==\nhttps://blog.csdn.net/qq_40883132/article/details/80538539\n\n# HEXO 配置\n网上有很多教程\n想看的可以百度一下\n这里我是想说，把整个文件夹保存下来才是王道，直接可以使用\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\n配置下信息\n若出现报错 ：修改： themes/BlueLake (修改的内容, 未跟踪的内容) 修改尚未加入提交\ngit status\ngit rm -f --cached themes/BlueLake/\ngit add themes/BlueLake/\ngit add .\ngit commit -m \"\"\n如果是要建立分支\n```\ngit checkout -b hexo                 //创建并切换\ngit remote rm origin                                        //清除当前设备\ngit remote add origin git@github.com:edxuanlen/github.io.git//添加远程设备\ngit remote -v                                               //查看当前设备\ngit push origin hexo                                        \n```\n\n# 网易云\n抛弃了kali再回到Ubuntu的怀抱，\n就是因为kali蓝牙配置搞砸了，听歌都不爽（因为想连蓝牙音箱）\n所以emmm 网易云可以直接到官网下载ubuntu版的，\nhttp://d1.music.126.net/dmusic/netease-cloud-music_1.1.0_amd64_ubuntu.deb\n下载完双击可以直接安装\n无法打开的问题自行百度\nsudo netease-cloud-music能正常使用\n1. 方法一\n用root权限修改文件/usr/share/applications/netease-cloud-music.desktop\n 比如：sudo gedit /usr/share/applications/netease-cloud-music.desktop\n--no-sandbox\n2. 方法二\nsudo gedit /etc/sudoers\n修改/etc/sudoers文件，加一行：\nYOURNAME ALL = NOPASSWD: /usr/bin/netease-cloud-music\nYOURNAME为你登录的用户名。\nsudo gedit /usr/share/applications/netease-cloud-music.desktop\n\n修改Exec=netease-cloud-music %U 为  Exec=sudo netease-cloud-music %U,\n这样点击网易云音乐图标就是以管理员权限启动的了，且不用输入密码。\n\n 网易云无法调整界面大小\n搜索.netease-cloud-music（注意前面有个\".\"）然后把搜索到的文件夹全都删掉\n或者删除了~/.cache/netease-cloud-music 目录\n\n# CLion,IdeaJ和Pycharm 三件套==\n官网都有直接，学生可以通过学校邮箱申请免费使用，获得一个Activate code。\n\n打开这三个软件，运行.sh文件，选择 Activate code，输入code\n\n\n给Pycharm添加桌面快捷键\nsudo gedit /usr/share/applications/Pycharm.desktop\n编辑\n```\n[Desktop Entry]\nType=Application\nName=Pycharm\nGenericName=Pycharm3\nComment=Pycharm3:The Python IDE\nExec=sh **/**.sh  （sh的完整路径）\nIcon= （图标所在的完整路径）\nTerminal=pycharm\nCategories=Pycharm;\n```\n\n\n# Mysql\n坑： ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\n不能直接输入mysql连接\n官网有很全的安装指南\nhttps://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#apt-repo-fresh-install\n\n安装后登录的时候输入\nmysql -h<locolhost> -uroot -p<密码>\n记得 -h和-p后面都不能加空格\n如 mysql -h127.0.0.1 -uroot -p88888888\n导出问题（https://stackoverflow.com/questions/34102562/mysql-error-1290-hy000-secure-file-priv-option）\n\nshow variables like '%secure%';\n找出secure_file_priv的目录，输出到该目录下即可\n\n\n# 还原某些桌面设置\ndconf reset -f /\n\n# 解压zip乱码\nunzip -O cp936 xxxx.zip\n\n\n\n\n\n\n\n","slug":"Ubuntu-18-之旅","published":1,"updated":"2020-02-06T22:40:22.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n993001z24uwuwwcu2pv","content":"<h1 id=\"Ubuntu的安装\"><a href=\"#Ubuntu的安装\" class=\"headerlink\" title=\"Ubuntu的安装\"></a>Ubuntu的安装</h1><p>如果在安装过程中最后提醒grub安装失败，是因为开机启动项安装失败，会导致无法进入系统<br>我一开始比较丧心病狂，直接把整块硬盘格式化后装Ubuntu就可以了<br>比较好的的处理方法如下==<br><a href=\"https://blog.csdn.net/qq_40883132/article/details/80538539\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_40883132/article/details/80538539</a></p>\n<h1 id=\"HEXO-配置\"><a href=\"#HEXO-配置\" class=\"headerlink\" title=\"HEXO 配置\"></a>HEXO 配置</h1><p>网上有很多教程<br>想看的可以百度一下<br>这里我是想说，把整个文件夹保存下来才是王道，直接可以使用<br>git config –global user.email “<a href=\"mailto:you@example.com\" target=\"_blank\" rel=\"noopener\">you@example.com</a>“<br>git config –global user.name “Your Name”<br>配置下信息<br>若出现报错 ：修改： themes/BlueLake (修改的内容, 未跟踪的内容) 修改尚未加入提交<br>git status<br>git rm -f –cached themes/BlueLake/<br>git add themes/BlueLake/<br>git add .<br>git commit -m “”<br>如果是要建立分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b hexo                 //创建并切换</span><br><span class=\"line\">git remote rm origin                                        //清除当前设备</span><br><span class=\"line\">git remote add origin git@github.com:edxuanlen/github.io.git//添加远程设备</span><br><span class=\"line\">git remote -v                                               //查看当前设备</span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"网易云\"><a href=\"#网易云\" class=\"headerlink\" title=\"网易云\"></a>网易云</h1><p>抛弃了kali再回到Ubuntu的怀抱，<br>就是因为kali蓝牙配置搞砸了，听歌都不爽（因为想连蓝牙音箱）<br>所以emmm 网易云可以直接到官网下载ubuntu版的，<br><a href=\"http://d1.music.126.net/dmusic/netease-cloud-music_1.1.0_amd64_ubuntu.deb\" target=\"_blank\" rel=\"noopener\">http://d1.music.126.net/dmusic/netease-cloud-music_1.1.0_amd64_ubuntu.deb</a><br>下载完双击可以直接安装<br>无法打开的问题自行百度<br>sudo netease-cloud-music能正常使用</p>\n<ol>\n<li>方法一<br>用root权限修改文件/usr/share/applications/netease-cloud-music.desktop<br>比如：sudo gedit /usr/share/applications/netease-cloud-music.desktop</li>\n</ol>\n<p>–no-sandbox<br>2. 方法二<br>sudo gedit /etc/sudoers<br>修改/etc/sudoers文件，加一行：<br>YOURNAME ALL = NOPASSWD: /usr/bin/netease-cloud-music<br>YOURNAME为你登录的用户名。<br>sudo gedit /usr/share/applications/netease-cloud-music.desktop</p>\n<p>修改Exec=netease-cloud-music %U 为  Exec=sudo netease-cloud-music %U,<br>这样点击网易云音乐图标就是以管理员权限启动的了，且不用输入密码。</p>\n<p> 网易云无法调整界面大小<br>搜索.netease-cloud-music（注意前面有个”.”）然后把搜索到的文件夹全都删掉<br>或者删除了~/.cache/netease-cloud-music 目录</p>\n<h1 id=\"CLion-IdeaJ和Pycharm-三件套\"><a href=\"#CLion-IdeaJ和Pycharm-三件套\" class=\"headerlink\" title=\"CLion,IdeaJ和Pycharm 三件套==\"></a>CLion,IdeaJ和Pycharm 三件套==</h1><p>官网都有直接，学生可以通过学校邮箱申请免费使用，获得一个Activate code。</p>\n<p>打开这三个软件，运行.sh文件，选择 Activate code，输入code</p>\n<p>给Pycharm添加桌面快捷键<br>sudo gedit /usr/share/applications/Pycharm.desktop<br>编辑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Name=Pycharm</span><br><span class=\"line\">GenericName=Pycharm3</span><br><span class=\"line\">Comment=Pycharm3:The Python IDE</span><br><span class=\"line\">Exec=sh **/**.sh  （sh的完整路径）</span><br><span class=\"line\">Icon= （图标所在的完整路径）</span><br><span class=\"line\">Terminal=pycharm</span><br><span class=\"line\">Categories=Pycharm;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h1><p>坑： ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’ (2)<br>不能直接输入mysql连接<br>官网有很全的安装指南<br><a href=\"https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#apt-repo-fresh-install\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#apt-repo-fresh-install</a></p>\n<p>安装后登录的时候输入<br>mysql -h<locolhost> -uroot -p&lt;密码&gt;<br>记得 -h和-p后面都不能加空格<br>如 mysql -h127.0.0.1 -uroot -p88888888<br>导出问题（<a href=\"https://stackoverflow.com/questions/34102562/mysql-error-1290-hy000-secure-file-priv-option）\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/34102562/mysql-error-1290-hy000-secure-file-priv-option）</a></locolhost></p>\n<p>show variables like ‘%secure%’;<br>找出secure_file_priv的目录，输出到该目录下即可</p>\n<h1 id=\"还原某些桌面设置\"><a href=\"#还原某些桌面设置\" class=\"headerlink\" title=\"还原某些桌面设置\"></a>还原某些桌面设置</h1><p>dconf reset -f /</p>\n<h1 id=\"解压zip乱码\"><a href=\"#解压zip乱码\" class=\"headerlink\" title=\"解压zip乱码\"></a>解压zip乱码</h1><p>unzip -O cp936 xxxx.zip</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Ubuntu的安装\"><a href=\"#Ubuntu的安装\" class=\"headerlink\" title=\"Ubuntu的安装\"></a>Ubuntu的安装</h1><p>如果在安装过程中最后提醒grub安装失败，是因为开机启动项安装失败，会导致无法进入系统<br>我一开始比较丧心病狂，直接把整块硬盘格式化后装Ubuntu就可以了<br>比较好的的处理方法如下==<br><a href=\"https://blog.csdn.net/qq_40883132/article/details/80538539\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_40883132/article/details/80538539</a></p>\n<h1 id=\"HEXO-配置\"><a href=\"#HEXO-配置\" class=\"headerlink\" title=\"HEXO 配置\"></a>HEXO 配置</h1><p>网上有很多教程<br>想看的可以百度一下<br>这里我是想说，把整个文件夹保存下来才是王道，直接可以使用<br>git config –global user.email “<a href=\"mailto:you@example.com\" target=\"_blank\" rel=\"noopener\">you@example.com</a>“<br>git config –global user.name “Your Name”<br>配置下信息<br>若出现报错 ：修改： themes/BlueLake (修改的内容, 未跟踪的内容) 修改尚未加入提交<br>git status<br>git rm -f –cached themes/BlueLake/<br>git add themes/BlueLake/<br>git add .<br>git commit -m “”<br>如果是要建立分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b hexo                 //创建并切换</span><br><span class=\"line\">git remote rm origin                                        //清除当前设备</span><br><span class=\"line\">git remote add origin git@github.com:edxuanlen/github.io.git//添加远程设备</span><br><span class=\"line\">git remote -v                                               //查看当前设备</span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"网易云\"><a href=\"#网易云\" class=\"headerlink\" title=\"网易云\"></a>网易云</h1><p>抛弃了kali再回到Ubuntu的怀抱，<br>就是因为kali蓝牙配置搞砸了，听歌都不爽（因为想连蓝牙音箱）<br>所以emmm 网易云可以直接到官网下载ubuntu版的，<br><a href=\"http://d1.music.126.net/dmusic/netease-cloud-music_1.1.0_amd64_ubuntu.deb\" target=\"_blank\" rel=\"noopener\">http://d1.music.126.net/dmusic/netease-cloud-music_1.1.0_amd64_ubuntu.deb</a><br>下载完双击可以直接安装<br>无法打开的问题自行百度<br>sudo netease-cloud-music能正常使用</p>\n<ol>\n<li>方法一<br>用root权限修改文件/usr/share/applications/netease-cloud-music.desktop<br>比如：sudo gedit /usr/share/applications/netease-cloud-music.desktop</li>\n</ol>\n<p>–no-sandbox<br>2. 方法二<br>sudo gedit /etc/sudoers<br>修改/etc/sudoers文件，加一行：<br>YOURNAME ALL = NOPASSWD: /usr/bin/netease-cloud-music<br>YOURNAME为你登录的用户名。<br>sudo gedit /usr/share/applications/netease-cloud-music.desktop</p>\n<p>修改Exec=netease-cloud-music %U 为  Exec=sudo netease-cloud-music %U,<br>这样点击网易云音乐图标就是以管理员权限启动的了，且不用输入密码。</p>\n<p> 网易云无法调整界面大小<br>搜索.netease-cloud-music（注意前面有个”.”）然后把搜索到的文件夹全都删掉<br>或者删除了~/.cache/netease-cloud-music 目录</p>\n<h1 id=\"CLion-IdeaJ和Pycharm-三件套\"><a href=\"#CLion-IdeaJ和Pycharm-三件套\" class=\"headerlink\" title=\"CLion,IdeaJ和Pycharm 三件套==\"></a>CLion,IdeaJ和Pycharm 三件套==</h1><p>官网都有直接，学生可以通过学校邮箱申请免费使用，获得一个Activate code。</p>\n<p>打开这三个软件，运行.sh文件，选择 Activate code，输入code</p>\n<p>给Pycharm添加桌面快捷键<br>sudo gedit /usr/share/applications/Pycharm.desktop<br>编辑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Name=Pycharm</span><br><span class=\"line\">GenericName=Pycharm3</span><br><span class=\"line\">Comment=Pycharm3:The Python IDE</span><br><span class=\"line\">Exec=sh **/**.sh  （sh的完整路径）</span><br><span class=\"line\">Icon= （图标所在的完整路径）</span><br><span class=\"line\">Terminal=pycharm</span><br><span class=\"line\">Categories=Pycharm;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h1><p>坑： ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’ (2)<br>不能直接输入mysql连接<br>官网有很全的安装指南<br><a href=\"https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#apt-repo-fresh-install\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#apt-repo-fresh-install</a></p>\n<p>安装后登录的时候输入<br>mysql -h<locolhost> -uroot -p&lt;密码&gt;<br>记得 -h和-p后面都不能加空格<br>如 mysql -h127.0.0.1 -uroot -p88888888<br>导出问题（<a href=\"https://stackoverflow.com/questions/34102562/mysql-error-1290-hy000-secure-file-priv-option）\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/34102562/mysql-error-1290-hy000-secure-file-priv-option）</a></locolhost></p>\n<p>show variables like ‘%secure%’;<br>找出secure_file_priv的目录，输出到该目录下即可</p>\n<h1 id=\"还原某些桌面设置\"><a href=\"#还原某些桌面设置\" class=\"headerlink\" title=\"还原某些桌面设置\"></a>还原某些桌面设置</h1><p>dconf reset -f /</p>\n<h1 id=\"解压zip乱码\"><a href=\"#解压zip乱码\" class=\"headerlink\" title=\"解压zip乱码\"></a>解压zip乱码</h1><p>unzip -O cp936 xxxx.zip</p>\n"},{"title":"Vscode","date":"2018-03-31T12:17:43.000Z","description":"Vscode 的一些配置。","_content":"\n## cmder\n\n```json\n\"terminal.integrated.shell.windows\": \"cmd.exe\",\n\"terminal.integrated.env.windows\": {\"CMDER_ROOT\": \"[cmder_root]\"},\n\"terminal.integrated.shellArgs.windows\": [\"/k\", \"[cmder_root]\\\\vendor\\\\init.bat\"]\n```\n\n## 插件们\n\n1. code time \\\n    记录代码时间\n2. Markdown PDF \\\n    Markdown 转 PDF 格式\n3. Markdown Preview Enhanced \\\n    Markdown 同步视图\n4. markdownline\n5. vscode-pdf \\\n    vscode 内支持打开pdf\n6. Docker \\\n    Docker !!!\n7. indenticator \\\n    回车自动缩进\n8. MYSQL \\\n    mysql management tool\n9. mysql-inline-decorator \\\n    Add color coding to inline MYSQL string inside\n10. Git History \\\n11. Quokka \\\n    是一个调试工具插件，能够根据你正在编写的代码提供实时反馈。\n12. SVG Viewer \\\n\n## C/C++\n\n先是下载 MINGW 官网或者 choco\n\n```sh\n\n```","source":"_posts/VSCode.md","raw":"---\ntitle: Vscode\ndate: 2018-03-31 20:17:43\ntags: \n    - 应用\ncategories: 应用\ndescription: Vscode 的一些配置。\n---\n\n## cmder\n\n```json\n\"terminal.integrated.shell.windows\": \"cmd.exe\",\n\"terminal.integrated.env.windows\": {\"CMDER_ROOT\": \"[cmder_root]\"},\n\"terminal.integrated.shellArgs.windows\": [\"/k\", \"[cmder_root]\\\\vendor\\\\init.bat\"]\n```\n\n## 插件们\n\n1. code time \\\n    记录代码时间\n2. Markdown PDF \\\n    Markdown 转 PDF 格式\n3. Markdown Preview Enhanced \\\n    Markdown 同步视图\n4. markdownline\n5. vscode-pdf \\\n    vscode 内支持打开pdf\n6. Docker \\\n    Docker !!!\n7. indenticator \\\n    回车自动缩进\n8. MYSQL \\\n    mysql management tool\n9. mysql-inline-decorator \\\n    Add color coding to inline MYSQL string inside\n10. Git History \\\n11. Quokka \\\n    是一个调试工具插件，能够根据你正在编写的代码提供实时反馈。\n12. SVG Viewer \\\n\n## C/C++\n\n先是下载 MINGW 官网或者 choco\n\n```sh\n\n```","slug":"VSCode","published":1,"updated":"2020-02-06T22:40:22.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n995002224uwosvkp4hk","content":"<h2 id=\"cmder\"><a href=\"#cmder\" class=\"headerlink\" title=\"cmder\"></a>cmder</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"terminal.integrated.shell.windows\": \"cmd.exe\",</span><br><span class=\"line\">\"terminal.integrated.env.windows\": &#123;\"CMDER_ROOT\": \"[cmder_root]\"&#125;,</span><br><span class=\"line\">\"terminal.integrated.shellArgs.windows\": [\"/k\", \"[cmder_root]\\\\vendor\\\\init.bat\"]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插件们\"><a href=\"#插件们\" class=\"headerlink\" title=\"插件们\"></a>插件们</h2><ol>\n<li>code time <br> 记录代码时间</li>\n<li>Markdown PDF <br> Markdown 转 PDF 格式</li>\n<li>Markdown Preview Enhanced <br> Markdown 同步视图</li>\n<li>markdownline</li>\n<li>vscode-pdf <br> vscode 内支持打开pdf</li>\n<li>Docker <br> Docker !!!</li>\n<li>indenticator <br> 回车自动缩进</li>\n<li>MYSQL <br> mysql management tool</li>\n<li>mysql-inline-decorator <br> Add color coding to inline MYSQL string inside</li>\n<li>Git History \\</li>\n<li>Quokka <br>是一个调试工具插件，能够根据你正在编写的代码提供实时反馈。</li>\n<li>SVG Viewer \\</li>\n</ol>\n<h2 id=\"C-C\"><a href=\"#C-C\" class=\"headerlink\" title=\"C/C++\"></a>C/C++</h2><p>先是下载 MINGW 官网或者 choco</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"cmder\"><a href=\"#cmder\" class=\"headerlink\" title=\"cmder\"></a>cmder</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"terminal.integrated.shell.windows\": \"cmd.exe\",</span><br><span class=\"line\">\"terminal.integrated.env.windows\": &#123;\"CMDER_ROOT\": \"[cmder_root]\"&#125;,</span><br><span class=\"line\">\"terminal.integrated.shellArgs.windows\": [\"/k\", \"[cmder_root]\\\\vendor\\\\init.bat\"]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插件们\"><a href=\"#插件们\" class=\"headerlink\" title=\"插件们\"></a>插件们</h2><ol>\n<li>code time <br> 记录代码时间</li>\n<li>Markdown PDF <br> Markdown 转 PDF 格式</li>\n<li>Markdown Preview Enhanced <br> Markdown 同步视图</li>\n<li>markdownline</li>\n<li>vscode-pdf <br> vscode 内支持打开pdf</li>\n<li>Docker <br> Docker !!!</li>\n<li>indenticator <br> 回车自动缩进</li>\n<li>MYSQL <br> mysql management tool</li>\n<li>mysql-inline-decorator <br> Add color coding to inline MYSQL string inside</li>\n<li>Git History \\</li>\n<li>Quokka <br>是一个调试工具插件，能够根据你正在编写的代码提供实时反馈。</li>\n<li>SVG Viewer \\</li>\n</ol>\n<h2 id=\"C-C\"><a href=\"#C-C\" class=\"headerlink\" title=\"C/C++\"></a>C/C++</h2><p>先是下载 MINGW 官网或者 choco</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"choco","date":"2018-03-31T12:17:43.000Z","description":"windows 下的apt。","_content":"\n# choco\n\n## 更改默认文件夹\n\n设置path变量 ChocolateyInstall\n\n## powershell\n\n```sh\niex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\n```\n\n## cmd\n\n```sh\n@powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\n```\n","source":"_posts/chocolatey.md","raw":"---\ntitle: choco\ndate: 2018-03-31 20:17:43\ntags: \n    - 应用\ncategories: 应用\ndescription: windows 下的apt。\n---\n\n# choco\n\n## 更改默认文件夹\n\n设置path变量 ChocolateyInstall\n\n## powershell\n\n```sh\niex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\n```\n\n## cmd\n\n```sh\n@powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\n```\n","slug":"chocolatey","published":1,"updated":"2020-02-06T22:40:22.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n997002624uwg8gjsszh","content":"<h1 id=\"choco\"><a href=\"#choco\" class=\"headerlink\" title=\"choco\"></a>choco</h1><h2 id=\"更改默认文件夹\"><a href=\"#更改默认文件夹\" class=\"headerlink\" title=\"更改默认文件夹\"></a>更改默认文件夹</h2><p>设置path变量 ChocolateyInstall</p>\n<h2 id=\"powershell\"><a href=\"#powershell\" class=\"headerlink\" title=\"powershell\"></a>powershell</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iex ((new-object net.webclient).DownloadString(<span class=\"string\">'https://chocolatey.org/install.ps1'</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cmd\"><a href=\"#cmd\" class=\"headerlink\" title=\"cmd\"></a>cmd</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@powershell -NoProfile -ExecutionPolicy Bypass -Command <span class=\"string\">\"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\"</span> &amp;&amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"choco\"><a href=\"#choco\" class=\"headerlink\" title=\"choco\"></a>choco</h1><h2 id=\"更改默认文件夹\"><a href=\"#更改默认文件夹\" class=\"headerlink\" title=\"更改默认文件夹\"></a>更改默认文件夹</h2><p>设置path变量 ChocolateyInstall</p>\n<h2 id=\"powershell\"><a href=\"#powershell\" class=\"headerlink\" title=\"powershell\"></a>powershell</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iex ((new-object net.webclient).DownloadString(<span class=\"string\">'https://chocolatey.org/install.ps1'</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cmd\"><a href=\"#cmd\" class=\"headerlink\" title=\"cmd\"></a>cmd</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@powershell -NoProfile -ExecutionPolicy Bypass -Command <span class=\"string\">\"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\"</span> &amp;&amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Zookeeper","author":"edxuanlen","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2020-03-17T11:40:33.000Z","img":null,"coverImg":null,"password":null,"summary":null,"description":null,"_content":"\n\n### Zookeeper是什么\n\n它是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。  \n\n> 上面的解释有点抽象，简单来说zookeeper=文件系统+监听通知机制。  \n\n[参考博客](https://blog.csdn.net/java_66666/article/details/81015302)\n\nzookeeper 在底层其实只提供了两个功能  \n\n- 管理(存储，读取)用户程序提交的数据\n- 并为用户程序提供数据节点监听服务\n\n#### 文件系统\n\nZookeeper 维护一个类似文件系统的数据结构  \n\n每个子目录项如 NameService 都被称作为 znode(目录节点)，和文件系统一样，我们能够自由的增加、删除znode，在一个znode下增加、删除子znode，唯一的不同在于znode是可以存储数据的。\n\n有四种类型的znode：\n\n- PERSISTENT-持久化目录节点\n    客户端与zookeeper断开连接后，该节点依旧存在\n- PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点\n    客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号\n- EPHEMERAL-临时目录节点\n    客户端与zookeeper断开连接后，该节点被删除\n- EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点\n    客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号\n\n#### 监听通知机制\n\n客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，zookeeper会通知客户端。\n\n### zookeeper 基于异常的分布式锁\n\n临时节点\n\n![lock](lock.png)\n\n**他会监听节点**\n\n\n### zookeeper 基于相互监听\n\n临时有序节点\n\n","source":"_posts/Zookeeper.md","raw":"---\ntitle: Zookeeper\nauthor: edxuanlen\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2020-03-17 19:40:33\nimg:\ncoverImg:\npassword:\nsummary:\ntags:\ncategories:\ndescription:\n---\n\n\n### Zookeeper是什么\n\n它是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。  \n\n> 上面的解释有点抽象，简单来说zookeeper=文件系统+监听通知机制。  \n\n[参考博客](https://blog.csdn.net/java_66666/article/details/81015302)\n\nzookeeper 在底层其实只提供了两个功能  \n\n- 管理(存储，读取)用户程序提交的数据\n- 并为用户程序提供数据节点监听服务\n\n#### 文件系统\n\nZookeeper 维护一个类似文件系统的数据结构  \n\n每个子目录项如 NameService 都被称作为 znode(目录节点)，和文件系统一样，我们能够自由的增加、删除znode，在一个znode下增加、删除子znode，唯一的不同在于znode是可以存储数据的。\n\n有四种类型的znode：\n\n- PERSISTENT-持久化目录节点\n    客户端与zookeeper断开连接后，该节点依旧存在\n- PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点\n    客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号\n- EPHEMERAL-临时目录节点\n    客户端与zookeeper断开连接后，该节点被删除\n- EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点\n    客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号\n\n#### 监听通知机制\n\n客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，zookeeper会通知客户端。\n\n### zookeeper 基于异常的分布式锁\n\n临时节点\n\n![lock](lock.png)\n\n**他会监听节点**\n\n\n### zookeeper 基于相互监听\n\n临时有序节点\n\n","slug":"Zookeeper","published":1,"updated":"2020-03-18T05:12:14.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n99a002a24uw32m4y8mo","content":"<h3 id=\"Zookeeper是什么\"><a href=\"#Zookeeper是什么\" class=\"headerlink\" title=\"Zookeeper是什么\"></a>Zookeeper是什么</h3><p>它是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。  </p>\n<blockquote>\n<p>上面的解释有点抽象，简单来说zookeeper=文件系统+监听通知机制。  </p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/java_66666/article/details/81015302\" target=\"_blank\" rel=\"noopener\">参考博客</a></p>\n<p>zookeeper 在底层其实只提供了两个功能  </p>\n<ul>\n<li>管理(存储，读取)用户程序提交的数据</li>\n<li>并为用户程序提供数据节点监听服务</li>\n</ul>\n<h4 id=\"文件系统\"><a href=\"#文件系统\" class=\"headerlink\" title=\"文件系统\"></a>文件系统</h4><p>Zookeeper 维护一个类似文件系统的数据结构  </p>\n<p>每个子目录项如 NameService 都被称作为 znode(目录节点)，和文件系统一样，我们能够自由的增加、删除znode，在一个znode下增加、删除子znode，唯一的不同在于znode是可以存储数据的。</p>\n<p>有四种类型的znode：</p>\n<ul>\n<li>PERSISTENT-持久化目录节点<br>  客户端与zookeeper断开连接后，该节点依旧存在</li>\n<li>PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点<br>  客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号</li>\n<li>EPHEMERAL-临时目录节点<br>  客户端与zookeeper断开连接后，该节点被删除</li>\n<li>EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点<br>  客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号</li>\n</ul>\n<h4 id=\"监听通知机制\"><a href=\"#监听通知机制\" class=\"headerlink\" title=\"监听通知机制\"></a>监听通知机制</h4><p>客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，zookeeper会通知客户端。</p>\n<h3 id=\"zookeeper-基于异常的分布式锁\"><a href=\"#zookeeper-基于异常的分布式锁\" class=\"headerlink\" title=\"zookeeper 基于异常的分布式锁\"></a>zookeeper 基于异常的分布式锁</h3><p>临时节点</p>\n<p><img src=\"lock.png\" alt=\"lock\"></p>\n<p><strong>他会监听节点</strong></p>\n<h3 id=\"zookeeper-基于相互监听\"><a href=\"#zookeeper-基于相互监听\" class=\"headerlink\" title=\"zookeeper 基于相互监听\"></a>zookeeper 基于相互监听</h3><p>临时有序节点</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Zookeeper是什么\"><a href=\"#Zookeeper是什么\" class=\"headerlink\" title=\"Zookeeper是什么\"></a>Zookeeper是什么</h3><p>它是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。  </p>\n<blockquote>\n<p>上面的解释有点抽象，简单来说zookeeper=文件系统+监听通知机制。  </p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/java_66666/article/details/81015302\" target=\"_blank\" rel=\"noopener\">参考博客</a></p>\n<p>zookeeper 在底层其实只提供了两个功能  </p>\n<ul>\n<li>管理(存储，读取)用户程序提交的数据</li>\n<li>并为用户程序提供数据节点监听服务</li>\n</ul>\n<h4 id=\"文件系统\"><a href=\"#文件系统\" class=\"headerlink\" title=\"文件系统\"></a>文件系统</h4><p>Zookeeper 维护一个类似文件系统的数据结构  </p>\n<p>每个子目录项如 NameService 都被称作为 znode(目录节点)，和文件系统一样，我们能够自由的增加、删除znode，在一个znode下增加、删除子znode，唯一的不同在于znode是可以存储数据的。</p>\n<p>有四种类型的znode：</p>\n<ul>\n<li>PERSISTENT-持久化目录节点<br>  客户端与zookeeper断开连接后，该节点依旧存在</li>\n<li>PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点<br>  客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号</li>\n<li>EPHEMERAL-临时目录节点<br>  客户端与zookeeper断开连接后，该节点被删除</li>\n<li>EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点<br>  客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号</li>\n</ul>\n<h4 id=\"监听通知机制\"><a href=\"#监听通知机制\" class=\"headerlink\" title=\"监听通知机制\"></a>监听通知机制</h4><p>客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，zookeeper会通知客户端。</p>\n<h3 id=\"zookeeper-基于异常的分布式锁\"><a href=\"#zookeeper-基于异常的分布式锁\" class=\"headerlink\" title=\"zookeeper 基于异常的分布式锁\"></a>zookeeper 基于异常的分布式锁</h3><p>临时节点</p>\n<p><img src=\"lock.png\" alt=\"lock\"></p>\n<p><strong>他会监听节点</strong></p>\n<h3 id=\"zookeeper-基于相互监听\"><a href=\"#zookeeper-基于相互监听\" class=\"headerlink\" title=\"zookeeper 基于相互监听\"></a>zookeeper 基于相互监听</h3><p>临时有序节点</p>\n"},{"title":"Docker","date":"2019-09-21T16:00:00.000Z","description":"docker容器技术，换源和dockerfile的简介，包括一些自己的配置。","_content":"\n## 换源\n\n1. settings -> daemon\n2. 点击basic 变成 advanced\n3. \"registry-mirrors\":[\"<https://docker.mirrors.ustc.edu.cn>\"]\n4. applay\n\n> Docker中国区官方镜像 : <https://registry.docker-cn.com> \\\n> 网易 : <http://hub-mirror.c.163.com> \\\n> ustc : <https://docker.mirrors.ustc.edu.cn> \\\n> 中国科技大学 : <https://docker.mirrors.ustc.edu.cn> \\\n> 阿里云容器 : <https://cr.console.aliyun.com/>\n( 首页点击“创建我的容器镜像”  得到一个专属的镜像加速地址，类似于“<https://1234abcd.mirror.aliyuncs.com”)>\n\n```json\n{\n  \"registry-mirrors\": [\n    \"http://xxxxx.mirror.aliyuncs.com\",\n    \"http://registry.docker-cn.com\",\n    \"http://docker.mirrors.ustc.edu.cn\",\n    \"http://hub-mirror.c.163.com\"\n  ],\n  \"insecure-registries\": [\n    \"registry.docker-cn.com\",\n    \"docker.mirrors.ustc.edu.cn\"\n  ],\n  \"debug\": true,\n  \"experimental\": true\n}\n```\n\n## Dockerfile\n\nhow to write a dockerfile?\n> Create an empty directory on your local machine.\n> Change directories (cd) into the new directory,\n> create a file called Dockerfile,\n> copy-and-paste the following content into that file, and save it.\n> Take note of the comments that explain each statement in your new Dockerfile.\n\n```dockerfile\n# Use an official Python runtime as a parent image\nFROM python:3.4-alpine\n# Set the working directory to /app\nADD /app\n# Copy the current directory contents into the container at /app\nCOPY . /app\n# Install any needed packages specified in requirements.txt\nRUN pip install -r requirements.txt\n\n# Define environment variable\nENV NAME python_web\n# Run app.py when the container launches\nCMD [\"python\", \"app.py\"]\n```\n\n## Docker-compose\n\n官方文档 <https://docs.docker.com/compose/overview/>\n官方例子 <https://docs.docker.com/compose/gettingstarted/>\n\n> Using Compose is basically a three-step process:\n>\n> 1. Define your app’s environment with a Dockerfile so it can be reproduced anywhere.\n> 2. Define the services that make up your app in docker-compose.yml so they can be run together in an isolated environment.\n> 3. Run docker-compose up and Compose starts and runs your entire app.\n\n## 设置支持中文\n\n> -p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口。\n> -v -v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。\n> -v $PWD/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs。\n> -v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。\n> -e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。\n\n## 常用镜像\n\n### mysql\n\n```shell\ndocker run --name some-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql\n\n```\n\n官方文档:[官方文档](https://hub.docker.com/_/mysql)\n\n外界访问权限\n\n```sql\nuse mysql;\nALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';\ngrant all privileges on *.* to 'root'@'%';\nflush privileges;\n```\n\n### Mysql:5.7\n\n```markdown\ndocker pull mysql:5.7\n\ndocker run -p 3306:3306 --name mysql -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=19980504 --restart=always -d mysql:5.7\n\ndocker exec -it mysql  env LANG=C.UTF-8 bash\n```\n\n### nodejs\n\n```bash\ndocker run -it -e \"NODE_ENV=production\" -u \"node\"  -m \"300M\" --memory-swap \"1G\" -w \"/home/node/app\" -v D:\\coding\\web\\nodejs:/home/node/app --name \"node\" -d node\n```\n\n### Ubuntu\n\n```bash\n\n```\n\n### redis 集群\n\n[redis集群配置](https://www.runoob.com/docker/docker-redis-cluster.html)\n\n## 检查容器设置\n\ndocker inspect\n\n","source":"_posts/docker.md","raw":"---\ntitle: Docker\ndate: 2019-9-22\ntags: \n    - 应用\ncategories: 应用\ndescription: docker容器技术，换源和dockerfile的简介，包括一些自己的配置。\n---\n\n## 换源\n\n1. settings -> daemon\n2. 点击basic 变成 advanced\n3. \"registry-mirrors\":[\"<https://docker.mirrors.ustc.edu.cn>\"]\n4. applay\n\n> Docker中国区官方镜像 : <https://registry.docker-cn.com> \\\n> 网易 : <http://hub-mirror.c.163.com> \\\n> ustc : <https://docker.mirrors.ustc.edu.cn> \\\n> 中国科技大学 : <https://docker.mirrors.ustc.edu.cn> \\\n> 阿里云容器 : <https://cr.console.aliyun.com/>\n( 首页点击“创建我的容器镜像”  得到一个专属的镜像加速地址，类似于“<https://1234abcd.mirror.aliyuncs.com”)>\n\n```json\n{\n  \"registry-mirrors\": [\n    \"http://xxxxx.mirror.aliyuncs.com\",\n    \"http://registry.docker-cn.com\",\n    \"http://docker.mirrors.ustc.edu.cn\",\n    \"http://hub-mirror.c.163.com\"\n  ],\n  \"insecure-registries\": [\n    \"registry.docker-cn.com\",\n    \"docker.mirrors.ustc.edu.cn\"\n  ],\n  \"debug\": true,\n  \"experimental\": true\n}\n```\n\n## Dockerfile\n\nhow to write a dockerfile?\n> Create an empty directory on your local machine.\n> Change directories (cd) into the new directory,\n> create a file called Dockerfile,\n> copy-and-paste the following content into that file, and save it.\n> Take note of the comments that explain each statement in your new Dockerfile.\n\n```dockerfile\n# Use an official Python runtime as a parent image\nFROM python:3.4-alpine\n# Set the working directory to /app\nADD /app\n# Copy the current directory contents into the container at /app\nCOPY . /app\n# Install any needed packages specified in requirements.txt\nRUN pip install -r requirements.txt\n\n# Define environment variable\nENV NAME python_web\n# Run app.py when the container launches\nCMD [\"python\", \"app.py\"]\n```\n\n## Docker-compose\n\n官方文档 <https://docs.docker.com/compose/overview/>\n官方例子 <https://docs.docker.com/compose/gettingstarted/>\n\n> Using Compose is basically a three-step process:\n>\n> 1. Define your app’s environment with a Dockerfile so it can be reproduced anywhere.\n> 2. Define the services that make up your app in docker-compose.yml so they can be run together in an isolated environment.\n> 3. Run docker-compose up and Compose starts and runs your entire app.\n\n## 设置支持中文\n\n> -p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口。\n> -v -v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。\n> -v $PWD/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs。\n> -v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。\n> -e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。\n\n## 常用镜像\n\n### mysql\n\n```shell\ndocker run --name some-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql\n\n```\n\n官方文档:[官方文档](https://hub.docker.com/_/mysql)\n\n外界访问权限\n\n```sql\nuse mysql;\nALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';\ngrant all privileges on *.* to 'root'@'%';\nflush privileges;\n```\n\n### Mysql:5.7\n\n```markdown\ndocker pull mysql:5.7\n\ndocker run -p 3306:3306 --name mysql -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=19980504 --restart=always -d mysql:5.7\n\ndocker exec -it mysql  env LANG=C.UTF-8 bash\n```\n\n### nodejs\n\n```bash\ndocker run -it -e \"NODE_ENV=production\" -u \"node\"  -m \"300M\" --memory-swap \"1G\" -w \"/home/node/app\" -v D:\\coding\\web\\nodejs:/home/node/app --name \"node\" -d node\n```\n\n### Ubuntu\n\n```bash\n\n```\n\n### redis 集群\n\n[redis集群配置](https://www.runoob.com/docker/docker-redis-cluster.html)\n\n## 检查容器设置\n\ndocker inspect\n\n","slug":"docker","published":1,"updated":"2020-03-22T07:16:54.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n99c002d24uw0s0t13cd","content":"<h2 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h2><ol>\n<li>settings -&gt; daemon</li>\n<li>点击basic 变成 advanced</li>\n<li>“registry-mirrors”:[“<a href=\"https://docker.mirrors.ustc.edu.cn\" target=\"_blank\" rel=\"noopener\">https://docker.mirrors.ustc.edu.cn</a>“]</li>\n<li>applay</li>\n</ol>\n<blockquote>\n<p>Docker中国区官方镜像 : <a href=\"https://registry.docker-cn.com\" target=\"_blank\" rel=\"noopener\">https://registry.docker-cn.com</a> <br>网易 : <a href=\"http://hub-mirror.c.163.com\" target=\"_blank\" rel=\"noopener\">http://hub-mirror.c.163.com</a> <br>ustc : <a href=\"https://docker.mirrors.ustc.edu.cn\" target=\"_blank\" rel=\"noopener\">https://docker.mirrors.ustc.edu.cn</a> <br>中国科技大学 : <a href=\"https://docker.mirrors.ustc.edu.cn\" target=\"_blank\" rel=\"noopener\">https://docker.mirrors.ustc.edu.cn</a> <br>阿里云容器 : <a href=\"https://cr.console.aliyun.com/\" target=\"_blank\" rel=\"noopener\">https://cr.console.aliyun.com/</a><br>( 首页点击“创建我的容器镜像”  得到一个专属的镜像加速地址，类似于“<a href=\"https://1234abcd.mirror.aliyuncs.com”)\" target=\"_blank\" rel=\"noopener\">https://1234abcd.mirror.aliyuncs.com”)</a></p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"http://xxxxx.mirror.aliyuncs.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"http://registry.docker-cn.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"http://docker.mirrors.ustc.edu.cn\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"http://hub-mirror.c.163.com\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"insecure-registries\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"registry.docker-cn.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"docker.mirrors.ustc.edu.cn\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"debug\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"experimental\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>how to write a dockerfile?</p>\n<blockquote>\n<p>Create an empty directory on your local machine.<br>Change directories (cd) into the new directory,<br>create a file called Dockerfile,<br>copy-and-paste the following content into that file, and save it.<br>Take note of the comments that explain each statement in your new Dockerfile.</p>\n</blockquote>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use an official Python runtime as a parent image</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.4</span>-alpine</span><br><span class=\"line\"><span class=\"comment\"># Set the working directory to /app</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"comment\"># Copy the current directory contents into the container at /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . /app</span></span><br><span class=\"line\"><span class=\"comment\"># Install any needed packages specified in requirements.txt</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> pip install -r requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define environment variable</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> NAME python_web</span><br><span class=\"line\"><span class=\"comment\"># Run app.py when the container launches</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"python\"</span>, <span class=\"string\">\"app.py\"</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-compose\"><a href=\"#Docker-compose\" class=\"headerlink\" title=\"Docker-compose\"></a>Docker-compose</h2><p>官方文档 <a href=\"https://docs.docker.com/compose/overview/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/compose/overview/</a><br>官方例子 <a href=\"https://docs.docker.com/compose/gettingstarted/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/compose/gettingstarted/</a></p>\n<blockquote>\n<p>Using Compose is basically a three-step process:</p>\n<ol>\n<li>Define your app’s environment with a Dockerfile so it can be reproduced anywhere.</li>\n<li>Define the services that make up your app in docker-compose.yml so they can be run together in an isolated environment.</li>\n<li>Run docker-compose up and Compose starts and runs your entire app.</li>\n</ol>\n</blockquote>\n<h2 id=\"设置支持中文\"><a href=\"#设置支持中文\" class=\"headerlink\" title=\"设置支持中文\"></a>设置支持中文</h2><blockquote>\n<p>-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口。<br>-v -v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。<br>-v $PWD/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs。<br>-v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。<br>-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。</p>\n</blockquote>\n<h2 id=\"常用镜像\"><a href=\"#常用镜像\" class=\"headerlink\" title=\"常用镜像\"></a>常用镜像</h2><h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name some-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql</span><br></pre></td></tr></table></figure>\n\n<p>官方文档:<a href=\"https://hub.docker.com/_/mysql\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p>外界访问权限</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> mysql;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">'root'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">WITH</span> mysql_native_password <span class=\"keyword\">BY</span> <span class=\"string\">'root'</span>;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> <span class=\"string\">'root'</span>@<span class=\"string\">'%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mysql-5-7\"><a href=\"#Mysql-5-7\" class=\"headerlink\" title=\"Mysql:5.7\"></a>Mysql:5.7</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -p 3306:3306 --name mysql -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL<span class=\"emphasis\">_ROOT_</span>PASSWORD=19980504 --restart=always -d mysql:5.7</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it mysql  env LANG=C.UTF-8 bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nodejs\"><a href=\"#nodejs\" class=\"headerlink\" title=\"nodejs\"></a>nodejs</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -e <span class=\"string\">\"NODE_ENV=production\"</span> -u <span class=\"string\">\"node\"</span>  -m <span class=\"string\">\"300M\"</span> --memory-swap <span class=\"string\">\"1G\"</span> -w <span class=\"string\">\"/home/node/app\"</span> -v D:\\coding\\web\\nodejs:/home/node/app --name <span class=\"string\">\"node\"</span> -d node</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redis-集群\"><a href=\"#redis-集群\" class=\"headerlink\" title=\"redis 集群\"></a>redis 集群</h3><p><a href=\"https://www.runoob.com/docker/docker-redis-cluster.html\" target=\"_blank\" rel=\"noopener\">redis集群配置</a></p>\n<h2 id=\"检查容器设置\"><a href=\"#检查容器设置\" class=\"headerlink\" title=\"检查容器设置\"></a>检查容器设置</h2><p>docker inspect</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h2><ol>\n<li>settings -&gt; daemon</li>\n<li>点击basic 变成 advanced</li>\n<li>“registry-mirrors”:[“<a href=\"https://docker.mirrors.ustc.edu.cn\" target=\"_blank\" rel=\"noopener\">https://docker.mirrors.ustc.edu.cn</a>“]</li>\n<li>applay</li>\n</ol>\n<blockquote>\n<p>Docker中国区官方镜像 : <a href=\"https://registry.docker-cn.com\" target=\"_blank\" rel=\"noopener\">https://registry.docker-cn.com</a> <br>网易 : <a href=\"http://hub-mirror.c.163.com\" target=\"_blank\" rel=\"noopener\">http://hub-mirror.c.163.com</a> <br>ustc : <a href=\"https://docker.mirrors.ustc.edu.cn\" target=\"_blank\" rel=\"noopener\">https://docker.mirrors.ustc.edu.cn</a> <br>中国科技大学 : <a href=\"https://docker.mirrors.ustc.edu.cn\" target=\"_blank\" rel=\"noopener\">https://docker.mirrors.ustc.edu.cn</a> <br>阿里云容器 : <a href=\"https://cr.console.aliyun.com/\" target=\"_blank\" rel=\"noopener\">https://cr.console.aliyun.com/</a><br>( 首页点击“创建我的容器镜像”  得到一个专属的镜像加速地址，类似于“<a href=\"https://1234abcd.mirror.aliyuncs.com”)\" target=\"_blank\" rel=\"noopener\">https://1234abcd.mirror.aliyuncs.com”)</a></p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"http://xxxxx.mirror.aliyuncs.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"http://registry.docker-cn.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"http://docker.mirrors.ustc.edu.cn\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"http://hub-mirror.c.163.com\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"insecure-registries\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"registry.docker-cn.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"docker.mirrors.ustc.edu.cn\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"debug\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"experimental\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>how to write a dockerfile?</p>\n<blockquote>\n<p>Create an empty directory on your local machine.<br>Change directories (cd) into the new directory,<br>create a file called Dockerfile,<br>copy-and-paste the following content into that file, and save it.<br>Take note of the comments that explain each statement in your new Dockerfile.</p>\n</blockquote>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use an official Python runtime as a parent image</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.4</span>-alpine</span><br><span class=\"line\"><span class=\"comment\"># Set the working directory to /app</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"comment\"># Copy the current directory contents into the container at /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . /app</span></span><br><span class=\"line\"><span class=\"comment\"># Install any needed packages specified in requirements.txt</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> pip install -r requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define environment variable</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> NAME python_web</span><br><span class=\"line\"><span class=\"comment\"># Run app.py when the container launches</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"python\"</span>, <span class=\"string\">\"app.py\"</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-compose\"><a href=\"#Docker-compose\" class=\"headerlink\" title=\"Docker-compose\"></a>Docker-compose</h2><p>官方文档 <a href=\"https://docs.docker.com/compose/overview/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/compose/overview/</a><br>官方例子 <a href=\"https://docs.docker.com/compose/gettingstarted/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/compose/gettingstarted/</a></p>\n<blockquote>\n<p>Using Compose is basically a three-step process:</p>\n<ol>\n<li>Define your app’s environment with a Dockerfile so it can be reproduced anywhere.</li>\n<li>Define the services that make up your app in docker-compose.yml so they can be run together in an isolated environment.</li>\n<li>Run docker-compose up and Compose starts and runs your entire app.</li>\n</ol>\n</blockquote>\n<h2 id=\"设置支持中文\"><a href=\"#设置支持中文\" class=\"headerlink\" title=\"设置支持中文\"></a>设置支持中文</h2><blockquote>\n<p>-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口。<br>-v -v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。<br>-v $PWD/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs。<br>-v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。<br>-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。</p>\n</blockquote>\n<h2 id=\"常用镜像\"><a href=\"#常用镜像\" class=\"headerlink\" title=\"常用镜像\"></a>常用镜像</h2><h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name some-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql</span><br></pre></td></tr></table></figure>\n\n<p>官方文档:<a href=\"https://hub.docker.com/_/mysql\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p>外界访问权限</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> mysql;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">'root'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">WITH</span> mysql_native_password <span class=\"keyword\">BY</span> <span class=\"string\">'root'</span>;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> <span class=\"string\">'root'</span>@<span class=\"string\">'%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mysql-5-7\"><a href=\"#Mysql-5-7\" class=\"headerlink\" title=\"Mysql:5.7\"></a>Mysql:5.7</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -p 3306:3306 --name mysql -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL<span class=\"emphasis\">_ROOT_</span>PASSWORD=19980504 --restart=always -d mysql:5.7</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it mysql  env LANG=C.UTF-8 bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nodejs\"><a href=\"#nodejs\" class=\"headerlink\" title=\"nodejs\"></a>nodejs</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -e <span class=\"string\">\"NODE_ENV=production\"</span> -u <span class=\"string\">\"node\"</span>  -m <span class=\"string\">\"300M\"</span> --memory-swap <span class=\"string\">\"1G\"</span> -w <span class=\"string\">\"/home/node/app\"</span> -v D:\\coding\\web\\nodejs:/home/node/app --name <span class=\"string\">\"node\"</span> -d node</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redis-集群\"><a href=\"#redis-集群\" class=\"headerlink\" title=\"redis 集群\"></a>redis 集群</h3><p><a href=\"https://www.runoob.com/docker/docker-redis-cluster.html\" target=\"_blank\" rel=\"noopener\">redis集群配置</a></p>\n<h2 id=\"检查容器设置\"><a href=\"#检查容器设置\" class=\"headerlink\" title=\"检查容器设置\"></a>检查容器设置</h2><p>docker inspect</p>\n"},{"title":"hashmap","author":"edxuanlen","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2020-03-12T12:14:45.000Z","img":null,"coverImg":null,"password":null,"summary":null,"description":"hashMap要点,hashMap,hashTable,concurrentHashMap的区别","_content":"\n## 底层执行原理\n\n### HashMap的存储结构\n\n数组、链表、**红黑树**(jdk1.8)  \n\n### 特点\n\n1. 快速存储\n2. 快速查找(O(1))\n3. 可伸缩\n\n### hash算法\n\n所有的对象都有hashCode(使用key的)\nhash值的计算是 (hashCode) ^ (hashCode >>> 16)\n\n### 数组下标计算\n\n数组默认大小:16\n数组下标: hash & (16 - 1) = hash % 16\n\n### Hash冲突\n\nHash冲突\n单向链表: 用于解决Hash冲突的方案，加入一个next记录下一个节点\n![单向链表的作用](linkList.png)\n\n### 扩容\n\n扩容  \n\n数组变长2倍  0.75  \n触发条件: 存储比例达到 75%  \n\n### 红黑树\n\n红黑树是一种二叉树，高效的检索效率  \n\n触发条件: 在链表长度大于8的时候，将后面的数据存在红黑树中。  \n\n### Hashtable 和 ConcurrentHashMap 如何实现线程安全\n\n+ 未作同步控制时，代码在多线程下是不安全的。\n+ HashMap的线程是不安全的\n+ HashTable 都加入了synchronized\n+ ConcurrentHashMap 保证性能和线程安全\n\n<span style=\"color:red;\">HashTable 整个只有一个锁, 而 ConcurrentHashMap 使用了分段锁\n</span>\n\n#### 分段锁的思想\n\nJDK 1.7 之前,1000个桶分为16段上锁,而1.8及以后每个桶都有自己独立的锁.\n\n确保了数据操作的高性能.\n","source":"_posts/hashmap.md","raw":"---\ntitle: hashmap\nauthor: edxuanlen\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2020-03-12 20:14:45\nimg:\ncoverImg:\npassword:\nsummary:\ntags:\n    - Interview\n    - Java\ncategories:\n    - Java\n\ndescription: hashMap要点,hashMap,hashTable,concurrentHashMap的区别\n\n---\n\n## 底层执行原理\n\n### HashMap的存储结构\n\n数组、链表、**红黑树**(jdk1.8)  \n\n### 特点\n\n1. 快速存储\n2. 快速查找(O(1))\n3. 可伸缩\n\n### hash算法\n\n所有的对象都有hashCode(使用key的)\nhash值的计算是 (hashCode) ^ (hashCode >>> 16)\n\n### 数组下标计算\n\n数组默认大小:16\n数组下标: hash & (16 - 1) = hash % 16\n\n### Hash冲突\n\nHash冲突\n单向链表: 用于解决Hash冲突的方案，加入一个next记录下一个节点\n![单向链表的作用](linkList.png)\n\n### 扩容\n\n扩容  \n\n数组变长2倍  0.75  \n触发条件: 存储比例达到 75%  \n\n### 红黑树\n\n红黑树是一种二叉树，高效的检索效率  \n\n触发条件: 在链表长度大于8的时候，将后面的数据存在红黑树中。  \n\n### Hashtable 和 ConcurrentHashMap 如何实现线程安全\n\n+ 未作同步控制时，代码在多线程下是不安全的。\n+ HashMap的线程是不安全的\n+ HashTable 都加入了synchronized\n+ ConcurrentHashMap 保证性能和线程安全\n\n<span style=\"color:red;\">HashTable 整个只有一个锁, 而 ConcurrentHashMap 使用了分段锁\n</span>\n\n#### 分段锁的思想\n\nJDK 1.7 之前,1000个桶分为16段上锁,而1.8及以后每个桶都有自己独立的锁.\n\n确保了数据操作的高性能.\n","slug":"hashmap","published":1,"updated":"2020-03-24T12:06:26.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n99e002h24uw0fizxqi5","content":"<h2 id=\"底层执行原理\"><a href=\"#底层执行原理\" class=\"headerlink\" title=\"底层执行原理\"></a>底层执行原理</h2><h3 id=\"HashMap的存储结构\"><a href=\"#HashMap的存储结构\" class=\"headerlink\" title=\"HashMap的存储结构\"></a>HashMap的存储结构</h3><p>数组、链表、<strong>红黑树</strong>(jdk1.8)  </p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>快速存储</li>\n<li>快速查找(O(1))</li>\n<li>可伸缩</li>\n</ol>\n<h3 id=\"hash算法\"><a href=\"#hash算法\" class=\"headerlink\" title=\"hash算法\"></a>hash算法</h3><p>所有的对象都有hashCode(使用key的)<br>hash值的计算是 (hashCode) ^ (hashCode &gt;&gt;&gt; 16)</p>\n<h3 id=\"数组下标计算\"><a href=\"#数组下标计算\" class=\"headerlink\" title=\"数组下标计算\"></a>数组下标计算</h3><p>数组默认大小:16<br>数组下标: hash &amp; (16 - 1) = hash % 16</p>\n<h3 id=\"Hash冲突\"><a href=\"#Hash冲突\" class=\"headerlink\" title=\"Hash冲突\"></a>Hash冲突</h3><p>Hash冲突<br>单向链表: 用于解决Hash冲突的方案，加入一个next记录下一个节点<br><img src=\"linkList.png\" alt=\"单向链表的作用\"></p>\n<h3 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h3><p>扩容  </p>\n<p>数组变长2倍  0.75<br>触发条件: 存储比例达到 75%  </p>\n<h3 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h3><p>红黑树是一种二叉树，高效的检索效率  </p>\n<p>触发条件: 在链表长度大于8的时候，将后面的数据存在红黑树中。  </p>\n<h3 id=\"Hashtable-和-ConcurrentHashMap-如何实现线程安全\"><a href=\"#Hashtable-和-ConcurrentHashMap-如何实现线程安全\" class=\"headerlink\" title=\"Hashtable 和 ConcurrentHashMap 如何实现线程安全\"></a>Hashtable 和 ConcurrentHashMap 如何实现线程安全</h3><ul>\n<li>未作同步控制时，代码在多线程下是不安全的。</li>\n<li>HashMap的线程是不安全的</li>\n<li>HashTable 都加入了synchronized</li>\n<li>ConcurrentHashMap 保证性能和线程安全</li>\n</ul>\n<p><span style=\"color:red;\">HashTable 整个只有一个锁, 而 ConcurrentHashMap 使用了分段锁<br></span></p>\n<h4 id=\"分段锁的思想\"><a href=\"#分段锁的思想\" class=\"headerlink\" title=\"分段锁的思想\"></a>分段锁的思想</h4><p>JDK 1.7 之前,1000个桶分为16段上锁,而1.8及以后每个桶都有自己独立的锁.</p>\n<p>确保了数据操作的高性能.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"底层执行原理\"><a href=\"#底层执行原理\" class=\"headerlink\" title=\"底层执行原理\"></a>底层执行原理</h2><h3 id=\"HashMap的存储结构\"><a href=\"#HashMap的存储结构\" class=\"headerlink\" title=\"HashMap的存储结构\"></a>HashMap的存储结构</h3><p>数组、链表、<strong>红黑树</strong>(jdk1.8)  </p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>快速存储</li>\n<li>快速查找(O(1))</li>\n<li>可伸缩</li>\n</ol>\n<h3 id=\"hash算法\"><a href=\"#hash算法\" class=\"headerlink\" title=\"hash算法\"></a>hash算法</h3><p>所有的对象都有hashCode(使用key的)<br>hash值的计算是 (hashCode) ^ (hashCode &gt;&gt;&gt; 16)</p>\n<h3 id=\"数组下标计算\"><a href=\"#数组下标计算\" class=\"headerlink\" title=\"数组下标计算\"></a>数组下标计算</h3><p>数组默认大小:16<br>数组下标: hash &amp; (16 - 1) = hash % 16</p>\n<h3 id=\"Hash冲突\"><a href=\"#Hash冲突\" class=\"headerlink\" title=\"Hash冲突\"></a>Hash冲突</h3><p>Hash冲突<br>单向链表: 用于解决Hash冲突的方案，加入一个next记录下一个节点<br><img src=\"linkList.png\" alt=\"单向链表的作用\"></p>\n<h3 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h3><p>扩容  </p>\n<p>数组变长2倍  0.75<br>触发条件: 存储比例达到 75%  </p>\n<h3 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h3><p>红黑树是一种二叉树，高效的检索效率  </p>\n<p>触发条件: 在链表长度大于8的时候，将后面的数据存在红黑树中。  </p>\n<h3 id=\"Hashtable-和-ConcurrentHashMap-如何实现线程安全\"><a href=\"#Hashtable-和-ConcurrentHashMap-如何实现线程安全\" class=\"headerlink\" title=\"Hashtable 和 ConcurrentHashMap 如何实现线程安全\"></a>Hashtable 和 ConcurrentHashMap 如何实现线程安全</h3><ul>\n<li>未作同步控制时，代码在多线程下是不安全的。</li>\n<li>HashMap的线程是不安全的</li>\n<li>HashTable 都加入了synchronized</li>\n<li>ConcurrentHashMap 保证性能和线程安全</li>\n</ul>\n<p><span style=\"color:red;\">HashTable 整个只有一个锁, 而 ConcurrentHashMap 使用了分段锁<br></span></p>\n<h4 id=\"分段锁的思想\"><a href=\"#分段锁的思想\" class=\"headerlink\" title=\"分段锁的思想\"></a>分段锁的思想</h4><p>JDK 1.7 之前,1000个桶分为16段上锁,而1.8及以后每个桶都有自己独立的锁.</p>\n<p>确保了数据操作的高性能.</p>\n"},{"title":"git 配置","date":"2018-03-31T12:17:43.000Z","description":"git使用上的一些技巧整理。","_content":"\n## git 全局配置\n\n```\ngit config --global user.name \"edxuanlen\"\ngit config --global user.email \"edxuanlen@gmail.com\"\n```\n\n## git clone 选择分支\n\ngit clone -b 分支名 https:// xxxxx\n\n\n## 创建 git 仓库\n```\ngit init\n# touch README.md\n# git add README.md\ngit add ./\ngit commit -m \"2019.5.6\"\ngit remote add origin https://github.com/edxuanlen/coding.git\ngit push -u origin master\n# git push -f (强行推送)\n```\n\n## 大文件传送\n\ngit-lfs\n\n```sh\ncurl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash\nsudo apt-get install git-lfs\ngit lfs install\n```\n\n\n## 记住密码\n\n```sh\ngit config credential.helper store\n```","source":"_posts/git.md","raw":"---\ntitle: git 配置\ndate: 2018-03-31 20:17:43\ntags: \n    - 应用\ncategories: 应用\ndescription: git使用上的一些技巧整理。\n\n---\n\n## git 全局配置\n\n```\ngit config --global user.name \"edxuanlen\"\ngit config --global user.email \"edxuanlen@gmail.com\"\n```\n\n## git clone 选择分支\n\ngit clone -b 分支名 https:// xxxxx\n\n\n## 创建 git 仓库\n```\ngit init\n# touch README.md\n# git add README.md\ngit add ./\ngit commit -m \"2019.5.6\"\ngit remote add origin https://github.com/edxuanlen/coding.git\ngit push -u origin master\n# git push -f (强行推送)\n```\n\n## 大文件传送\n\ngit-lfs\n\n```sh\ncurl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash\nsudo apt-get install git-lfs\ngit lfs install\n```\n\n\n## 记住密码\n\n```sh\ngit config credential.helper store\n```","slug":"git","published":1,"updated":"2020-02-06T22:40:22.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n99g002k24uwbvvmypev","content":"<h2 id=\"git-全局配置\"><a href=\"#git-全局配置\" class=\"headerlink\" title=\"git 全局配置\"></a>git 全局配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;edxuanlen&quot;</span><br><span class=\"line\">git config --global user.email &quot;edxuanlen@gmail.com&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-clone-选择分支\"><a href=\"#git-clone-选择分支\" class=\"headerlink\" title=\"git clone 选择分支\"></a>git clone 选择分支</h2><p>git clone -b 分支名 https:// xxxxx</p>\n<h2 id=\"创建-git-仓库\"><a href=\"#创建-git-仓库\" class=\"headerlink\" title=\"创建 git 仓库\"></a>创建 git 仓库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\"># touch README.md</span><br><span class=\"line\"># git add README.md</span><br><span class=\"line\">git add ./</span><br><span class=\"line\">git commit -m &quot;2019.5.6&quot;</span><br><span class=\"line\">git remote add origin https://github.com/edxuanlen/coding.git</span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\"># git push -f (强行推送)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"大文件传送\"><a href=\"#大文件传送\" class=\"headerlink\" title=\"大文件传送\"></a>大文件传送</h2><p>git-lfs</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash</span><br><span class=\"line\">sudo apt-get install git-lfs</span><br><span class=\"line\">git lfs install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"记住密码\"><a href=\"#记住密码\" class=\"headerlink\" title=\"记住密码\"></a>记住密码</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config credential.helper store</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"git-全局配置\"><a href=\"#git-全局配置\" class=\"headerlink\" title=\"git 全局配置\"></a>git 全局配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;edxuanlen&quot;</span><br><span class=\"line\">git config --global user.email &quot;edxuanlen@gmail.com&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-clone-选择分支\"><a href=\"#git-clone-选择分支\" class=\"headerlink\" title=\"git clone 选择分支\"></a>git clone 选择分支</h2><p>git clone -b 分支名 https:// xxxxx</p>\n<h2 id=\"创建-git-仓库\"><a href=\"#创建-git-仓库\" class=\"headerlink\" title=\"创建 git 仓库\"></a>创建 git 仓库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\"># touch README.md</span><br><span class=\"line\"># git add README.md</span><br><span class=\"line\">git add ./</span><br><span class=\"line\">git commit -m &quot;2019.5.6&quot;</span><br><span class=\"line\">git remote add origin https://github.com/edxuanlen/coding.git</span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\"># git push -f (强行推送)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"大文件传送\"><a href=\"#大文件传送\" class=\"headerlink\" title=\"大文件传送\"></a>大文件传送</h2><p>git-lfs</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash</span><br><span class=\"line\">sudo apt-get install git-lfs</span><br><span class=\"line\">git lfs install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"记住密码\"><a href=\"#记住密码\" class=\"headerlink\" title=\"记住密码\"></a>记住密码</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config credential.helper store</span><br></pre></td></tr></table></figure>"},{"title":"Mysql","date":"2018-03-31T12:17:43.000Z","description":"docker Mysql的使用上的一些记录。","_content":"\n\n## 开启远程访问\n\n如果是docker上的镜像不需要\n\n```SQL\nuse mysql;\nselect host,user from user;\n# Grant all privileges on *.* to 'root'@'%' identified by 'password' with grant option;\n# (%表示是所有的外部机器，如果指定某一台机，就将%改为相应的机器名；‘root’则是指要使用的用户名，里面的password需要自己修改成root的密码\nflush privileges;  \n```\n\n## 支持中文\n\n```SQL\nset names utf8;\n```\n\n## 查看comment注释\n\n```SQL\nshow full columns from table_name\n```\n\n## foreign key 外键\n\n```SQL\nalter table 表名 add constraint FK_ID foreign key(你的外键字段名) REFERENCES 外表表名(对应的表的主键字段名);\n-- FK_ID 是外键名\n```\n\n## mysql insert\n\n```SQL\ninsert into Stu values('col1','col2','col3');\n```\n\n## mysql update\n\n```SQL\nUPDATE table_name SET col1 = '', col2 = '' WHERE col3 = value;\n```\n\n## mysql 更改列\n\n```SQL\nalter table table_name modify column_name data_type;\n```\n\n## mysql Check 实现\n\n一个限制插入年龄15-45的Check\n\n```SQL\ndelimiter //\ncreate trigger AgeCheck before insert on Stu\nfor each row\nbegin\nif new.Age < 15 or new.Age > 45 then\nsignal sqlstate 'TX000' set message_text = \"Age limit is 15 to 45\";\nend if;\nend //\n```\n","source":"_posts/mysql.md","raw":"---\ntitle: Mysql\ndate: 2018-03-31 20:17:43\ntags: \n    - SQL\ncategories: SQL\ndescription: docker Mysql的使用上的一些记录。\n---\n\n\n## 开启远程访问\n\n如果是docker上的镜像不需要\n\n```SQL\nuse mysql;\nselect host,user from user;\n# Grant all privileges on *.* to 'root'@'%' identified by 'password' with grant option;\n# (%表示是所有的外部机器，如果指定某一台机，就将%改为相应的机器名；‘root’则是指要使用的用户名，里面的password需要自己修改成root的密码\nflush privileges;  \n```\n\n## 支持中文\n\n```SQL\nset names utf8;\n```\n\n## 查看comment注释\n\n```SQL\nshow full columns from table_name\n```\n\n## foreign key 外键\n\n```SQL\nalter table 表名 add constraint FK_ID foreign key(你的外键字段名) REFERENCES 外表表名(对应的表的主键字段名);\n-- FK_ID 是外键名\n```\n\n## mysql insert\n\n```SQL\ninsert into Stu values('col1','col2','col3');\n```\n\n## mysql update\n\n```SQL\nUPDATE table_name SET col1 = '', col2 = '' WHERE col3 = value;\n```\n\n## mysql 更改列\n\n```SQL\nalter table table_name modify column_name data_type;\n```\n\n## mysql Check 实现\n\n一个限制插入年龄15-45的Check\n\n```SQL\ndelimiter //\ncreate trigger AgeCheck before insert on Stu\nfor each row\nbegin\nif new.Age < 15 or new.Age > 45 then\nsignal sqlstate 'TX000' set message_text = \"Age limit is 15 to 45\";\nend if;\nend //\n```\n","slug":"mysql","published":1,"updated":"2020-02-06T22:40:22.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n99j002n24uwf5x59tjc","content":"<h2 id=\"开启远程访问\"><a href=\"#开启远程访问\" class=\"headerlink\" title=\"开启远程访问\"></a>开启远程访问</h2><p>如果是docker上的镜像不需要</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> mysql;</span><br><span class=\"line\"><span class=\"keyword\">select</span> host,<span class=\"keyword\">user</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br><span class=\"line\"><span class=\"comment\"># Grant all privileges on *.* to 'root'@'%' identified by 'password' with grant option;</span></span><br><span class=\"line\"><span class=\"comment\"># (%表示是所有的外部机器，如果指定某一台机，就将%改为相应的机器名；‘root’则是指要使用的用户名，里面的password需要自己修改成root的密码</span></span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"支持中文\"><a href=\"#支持中文\" class=\"headerlink\" title=\"支持中文\"></a>支持中文</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">names</span> utf8;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看comment注释\"><a href=\"#查看comment注释\" class=\"headerlink\" title=\"查看comment注释\"></a>查看comment注释</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">full</span> <span class=\"keyword\">columns</span> <span class=\"keyword\">from</span> table_name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"foreign-key-外键\"><a href=\"#foreign-key-外键\" class=\"headerlink\" title=\"foreign key 外键\"></a>foreign key 外键</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> 表名 <span class=\"keyword\">add</span> <span class=\"keyword\">constraint</span> FK_ID <span class=\"keyword\">foreign</span> <span class=\"keyword\">key</span>(你的外键字段名) <span class=\"keyword\">REFERENCES</span> 外表表名(对应的表的主键字段名);</span><br><span class=\"line\"><span class=\"comment\">-- FK_ID 是外键名</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mysql-insert\"><a href=\"#mysql-insert\" class=\"headerlink\" title=\"mysql insert\"></a>mysql insert</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Stu <span class=\"keyword\">values</span>(<span class=\"string\">'col1'</span>,<span class=\"string\">'col2'</span>,<span class=\"string\">'col3'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mysql-update\"><a href=\"#mysql-update\" class=\"headerlink\" title=\"mysql update\"></a>mysql update</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> table_name <span class=\"keyword\">SET</span> col1 = <span class=\"string\">''</span>, col2 = <span class=\"string\">''</span> <span class=\"keyword\">WHERE</span> col3 = <span class=\"keyword\">value</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mysql-更改列\"><a href=\"#mysql-更改列\" class=\"headerlink\" title=\"mysql 更改列\"></a>mysql 更改列</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">modify</span> column_name data_type;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mysql-Check-实现\"><a href=\"#mysql-Check-实现\" class=\"headerlink\" title=\"mysql Check 实现\"></a>mysql Check 实现</h2><p>一个限制插入年龄15-45的Check</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter //</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">trigger</span> AgeCheck <span class=\"keyword\">before</span> <span class=\"keyword\">insert</span> <span class=\"keyword\">on</span> Stu</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"keyword\">row</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> new.Age &lt; <span class=\"number\">15</span> <span class=\"keyword\">or</span> new.Age &gt; <span class=\"number\">45</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">signal <span class=\"keyword\">sqlstate</span> <span class=\"string\">'TX000'</span> <span class=\"keyword\">set</span> message_text = <span class=\"string\">\"Age limit is 15 to 45\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">if</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span> //</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"开启远程访问\"><a href=\"#开启远程访问\" class=\"headerlink\" title=\"开启远程访问\"></a>开启远程访问</h2><p>如果是docker上的镜像不需要</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> mysql;</span><br><span class=\"line\"><span class=\"keyword\">select</span> host,<span class=\"keyword\">user</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br><span class=\"line\"><span class=\"comment\"># Grant all privileges on *.* to 'root'@'%' identified by 'password' with grant option;</span></span><br><span class=\"line\"><span class=\"comment\"># (%表示是所有的外部机器，如果指定某一台机，就将%改为相应的机器名；‘root’则是指要使用的用户名，里面的password需要自己修改成root的密码</span></span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"支持中文\"><a href=\"#支持中文\" class=\"headerlink\" title=\"支持中文\"></a>支持中文</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">names</span> utf8;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看comment注释\"><a href=\"#查看comment注释\" class=\"headerlink\" title=\"查看comment注释\"></a>查看comment注释</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">full</span> <span class=\"keyword\">columns</span> <span class=\"keyword\">from</span> table_name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"foreign-key-外键\"><a href=\"#foreign-key-外键\" class=\"headerlink\" title=\"foreign key 外键\"></a>foreign key 外键</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> 表名 <span class=\"keyword\">add</span> <span class=\"keyword\">constraint</span> FK_ID <span class=\"keyword\">foreign</span> <span class=\"keyword\">key</span>(你的外键字段名) <span class=\"keyword\">REFERENCES</span> 外表表名(对应的表的主键字段名);</span><br><span class=\"line\"><span class=\"comment\">-- FK_ID 是外键名</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mysql-insert\"><a href=\"#mysql-insert\" class=\"headerlink\" title=\"mysql insert\"></a>mysql insert</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Stu <span class=\"keyword\">values</span>(<span class=\"string\">'col1'</span>,<span class=\"string\">'col2'</span>,<span class=\"string\">'col3'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mysql-update\"><a href=\"#mysql-update\" class=\"headerlink\" title=\"mysql update\"></a>mysql update</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> table_name <span class=\"keyword\">SET</span> col1 = <span class=\"string\">''</span>, col2 = <span class=\"string\">''</span> <span class=\"keyword\">WHERE</span> col3 = <span class=\"keyword\">value</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mysql-更改列\"><a href=\"#mysql-更改列\" class=\"headerlink\" title=\"mysql 更改列\"></a>mysql 更改列</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">modify</span> column_name data_type;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mysql-Check-实现\"><a href=\"#mysql-Check-实现\" class=\"headerlink\" title=\"mysql Check 实现\"></a>mysql Check 实现</h2><p>一个限制插入年龄15-45的Check</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter //</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">trigger</span> AgeCheck <span class=\"keyword\">before</span> <span class=\"keyword\">insert</span> <span class=\"keyword\">on</span> Stu</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"keyword\">row</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> new.Age &lt; <span class=\"number\">15</span> <span class=\"keyword\">or</span> new.Age &gt; <span class=\"number\">45</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">signal <span class=\"keyword\">sqlstate</span> <span class=\"string\">'TX000'</span> <span class=\"keyword\">set</span> message_text = <span class=\"string\">\"Age limit is 15 to 45\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">if</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span> //</span><br></pre></td></tr></table></figure>\n\n"},{"title":"hexo+github搭建个人博客","date":"2018-01-24T12:50:02.000Z","description":"hexo+github搭建个人博客的第一次配置和遇到的问题。","top":true,"_content":"\n\n#hexo +  GitHub + git 搭建个人博客\n## ** 安装配置node.js**\n\n\t   安装配置node.js (http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n## **安装配置git：**\n\n\t安装配置git：（(https://git-scm.com)）(https://jingyan.baidu.com/article/9f7e7ec0b17cac6f2815548d.html)）\n\n## **在GitHub上注册一个仓库：**\n\n    新建一个名为 你的用户名.github.io 的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？\n    由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。\n    几个注意的地方：\n    注册的邮箱一定要验证，否则不会成功；\n    仓库名字必须是：username.github.io，其中username是你的用户名；\n    仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久；\n    创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。\n\n##   **如果要绑定域名：**\n    \n    域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问，如下：\n\n    然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名可以不加www。比如edxuanlen.io\n    另外说一句，在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。\n\n    过程中可能需要到购买域名的地方修改一下它的DNS：\n    Nameserver 1\n    ns2.alidns.com\n    Nameserver 1\n    ns1.alidns.com\n## **hexo的下载和安装：**\n\t1、利用 npm 命令即可安装。在任意位置点击鼠标右键，选择Git Bash输入命令：npm install -g hexo\n\t2、创建文件夹（我的是在E盘创建的Hexo），然后在Hexo文件下，右键运行Git Bash，输入命令：hexo init在_config.yml,进行基础配置\n\t3、 hexo new \"postName\" #新建文章\n\t\thexo new page \"pageName\" #新建页面\n\t\thexo generate #生成静态页面至public目录\n\t\thexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\t\thexo deploy #部署到GitHub\n\t\thexo help  # 查看帮助\n\t\thexo version  #查看Hexo的版本\n\n\t** 部分报错 **\n\t1.找不到git部署 ERROR Deployer not found: git\n\t解决方法\n\t\tnpm install hexo-deployer-git --save\n\t3.部署类型设置git\n\thexo 3.0 部署类型不再是github，_config.yml 中修改\n\t# Deployment\n\t## Docs: http://hexo.io/docs/deployment.html\n\tdeploy:\n\t  type: git\n\t  repository: git@***.github.com:***/***.github.io.git\n\t  branch: master\n\t4. xcodebuild\n\txcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance\n\tnpm install bcrypt\n\t5. RSS不显示\n\t安装RSS插件\n\tnpm install hexo-generator-feed --save\n\t开启RSS功能\n\t编辑hexo/_config.yml，添加如下代码：\n\t\t\n```\nrss: /atom.xml #rss地址  默认即可\n```\n\n## ** hexo d 没办法用：**\n\n\n\t正常来说只要安装了就能用了\n    一开始卡在死活用不了hexo d 最后发现== 我在config.yml 里面把原来我写的repository：改成repo就行了==\n\n\n```Git\n$ hexo d\nINFO  Deploying: git\nYou have to configure the deployment settings in _config.yml first!\nFor more help, you can check the docs: http://hexo.io/docs/deployment.html\nINFO  Deploy done: git\n\nExample:\n  deploy:\n    type: git\n    repo: <repository url>\n    branch: [branch]\n    message: [message]\n\n    extend_dirs: [extend directory]\n\n```\n\n\n##  warning: “warning:LF will be replacee by CRLF”：\n\n\t在Windows环境下使用git进行add的时候，会提示如下warning: “warning:LF will be replacee by CRLF”。\n\t这是因为在Windows中的换行符为CRLF，而在Linux中的换行符为LF。在git创建的项目中换行符为LF，而执行git add时，系统会提示LF将被转换为CRLF。解决的办法很简单，禁止git的自动转换即可。\n\t$ git config --global core.autocrlf false //禁用自动转换然后再进行git操作即可。如果项目已经创建，则需要先删除之前创建的.git 文件后添加上面的设置。\n\n`$ rm -rf .git\n$ git config --globalcore.autocrlf false\n**完成后再重新执行git操作**\n$ git init\n$ git add .\n$ git remote add `\n\nP.S.\n\nCRLF : Carriage-Return Line-Feed 回车换行。即回车(CR,ASCII 13, \\r)换行(LF, ASCII 10, \\n).\n\n在windows中使用回车换行标识一行的结束，而Linux中则只有换行符。\n\n## ** 主题使用主题：**\n\t我用了bluelake ,详情转至bluelake主题配置介绍：http://blog.csdn.net/edxuanlen/article/details/79149778\n## ** 文章编辑器的使用方法：**\n\tmarkdown：https://coding.net/help/doc/project/markdown.html#i-5\n\t注意\n\n    所有markdown标志后面要有一个空格\n    如果标题上一行是列表，则必须在标题和列表之间空一行\n        “`代码注释上下都空一行。（github是没问题，csdn如果不空行界面会不好看）\n        \n###标题\n\n\t# 一级标题\n\t## 二级标题\n\t### 三级标题\n\t列表\n\t\n\t- 无序列表1\n\t- 无序列表2\n\t- 无序列表3\n\t1. 有序列表1 //注意1.后面有空格\n\t2. 有序列表2\n\t3. 有序列表3\n\t引用\n\t\n\t>这个是引用\n\t粗体\n\t\n\t**这个是粗体**\n\t*这个是斜体*\n\t***这个是粗体加斜体***\n\t链接和图片\n\t\n\t[link text](http://example.com/ “optional title”)\n\t![图片描述](链接)\n\t代码\n\t\n\t`    `\n\t```   ```\n\t分割线\n\t\n\t*************\n\t————————————\n\t_____________________\n\tmarkdown文档转为word,pdf\n\t\n\t    使用Pandoc https://www.zhihu.com/question/22972843/answer/30096928\n\t    安装Pandoc,使用Typora http://blog.csdn.net/u012814856/article/details/69258511\n\n## ** 图标设置：**\n\t在设置图标的时候一直没办法替换点原来的  后来发现  改名后的ico要放在所用主题的 source 下才行 而不是 根目录下的source（值得一提，解析24小时候 域名自带的logo才会消失）","source":"_posts/hexo-github搭建个人博客.md","raw":"---\ntitle: hexo+github搭建个人博客\ndate: 2018-1-24 20:50:02\ntags: \n    - hexo\ncategories:\n    - 网站\ndescription: hexo+github搭建个人博客的第一次配置和遇到的问题。\ntop: true\n---\n\n\n#hexo +  GitHub + git 搭建个人博客\n## ** 安装配置node.js**\n\n\t   安装配置node.js (http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n## **安装配置git：**\n\n\t安装配置git：（(https://git-scm.com)）(https://jingyan.baidu.com/article/9f7e7ec0b17cac6f2815548d.html)）\n\n## **在GitHub上注册一个仓库：**\n\n    新建一个名为 你的用户名.github.io 的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？\n    由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。\n    几个注意的地方：\n    注册的邮箱一定要验证，否则不会成功；\n    仓库名字必须是：username.github.io，其中username是你的用户名；\n    仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久；\n    创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。\n\n##   **如果要绑定域名：**\n    \n    域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问，如下：\n\n    然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名可以不加www。比如edxuanlen.io\n    另外说一句，在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。\n\n    过程中可能需要到购买域名的地方修改一下它的DNS：\n    Nameserver 1\n    ns2.alidns.com\n    Nameserver 1\n    ns1.alidns.com\n## **hexo的下载和安装：**\n\t1、利用 npm 命令即可安装。在任意位置点击鼠标右键，选择Git Bash输入命令：npm install -g hexo\n\t2、创建文件夹（我的是在E盘创建的Hexo），然后在Hexo文件下，右键运行Git Bash，输入命令：hexo init在_config.yml,进行基础配置\n\t3、 hexo new \"postName\" #新建文章\n\t\thexo new page \"pageName\" #新建页面\n\t\thexo generate #生成静态页面至public目录\n\t\thexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\t\thexo deploy #部署到GitHub\n\t\thexo help  # 查看帮助\n\t\thexo version  #查看Hexo的版本\n\n\t** 部分报错 **\n\t1.找不到git部署 ERROR Deployer not found: git\n\t解决方法\n\t\tnpm install hexo-deployer-git --save\n\t3.部署类型设置git\n\thexo 3.0 部署类型不再是github，_config.yml 中修改\n\t# Deployment\n\t## Docs: http://hexo.io/docs/deployment.html\n\tdeploy:\n\t  type: git\n\t  repository: git@***.github.com:***/***.github.io.git\n\t  branch: master\n\t4. xcodebuild\n\txcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance\n\tnpm install bcrypt\n\t5. RSS不显示\n\t安装RSS插件\n\tnpm install hexo-generator-feed --save\n\t开启RSS功能\n\t编辑hexo/_config.yml，添加如下代码：\n\t\t\n```\nrss: /atom.xml #rss地址  默认即可\n```\n\n## ** hexo d 没办法用：**\n\n\n\t正常来说只要安装了就能用了\n    一开始卡在死活用不了hexo d 最后发现== 我在config.yml 里面把原来我写的repository：改成repo就行了==\n\n\n```Git\n$ hexo d\nINFO  Deploying: git\nYou have to configure the deployment settings in _config.yml first!\nFor more help, you can check the docs: http://hexo.io/docs/deployment.html\nINFO  Deploy done: git\n\nExample:\n  deploy:\n    type: git\n    repo: <repository url>\n    branch: [branch]\n    message: [message]\n\n    extend_dirs: [extend directory]\n\n```\n\n\n##  warning: “warning:LF will be replacee by CRLF”：\n\n\t在Windows环境下使用git进行add的时候，会提示如下warning: “warning:LF will be replacee by CRLF”。\n\t这是因为在Windows中的换行符为CRLF，而在Linux中的换行符为LF。在git创建的项目中换行符为LF，而执行git add时，系统会提示LF将被转换为CRLF。解决的办法很简单，禁止git的自动转换即可。\n\t$ git config --global core.autocrlf false //禁用自动转换然后再进行git操作即可。如果项目已经创建，则需要先删除之前创建的.git 文件后添加上面的设置。\n\n`$ rm -rf .git\n$ git config --globalcore.autocrlf false\n**完成后再重新执行git操作**\n$ git init\n$ git add .\n$ git remote add `\n\nP.S.\n\nCRLF : Carriage-Return Line-Feed 回车换行。即回车(CR,ASCII 13, \\r)换行(LF, ASCII 10, \\n).\n\n在windows中使用回车换行标识一行的结束，而Linux中则只有换行符。\n\n## ** 主题使用主题：**\n\t我用了bluelake ,详情转至bluelake主题配置介绍：http://blog.csdn.net/edxuanlen/article/details/79149778\n## ** 文章编辑器的使用方法：**\n\tmarkdown：https://coding.net/help/doc/project/markdown.html#i-5\n\t注意\n\n    所有markdown标志后面要有一个空格\n    如果标题上一行是列表，则必须在标题和列表之间空一行\n        “`代码注释上下都空一行。（github是没问题，csdn如果不空行界面会不好看）\n        \n###标题\n\n\t# 一级标题\n\t## 二级标题\n\t### 三级标题\n\t列表\n\t\n\t- 无序列表1\n\t- 无序列表2\n\t- 无序列表3\n\t1. 有序列表1 //注意1.后面有空格\n\t2. 有序列表2\n\t3. 有序列表3\n\t引用\n\t\n\t>这个是引用\n\t粗体\n\t\n\t**这个是粗体**\n\t*这个是斜体*\n\t***这个是粗体加斜体***\n\t链接和图片\n\t\n\t[link text](http://example.com/ “optional title”)\n\t![图片描述](链接)\n\t代码\n\t\n\t`    `\n\t```   ```\n\t分割线\n\t\n\t*************\n\t————————————\n\t_____________________\n\tmarkdown文档转为word,pdf\n\t\n\t    使用Pandoc https://www.zhihu.com/question/22972843/answer/30096928\n\t    安装Pandoc,使用Typora http://blog.csdn.net/u012814856/article/details/69258511\n\n## ** 图标设置：**\n\t在设置图标的时候一直没办法替换点原来的  后来发现  改名后的ico要放在所用主题的 source 下才行 而不是 根目录下的source（值得一提，解析24小时候 域名自带的logo才会消失）","slug":"hexo-github搭建个人博客","published":1,"updated":"2020-02-06T22:40:22.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n99m002r24uw2ptfakcj","content":"<p>#hexo +  GitHub + git 搭建个人博客</p>\n<h2 id=\"安装配置node-js\"><a href=\"#安装配置node-js\" class=\"headerlink\" title=\"** 安装配置node.js**\"></a>** 安装配置node.js**</h2><pre><code>安装配置node.js (http://www.runoob.com/nodejs/nodejs-install-setup.html)</code></pre><h2 id=\"安装配置git：\"><a href=\"#安装配置git：\" class=\"headerlink\" title=\"安装配置git：\"></a><strong>安装配置git：</strong></h2><pre><code>安装配置git：（(https://git-scm.com)）(https://jingyan.baidu.com/article/9f7e7ec0b17cac6f2815548d.html)）</code></pre><h2 id=\"在GitHub上注册一个仓库：\"><a href=\"#在GitHub上注册一个仓库：\" class=\"headerlink\" title=\"在GitHub上注册一个仓库：\"></a><strong>在GitHub上注册一个仓库：</strong></h2><pre><code>新建一个名为 你的用户名.github.io 的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？\n由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。\n几个注意的地方：\n注册的邮箱一定要验证，否则不会成功；\n仓库名字必须是：username.github.io，其中username是你的用户名；\n仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久；\n创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</code></pre><h2 id=\"如果要绑定域名：\"><a href=\"#如果要绑定域名：\" class=\"headerlink\" title=\"如果要绑定域名：\"></a><strong>如果要绑定域名：</strong></h2><pre><code>域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问，如下：\n\n然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名可以不加www。比如edxuanlen.io\n另外说一句，在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。\n\n过程中可能需要到购买域名的地方修改一下它的DNS：\nNameserver 1\nns2.alidns.com\nNameserver 1\nns1.alidns.com</code></pre><h2 id=\"hexo的下载和安装：\"><a href=\"#hexo的下载和安装：\" class=\"headerlink\" title=\"hexo的下载和安装：\"></a><strong>hexo的下载和安装：</strong></h2><pre><code>1、利用 npm 命令即可安装。在任意位置点击鼠标右键，选择Git Bash输入命令：npm install -g hexo\n2、创建文件夹（我的是在E盘创建的Hexo），然后在Hexo文件下，右键运行Git Bash，输入命令：hexo init在_config.yml,进行基础配置\n3、 hexo new &quot;postName&quot; #新建文章\n    hexo new page &quot;pageName&quot; #新建页面\n    hexo generate #生成静态页面至public目录\n    hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）\n    hexo deploy #部署到GitHub\n    hexo help  # 查看帮助\n    hexo version  #查看Hexo的版本\n\n** 部分报错 **\n1.找不到git部署 ERROR Deployer not found: git\n解决方法\n    npm install hexo-deployer-git --save\n3.部署类型设置git\nhexo 3.0 部署类型不再是github，_config.yml 中修改\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: git@***.github.com:***/***.github.io.git\n  branch: master\n4. xcodebuild\nxcode-select: error: tool &apos;xcodebuild&apos; requires Xcode, but active developer directory &apos;/Library/Developer/CommandLineTools&apos; is a command line tools instance\nnpm install bcrypt\n5. RSS不显示\n安装RSS插件\nnpm install hexo-generator-feed --save\n开启RSS功能\n编辑hexo/_config.yml，添加如下代码：</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rss: /atom.xml #rss地址  默认即可</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo-d-没办法用：\"><a href=\"#hexo-d-没办法用：\" class=\"headerlink\" title=\"** hexo d 没办法用：**\"></a>** hexo d 没办法用：**</h2><pre><code>正常来说只要安装了就能用了\n一开始卡在死活用不了hexo d 最后发现== 我在config.yml 里面把原来我写的repository：改成repo就行了==</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br><span class=\"line\">INFO  Deploying: git</span><br><span class=\"line\">You have to configure the deployment settings in _config.yml first!</span><br><span class=\"line\">For more help, you can check the docs: http://hexo.io/docs/deployment.html</span><br><span class=\"line\">INFO  Deploy done: git</span><br><span class=\"line\"></span><br><span class=\"line\">Example:</span><br><span class=\"line\">  deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: &lt;repository url&gt;</span><br><span class=\"line\">    branch: [branch]</span><br><span class=\"line\">    message: [message]</span><br><span class=\"line\"></span><br><span class=\"line\">    extend_dirs: [extend directory]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"warning-“warning-LF-will-be-replacee-by-CRLF”：\"><a href=\"#warning-“warning-LF-will-be-replacee-by-CRLF”：\" class=\"headerlink\" title=\"warning: “warning:LF will be replacee by CRLF”：\"></a>warning: “warning:LF will be replacee by CRLF”：</h2><pre><code>在Windows环境下使用git进行add的时候，会提示如下warning: “warning:LF will be replacee by CRLF”。\n这是因为在Windows中的换行符为CRLF，而在Linux中的换行符为LF。在git创建的项目中换行符为LF，而执行git add时，系统会提示LF将被转换为CRLF。解决的办法很简单，禁止git的自动转换即可。\n$ git config --global core.autocrlf false //禁用自动转换然后再进行git操作即可。如果项目已经创建，则需要先删除之前创建的.git 文件后添加上面的设置。</code></pre><p><code>$ rm -rf .git\n$ git config --globalcore.autocrlf false\n**完成后再重新执行git操作**\n$ git init\n$ git add .\n$ git remote add</code></p>\n<p>P.S.</p>\n<p>CRLF : Carriage-Return Line-Feed 回车换行。即回车(CR,ASCII 13, \\r)换行(LF, ASCII 10, \\n).</p>\n<p>在windows中使用回车换行标识一行的结束，而Linux中则只有换行符。</p>\n<h2 id=\"主题使用主题：\"><a href=\"#主题使用主题：\" class=\"headerlink\" title=\"** 主题使用主题：**\"></a>** 主题使用主题：**</h2><pre><code>我用了bluelake ,详情转至bluelake主题配置介绍：http://blog.csdn.net/edxuanlen/article/details/79149778</code></pre><h2 id=\"文章编辑器的使用方法：\"><a href=\"#文章编辑器的使用方法：\" class=\"headerlink\" title=\"** 文章编辑器的使用方法：**\"></a>** 文章编辑器的使用方法：**</h2><pre><code>markdown：https://coding.net/help/doc/project/markdown.html#i-5\n注意\n\n所有markdown标志后面要有一个空格\n如果标题上一行是列表，则必须在标题和列表之间空一行\n    “`代码注释上下都空一行。（github是没问题，csdn如果不空行界面会不好看）</code></pre><p>###标题</p>\n<pre><code># 一级标题\n## 二级标题\n### 三级标题\n列表\n\n- 无序列表1\n- 无序列表2\n- 无序列表3\n1. 有序列表1 //注意1.后面有空格\n2. 有序列表2\n3. 有序列表3\n引用\n\n&gt;这个是引用\n粗体\n\n**这个是粗体**\n*这个是斜体*\n***这个是粗体加斜体***\n链接和图片\n\n[link text](http://example.com/ “optional title”)\n![图片描述](链接)\n代码\n\n`    `\n```   ```\n分割线\n\n*************\n————————————\n_____________________\nmarkdown文档转为word,pdf\n\n    使用Pandoc https://www.zhihu.com/question/22972843/answer/30096928\n    安装Pandoc,使用Typora http://blog.csdn.net/u012814856/article/details/69258511</code></pre><h2 id=\"图标设置：\"><a href=\"#图标设置：\" class=\"headerlink\" title=\"** 图标设置：**\"></a>** 图标设置：**</h2><pre><code>在设置图标的时候一直没办法替换点原来的  后来发现  改名后的ico要放在所用主题的 source 下才行 而不是 根目录下的source（值得一提，解析24小时候 域名自带的logo才会消失）</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>#hexo +  GitHub + git 搭建个人博客</p>\n<h2 id=\"安装配置node-js\"><a href=\"#安装配置node-js\" class=\"headerlink\" title=\"** 安装配置node.js**\"></a>** 安装配置node.js**</h2><pre><code>安装配置node.js (http://www.runoob.com/nodejs/nodejs-install-setup.html)</code></pre><h2 id=\"安装配置git：\"><a href=\"#安装配置git：\" class=\"headerlink\" title=\"安装配置git：\"></a><strong>安装配置git：</strong></h2><pre><code>安装配置git：（(https://git-scm.com)）(https://jingyan.baidu.com/article/9f7e7ec0b17cac6f2815548d.html)）</code></pre><h2 id=\"在GitHub上注册一个仓库：\"><a href=\"#在GitHub上注册一个仓库：\" class=\"headerlink\" title=\"在GitHub上注册一个仓库：\"></a><strong>在GitHub上注册一个仓库：</strong></h2><pre><code>新建一个名为 你的用户名.github.io 的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？\n由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。\n几个注意的地方：\n注册的邮箱一定要验证，否则不会成功；\n仓库名字必须是：username.github.io，其中username是你的用户名；\n仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久；\n创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</code></pre><h2 id=\"如果要绑定域名：\"><a href=\"#如果要绑定域名：\" class=\"headerlink\" title=\"如果要绑定域名：\"></a><strong>如果要绑定域名：</strong></h2><pre><code>域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问，如下：\n\n然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名可以不加www。比如edxuanlen.io\n另外说一句，在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。\n\n过程中可能需要到购买域名的地方修改一下它的DNS：\nNameserver 1\nns2.alidns.com\nNameserver 1\nns1.alidns.com</code></pre><h2 id=\"hexo的下载和安装：\"><a href=\"#hexo的下载和安装：\" class=\"headerlink\" title=\"hexo的下载和安装：\"></a><strong>hexo的下载和安装：</strong></h2><pre><code>1、利用 npm 命令即可安装。在任意位置点击鼠标右键，选择Git Bash输入命令：npm install -g hexo\n2、创建文件夹（我的是在E盘创建的Hexo），然后在Hexo文件下，右键运行Git Bash，输入命令：hexo init在_config.yml,进行基础配置\n3、 hexo new &quot;postName&quot; #新建文章\n    hexo new page &quot;pageName&quot; #新建页面\n    hexo generate #生成静态页面至public目录\n    hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）\n    hexo deploy #部署到GitHub\n    hexo help  # 查看帮助\n    hexo version  #查看Hexo的版本\n\n** 部分报错 **\n1.找不到git部署 ERROR Deployer not found: git\n解决方法\n    npm install hexo-deployer-git --save\n3.部署类型设置git\nhexo 3.0 部署类型不再是github，_config.yml 中修改\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: git@***.github.com:***/***.github.io.git\n  branch: master\n4. xcodebuild\nxcode-select: error: tool &apos;xcodebuild&apos; requires Xcode, but active developer directory &apos;/Library/Developer/CommandLineTools&apos; is a command line tools instance\nnpm install bcrypt\n5. RSS不显示\n安装RSS插件\nnpm install hexo-generator-feed --save\n开启RSS功能\n编辑hexo/_config.yml，添加如下代码：</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rss: /atom.xml #rss地址  默认即可</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo-d-没办法用：\"><a href=\"#hexo-d-没办法用：\" class=\"headerlink\" title=\"** hexo d 没办法用：**\"></a>** hexo d 没办法用：**</h2><pre><code>正常来说只要安装了就能用了\n一开始卡在死活用不了hexo d 最后发现== 我在config.yml 里面把原来我写的repository：改成repo就行了==</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br><span class=\"line\">INFO  Deploying: git</span><br><span class=\"line\">You have to configure the deployment settings in _config.yml first!</span><br><span class=\"line\">For more help, you can check the docs: http://hexo.io/docs/deployment.html</span><br><span class=\"line\">INFO  Deploy done: git</span><br><span class=\"line\"></span><br><span class=\"line\">Example:</span><br><span class=\"line\">  deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: &lt;repository url&gt;</span><br><span class=\"line\">    branch: [branch]</span><br><span class=\"line\">    message: [message]</span><br><span class=\"line\"></span><br><span class=\"line\">    extend_dirs: [extend directory]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"warning-“warning-LF-will-be-replacee-by-CRLF”：\"><a href=\"#warning-“warning-LF-will-be-replacee-by-CRLF”：\" class=\"headerlink\" title=\"warning: “warning:LF will be replacee by CRLF”：\"></a>warning: “warning:LF will be replacee by CRLF”：</h2><pre><code>在Windows环境下使用git进行add的时候，会提示如下warning: “warning:LF will be replacee by CRLF”。\n这是因为在Windows中的换行符为CRLF，而在Linux中的换行符为LF。在git创建的项目中换行符为LF，而执行git add时，系统会提示LF将被转换为CRLF。解决的办法很简单，禁止git的自动转换即可。\n$ git config --global core.autocrlf false //禁用自动转换然后再进行git操作即可。如果项目已经创建，则需要先删除之前创建的.git 文件后添加上面的设置。</code></pre><p><code>$ rm -rf .git\n$ git config --globalcore.autocrlf false\n**完成后再重新执行git操作**\n$ git init\n$ git add .\n$ git remote add</code></p>\n<p>P.S.</p>\n<p>CRLF : Carriage-Return Line-Feed 回车换行。即回车(CR,ASCII 13, \\r)换行(LF, ASCII 10, \\n).</p>\n<p>在windows中使用回车换行标识一行的结束，而Linux中则只有换行符。</p>\n<h2 id=\"主题使用主题：\"><a href=\"#主题使用主题：\" class=\"headerlink\" title=\"** 主题使用主题：**\"></a>** 主题使用主题：**</h2><pre><code>我用了bluelake ,详情转至bluelake主题配置介绍：http://blog.csdn.net/edxuanlen/article/details/79149778</code></pre><h2 id=\"文章编辑器的使用方法：\"><a href=\"#文章编辑器的使用方法：\" class=\"headerlink\" title=\"** 文章编辑器的使用方法：**\"></a>** 文章编辑器的使用方法：**</h2><pre><code>markdown：https://coding.net/help/doc/project/markdown.html#i-5\n注意\n\n所有markdown标志后面要有一个空格\n如果标题上一行是列表，则必须在标题和列表之间空一行\n    “`代码注释上下都空一行。（github是没问题，csdn如果不空行界面会不好看）</code></pre><p>###标题</p>\n<pre><code># 一级标题\n## 二级标题\n### 三级标题\n列表\n\n- 无序列表1\n- 无序列表2\n- 无序列表3\n1. 有序列表1 //注意1.后面有空格\n2. 有序列表2\n3. 有序列表3\n引用\n\n&gt;这个是引用\n粗体\n\n**这个是粗体**\n*这个是斜体*\n***这个是粗体加斜体***\n链接和图片\n\n[link text](http://example.com/ “optional title”)\n![图片描述](链接)\n代码\n\n`    `\n```   ```\n分割线\n\n*************\n————————————\n_____________________\nmarkdown文档转为word,pdf\n\n    使用Pandoc https://www.zhihu.com/question/22972843/answer/30096928\n    安装Pandoc,使用Typora http://blog.csdn.net/u012814856/article/details/69258511</code></pre><h2 id=\"图标设置：\"><a href=\"#图标设置：\" class=\"headerlink\" title=\"** 图标设置：**\"></a>** 图标设置：**</h2><pre><code>在设置图标的时候一直没办法替换点原来的  后来发现  改名后的ico要放在所用主题的 source 下才行 而不是 根目录下的source（值得一提，解析24小时候 域名自带的logo才会消失）</code></pre>"},{"title":"python Django初识","date":"2018-09-18T09:53:35.000Z","description":"使用Python中的Django搭建网站后台 。","_content":"\n\n# 基本环境\nUbuntu18\n```\nsudo apt-get update\nsudo apt-get -y upgrade\n更新安装好的系统信息\n\nsudo pip install  virtualenv  \n安装虚拟环境\nip a\n查看当前虚拟机的ip\n\n\n```\n","source":"_posts/python-Django初识.md","raw":"---\ntitle: python Django初识\ndate: 2018-09-18 17:53:35\ntags:\n    - python3项目\ncategories:\n    - Python3\ndescription:\n    使用Python中的Django搭建网站后台 。\n---\n\n\n# 基本环境\nUbuntu18\n```\nsudo apt-get update\nsudo apt-get -y upgrade\n更新安装好的系统信息\n\nsudo pip install  virtualenv  \n安装虚拟环境\nip a\n查看当前虚拟机的ip\n\n\n```\n","slug":"python-Django初识","published":1,"updated":"2020-02-06T22:40:22.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n99o002v24uwdmd2241o","content":"<h1 id=\"基本环境\"><a href=\"#基本环境\" class=\"headerlink\" title=\"基本环境\"></a>基本环境</h1><p>Ubuntu18</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -y upgrade</span><br><span class=\"line\">更新安装好的系统信息</span><br><span class=\"line\"></span><br><span class=\"line\">sudo pip install  virtualenv  </span><br><span class=\"line\">安装虚拟环境</span><br><span class=\"line\">ip a</span><br><span class=\"line\">查看当前虚拟机的ip</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基本环境\"><a href=\"#基本环境\" class=\"headerlink\" title=\"基本环境\"></a>基本环境</h1><p>Ubuntu18</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -y upgrade</span><br><span class=\"line\">更新安装好的系统信息</span><br><span class=\"line\"></span><br><span class=\"line\">sudo pip install  virtualenv  </span><br><span class=\"line\">安装虚拟环境</span><br><span class=\"line\">ip a</span><br><span class=\"line\">查看当前虚拟机的ip</span><br></pre></td></tr></table></figure>\n\n"},{"title":"hexo的一些使用记录","date":"2019-09-23T00:25:30.000Z","description":"hexo使用过程中一些问题的解决。","top":null,"_content":"\n## BlueLake 的使用\n\n[BlueLake配置](https://chaooo.github.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html#comments)\n\n## 报错cannot read  property 'count' of undefined\n百度的插件有问题\n```\n1. npm remove hexo-baidu-url-submit\n2. hexo clean\n3. hexo g\n```","source":"_posts/hexo的一些使用记录.md","raw":"---\ntitle: hexo的一些使用记录\ndate: 2019-09-23 08:25:30\ntags: \n    - 网站\ncategories: 网站\ndescription: hexo使用过程中一些问题的解决。\ntop:\n---\n\n## BlueLake 的使用\n\n[BlueLake配置](https://chaooo.github.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html#comments)\n\n## 报错cannot read  property 'count' of undefined\n百度的插件有问题\n```\n1. npm remove hexo-baidu-url-submit\n2. hexo clean\n3. hexo g\n```","slug":"hexo的一些使用记录","published":1,"updated":"2020-02-06T22:40:22.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n99q002y24uwdle65snd","content":"<h2 id=\"BlueLake-的使用\"><a href=\"#BlueLake-的使用\" class=\"headerlink\" title=\"BlueLake 的使用\"></a>BlueLake 的使用</h2><p><a href=\"https://chaooo.github.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html#comments\" target=\"_blank\" rel=\"noopener\">BlueLake配置</a></p>\n<h2 id=\"报错cannot-read-property-‘count’-of-undefined\"><a href=\"#报错cannot-read-property-‘count’-of-undefined\" class=\"headerlink\" title=\"报错cannot read  property ‘count’ of undefined\"></a>报错cannot read  property ‘count’ of undefined</h2><p>百度的插件有问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. npm remove hexo-baidu-url-submit</span><br><span class=\"line\">2. hexo clean</span><br><span class=\"line\">3. hexo g</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"BlueLake-的使用\"><a href=\"#BlueLake-的使用\" class=\"headerlink\" title=\"BlueLake 的使用\"></a>BlueLake 的使用</h2><p><a href=\"https://chaooo.github.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html#comments\" target=\"_blank\" rel=\"noopener\">BlueLake配置</a></p>\n<h2 id=\"报错cannot-read-property-‘count’-of-undefined\"><a href=\"#报错cannot-read-property-‘count’-of-undefined\" class=\"headerlink\" title=\"报错cannot read  property ‘count’ of undefined\"></a>报错cannot read  property ‘count’ of undefined</h2><p>百度的插件有问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. npm remove hexo-baidu-url-submit</span><br><span class=\"line\">2. hexo clean</span><br><span class=\"line\">3. hexo g</span><br></pre></td></tr></table></figure>"},{"title":"hexo_Bluelake主题","date":"2018-01-24T12:52:30.000Z","description":"Bluelake主题的配置","top":true,"_content":"\n开始之前\n\n在阅读本文之前，假定您已经成功安装了Hexo，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n    需要特别注意的是Hexo有两个_config.yml配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为根_config.yml；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为主题_config.yml。\n\n1. 安装\n\n您可以直接到BlueLake发布页下载，然后解压拷贝到themes目录下，修改配置即可。\n不过我还是推荐使用GIT来checkout代码，之后也可以通过git pull来快速更新。\n1.1 安装主题\n\n在根目录下打开终端窗口：\ngit bash\n\n$ git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake\n\n1.2 安装主题渲染器\n\nBlueLake是基于jade和stylus写的，所以需要安装hexo-renderer-jade和hexo-renderer-stylus来渲染。\ngit bash\n\n$ npm install hexo-renderer-jade@0.3.0 --save\n$ npm install hexo-renderer-stylus --save\n\n1.3 启用主题\n\n打开根_config.yml配置文件，找到theme字段，将其值改为BlueLake(先确认主题文件夹名称是否为BlueLake)。\n根_config.yml\n_config.yml\n\n\ntheme: BlueLake\n\n1.4 验证\n\n首先启动 Hexo 本地站点，并开启调试模式：\ngit bash\n\n\t\n\n$ hexo s --debug\n\n在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运行。\n1.5 更新主题\n\n今后若主题添加了新功能正是您需要的，您可以直接git pull来更新主题。\ngit bash\n\ncd themes/BlueLake\ngit pull\n\n2. 配置\n2.1 配置网站头部显示文字\n\n打开根_config.yml，找到：\n根_config.yml\n_config.yml\n\n\ntitle: \nsubtitle: \ndescription: \nauthor:\n\ntitle和subtitle分别是网站主标题和副标题，会显示在网站头部；description在网站界面不会显示，内容会加入网站源码的meta标签中，主要用于SEO；author就填写网站所有者的名字，会在网站底部的Copyright处有所显示。\n2.2 设置语言\n\n该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在根_config.yml配置如下：\n根_config.yml\n_config.yml\n\n\n\t\n\nlanguage: zh-CN\n\n2.3 设置菜单\n\n打开主题_config.yml，找到：\n主题_config.yml\nthemes/BlueLake/_config.yml\n\nmenu:\n  - page: home\n    directory: .\n    icon: fa-home\n  - page: archive\n    directory: archives/\n    icon: fa-archive\n  # - page: about\n  #   directory: about/\n  #   icon: fa-user\n  - page: rss\n    directory: atom.xml\n    icon: fa-rss\n\n主题默认是展示四个菜单，即主页home，归档archive，关于about，订阅RSS；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。\n每个页面底部的footer中联系博主的三个图标分别是邮箱，微博主页链接地址，GitHUb个人页链接地址，直接使用主题_config.yml中about页面的配置，若不需要about页面，只需要如下配置就好：\n主题_config.yml\nthemes/BlueLake/_config.yml\n\n\t\n\n# About page \nabout:\n  email: ## 个人邮箱 \n  weibo_url: ## 微博主页链接地址\n  github_url: ## github主页链接地址\n\n2.3.1 添加about页\n\n此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：\ngit bash\n\n$ hexo new page 'about'\n\n打开主题_config.yml，补全关于我页面的详细信息：\n主题_config.yml\nthemes/BlueLake/_config.y\n\n# About page \nabout:\n  photo_url: ## 头像的链接地址\n  email: ## 个人邮箱 \n  weibo_url: ## 微博主页链接地址\n  weibo_name: ## 微博用户名 \n  github_url: ## github主页链接地址\n  github_name: ## github用户名\n\n当然您也可以自定义重新布局about页面，只需要修改layout/page.jade模板就好。\n2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件\n\n在根目录下打开命令行窗口：\ngit bash\n\n$ npm install hexo-generator-feed --save\n$ npm install hexo-generator-sitemap --save\n$ npm install hexo-generator-baidu-sitemap --save\n\n添加主题_config.yml配置：\n主题_config.yml\nthemes/BlueLake/_config.yml\n\nPlugins:\n  hexo-generator-feed\n  hexo-generator-sitemap\n  hexo-generator-baidu-sitemap\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n\n2.4 添加本地搜索\n\n默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件hexo-generator-json-content来创建JSON数据文件：\ngit bash\n\n\t\n\n$ npm install hexo-generator-json-content@2.2.0 --save\n\n然后在根_config.yml添加配置：\n根_config.yml\n_config.yml\n\n\t\n\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true\n\n最后在主题_config.yml添加配置：\n主题_config.yml\nthemes/BlueLake/_config.yml\n\t\n\nlocal_search: true\n\n2.5 修改站点图标\n\n站点图标存放在主题的Source目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。\n您需要准备一张ico格式并命名为 favicon.ico ，请将其放入hexo目录的source文件夹，建议大小：32px X 32px。\n您需要为苹果设备添加网站徽标，请命名为 apple-touch-icon.png 的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。\n(有很多网站都可以在线生成ico格式的图片。)\n2.6 添加站点关键字\n\n请在hexo目录的根_config.yml中添加keywords字段，如：\n根_config.yml\n_config.yml\n\n\t\n\n# Site\ntitle: Hexo\nsubtitle: 副标题\ndescription: 网站简要描述,如：Charles·Zheng's blog.\nkeywords: 网站关键字, key, key1, key2, key3\nauthor: Charles\nlanguage: zh-CN\n\n2.7 其他配置\n\n主题_config.yml的其他配置\n\n    show_category_count——是否显示分类下的文章数。\n    widgets_on_small_screens——是否在小屏显示侧边栏，若true,则侧边栏挂件将显示在底部。\n    主题_config.yml\n    themes/BlueLake/_config.yml\n\n\n    show_category_count: true \n    widgets_on_small_screens: true\n\n3.集成第三方服务\n3.1 添加评论\n\n目前主题集成六种第三方评论，分别是多说评论、Disqus评论、来必力评论、友言评论、网易云跟帖评论、畅言评论，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前网易云跟帖和畅言还不错。\n\n    注册并获得代码。\n        若使用多说评论，注册多说后获得short_name。\n        若使用Disqus评论，注册Disqus后获得short_name。\n        若使用来必力评论，注册来必力,获得data-uid。\n        若使用友言评论，注册友言,获得uid。\n        若使用网易云跟帖评论，注册网易云跟帖,获得productKey。\n        若使用畅言评论，注册畅言，获得appid，appkey。\n    配置主题_config.yml：\n    主题_config.yml\n    themes/BlueLake/_config.yml\n\n    \t\n\n    #Cmments\n    comment:\n      duoshuo: ## duoshuo_shortname\n      disqus: ## disqus_shortname\n      livere: ## 来必力(data-uid)\n      uyan: ## 友言(uid)\n      cloudTie: ## 网易云跟帖(productKey)\n      changyan: ## 畅言需在下方配置两个参数，此处不填。\n        appid: ## 畅言(appid)\n        appkey: ##畅言(appkey)\n\n3.2 百度统计\n\n    登录百度统计，定位到站点的代码获取页面。\n    复制//hm.baidu.com/hm.js?后面那串统计脚本id(假设为：8006843039519956000)\n    配置主题_config.yml:\n    主题_config.yml\n    themes/BlueLake/_config.yml\n\n\n    baidu_analytics: 8006843039519956000\n\n    注意： baidu_analytics不是你的百度id或者百度统计id\n    如若使用谷歌统计，配置方法与百度统计类似。\n\n3.3 卜算子阅读次数统计\n主题_config.yml\nthemes/BlueLake/_config.yml\n\nbusuanzi: true\n\n若设置为true将计算文章的阅读量(Hits)，并显示在文章标题下的小手图标旁。\n3.4 微博秀\n\n微博秀挂件的代码放在layout/_widget/weibo.jade下，需要您去微博开放平台获取您自己的微博秀代码来替换。\n\n    登录微博开放平台，选择微博秀。\n    为了与主题风格统一，作如下配置\n        基础设置：高400px；勾选宽度自适应；颜色选择白色；\n        样式设置：主字色#333；链接色#40759b；鼠标悬停色#f7f8f8；\n        模块设置：去掉标题、边框、粉丝的勾选框，只留微博。\n    复制代码里src=\"\"里引号包裹的内容，替换到layout/_widget/weibo.jade\n    weibo.jade\n    layout/_widget/weibo.jade\n\n    \t\n\n    .widget\n      .widget-title\n        i(class='fa fa-weibo')= ' ' + __('新浪微博')\n      iframe(width=\"100%\",height=\"400\",class=\"share_self\",frameborder=\"0\",scrolling=\"no\",src=\"http://widget.weibo.com/weiboshow/index.php?language=&width=0&height=400&fansRow=2&ptype=1&speed=0&skin=5&isTitle=0&noborder=0&isWeibo=1&isFans=0&uid=1700139362&verifier=85be6061&colors=d6f3f7,ffffff,333,40759b,f7f8f8&dpc=1\")\n\n    这只是为了和主题的风格统一，当然您也可以自由随意发挥。\n\n        注意：最主要是是要把src里uid=和verifier=后面的字段替换为您自己代码里的就好。\n\n\n\n转载: https://chaooo.github.io/\n\n\n\n\n后面来补充一下遇到的问题，about界面的图片应该怎么放置：\n\n\n\t在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。\n\t我在themes/source下找到的img 文件夹 有bg的图片 灵机一动加在了这个img里，在git编辑themes的主题config的时候成功的调用。\n\t /img/调用图片名 （例如  头像.jpg） 即可\n\t \n **2. 使用图床：**\n \n\t https://sm.ms/  然后再用url进行调用！\n\t \n **3. 文章内如何调用图片：**\n\t\t\n\t前提：修改_config.yml配置文件post_asset_folder项为true。\n\t\n\t创建博客是使用命令创建：\n\t\n\thexo new [layout] <title>\n\t\n\t其中的layout项可以省略，例如：\n\t\n\thexo new \"这是一个新的博客\"\n\t\n\t使用完命令之后，在source/_post文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。\n\t这是一个新的博客的图片\n\t\n\t这是一个新的博客的图片\n\t\n\t下一步就是把需要的图片放到新创建的那个文件夹里面去。\n\t引用图片的第一种方法\n\t\n\t{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}\n\t\n\t用此种方法，而不是以前的![]()方法，前提是你的hexo的版本是hexo3以上，到package.json里面看一下吧。如果不是hexo3以上的版本，那就只能用第二种方法了。\n\t\n\t例子\n\t\n\t我现在写了一个段落，并且想在这个段落的某一个地方{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}引入一张图片\n\n\n**在写作过程中乱码问题：**\n\n将博客文件保存为UTF-8即可解决问题。\n\n方法：\n\n    1.将博客文件保存为UTF-8\n\n     用记事本打开本地的博客文件“xxx.md”，然后点“另存为”，“编码(E):”选择“UTF-8”，点击“保存”，替换原文件。\n\n    2.重新生成，部署，博客乱码即消除。","source":"_posts/hexo-Bluelake主题.md","raw":"---\ntitle: hexo_Bluelake主题\ndate: 2018-1-24 20:52:30\ntags:\n    - hexo\ncategories:\n    - 网站\ndescription: Bluelake主题的配置\ntop: true\n---\n\n开始之前\n\n在阅读本文之前，假定您已经成功安装了Hexo，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n    需要特别注意的是Hexo有两个_config.yml配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为根_config.yml；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为主题_config.yml。\n\n1. 安装\n\n您可以直接到BlueLake发布页下载，然后解压拷贝到themes目录下，修改配置即可。\n不过我还是推荐使用GIT来checkout代码，之后也可以通过git pull来快速更新。\n1.1 安装主题\n\n在根目录下打开终端窗口：\ngit bash\n\n$ git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake\n\n1.2 安装主题渲染器\n\nBlueLake是基于jade和stylus写的，所以需要安装hexo-renderer-jade和hexo-renderer-stylus来渲染。\ngit bash\n\n$ npm install hexo-renderer-jade@0.3.0 --save\n$ npm install hexo-renderer-stylus --save\n\n1.3 启用主题\n\n打开根_config.yml配置文件，找到theme字段，将其值改为BlueLake(先确认主题文件夹名称是否为BlueLake)。\n根_config.yml\n_config.yml\n\n\ntheme: BlueLake\n\n1.4 验证\n\n首先启动 Hexo 本地站点，并开启调试模式：\ngit bash\n\n\t\n\n$ hexo s --debug\n\n在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运行。\n1.5 更新主题\n\n今后若主题添加了新功能正是您需要的，您可以直接git pull来更新主题。\ngit bash\n\ncd themes/BlueLake\ngit pull\n\n2. 配置\n2.1 配置网站头部显示文字\n\n打开根_config.yml，找到：\n根_config.yml\n_config.yml\n\n\ntitle: \nsubtitle: \ndescription: \nauthor:\n\ntitle和subtitle分别是网站主标题和副标题，会显示在网站头部；description在网站界面不会显示，内容会加入网站源码的meta标签中，主要用于SEO；author就填写网站所有者的名字，会在网站底部的Copyright处有所显示。\n2.2 设置语言\n\n该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在根_config.yml配置如下：\n根_config.yml\n_config.yml\n\n\n\t\n\nlanguage: zh-CN\n\n2.3 设置菜单\n\n打开主题_config.yml，找到：\n主题_config.yml\nthemes/BlueLake/_config.yml\n\nmenu:\n  - page: home\n    directory: .\n    icon: fa-home\n  - page: archive\n    directory: archives/\n    icon: fa-archive\n  # - page: about\n  #   directory: about/\n  #   icon: fa-user\n  - page: rss\n    directory: atom.xml\n    icon: fa-rss\n\n主题默认是展示四个菜单，即主页home，归档archive，关于about，订阅RSS；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。\n每个页面底部的footer中联系博主的三个图标分别是邮箱，微博主页链接地址，GitHUb个人页链接地址，直接使用主题_config.yml中about页面的配置，若不需要about页面，只需要如下配置就好：\n主题_config.yml\nthemes/BlueLake/_config.yml\n\n\t\n\n# About page \nabout:\n  email: ## 个人邮箱 \n  weibo_url: ## 微博主页链接地址\n  github_url: ## github主页链接地址\n\n2.3.1 添加about页\n\n此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：\ngit bash\n\n$ hexo new page 'about'\n\n打开主题_config.yml，补全关于我页面的详细信息：\n主题_config.yml\nthemes/BlueLake/_config.y\n\n# About page \nabout:\n  photo_url: ## 头像的链接地址\n  email: ## 个人邮箱 \n  weibo_url: ## 微博主页链接地址\n  weibo_name: ## 微博用户名 \n  github_url: ## github主页链接地址\n  github_name: ## github用户名\n\n当然您也可以自定义重新布局about页面，只需要修改layout/page.jade模板就好。\n2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件\n\n在根目录下打开命令行窗口：\ngit bash\n\n$ npm install hexo-generator-feed --save\n$ npm install hexo-generator-sitemap --save\n$ npm install hexo-generator-baidu-sitemap --save\n\n添加主题_config.yml配置：\n主题_config.yml\nthemes/BlueLake/_config.yml\n\nPlugins:\n  hexo-generator-feed\n  hexo-generator-sitemap\n  hexo-generator-baidu-sitemap\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n\n2.4 添加本地搜索\n\n默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件hexo-generator-json-content来创建JSON数据文件：\ngit bash\n\n\t\n\n$ npm install hexo-generator-json-content@2.2.0 --save\n\n然后在根_config.yml添加配置：\n根_config.yml\n_config.yml\n\n\t\n\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true\n\n最后在主题_config.yml添加配置：\n主题_config.yml\nthemes/BlueLake/_config.yml\n\t\n\nlocal_search: true\n\n2.5 修改站点图标\n\n站点图标存放在主题的Source目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。\n您需要准备一张ico格式并命名为 favicon.ico ，请将其放入hexo目录的source文件夹，建议大小：32px X 32px。\n您需要为苹果设备添加网站徽标，请命名为 apple-touch-icon.png 的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。\n(有很多网站都可以在线生成ico格式的图片。)\n2.6 添加站点关键字\n\n请在hexo目录的根_config.yml中添加keywords字段，如：\n根_config.yml\n_config.yml\n\n\t\n\n# Site\ntitle: Hexo\nsubtitle: 副标题\ndescription: 网站简要描述,如：Charles·Zheng's blog.\nkeywords: 网站关键字, key, key1, key2, key3\nauthor: Charles\nlanguage: zh-CN\n\n2.7 其他配置\n\n主题_config.yml的其他配置\n\n    show_category_count——是否显示分类下的文章数。\n    widgets_on_small_screens——是否在小屏显示侧边栏，若true,则侧边栏挂件将显示在底部。\n    主题_config.yml\n    themes/BlueLake/_config.yml\n\n\n    show_category_count: true \n    widgets_on_small_screens: true\n\n3.集成第三方服务\n3.1 添加评论\n\n目前主题集成六种第三方评论，分别是多说评论、Disqus评论、来必力评论、友言评论、网易云跟帖评论、畅言评论，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前网易云跟帖和畅言还不错。\n\n    注册并获得代码。\n        若使用多说评论，注册多说后获得short_name。\n        若使用Disqus评论，注册Disqus后获得short_name。\n        若使用来必力评论，注册来必力,获得data-uid。\n        若使用友言评论，注册友言,获得uid。\n        若使用网易云跟帖评论，注册网易云跟帖,获得productKey。\n        若使用畅言评论，注册畅言，获得appid，appkey。\n    配置主题_config.yml：\n    主题_config.yml\n    themes/BlueLake/_config.yml\n\n    \t\n\n    #Cmments\n    comment:\n      duoshuo: ## duoshuo_shortname\n      disqus: ## disqus_shortname\n      livere: ## 来必力(data-uid)\n      uyan: ## 友言(uid)\n      cloudTie: ## 网易云跟帖(productKey)\n      changyan: ## 畅言需在下方配置两个参数，此处不填。\n        appid: ## 畅言(appid)\n        appkey: ##畅言(appkey)\n\n3.2 百度统计\n\n    登录百度统计，定位到站点的代码获取页面。\n    复制//hm.baidu.com/hm.js?后面那串统计脚本id(假设为：8006843039519956000)\n    配置主题_config.yml:\n    主题_config.yml\n    themes/BlueLake/_config.yml\n\n\n    baidu_analytics: 8006843039519956000\n\n    注意： baidu_analytics不是你的百度id或者百度统计id\n    如若使用谷歌统计，配置方法与百度统计类似。\n\n3.3 卜算子阅读次数统计\n主题_config.yml\nthemes/BlueLake/_config.yml\n\nbusuanzi: true\n\n若设置为true将计算文章的阅读量(Hits)，并显示在文章标题下的小手图标旁。\n3.4 微博秀\n\n微博秀挂件的代码放在layout/_widget/weibo.jade下，需要您去微博开放平台获取您自己的微博秀代码来替换。\n\n    登录微博开放平台，选择微博秀。\n    为了与主题风格统一，作如下配置\n        基础设置：高400px；勾选宽度自适应；颜色选择白色；\n        样式设置：主字色#333；链接色#40759b；鼠标悬停色#f7f8f8；\n        模块设置：去掉标题、边框、粉丝的勾选框，只留微博。\n    复制代码里src=\"\"里引号包裹的内容，替换到layout/_widget/weibo.jade\n    weibo.jade\n    layout/_widget/weibo.jade\n\n    \t\n\n    .widget\n      .widget-title\n        i(class='fa fa-weibo')= ' ' + __('新浪微博')\n      iframe(width=\"100%\",height=\"400\",class=\"share_self\",frameborder=\"0\",scrolling=\"no\",src=\"http://widget.weibo.com/weiboshow/index.php?language=&width=0&height=400&fansRow=2&ptype=1&speed=0&skin=5&isTitle=0&noborder=0&isWeibo=1&isFans=0&uid=1700139362&verifier=85be6061&colors=d6f3f7,ffffff,333,40759b,f7f8f8&dpc=1\")\n\n    这只是为了和主题的风格统一，当然您也可以自由随意发挥。\n\n        注意：最主要是是要把src里uid=和verifier=后面的字段替换为您自己代码里的就好。\n\n\n\n转载: https://chaooo.github.io/\n\n\n\n\n后面来补充一下遇到的问题，about界面的图片应该怎么放置：\n\n\n\t在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。\n\t我在themes/source下找到的img 文件夹 有bg的图片 灵机一动加在了这个img里，在git编辑themes的主题config的时候成功的调用。\n\t /img/调用图片名 （例如  头像.jpg） 即可\n\t \n **2. 使用图床：**\n \n\t https://sm.ms/  然后再用url进行调用！\n\t \n **3. 文章内如何调用图片：**\n\t\t\n\t前提：修改_config.yml配置文件post_asset_folder项为true。\n\t\n\t创建博客是使用命令创建：\n\t\n\thexo new [layout] <title>\n\t\n\t其中的layout项可以省略，例如：\n\t\n\thexo new \"这是一个新的博客\"\n\t\n\t使用完命令之后，在source/_post文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。\n\t这是一个新的博客的图片\n\t\n\t这是一个新的博客的图片\n\t\n\t下一步就是把需要的图片放到新创建的那个文件夹里面去。\n\t引用图片的第一种方法\n\t\n\t{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}\n\t\n\t用此种方法，而不是以前的![]()方法，前提是你的hexo的版本是hexo3以上，到package.json里面看一下吧。如果不是hexo3以上的版本，那就只能用第二种方法了。\n\t\n\t例子\n\t\n\t我现在写了一个段落，并且想在这个段落的某一个地方{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}引入一张图片\n\n\n**在写作过程中乱码问题：**\n\n将博客文件保存为UTF-8即可解决问题。\n\n方法：\n\n    1.将博客文件保存为UTF-8\n\n     用记事本打开本地的博客文件“xxx.md”，然后点“另存为”，“编码(E):”选择“UTF-8”，点击“保存”，替换原文件。\n\n    2.重新生成，部署，博客乱码即消除。","slug":"hexo-Bluelake主题","published":1,"updated":"2020-02-06T22:40:22.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n99t003224uwwh2fb21x","content":"<p>开始之前</p>\n<p>在阅读本文之前，假定您已经成功安装了Hexo，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<pre><code>需要特别注意的是Hexo有两个_config.yml配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为根_config.yml；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为主题_config.yml。</code></pre><ol>\n<li>安装</li>\n</ol>\n<p>您可以直接到BlueLake发布页下载，然后解压拷贝到themes目录下，修改配置即可。<br>不过我还是推荐使用GIT来checkout代码，之后也可以通过git pull来快速更新。<br>1.1 安装主题</p>\n<p>在根目录下打开终端窗口：<br>git bash</p>\n<p>$ git clone <a href=\"https://github.com/chaooo/hexo-theme-BlueLake.git\" target=\"_blank\" rel=\"noopener\">https://github.com/chaooo/hexo-theme-BlueLake.git</a> themes/BlueLake</p>\n<p>1.2 安装主题渲染器</p>\n<p>BlueLake是基于jade和stylus写的，所以需要安装hexo-renderer-jade和hexo-renderer-stylus来渲染。<br>git bash</p>\n<p>$ npm install <a href=\"mailto:hexo-renderer-jade@0.3.0\" target=\"_blank\" rel=\"noopener\">hexo-renderer-jade@0.3.0</a> –save<br>$ npm install hexo-renderer-stylus –save</p>\n<p>1.3 启用主题</p>\n<p>打开根_config.yml配置文件，找到theme字段，将其值改为BlueLake(先确认主题文件夹名称是否为BlueLake)。<br>根_config.yml<br>_config.yml</p>\n<p>theme: BlueLake</p>\n<p>1.4 验证</p>\n<p>首先启动 Hexo 本地站点，并开启调试模式：<br>git bash</p>\n<p>$ hexo s –debug</p>\n<p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：INFO Hexo is running at <a href=\"http://0.0.0.0:4000/\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.<br>此时即可使用浏览器访问 <a href=\"http://localhost:4000，检查站点是否正确运行。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000，检查站点是否正确运行。</a><br>1.5 更新主题</p>\n<p>今后若主题添加了新功能正是您需要的，您可以直接git pull来更新主题。<br>git bash</p>\n<p>cd themes/BlueLake<br>git pull</p>\n<ol start=\"2\">\n<li>配置</li>\n<li>1 配置网站头部显示文字</li>\n</ol>\n<p>打开根_config.yml，找到：<br>根_config.yml<br>_config.yml</p>\n<p>title:<br>subtitle:<br>description:<br>author:</p>\n<p>title和subtitle分别是网站主标题和副标题，会显示在网站头部；description在网站界面不会显示，内容会加入网站源码的meta标签中，主要用于SEO；author就填写网站所有者的名字，会在网站底部的Copyright处有所显示。<br>2.2 设置语言</p>\n<p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在根_config.yml配置如下：<br>根_config.yml<br>_config.yml</p>\n<p>language: zh-CN</p>\n<p>2.3 设置菜单</p>\n<p>打开主题_config.yml，找到：<br>主题_config.yml<br>themes/BlueLake/_config.yml</p>\n<p>menu:</p>\n<ul>\n<li>page: home<br>directory: .<br>icon: fa-home</li>\n<li>page: archive<br>directory: archives/<br>icon: fa-archive<h1 id=\"page-about\"><a href=\"#page-about\" class=\"headerlink\" title=\"- page: about\"></a>- page: about</h1><h1 id=\"directory-about\"><a href=\"#directory-about\" class=\"headerlink\" title=\"directory: about/\"></a>directory: about/</h1><h1 id=\"icon-fa-user\"><a href=\"#icon-fa-user\" class=\"headerlink\" title=\"icon: fa-user\"></a>icon: fa-user</h1></li>\n<li>page: rss<br>directory: atom.xml<br>icon: fa-rss</li>\n</ul>\n<p>主题默认是展示四个菜单，即主页home，归档archive，关于about，订阅RSS；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。<br>每个页面底部的footer中联系博主的三个图标分别是邮箱，微博主页链接地址，GitHUb个人页链接地址，直接使用主题_config.yml中about页面的配置，若不需要about页面，只需要如下配置就好：<br>主题_config.yml<br>themes/BlueLake/_config.yml</p>\n<h1 id=\"About-page\"><a href=\"#About-page\" class=\"headerlink\" title=\"About page\"></a>About page</h1><p>about:<br>  email: ## 个人邮箱<br>  weibo_url: ## 微博主页链接地址<br>  github_url: ## github主页链接地址</p>\n<p>2.3.1 添加about页</p>\n<p>此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：<br>git bash</p>\n<p>$ hexo new page ‘about’</p>\n<p>打开主题_config.yml，补全关于我页面的详细信息：<br>主题_config.yml<br>themes/BlueLake/_config.y</p>\n<h1 id=\"About-page-1\"><a href=\"#About-page-1\" class=\"headerlink\" title=\"About page\"></a>About page</h1><p>about:<br>  photo_url: ## 头像的链接地址<br>  email: ## 个人邮箱<br>  weibo_url: ## 微博主页链接地址<br>  weibo_name: ## 微博用户名<br>  github_url: ## github主页链接地址<br>  github_name: ## github用户名</p>\n<p>当然您也可以自定义重新布局about页面，只需要修改layout/page.jade模板就好。<br>2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件</p>\n<p>在根目录下打开命令行窗口：<br>git bash</p>\n<p>$ npm install hexo-generator-feed –save<br>$ npm install hexo-generator-sitemap –save<br>$ npm install hexo-generator-baidu-sitemap –save</p>\n<p>添加主题_config.yml配置：<br>主题_config.yml<br>themes/BlueLake/_config.yml</p>\n<p>Plugins:<br>  hexo-generator-feed<br>  hexo-generator-sitemap<br>  hexo-generator-baidu-sitemap<br>feed:<br>  type: atom<br>  path: atom.xml<br>  limit: 20<br>sitemap:<br>  path: sitemap.xml<br>baidusitemap:<br>  path: baidusitemap.xml</p>\n<p>2.4 添加本地搜索</p>\n<p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件hexo-generator-json-content来创建JSON数据文件：<br>git bash</p>\n<p>$ npm install <a href=\"mailto:hexo-generator-json-content@2.2.0\" target=\"_blank\" rel=\"noopener\">hexo-generator-json-content@2.2.0</a> –save</p>\n<p>然后在根_config.yml添加配置：<br>根_config.yml<br>_config.yml</p>\n<p>jsonContent:<br>  meta: false<br>  pages: false<br>  posts:<br>    title: true<br>    date: true<br>    path: true<br>    text: true<br>    raw: false<br>    content: false<br>    slug: false<br>    updated: false<br>    comments: false<br>    link: false<br>    permalink: false<br>    excerpt: false<br>    categories: false<br>    tags: true</p>\n<p>最后在主题_config.yml添加配置：<br>主题_config.yml<br>themes/BlueLake/_config.yml</p>\n<p>local_search: true</p>\n<p>2.5 修改站点图标</p>\n<p>站点图标存放在主题的Source目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为 favicon.ico ，请将其放入hexo目录的source文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为 apple-touch-icon.png 的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)<br>2.6 添加站点关键字</p>\n<p>请在hexo目录的根_config.yml中添加keywords字段，如：<br>根_config.yml<br>_config.yml</p>\n<h1 id=\"Site\"><a href=\"#Site\" class=\"headerlink\" title=\"Site\"></a>Site</h1><p>title: Hexo<br>subtitle: 副标题<br>description: 网站简要描述,如：Charles·Zheng’s blog.<br>keywords: 网站关键字, key, key1, key2, key3<br>author: Charles<br>language: zh-CN</p>\n<p>2.7 其他配置</p>\n<p>主题_config.yml的其他配置</p>\n<pre><code>show_category_count——是否显示分类下的文章数。\nwidgets_on_small_screens——是否在小屏显示侧边栏，若true,则侧边栏挂件将显示在底部。\n主题_config.yml\nthemes/BlueLake/_config.yml\n\n\nshow_category_count: true \nwidgets_on_small_screens: true</code></pre><p>3.集成第三方服务<br>3.1 添加评论</p>\n<p>目前主题集成六种第三方评论，分别是多说评论、Disqus评论、来必力评论、友言评论、网易云跟帖评论、畅言评论，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前网易云跟帖和畅言还不错。</p>\n<pre><code>注册并获得代码。\n    若使用多说评论，注册多说后获得short_name。\n    若使用Disqus评论，注册Disqus后获得short_name。\n    若使用来必力评论，注册来必力,获得data-uid。\n    若使用友言评论，注册友言,获得uid。\n    若使用网易云跟帖评论，注册网易云跟帖,获得productKey。\n    若使用畅言评论，注册畅言，获得appid，appkey。\n配置主题_config.yml：\n主题_config.yml\nthemes/BlueLake/_config.yml\n\n\n\n#Cmments\ncomment:\n  duoshuo: ## duoshuo_shortname\n  disqus: ## disqus_shortname\n  livere: ## 来必力(data-uid)\n  uyan: ## 友言(uid)\n  cloudTie: ## 网易云跟帖(productKey)\n  changyan: ## 畅言需在下方配置两个参数，此处不填。\n    appid: ## 畅言(appid)\n    appkey: ##畅言(appkey)</code></pre><p>3.2 百度统计</p>\n<pre><code>登录百度统计，定位到站点的代码获取页面。\n复制//hm.baidu.com/hm.js?后面那串统计脚本id(假设为：8006843039519956000)\n配置主题_config.yml:\n主题_config.yml\nthemes/BlueLake/_config.yml\n\n\nbaidu_analytics: 8006843039519956000\n\n注意： baidu_analytics不是你的百度id或者百度统计id\n如若使用谷歌统计，配置方法与百度统计类似。</code></pre><p>3.3 卜算子阅读次数统计<br>主题_config.yml<br>themes/BlueLake/_config.yml</p>\n<p>busuanzi: true</p>\n<p>若设置为true将计算文章的阅读量(Hits)，并显示在文章标题下的小手图标旁。<br>3.4 微博秀</p>\n<p>微博秀挂件的代码放在layout/_widget/weibo.jade下，需要您去微博开放平台获取您自己的微博秀代码来替换。</p>\n<pre><code>登录微博开放平台，选择微博秀。\n为了与主题风格统一，作如下配置\n    基础设置：高400px；勾选宽度自适应；颜色选择白色；\n    样式设置：主字色#333；链接色#40759b；鼠标悬停色#f7f8f8；\n    模块设置：去掉标题、边框、粉丝的勾选框，只留微博。\n复制代码里src=&quot;&quot;里引号包裹的内容，替换到layout/_widget/weibo.jade\nweibo.jade\nlayout/_widget/weibo.jade\n\n\n\n.widget\n  .widget-title\n    i(class=&apos;fa fa-weibo&apos;)= &apos; &apos; + __(&apos;新浪微博&apos;)\n  iframe(width=&quot;100%&quot;,height=&quot;400&quot;,class=&quot;share_self&quot;,frameborder=&quot;0&quot;,scrolling=&quot;no&quot;,src=&quot;http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1&quot;)\n\n这只是为了和主题的风格统一，当然您也可以自由随意发挥。\n\n    注意：最主要是是要把src里uid=和verifier=后面的字段替换为您自己代码里的就好。</code></pre><p>转载: <a href=\"https://chaooo.github.io/\" target=\"_blank\" rel=\"noopener\">https://chaooo.github.io/</a></p>\n<p>后面来补充一下遇到的问题，about界面的图片应该怎么放置：</p>\n<pre><code>在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。\n我在themes/source下找到的img 文件夹 有bg的图片 灵机一动加在了这个img里，在git编辑themes的主题config的时候成功的调用。\n /img/调用图片名 （例如  头像.jpg） 即可</code></pre><p> <strong>2. 使用图床：</strong></p>\n<pre><code>https://sm.ms/  然后再用url进行调用！</code></pre><p> <strong>3. 文章内如何调用图片：</strong></p>\n<pre><code>前提：修改_config.yml配置文件post_asset_folder项为true。\n\n创建博客是使用命令创建：\n\nhexo new [layout] &lt;title&gt;\n\n其中的layout项可以省略，例如：\n\nhexo new &quot;这是一个新的博客&quot;\n\n使用完命令之后，在source/_post文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。\n这是一个新的博客的图片\n\n这是一个新的博客的图片\n\n下一步就是把需要的图片放到新创建的那个文件夹里面去。\n引用图片的第一种方法\n\n{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}\n\n用此种方法，而不是以前的![]()方法，前提是你的hexo的版本是hexo3以上，到package.json里面看一下吧。如果不是hexo3以上的版本，那就只能用第二种方法了。\n\n例子\n\n我现在写了一个段落，并且想在这个段落的某一个地方{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}引入一张图片</code></pre><p><strong>在写作过程中乱码问题：</strong></p>\n<p>将博客文件保存为UTF-8即可解决问题。</p>\n<p>方法：</p>\n<pre><code>1.将博客文件保存为UTF-8\n\n 用记事本打开本地的博客文件“xxx.md”，然后点“另存为”，“编码(E):”选择“UTF-8”，点击“保存”，替换原文件。\n\n2.重新生成，部署，博客乱码即消除。</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>开始之前</p>\n<p>在阅读本文之前，假定您已经成功安装了Hexo，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<pre><code>需要特别注意的是Hexo有两个_config.yml配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为根_config.yml；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为主题_config.yml。</code></pre><ol>\n<li>安装</li>\n</ol>\n<p>您可以直接到BlueLake发布页下载，然后解压拷贝到themes目录下，修改配置即可。<br>不过我还是推荐使用GIT来checkout代码，之后也可以通过git pull来快速更新。<br>1.1 安装主题</p>\n<p>在根目录下打开终端窗口：<br>git bash</p>\n<p>$ git clone <a href=\"https://github.com/chaooo/hexo-theme-BlueLake.git\" target=\"_blank\" rel=\"noopener\">https://github.com/chaooo/hexo-theme-BlueLake.git</a> themes/BlueLake</p>\n<p>1.2 安装主题渲染器</p>\n<p>BlueLake是基于jade和stylus写的，所以需要安装hexo-renderer-jade和hexo-renderer-stylus来渲染。<br>git bash</p>\n<p>$ npm install <a href=\"mailto:hexo-renderer-jade@0.3.0\" target=\"_blank\" rel=\"noopener\">hexo-renderer-jade@0.3.0</a> –save<br>$ npm install hexo-renderer-stylus –save</p>\n<p>1.3 启用主题</p>\n<p>打开根_config.yml配置文件，找到theme字段，将其值改为BlueLake(先确认主题文件夹名称是否为BlueLake)。<br>根_config.yml<br>_config.yml</p>\n<p>theme: BlueLake</p>\n<p>1.4 验证</p>\n<p>首先启动 Hexo 本地站点，并开启调试模式：<br>git bash</p>\n<p>$ hexo s –debug</p>\n<p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：INFO Hexo is running at <a href=\"http://0.0.0.0:4000/\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.<br>此时即可使用浏览器访问 <a href=\"http://localhost:4000，检查站点是否正确运行。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000，检查站点是否正确运行。</a><br>1.5 更新主题</p>\n<p>今后若主题添加了新功能正是您需要的，您可以直接git pull来更新主题。<br>git bash</p>\n<p>cd themes/BlueLake<br>git pull</p>\n<ol start=\"2\">\n<li>配置</li>\n<li>1 配置网站头部显示文字</li>\n</ol>\n<p>打开根_config.yml，找到：<br>根_config.yml<br>_config.yml</p>\n<p>title:<br>subtitle:<br>description:<br>author:</p>\n<p>title和subtitle分别是网站主标题和副标题，会显示在网站头部；description在网站界面不会显示，内容会加入网站源码的meta标签中，主要用于SEO；author就填写网站所有者的名字，会在网站底部的Copyright处有所显示。<br>2.2 设置语言</p>\n<p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在根_config.yml配置如下：<br>根_config.yml<br>_config.yml</p>\n<p>language: zh-CN</p>\n<p>2.3 设置菜单</p>\n<p>打开主题_config.yml，找到：<br>主题_config.yml<br>themes/BlueLake/_config.yml</p>\n<p>menu:</p>\n<ul>\n<li>page: home<br>directory: .<br>icon: fa-home</li>\n<li>page: archive<br>directory: archives/<br>icon: fa-archive<h1 id=\"page-about\"><a href=\"#page-about\" class=\"headerlink\" title=\"- page: about\"></a>- page: about</h1><h1 id=\"directory-about\"><a href=\"#directory-about\" class=\"headerlink\" title=\"directory: about/\"></a>directory: about/</h1><h1 id=\"icon-fa-user\"><a href=\"#icon-fa-user\" class=\"headerlink\" title=\"icon: fa-user\"></a>icon: fa-user</h1></li>\n<li>page: rss<br>directory: atom.xml<br>icon: fa-rss</li>\n</ul>\n<p>主题默认是展示四个菜单，即主页home，归档archive，关于about，订阅RSS；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。<br>每个页面底部的footer中联系博主的三个图标分别是邮箱，微博主页链接地址，GitHUb个人页链接地址，直接使用主题_config.yml中about页面的配置，若不需要about页面，只需要如下配置就好：<br>主题_config.yml<br>themes/BlueLake/_config.yml</p>\n<h1 id=\"About-page\"><a href=\"#About-page\" class=\"headerlink\" title=\"About page\"></a>About page</h1><p>about:<br>  email: ## 个人邮箱<br>  weibo_url: ## 微博主页链接地址<br>  github_url: ## github主页链接地址</p>\n<p>2.3.1 添加about页</p>\n<p>此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：<br>git bash</p>\n<p>$ hexo new page ‘about’</p>\n<p>打开主题_config.yml，补全关于我页面的详细信息：<br>主题_config.yml<br>themes/BlueLake/_config.y</p>\n<h1 id=\"About-page-1\"><a href=\"#About-page-1\" class=\"headerlink\" title=\"About page\"></a>About page</h1><p>about:<br>  photo_url: ## 头像的链接地址<br>  email: ## 个人邮箱<br>  weibo_url: ## 微博主页链接地址<br>  weibo_name: ## 微博用户名<br>  github_url: ## github主页链接地址<br>  github_name: ## github用户名</p>\n<p>当然您也可以自定义重新布局about页面，只需要修改layout/page.jade模板就好。<br>2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件</p>\n<p>在根目录下打开命令行窗口：<br>git bash</p>\n<p>$ npm install hexo-generator-feed –save<br>$ npm install hexo-generator-sitemap –save<br>$ npm install hexo-generator-baidu-sitemap –save</p>\n<p>添加主题_config.yml配置：<br>主题_config.yml<br>themes/BlueLake/_config.yml</p>\n<p>Plugins:<br>  hexo-generator-feed<br>  hexo-generator-sitemap<br>  hexo-generator-baidu-sitemap<br>feed:<br>  type: atom<br>  path: atom.xml<br>  limit: 20<br>sitemap:<br>  path: sitemap.xml<br>baidusitemap:<br>  path: baidusitemap.xml</p>\n<p>2.4 添加本地搜索</p>\n<p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件hexo-generator-json-content来创建JSON数据文件：<br>git bash</p>\n<p>$ npm install <a href=\"mailto:hexo-generator-json-content@2.2.0\" target=\"_blank\" rel=\"noopener\">hexo-generator-json-content@2.2.0</a> –save</p>\n<p>然后在根_config.yml添加配置：<br>根_config.yml<br>_config.yml</p>\n<p>jsonContent:<br>  meta: false<br>  pages: false<br>  posts:<br>    title: true<br>    date: true<br>    path: true<br>    text: true<br>    raw: false<br>    content: false<br>    slug: false<br>    updated: false<br>    comments: false<br>    link: false<br>    permalink: false<br>    excerpt: false<br>    categories: false<br>    tags: true</p>\n<p>最后在主题_config.yml添加配置：<br>主题_config.yml<br>themes/BlueLake/_config.yml</p>\n<p>local_search: true</p>\n<p>2.5 修改站点图标</p>\n<p>站点图标存放在主题的Source目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为 favicon.ico ，请将其放入hexo目录的source文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为 apple-touch-icon.png 的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)<br>2.6 添加站点关键字</p>\n<p>请在hexo目录的根_config.yml中添加keywords字段，如：<br>根_config.yml<br>_config.yml</p>\n<h1 id=\"Site\"><a href=\"#Site\" class=\"headerlink\" title=\"Site\"></a>Site</h1><p>title: Hexo<br>subtitle: 副标题<br>description: 网站简要描述,如：Charles·Zheng’s blog.<br>keywords: 网站关键字, key, key1, key2, key3<br>author: Charles<br>language: zh-CN</p>\n<p>2.7 其他配置</p>\n<p>主题_config.yml的其他配置</p>\n<pre><code>show_category_count——是否显示分类下的文章数。\nwidgets_on_small_screens——是否在小屏显示侧边栏，若true,则侧边栏挂件将显示在底部。\n主题_config.yml\nthemes/BlueLake/_config.yml\n\n\nshow_category_count: true \nwidgets_on_small_screens: true</code></pre><p>3.集成第三方服务<br>3.1 添加评论</p>\n<p>目前主题集成六种第三方评论，分别是多说评论、Disqus评论、来必力评论、友言评论、网易云跟帖评论、畅言评论，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前网易云跟帖和畅言还不错。</p>\n<pre><code>注册并获得代码。\n    若使用多说评论，注册多说后获得short_name。\n    若使用Disqus评论，注册Disqus后获得short_name。\n    若使用来必力评论，注册来必力,获得data-uid。\n    若使用友言评论，注册友言,获得uid。\n    若使用网易云跟帖评论，注册网易云跟帖,获得productKey。\n    若使用畅言评论，注册畅言，获得appid，appkey。\n配置主题_config.yml：\n主题_config.yml\nthemes/BlueLake/_config.yml\n\n\n\n#Cmments\ncomment:\n  duoshuo: ## duoshuo_shortname\n  disqus: ## disqus_shortname\n  livere: ## 来必力(data-uid)\n  uyan: ## 友言(uid)\n  cloudTie: ## 网易云跟帖(productKey)\n  changyan: ## 畅言需在下方配置两个参数，此处不填。\n    appid: ## 畅言(appid)\n    appkey: ##畅言(appkey)</code></pre><p>3.2 百度统计</p>\n<pre><code>登录百度统计，定位到站点的代码获取页面。\n复制//hm.baidu.com/hm.js?后面那串统计脚本id(假设为：8006843039519956000)\n配置主题_config.yml:\n主题_config.yml\nthemes/BlueLake/_config.yml\n\n\nbaidu_analytics: 8006843039519956000\n\n注意： baidu_analytics不是你的百度id或者百度统计id\n如若使用谷歌统计，配置方法与百度统计类似。</code></pre><p>3.3 卜算子阅读次数统计<br>主题_config.yml<br>themes/BlueLake/_config.yml</p>\n<p>busuanzi: true</p>\n<p>若设置为true将计算文章的阅读量(Hits)，并显示在文章标题下的小手图标旁。<br>3.4 微博秀</p>\n<p>微博秀挂件的代码放在layout/_widget/weibo.jade下，需要您去微博开放平台获取您自己的微博秀代码来替换。</p>\n<pre><code>登录微博开放平台，选择微博秀。\n为了与主题风格统一，作如下配置\n    基础设置：高400px；勾选宽度自适应；颜色选择白色；\n    样式设置：主字色#333；链接色#40759b；鼠标悬停色#f7f8f8；\n    模块设置：去掉标题、边框、粉丝的勾选框，只留微博。\n复制代码里src=&quot;&quot;里引号包裹的内容，替换到layout/_widget/weibo.jade\nweibo.jade\nlayout/_widget/weibo.jade\n\n\n\n.widget\n  .widget-title\n    i(class=&apos;fa fa-weibo&apos;)= &apos; &apos; + __(&apos;新浪微博&apos;)\n  iframe(width=&quot;100%&quot;,height=&quot;400&quot;,class=&quot;share_self&quot;,frameborder=&quot;0&quot;,scrolling=&quot;no&quot;,src=&quot;http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1&quot;)\n\n这只是为了和主题的风格统一，当然您也可以自由随意发挥。\n\n    注意：最主要是是要把src里uid=和verifier=后面的字段替换为您自己代码里的就好。</code></pre><p>转载: <a href=\"https://chaooo.github.io/\" target=\"_blank\" rel=\"noopener\">https://chaooo.github.io/</a></p>\n<p>后面来补充一下遇到的问题，about界面的图片应该怎么放置：</p>\n<pre><code>在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。\n我在themes/source下找到的img 文件夹 有bg的图片 灵机一动加在了这个img里，在git编辑themes的主题config的时候成功的调用。\n /img/调用图片名 （例如  头像.jpg） 即可</code></pre><p> <strong>2. 使用图床：</strong></p>\n<pre><code>https://sm.ms/  然后再用url进行调用！</code></pre><p> <strong>3. 文章内如何调用图片：</strong></p>\n<pre><code>前提：修改_config.yml配置文件post_asset_folder项为true。\n\n创建博客是使用命令创建：\n\nhexo new [layout] &lt;title&gt;\n\n其中的layout项可以省略，例如：\n\nhexo new &quot;这是一个新的博客&quot;\n\n使用完命令之后，在source/_post文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。\n这是一个新的博客的图片\n\n这是一个新的博客的图片\n\n下一步就是把需要的图片放到新创建的那个文件夹里面去。\n引用图片的第一种方法\n\n{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}\n\n用此种方法，而不是以前的![]()方法，前提是你的hexo的版本是hexo3以上，到package.json里面看一下吧。如果不是hexo3以上的版本，那就只能用第二种方法了。\n\n例子\n\n我现在写了一个段落，并且想在这个段落的某一个地方{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}引入一张图片</code></pre><p><strong>在写作过程中乱码问题：</strong></p>\n<p>将博客文件保存为UTF-8即可解决问题。</p>\n<p>方法：</p>\n<pre><code>1.将博客文件保存为UTF-8\n\n 用记事本打开本地的博客文件“xxx.md”，然后点“另存为”，“编码(E):”选择“UTF-8”，点击“保存”，替换原文件。\n\n2.重新生成，部署，博客乱码即消除。</code></pre>"},{"title":"python爬取hdu题库","date":"2018-09-02T23:48:27.000Z","description":"Python实现爬取后台题库。","_content":"\n这里涉及到很多的点，比如python利用正则表达式爬下来之后怎么把html标签去除，还有伪装浏览器访问，错误处理。\n\n```python\nimport webbrowser\nimport urllib\nimport requests\nimport re\ndef getHtml(url):\n    page = urllib.request.urlopen(url)\n    html = page.read()\n    unicodehtml = html.decode(\"gbk\")\t## 转化为gbk格式\n    return unicodehtml\n\ndef zhenghe(str1,id,imgre):\n    html=getHtml( str1+id )\n    return re.findall(imgre,html)\n\nheaders = {'User-Agent':\n    'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '\n    'Chrome/51.0.2704.63 Safari/537.36'}    ## 改request的头  模拟浏览器\nnum =1000;\nUrl = \"http://acm.hdu.edu.cn/showproblem.php?pid=\"\nreg = r'<div class=panel_content>.*?[\\s\\S]*?</div>'\t## 正则表达式\nimgre=re.compile(reg)\nwhile num<=6275:\n        list = zhenghe(Url,str(num),imgre)\n        t = open(\"hdu题库\\hdu%s.txt\"%num,\"w\")\n        for i in list:\n            dr = re.compile(r'<[^>]+>',re.S)\n            dd = dr.sub('',i)\n            ## 上面两行时用来去除html标签\n            t.write(dd)\t\t## 写入\n            t.write(\"\\n\")\n        t.close()\n        num=num+1\n```\n\n然而有一些问题 。就是转化gbk格式失败会终止程序，因此要写个错误处理\n```python\ndef getHtml(url):\n    page = urllib.request.urlopen(url)\n    html = page.read()\n    try:\n        unicodehtml = html.decode(\"gbk\")\n    except:\n        print(\"%s had not been install\\n\"%url)\n        return \"a\" \t## 错误时return一个a\n    return unicodehtml\n\nwhile num<=6275:\n        list = zhenghe(Url,str(num),imgre)\n        if(list==\"a\"):\t## 当发生错误时不写入\n            continue\n        t = open(\"hdu题库\\hdu%s.txt\"%num,\"w\")\n```\n到了这一步其实基本都已经实现了，但是还是不太完美，输入输出没有分开，而且也没有标题：\n{% asset_img 1.png %}\n这时候详化一下正则表达式就可以了，最终版本代码：\n\n```python\nimport webbrowser\nimport urllib\nimport requests\nimport re\nimport codecs\ndef getHtml(url):\n    page = urllib.request.urlopen(url)\n    html = page.read()\n    try:\n        unicodehtml = html.decode(\"gbk\")\n    except:\n        print(\"%s had not been install\\n\"%url)\n        return \"a\"\n    return unicodehtml\n\ndef zhenghe(str1,id,imgre):\n    html=getHtml( str1+id )\n    return re.findall(imgre,html)\nheaders = {'User-Agent':\n    'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '\n    'Chrome/51.0.2704.63 Safari/537.36'}\nnum =1013;\nUrl = \"http://acm.hdu.edu.cn/showproblem.php?pid=\"\nreg = {}\nreg[0] = r\"<td align=center><h1 style='color:#1A5CC8'>.*?[\\s\\S]</h1>\"\nreg[1] = r\"<br><br><div class=panel_title align=left>.*?[\\s\\S]*?</div> <div class=panel_content>\"\nreg[2] = r\"</div> <div class=panel_content>.*?[\\s\\S]*?<br></div><div class=panel_bottom>\"\nreg[3] = r'Sample Input</div><div class=panel_content><pre><div style=\"font-family:Courier New,Courier,monospace;\">.*?[\\s\\S]*?</div>'\nreg[4] = r'Sample Output</div><div class=panel_content><pre><div style=\"font-family:Courier New,Courier,monospace;\">.*?[\\s\\S]*?</div>'\nwhile num<=1013:\n    t = open(\"hdu题库\\hdu%s.txt\"%num,\"a\")\n    for j in range (0,5):\n        imgre=re.compile(reg[j])\n        list = zhenghe(Url,str(num),imgre)\n        if(list==\"a\"):\n            continue\n\n        for i in list:\n            dr = re.compile(r'<[^>]+>',re.S)\n            dd = dr.sub('',i)\n            dr = re.compile(r'Input',re.S)\n            dd = dr.sub('Input\\n',dd)\n            dr = re.compile(r'Output',re.S)\n            dd = dr.sub('Output\\n',dd)\n            t.write(dd)\n            t.write(\"\\n\\n\")\n    t.close()\n    num=num+1\n```\n\n{% asset_img 2.png %}\n","source":"_posts/python爬取hdu题库.md","raw":"---\ntitle: python爬取hdu题库\ndate: 2018-09-03 07:48:27\ntags: Python\ncategories: Python\ndescription: Python实现爬取后台题库。\n---\n\n这里涉及到很多的点，比如python利用正则表达式爬下来之后怎么把html标签去除，还有伪装浏览器访问，错误处理。\n\n```python\nimport webbrowser\nimport urllib\nimport requests\nimport re\ndef getHtml(url):\n    page = urllib.request.urlopen(url)\n    html = page.read()\n    unicodehtml = html.decode(\"gbk\")\t## 转化为gbk格式\n    return unicodehtml\n\ndef zhenghe(str1,id,imgre):\n    html=getHtml( str1+id )\n    return re.findall(imgre,html)\n\nheaders = {'User-Agent':\n    'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '\n    'Chrome/51.0.2704.63 Safari/537.36'}    ## 改request的头  模拟浏览器\nnum =1000;\nUrl = \"http://acm.hdu.edu.cn/showproblem.php?pid=\"\nreg = r'<div class=panel_content>.*?[\\s\\S]*?</div>'\t## 正则表达式\nimgre=re.compile(reg)\nwhile num<=6275:\n        list = zhenghe(Url,str(num),imgre)\n        t = open(\"hdu题库\\hdu%s.txt\"%num,\"w\")\n        for i in list:\n            dr = re.compile(r'<[^>]+>',re.S)\n            dd = dr.sub('',i)\n            ## 上面两行时用来去除html标签\n            t.write(dd)\t\t## 写入\n            t.write(\"\\n\")\n        t.close()\n        num=num+1\n```\n\n然而有一些问题 。就是转化gbk格式失败会终止程序，因此要写个错误处理\n```python\ndef getHtml(url):\n    page = urllib.request.urlopen(url)\n    html = page.read()\n    try:\n        unicodehtml = html.decode(\"gbk\")\n    except:\n        print(\"%s had not been install\\n\"%url)\n        return \"a\" \t## 错误时return一个a\n    return unicodehtml\n\nwhile num<=6275:\n        list = zhenghe(Url,str(num),imgre)\n        if(list==\"a\"):\t## 当发生错误时不写入\n            continue\n        t = open(\"hdu题库\\hdu%s.txt\"%num,\"w\")\n```\n到了这一步其实基本都已经实现了，但是还是不太完美，输入输出没有分开，而且也没有标题：\n{% asset_img 1.png %}\n这时候详化一下正则表达式就可以了，最终版本代码：\n\n```python\nimport webbrowser\nimport urllib\nimport requests\nimport re\nimport codecs\ndef getHtml(url):\n    page = urllib.request.urlopen(url)\n    html = page.read()\n    try:\n        unicodehtml = html.decode(\"gbk\")\n    except:\n        print(\"%s had not been install\\n\"%url)\n        return \"a\"\n    return unicodehtml\n\ndef zhenghe(str1,id,imgre):\n    html=getHtml( str1+id )\n    return re.findall(imgre,html)\nheaders = {'User-Agent':\n    'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '\n    'Chrome/51.0.2704.63 Safari/537.36'}\nnum =1013;\nUrl = \"http://acm.hdu.edu.cn/showproblem.php?pid=\"\nreg = {}\nreg[0] = r\"<td align=center><h1 style='color:#1A5CC8'>.*?[\\s\\S]</h1>\"\nreg[1] = r\"<br><br><div class=panel_title align=left>.*?[\\s\\S]*?</div> <div class=panel_content>\"\nreg[2] = r\"</div> <div class=panel_content>.*?[\\s\\S]*?<br></div><div class=panel_bottom>\"\nreg[3] = r'Sample Input</div><div class=panel_content><pre><div style=\"font-family:Courier New,Courier,monospace;\">.*?[\\s\\S]*?</div>'\nreg[4] = r'Sample Output</div><div class=panel_content><pre><div style=\"font-family:Courier New,Courier,monospace;\">.*?[\\s\\S]*?</div>'\nwhile num<=1013:\n    t = open(\"hdu题库\\hdu%s.txt\"%num,\"a\")\n    for j in range (0,5):\n        imgre=re.compile(reg[j])\n        list = zhenghe(Url,str(num),imgre)\n        if(list==\"a\"):\n            continue\n\n        for i in list:\n            dr = re.compile(r'<[^>]+>',re.S)\n            dd = dr.sub('',i)\n            dr = re.compile(r'Input',re.S)\n            dd = dr.sub('Input\\n',dd)\n            dr = re.compile(r'Output',re.S)\n            dd = dr.sub('Output\\n',dd)\n            t.write(dd)\n            t.write(\"\\n\\n\")\n    t.close()\n    num=num+1\n```\n\n{% asset_img 2.png %}\n","slug":"python爬取hdu题库","published":1,"updated":"2020-02-06T22:40:22.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n99u003424uw12j35mup","content":"<p>这里涉及到很多的点，比如python利用正则表达式爬下来之后怎么把html标签去除，还有伪装浏览器访问，错误处理。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> webbrowser</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHtml</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    page = urllib.request.urlopen(url)</span><br><span class=\"line\">    html = page.read()</span><br><span class=\"line\">    unicodehtml = html.decode(<span class=\"string\">\"gbk\"</span>)\t<span class=\"comment\">## 转化为gbk格式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> unicodehtml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">zhenghe</span><span class=\"params\">(str1,id,imgre)</span>:</span></span><br><span class=\"line\">    html=getHtml( str1+id )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re.findall(imgre,html)</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;<span class=\"string\">'User-Agent'</span>:</span><br><span class=\"line\">    <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class=\"line\">    <span class=\"string\">'Chrome/51.0.2704.63 Safari/537.36'</span>&#125;    <span class=\"comment\">## 改request的头  模拟浏览器</span></span><br><span class=\"line\">num =<span class=\"number\">1000</span>;</span><br><span class=\"line\">Url = <span class=\"string\">\"http://acm.hdu.edu.cn/showproblem.php?pid=\"</span></span><br><span class=\"line\">reg = <span class=\"string\">r'&lt;div class=panel_content&gt;.*?[\\s\\S]*?&lt;/div&gt;'</span>\t<span class=\"comment\">## 正则表达式</span></span><br><span class=\"line\">imgre=re.compile(reg)</span><br><span class=\"line\"><span class=\"keyword\">while</span> num&lt;=<span class=\"number\">6275</span>:</span><br><span class=\"line\">        list = zhenghe(Url,str(num),imgre)</span><br><span class=\"line\">        t = open(<span class=\"string\">\"hdu题库\\hdu%s.txt\"</span>%num,<span class=\"string\">\"w\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">            dr = re.compile(<span class=\"string\">r'&lt;[^&gt;]+&gt;'</span>,re.S)</span><br><span class=\"line\">            dd = dr.sub(<span class=\"string\">''</span>,i)</span><br><span class=\"line\">            <span class=\"comment\">## 上面两行时用来去除html标签</span></span><br><span class=\"line\">            t.write(dd)\t\t<span class=\"comment\">## 写入</span></span><br><span class=\"line\">            t.write(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">        t.close()</span><br><span class=\"line\">        num=num+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>然而有一些问题 。就是转化gbk格式失败会终止程序，因此要写个错误处理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHtml</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    page = urllib.request.urlopen(url)</span><br><span class=\"line\">    html = page.read()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        unicodehtml = html.decode(<span class=\"string\">\"gbk\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"%s had not been install\\n\"</span>%url)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"a\"</span> \t<span class=\"comment\">## 错误时return一个a</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> unicodehtml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> num&lt;=<span class=\"number\">6275</span>:</span><br><span class=\"line\">        list = zhenghe(Url,str(num),imgre)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list==<span class=\"string\">\"a\"</span>):\t<span class=\"comment\">## 当发生错误时不写入</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        t = open(<span class=\"string\">\"hdu题库\\hdu%s.txt\"</span>%num,<span class=\"string\">\"w\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>到了这一步其实基本都已经实现了，但是还是不太完美，输入输出没有分开，而且也没有标题：</p>\n<img src=\"/2018/09/03/python爬取hdu题库/1.png\">\n<p>这时候详化一下正则表达式就可以了，最终版本代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> webbrowser</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> codecs</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHtml</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    page = urllib.request.urlopen(url)</span><br><span class=\"line\">    html = page.read()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        unicodehtml = html.decode(<span class=\"string\">\"gbk\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"%s had not been install\\n\"</span>%url)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"a\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> unicodehtml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">zhenghe</span><span class=\"params\">(str1,id,imgre)</span>:</span></span><br><span class=\"line\">    html=getHtml( str1+id )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re.findall(imgre,html)</span><br><span class=\"line\">headers = &#123;<span class=\"string\">'User-Agent'</span>:</span><br><span class=\"line\">    <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class=\"line\">    <span class=\"string\">'Chrome/51.0.2704.63 Safari/537.36'</span>&#125;</span><br><span class=\"line\">num =<span class=\"number\">1013</span>;</span><br><span class=\"line\">Url = <span class=\"string\">\"http://acm.hdu.edu.cn/showproblem.php?pid=\"</span></span><br><span class=\"line\">reg = &#123;&#125;</span><br><span class=\"line\">reg[<span class=\"number\">0</span>] = <span class=\"string\">r\"&lt;td align=center&gt;&lt;h1 style='color:#1A5CC8'&gt;.*?[\\s\\S]&lt;/h1&gt;\"</span></span><br><span class=\"line\">reg[<span class=\"number\">1</span>] = <span class=\"string\">r\"&lt;br&gt;&lt;br&gt;&lt;div class=panel_title align=left&gt;.*?[\\s\\S]*?&lt;/div&gt; &lt;div class=panel_content&gt;\"</span></span><br><span class=\"line\">reg[<span class=\"number\">2</span>] = <span class=\"string\">r\"&lt;/div&gt; &lt;div class=panel_content&gt;.*?[\\s\\S]*?&lt;br&gt;&lt;/div&gt;&lt;div class=panel_bottom&gt;\"</span></span><br><span class=\"line\">reg[<span class=\"number\">3</span>] = <span class=\"string\">r'Sample Input&lt;/div&gt;&lt;div class=panel_content&gt;&lt;pre&gt;&lt;div style=\"font-family:Courier New,Courier,monospace;\"&gt;.*?[\\s\\S]*?&lt;/div&gt;'</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>] = <span class=\"string\">r'Sample Output&lt;/div&gt;&lt;div class=panel_content&gt;&lt;pre&gt;&lt;div style=\"font-family:Courier New,Courier,monospace;\"&gt;.*?[\\s\\S]*?&lt;/div&gt;'</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> num&lt;=<span class=\"number\">1013</span>:</span><br><span class=\"line\">    t = open(<span class=\"string\">\"hdu题库\\hdu%s.txt\"</span>%num,<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range (<span class=\"number\">0</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">        imgre=re.compile(reg[j])</span><br><span class=\"line\">        list = zhenghe(Url,str(num),imgre)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list==<span class=\"string\">\"a\"</span>):</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">            dr = re.compile(<span class=\"string\">r'&lt;[^&gt;]+&gt;'</span>,re.S)</span><br><span class=\"line\">            dd = dr.sub(<span class=\"string\">''</span>,i)</span><br><span class=\"line\">            dr = re.compile(<span class=\"string\">r'Input'</span>,re.S)</span><br><span class=\"line\">            dd = dr.sub(<span class=\"string\">'Input\\n'</span>,dd)</span><br><span class=\"line\">            dr = re.compile(<span class=\"string\">r'Output'</span>,re.S)</span><br><span class=\"line\">            dd = dr.sub(<span class=\"string\">'Output\\n'</span>,dd)</span><br><span class=\"line\">            t.write(dd)</span><br><span class=\"line\">            t.write(<span class=\"string\">\"\\n\\n\"</span>)</span><br><span class=\"line\">    t.close()</span><br><span class=\"line\">    num=num+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2018/09/03/python爬取hdu题库/2.png\">\n","site":{"data":{}},"excerpt":"","more":"<p>这里涉及到很多的点，比如python利用正则表达式爬下来之后怎么把html标签去除，还有伪装浏览器访问，错误处理。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> webbrowser</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHtml</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    page = urllib.request.urlopen(url)</span><br><span class=\"line\">    html = page.read()</span><br><span class=\"line\">    unicodehtml = html.decode(<span class=\"string\">\"gbk\"</span>)\t<span class=\"comment\">## 转化为gbk格式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> unicodehtml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">zhenghe</span><span class=\"params\">(str1,id,imgre)</span>:</span></span><br><span class=\"line\">    html=getHtml( str1+id )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re.findall(imgre,html)</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;<span class=\"string\">'User-Agent'</span>:</span><br><span class=\"line\">    <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class=\"line\">    <span class=\"string\">'Chrome/51.0.2704.63 Safari/537.36'</span>&#125;    <span class=\"comment\">## 改request的头  模拟浏览器</span></span><br><span class=\"line\">num =<span class=\"number\">1000</span>;</span><br><span class=\"line\">Url = <span class=\"string\">\"http://acm.hdu.edu.cn/showproblem.php?pid=\"</span></span><br><span class=\"line\">reg = <span class=\"string\">r'&lt;div class=panel_content&gt;.*?[\\s\\S]*?&lt;/div&gt;'</span>\t<span class=\"comment\">## 正则表达式</span></span><br><span class=\"line\">imgre=re.compile(reg)</span><br><span class=\"line\"><span class=\"keyword\">while</span> num&lt;=<span class=\"number\">6275</span>:</span><br><span class=\"line\">        list = zhenghe(Url,str(num),imgre)</span><br><span class=\"line\">        t = open(<span class=\"string\">\"hdu题库\\hdu%s.txt\"</span>%num,<span class=\"string\">\"w\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">            dr = re.compile(<span class=\"string\">r'&lt;[^&gt;]+&gt;'</span>,re.S)</span><br><span class=\"line\">            dd = dr.sub(<span class=\"string\">''</span>,i)</span><br><span class=\"line\">            <span class=\"comment\">## 上面两行时用来去除html标签</span></span><br><span class=\"line\">            t.write(dd)\t\t<span class=\"comment\">## 写入</span></span><br><span class=\"line\">            t.write(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">        t.close()</span><br><span class=\"line\">        num=num+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>然而有一些问题 。就是转化gbk格式失败会终止程序，因此要写个错误处理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHtml</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    page = urllib.request.urlopen(url)</span><br><span class=\"line\">    html = page.read()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        unicodehtml = html.decode(<span class=\"string\">\"gbk\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"%s had not been install\\n\"</span>%url)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"a\"</span> \t<span class=\"comment\">## 错误时return一个a</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> unicodehtml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> num&lt;=<span class=\"number\">6275</span>:</span><br><span class=\"line\">        list = zhenghe(Url,str(num),imgre)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list==<span class=\"string\">\"a\"</span>):\t<span class=\"comment\">## 当发生错误时不写入</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        t = open(<span class=\"string\">\"hdu题库\\hdu%s.txt\"</span>%num,<span class=\"string\">\"w\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>到了这一步其实基本都已经实现了，但是还是不太完美，输入输出没有分开，而且也没有标题：</p>\n<img src=\"/2018/09/03/python爬取hdu题库/1.png\">\n<p>这时候详化一下正则表达式就可以了，最终版本代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> webbrowser</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> codecs</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHtml</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    page = urllib.request.urlopen(url)</span><br><span class=\"line\">    html = page.read()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        unicodehtml = html.decode(<span class=\"string\">\"gbk\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"%s had not been install\\n\"</span>%url)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"a\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> unicodehtml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">zhenghe</span><span class=\"params\">(str1,id,imgre)</span>:</span></span><br><span class=\"line\">    html=getHtml( str1+id )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re.findall(imgre,html)</span><br><span class=\"line\">headers = &#123;<span class=\"string\">'User-Agent'</span>:</span><br><span class=\"line\">    <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class=\"line\">    <span class=\"string\">'Chrome/51.0.2704.63 Safari/537.36'</span>&#125;</span><br><span class=\"line\">num =<span class=\"number\">1013</span>;</span><br><span class=\"line\">Url = <span class=\"string\">\"http://acm.hdu.edu.cn/showproblem.php?pid=\"</span></span><br><span class=\"line\">reg = &#123;&#125;</span><br><span class=\"line\">reg[<span class=\"number\">0</span>] = <span class=\"string\">r\"&lt;td align=center&gt;&lt;h1 style='color:#1A5CC8'&gt;.*?[\\s\\S]&lt;/h1&gt;\"</span></span><br><span class=\"line\">reg[<span class=\"number\">1</span>] = <span class=\"string\">r\"&lt;br&gt;&lt;br&gt;&lt;div class=panel_title align=left&gt;.*?[\\s\\S]*?&lt;/div&gt; &lt;div class=panel_content&gt;\"</span></span><br><span class=\"line\">reg[<span class=\"number\">2</span>] = <span class=\"string\">r\"&lt;/div&gt; &lt;div class=panel_content&gt;.*?[\\s\\S]*?&lt;br&gt;&lt;/div&gt;&lt;div class=panel_bottom&gt;\"</span></span><br><span class=\"line\">reg[<span class=\"number\">3</span>] = <span class=\"string\">r'Sample Input&lt;/div&gt;&lt;div class=panel_content&gt;&lt;pre&gt;&lt;div style=\"font-family:Courier New,Courier,monospace;\"&gt;.*?[\\s\\S]*?&lt;/div&gt;'</span></span><br><span class=\"line\">reg[<span class=\"number\">4</span>] = <span class=\"string\">r'Sample Output&lt;/div&gt;&lt;div class=panel_content&gt;&lt;pre&gt;&lt;div style=\"font-family:Courier New,Courier,monospace;\"&gt;.*?[\\s\\S]*?&lt;/div&gt;'</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> num&lt;=<span class=\"number\">1013</span>:</span><br><span class=\"line\">    t = open(<span class=\"string\">\"hdu题库\\hdu%s.txt\"</span>%num,<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range (<span class=\"number\">0</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">        imgre=re.compile(reg[j])</span><br><span class=\"line\">        list = zhenghe(Url,str(num),imgre)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list==<span class=\"string\">\"a\"</span>):</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">            dr = re.compile(<span class=\"string\">r'&lt;[^&gt;]+&gt;'</span>,re.S)</span><br><span class=\"line\">            dd = dr.sub(<span class=\"string\">''</span>,i)</span><br><span class=\"line\">            dr = re.compile(<span class=\"string\">r'Input'</span>,re.S)</span><br><span class=\"line\">            dd = dr.sub(<span class=\"string\">'Input\\n'</span>,dd)</span><br><span class=\"line\">            dr = re.compile(<span class=\"string\">r'Output'</span>,re.S)</span><br><span class=\"line\">            dd = dr.sub(<span class=\"string\">'Output\\n'</span>,dd)</span><br><span class=\"line\">            t.write(dd)</span><br><span class=\"line\">            t.write(<span class=\"string\">\"\\n\\n\"</span>)</span><br><span class=\"line\">    t.close()</span><br><span class=\"line\">    num=num+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2018/09/03/python爬取hdu题库/2.png\">\n"},{"title":"redis配置与使用","date":"2018-09-05T02:36:23.000Z","description":"redis的基本配置和与python3 搭配使用。","_content":"\n# 下载安装配置\n担心MYSQL开着会影响到redis 所以先检查和关闭mysql\n```\nservice mysql status\nservice mysql stop\n```\n然后下载redis 到官网下载也行 ， 用wget也行。\n```\nwget http://download.redis.io/releases/redis-4.0.10.tar.gz\ntar -zxvf redis-4.0.10.tar.gz\ncd redis-4.0.10\nmake test\ncd src\nmake install\ncd ..\nmkdir etc\nmkdir bin\nmv redis.conf etc/\ncd src\nmv mkreleasehdr.sh  redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server  redis-trib.rb ../bin\n./redis-server\n```\n这时候会看到一些about\nctrl + c 出来，\n```\ncd\n./redis-c\n```\n这时候会报错\nCould not connect to Redis at 127.0.0.1:6379: Connection refused\nCould not connect to Redis at 127.0.0.1:6379: Connection refused\n修改一下配置文件\n具体目录find找一下\n把daemonize配置项改为yes\n```\nredis-server /home/edxuanlen/redis-4.0.10/etc/redis.conf\nredis-cli\n```\n然后就可以连接了\n\n附录：配置信息\ndaemonize 如果需要在后台运行，把该项改为yes\npidfile 配置多个pid的地址 默认在/var/run/redis. pid\nbind 绑定ip，设置后只接受来自该ip的请求\nport 监听端口，默认是6379\nloglevel 分为4个等级：debug verbose notice warning\nlogfile 用于配置log文件地址\ndatabases 设置数据库个数，默认使用的数据库为0\nsave 设置redis进行数据库镜像的频率。\nrdbcompression 在进行镜像备份时，是否进行压缩\ndbfilename 镜像备份文件的文件名\nDir 数据库镜像备份的文件放置路径\nSlaveof 设置数据库为其他数据库的从数据库\nMasterauth 主数据库连接需要的密码验证\nRequriepass 设置 登陆时需要使用密码\nMaxclients 限制同时使用的客户数量\nMaxmemory 设置redis能够使用的最大内存\nAppendonly 开启append only模式\nAppendfsync 设置对appendonly. aof文件同步的频率（对数据进行备份的第二种方式）\nvm-enabled 是否开启虚拟内存支持 （vm开头的参数都是配置虚拟内存的）\nvm-swap-file 设置虚拟内存的交换文件路径\nvm-max-memory 设置redis使用的最大物理内存大小\nvm-page-size 设置虚拟内存的页大小\nvm-pages 设置交换文件的总的page数量\nvm-max-threads 设置VM IO同时使用的线程数量\nGlueoutputbuf 把小的输出缓存存放在一起\nhash-max-zipmap-entries 设置hash的临界值\nActiverehashing 重新hash\n\n\n\n\n## redis中的list\n\n#题目：\n 做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）？ 将 0001 题生成的 200 个激活码（或者优惠券）保存到 Redis 非关系型数据库中。\n\n\n\nhttp://www.runoob.com/redis/redis-lists.html\n使用LPUSH将数据插入到名为 Code的列表当中\n```python3\n# coding : utf-8\nimport redis\nimport random\n\nr = redis.Redis(host='127.0.0.1',port=6379,db=0)\nlist = []\nfor i in range (65,91):\n    list.append(str(chr(i)))\nfor i in range (97,123):\n    list.append(str(chr(i)))\nfor i in range (10):\n    list.append(str(i))\n\n# file = open('code.txt','w')\nfor i in range (200):\n    Code = ''\n    for j in range (16):\n        Code += random.choice(list)\n        if (j + 1) % 4 == 0 and j != 15:\n            Code = Code + '-'\n    r.lpush('Code', Code )\n```\n","source":"_posts/redis配置与使用.md","raw":"---\ntitle: redis配置与使用\ndate: 2018-09-05 10:36:23\ntags:\n    - python3小练手\ncategories:\n    - Python3\ndescription:\n    redis的基本配置和与python3 搭配使用。\n---\n\n# 下载安装配置\n担心MYSQL开着会影响到redis 所以先检查和关闭mysql\n```\nservice mysql status\nservice mysql stop\n```\n然后下载redis 到官网下载也行 ， 用wget也行。\n```\nwget http://download.redis.io/releases/redis-4.0.10.tar.gz\ntar -zxvf redis-4.0.10.tar.gz\ncd redis-4.0.10\nmake test\ncd src\nmake install\ncd ..\nmkdir etc\nmkdir bin\nmv redis.conf etc/\ncd src\nmv mkreleasehdr.sh  redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server  redis-trib.rb ../bin\n./redis-server\n```\n这时候会看到一些about\nctrl + c 出来，\n```\ncd\n./redis-c\n```\n这时候会报错\nCould not connect to Redis at 127.0.0.1:6379: Connection refused\nCould not connect to Redis at 127.0.0.1:6379: Connection refused\n修改一下配置文件\n具体目录find找一下\n把daemonize配置项改为yes\n```\nredis-server /home/edxuanlen/redis-4.0.10/etc/redis.conf\nredis-cli\n```\n然后就可以连接了\n\n附录：配置信息\ndaemonize 如果需要在后台运行，把该项改为yes\npidfile 配置多个pid的地址 默认在/var/run/redis. pid\nbind 绑定ip，设置后只接受来自该ip的请求\nport 监听端口，默认是6379\nloglevel 分为4个等级：debug verbose notice warning\nlogfile 用于配置log文件地址\ndatabases 设置数据库个数，默认使用的数据库为0\nsave 设置redis进行数据库镜像的频率。\nrdbcompression 在进行镜像备份时，是否进行压缩\ndbfilename 镜像备份文件的文件名\nDir 数据库镜像备份的文件放置路径\nSlaveof 设置数据库为其他数据库的从数据库\nMasterauth 主数据库连接需要的密码验证\nRequriepass 设置 登陆时需要使用密码\nMaxclients 限制同时使用的客户数量\nMaxmemory 设置redis能够使用的最大内存\nAppendonly 开启append only模式\nAppendfsync 设置对appendonly. aof文件同步的频率（对数据进行备份的第二种方式）\nvm-enabled 是否开启虚拟内存支持 （vm开头的参数都是配置虚拟内存的）\nvm-swap-file 设置虚拟内存的交换文件路径\nvm-max-memory 设置redis使用的最大物理内存大小\nvm-page-size 设置虚拟内存的页大小\nvm-pages 设置交换文件的总的page数量\nvm-max-threads 设置VM IO同时使用的线程数量\nGlueoutputbuf 把小的输出缓存存放在一起\nhash-max-zipmap-entries 设置hash的临界值\nActiverehashing 重新hash\n\n\n\n\n## redis中的list\n\n#题目：\n 做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）？ 将 0001 题生成的 200 个激活码（或者优惠券）保存到 Redis 非关系型数据库中。\n\n\n\nhttp://www.runoob.com/redis/redis-lists.html\n使用LPUSH将数据插入到名为 Code的列表当中\n```python3\n# coding : utf-8\nimport redis\nimport random\n\nr = redis.Redis(host='127.0.0.1',port=6379,db=0)\nlist = []\nfor i in range (65,91):\n    list.append(str(chr(i)))\nfor i in range (97,123):\n    list.append(str(chr(i)))\nfor i in range (10):\n    list.append(str(i))\n\n# file = open('code.txt','w')\nfor i in range (200):\n    Code = ''\n    for j in range (16):\n        Code += random.choice(list)\n        if (j + 1) % 4 == 0 and j != 15:\n            Code = Code + '-'\n    r.lpush('Code', Code )\n```\n","slug":"redis配置与使用","published":1,"updated":"2020-02-06T22:40:22.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n99x003824uwxzo5t9sq","content":"<h1 id=\"下载安装配置\"><a href=\"#下载安装配置\" class=\"headerlink\" title=\"下载安装配置\"></a>下载安装配置</h1><p>担心MYSQL开着会影响到redis 所以先检查和关闭mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysql status</span><br><span class=\"line\">service mysql stop</span><br></pre></td></tr></table></figure>\n\n<p>然后下载redis 到官网下载也行 ， 用wget也行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-4.0.10.tar.gz</span><br><span class=\"line\">tar -zxvf redis-4.0.10.tar.gz</span><br><span class=\"line\">cd redis-4.0.10</span><br><span class=\"line\">make test</span><br><span class=\"line\">cd src</span><br><span class=\"line\">make install</span><br><span class=\"line\">cd ..</span><br><span class=\"line\">mkdir etc</span><br><span class=\"line\">mkdir bin</span><br><span class=\"line\">mv redis.conf etc/</span><br><span class=\"line\">cd src</span><br><span class=\"line\">mv mkreleasehdr.sh  redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server  redis-trib.rb ../bin</span><br><span class=\"line\">./redis-server</span><br></pre></td></tr></table></figure>\n\n<p>这时候会看到一些about<br>ctrl + c 出来，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd</span><br><span class=\"line\">./redis-c</span><br></pre></td></tr></table></figure>\n\n<p>这时候会报错<br>Could not connect to Redis at 127.0.0.1:6379: Connection refused<br>Could not connect to Redis at 127.0.0.1:6379: Connection refused<br>修改一下配置文件<br>具体目录find找一下<br>把daemonize配置项改为yes</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server /home/edxuanlen/redis-4.0.10/etc/redis.conf</span><br><span class=\"line\">redis-cli</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以连接了</p>\n<p>附录：配置信息<br>daemonize 如果需要在后台运行，把该项改为yes<br>pidfile 配置多个pid的地址 默认在/var/run/redis. pid<br>bind 绑定ip，设置后只接受来自该ip的请求<br>port 监听端口，默认是6379<br>loglevel 分为4个等级：debug verbose notice warning<br>logfile 用于配置log文件地址<br>databases 设置数据库个数，默认使用的数据库为0<br>save 设置redis进行数据库镜像的频率。<br>rdbcompression 在进行镜像备份时，是否进行压缩<br>dbfilename 镜像备份文件的文件名<br>Dir 数据库镜像备份的文件放置路径<br>Slaveof 设置数据库为其他数据库的从数据库<br>Masterauth 主数据库连接需要的密码验证<br>Requriepass 设置 登陆时需要使用密码<br>Maxclients 限制同时使用的客户数量<br>Maxmemory 设置redis能够使用的最大内存<br>Appendonly 开启append only模式<br>Appendfsync 设置对appendonly. aof文件同步的频率（对数据进行备份的第二种方式）<br>vm-enabled 是否开启虚拟内存支持 （vm开头的参数都是配置虚拟内存的）<br>vm-swap-file 设置虚拟内存的交换文件路径<br>vm-max-memory 设置redis使用的最大物理内存大小<br>vm-page-size 设置虚拟内存的页大小<br>vm-pages 设置交换文件的总的page数量<br>vm-max-threads 设置VM IO同时使用的线程数量<br>Glueoutputbuf 把小的输出缓存存放在一起<br>hash-max-zipmap-entries 设置hash的临界值<br>Activerehashing 重新hash</p>\n<h2 id=\"redis中的list\"><a href=\"#redis中的list\" class=\"headerlink\" title=\"redis中的list\"></a>redis中的list</h2><p>#题目：<br> 做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）？ 将 0001 题生成的 200 个激活码（或者优惠券）保存到 Redis 非关系型数据库中。</p>\n<p><a href=\"http://www.runoob.com/redis/redis-lists.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/redis/redis-lists.html</a><br>使用LPUSH将数据插入到名为 Code的列表当中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding : utf-8</span><br><span class=\"line\">import redis</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\">r = redis.Redis(host=&apos;127.0.0.1&apos;,port=6379,db=0)</span><br><span class=\"line\">list = []</span><br><span class=\"line\">for i in range (65,91):</span><br><span class=\"line\">    list.append(str(chr(i)))</span><br><span class=\"line\">for i in range (97,123):</span><br><span class=\"line\">    list.append(str(chr(i)))</span><br><span class=\"line\">for i in range (10):</span><br><span class=\"line\">    list.append(str(i))</span><br><span class=\"line\"></span><br><span class=\"line\"># file = open(&apos;code.txt&apos;,&apos;w&apos;)</span><br><span class=\"line\">for i in range (200):</span><br><span class=\"line\">    Code = &apos;&apos;</span><br><span class=\"line\">    for j in range (16):</span><br><span class=\"line\">        Code += random.choice(list)</span><br><span class=\"line\">        if (j + 1) % 4 == 0 and j != 15:</span><br><span class=\"line\">            Code = Code + &apos;-&apos;</span><br><span class=\"line\">    r.lpush(&apos;Code&apos;, Code )</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"下载安装配置\"><a href=\"#下载安装配置\" class=\"headerlink\" title=\"下载安装配置\"></a>下载安装配置</h1><p>担心MYSQL开着会影响到redis 所以先检查和关闭mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysql status</span><br><span class=\"line\">service mysql stop</span><br></pre></td></tr></table></figure>\n\n<p>然后下载redis 到官网下载也行 ， 用wget也行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-4.0.10.tar.gz</span><br><span class=\"line\">tar -zxvf redis-4.0.10.tar.gz</span><br><span class=\"line\">cd redis-4.0.10</span><br><span class=\"line\">make test</span><br><span class=\"line\">cd src</span><br><span class=\"line\">make install</span><br><span class=\"line\">cd ..</span><br><span class=\"line\">mkdir etc</span><br><span class=\"line\">mkdir bin</span><br><span class=\"line\">mv redis.conf etc/</span><br><span class=\"line\">cd src</span><br><span class=\"line\">mv mkreleasehdr.sh  redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server  redis-trib.rb ../bin</span><br><span class=\"line\">./redis-server</span><br></pre></td></tr></table></figure>\n\n<p>这时候会看到一些about<br>ctrl + c 出来，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd</span><br><span class=\"line\">./redis-c</span><br></pre></td></tr></table></figure>\n\n<p>这时候会报错<br>Could not connect to Redis at 127.0.0.1:6379: Connection refused<br>Could not connect to Redis at 127.0.0.1:6379: Connection refused<br>修改一下配置文件<br>具体目录find找一下<br>把daemonize配置项改为yes</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server /home/edxuanlen/redis-4.0.10/etc/redis.conf</span><br><span class=\"line\">redis-cli</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以连接了</p>\n<p>附录：配置信息<br>daemonize 如果需要在后台运行，把该项改为yes<br>pidfile 配置多个pid的地址 默认在/var/run/redis. pid<br>bind 绑定ip，设置后只接受来自该ip的请求<br>port 监听端口，默认是6379<br>loglevel 分为4个等级：debug verbose notice warning<br>logfile 用于配置log文件地址<br>databases 设置数据库个数，默认使用的数据库为0<br>save 设置redis进行数据库镜像的频率。<br>rdbcompression 在进行镜像备份时，是否进行压缩<br>dbfilename 镜像备份文件的文件名<br>Dir 数据库镜像备份的文件放置路径<br>Slaveof 设置数据库为其他数据库的从数据库<br>Masterauth 主数据库连接需要的密码验证<br>Requriepass 设置 登陆时需要使用密码<br>Maxclients 限制同时使用的客户数量<br>Maxmemory 设置redis能够使用的最大内存<br>Appendonly 开启append only模式<br>Appendfsync 设置对appendonly. aof文件同步的频率（对数据进行备份的第二种方式）<br>vm-enabled 是否开启虚拟内存支持 （vm开头的参数都是配置虚拟内存的）<br>vm-swap-file 设置虚拟内存的交换文件路径<br>vm-max-memory 设置redis使用的最大物理内存大小<br>vm-page-size 设置虚拟内存的页大小<br>vm-pages 设置交换文件的总的page数量<br>vm-max-threads 设置VM IO同时使用的线程数量<br>Glueoutputbuf 把小的输出缓存存放在一起<br>hash-max-zipmap-entries 设置hash的临界值<br>Activerehashing 重新hash</p>\n<h2 id=\"redis中的list\"><a href=\"#redis中的list\" class=\"headerlink\" title=\"redis中的list\"></a>redis中的list</h2><p>#题目：<br> 做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）？ 将 0001 题生成的 200 个激活码（或者优惠券）保存到 Redis 非关系型数据库中。</p>\n<p><a href=\"http://www.runoob.com/redis/redis-lists.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/redis/redis-lists.html</a><br>使用LPUSH将数据插入到名为 Code的列表当中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding : utf-8</span><br><span class=\"line\">import redis</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\">r = redis.Redis(host=&apos;127.0.0.1&apos;,port=6379,db=0)</span><br><span class=\"line\">list = []</span><br><span class=\"line\">for i in range (65,91):</span><br><span class=\"line\">    list.append(str(chr(i)))</span><br><span class=\"line\">for i in range (97,123):</span><br><span class=\"line\">    list.append(str(chr(i)))</span><br><span class=\"line\">for i in range (10):</span><br><span class=\"line\">    list.append(str(i))</span><br><span class=\"line\"></span><br><span class=\"line\"># file = open(&apos;code.txt&apos;,&apos;w&apos;)</span><br><span class=\"line\">for i in range (200):</span><br><span class=\"line\">    Code = &apos;&apos;</span><br><span class=\"line\">    for j in range (16):</span><br><span class=\"line\">        Code += random.choice(list)</span><br><span class=\"line\">        if (j + 1) % 4 == 0 and j != 15:</span><br><span class=\"line\">            Code = Code + &apos;-&apos;</span><br><span class=\"line\">    r.lpush(&apos;Code&apos;, Code )</span><br></pre></td></tr></table></figure>\n\n"},{"title":"string 的使用","date":"2018-04-14T05:37:39.000Z","description":"string的处理","_content":"\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tchar a[101];\n\n\twhile(gets(a)){\n\t\tstring b=a;\n\t\tint i=0;\n\t\ttransform(b.begin(),b.end(),b.begin(),::tolower);\n\t\tif(!b.find(\"lovelive\"))\n\t\t\tprintf(\"yes\\n\");\n\t\telse\n\t\t\tprintf(\"no\\n\");\n\t}\n\treturn 0;\n}\n\n```\n","source":"_posts/string-的使用.md","raw":"---\ntitle: string 的使用\ndate: 2018-04-14 13:37:39\ntags:\tSTL\ncategories: C/C++\ndescription: string的处理\n---\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tchar a[101];\n\n\twhile(gets(a)){\n\t\tstring b=a;\n\t\tint i=0;\n\t\ttransform(b.begin(),b.end(),b.begin(),::tolower);\n\t\tif(!b.find(\"lovelive\"))\n\t\t\tprintf(\"yes\\n\");\n\t\telse\n\t\t\tprintf(\"no\\n\");\n\t}\n\treturn 0;\n}\n\n```\n","slug":"string-的使用","published":1,"updated":"2020-02-06T22:40:22.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n99z003b24uw2sh95d2j","content":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a[<span class=\"number\">101</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(gets(a))&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> b=a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttransform(b.begin(),b.end(),b.begin(),::<span class=\"built_in\">tolower</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!b.find(<span class=\"string\">\"lovelive\"</span>))</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"yes\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"no\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a[<span class=\"number\">101</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(gets(a))&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> b=a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttransform(b.begin(),b.end(),b.begin(),::<span class=\"built_in\">tolower</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!b.find(<span class=\"string\">\"lovelive\"</span>))</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"yes\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"no\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"不要62","date":"2018-03-31T14:45:22.000Z","description":"简单的数位DP和打表解法。","_content":"\n[题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=2089)\n### 题意\n>**Problem Description**\n杭州人称那些傻乎乎粘嗒嗒的人为62（音：laoer）。\n杭州交通管理局经常会扩充一些的士车牌照，新近出来一个好消息，以后上牌照，不再含有不吉利的数字了，这样一来，就可以消除个别的士司机和乘客的心理障碍，更安全地服务大众。\n不吉利的数字为所有含有4或62的号码。例如：\n62315 73418 88914\n都属于不吉利号码。但是，61152虽然含有6和2，但不是62连号，所以不属于不吉利数字之列。\n你的任务是，对于每次给出的一个牌照区间号，推断出交管局今次又要实际上给多少辆新的士车上牌照了。\n \n>**Input**\n输入的都是整数对n、m（0<n≤m<1000000），如果遇到都是0的整数对，则输入结束。\n \n>**Output**\n对于每个整数对，输出一个不含有不吉利数字的统计个数，该数值占一行位置。\n \n>**Sample Input**\n1 100\n0 0\n \n>**Sample Output**\n80\n\n#### 数位DP解法\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nlong long f[10][10];\nvoid getdp(){\n\tf[0][0]=1;  \n\t  \n\tfor(int i=1;i<10;i++){  \n\t\tfor(int j=0;j<10;j++){  \n\t\t\tif(j==4) f[i][j]=0;  \n\t\t\telse if(j==6) {  \n\t\t\t\tfor(int k=0;k<10;k++)  \n\t\t\t\t\tf[i][j]+=f[i-1][k];  \n\t\t\t\tf[i][j]-=f[i-1][2];  \n\t\t\t} \n\t\t\telse{  \n\t\t\tfor(int k=0;k<10;k++)  \n\t\t\t\tf[i][j]+=f[i-1][k];  \n\t\t\t}   \n\t  \t}  \n\t}  \n\tfor(int i=0;i<10;i++){\n\t\tfor(int j=0;j<10;j++) \n\t\t\tprintf(\"%8d \",f[i][j]);\n\t\tcout<<endl<<endl;\n\t}\n}\n  \nint a[10];  \nlong long  solve(int n){  \n\ta[0]=0;  \n\twhile(n){  \n\t\ta[++a[0]]=n%10;  \n\t\tn/=10; \n\t}  \n\ta[a[0]+1]=0;  \n\tlong long ans=0;  \n\tfor(int i=a[0];i>=1;i--){  \n\t\tfor(int j=0;j<a[i];j++)  \t\t\t\n\t\t\t//if(!(a[i+1]==6&&j==2))  \n\t\t\t\tans+=f[i][j]; \n\t\tcout<<i<<\" \"<<a[i]<<\":\"<<ans<<endl;\n\t\tif(a[i]==4)break;  \n\t\tif(a[i+1]==6&&a[i]==2) break;  \n\t}  \n\treturn ans;  \n}  \nint main(){  \n\tint n,m;  \n\tgetdp();  \n\twhile(scanf(\"%d %d\",&n,&m)==2&&(n||m)){  \n\t\tlong long k1=solve(m+1);  \n\t\tcout<<endl;\n\t\tlong long k2=solve(n);  \n\t\tprintf(\"%I64d\\n\",k1-k2);  \n\t}  \n}  \n```\n运行结果如下\n{% asset_img DP.png %}\n\n\n#### 打表\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint a[1000000]={0}; \nint main() \n{ \n    int i,n,m,d=0; \n    for(i=1;i<1000000;++i) \n    { \n        if(i%10==4||i/10%10==4||i/100%10==4||i/1000%10==4||i/10000%10==4||i/100000%10==4)a[i]=a[i-1]; \n        else if(i%100==62||i/10%100==62||i/100%100==62||i/1000%100==62||i/10000%100==62)a[i]=a[i-1]; \n        else  a[i]=a[i-1]+1; \n    } \n    for(int i=0;i<600;i++){\n\t\tif(i%30==0)cout<<endl;\n    \tprintf(\"%3d \",a[i]);\n    }\n\tcout<<endl<<endl;\n    while(scanf(\"%d%d\",&n,&m)!=EOF&&n!=0||m!=0) \n        printf(\"%d\\n\",a[m]-a[n-1]); \n}  \n```\n运行结果如下\n{% asset_img 1.png %}\n\n\n通过输出两个不同解法的表 其实很容易看懂代码的意思。","source":"_posts/不要62.md","raw":"---\ntitle: 不要62\ndate: 2018-03-31 22:45:22\ntags:\n    - 动态规划\ncategories: C/C++\ndescription: 简单的数位DP和打表解法。\n---\n\n[题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=2089)\n### 题意\n>**Problem Description**\n杭州人称那些傻乎乎粘嗒嗒的人为62（音：laoer）。\n杭州交通管理局经常会扩充一些的士车牌照，新近出来一个好消息，以后上牌照，不再含有不吉利的数字了，这样一来，就可以消除个别的士司机和乘客的心理障碍，更安全地服务大众。\n不吉利的数字为所有含有4或62的号码。例如：\n62315 73418 88914\n都属于不吉利号码。但是，61152虽然含有6和2，但不是62连号，所以不属于不吉利数字之列。\n你的任务是，对于每次给出的一个牌照区间号，推断出交管局今次又要实际上给多少辆新的士车上牌照了。\n \n>**Input**\n输入的都是整数对n、m（0<n≤m<1000000），如果遇到都是0的整数对，则输入结束。\n \n>**Output**\n对于每个整数对，输出一个不含有不吉利数字的统计个数，该数值占一行位置。\n \n>**Sample Input**\n1 100\n0 0\n \n>**Sample Output**\n80\n\n#### 数位DP解法\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nlong long f[10][10];\nvoid getdp(){\n\tf[0][0]=1;  \n\t  \n\tfor(int i=1;i<10;i++){  \n\t\tfor(int j=0;j<10;j++){  \n\t\t\tif(j==4) f[i][j]=0;  \n\t\t\telse if(j==6) {  \n\t\t\t\tfor(int k=0;k<10;k++)  \n\t\t\t\t\tf[i][j]+=f[i-1][k];  \n\t\t\t\tf[i][j]-=f[i-1][2];  \n\t\t\t} \n\t\t\telse{  \n\t\t\tfor(int k=0;k<10;k++)  \n\t\t\t\tf[i][j]+=f[i-1][k];  \n\t\t\t}   \n\t  \t}  \n\t}  \n\tfor(int i=0;i<10;i++){\n\t\tfor(int j=0;j<10;j++) \n\t\t\tprintf(\"%8d \",f[i][j]);\n\t\tcout<<endl<<endl;\n\t}\n}\n  \nint a[10];  \nlong long  solve(int n){  \n\ta[0]=0;  \n\twhile(n){  \n\t\ta[++a[0]]=n%10;  \n\t\tn/=10; \n\t}  \n\ta[a[0]+1]=0;  \n\tlong long ans=0;  \n\tfor(int i=a[0];i>=1;i--){  \n\t\tfor(int j=0;j<a[i];j++)  \t\t\t\n\t\t\t//if(!(a[i+1]==6&&j==2))  \n\t\t\t\tans+=f[i][j]; \n\t\tcout<<i<<\" \"<<a[i]<<\":\"<<ans<<endl;\n\t\tif(a[i]==4)break;  \n\t\tif(a[i+1]==6&&a[i]==2) break;  \n\t}  \n\treturn ans;  \n}  \nint main(){  \n\tint n,m;  \n\tgetdp();  \n\twhile(scanf(\"%d %d\",&n,&m)==2&&(n||m)){  \n\t\tlong long k1=solve(m+1);  \n\t\tcout<<endl;\n\t\tlong long k2=solve(n);  \n\t\tprintf(\"%I64d\\n\",k1-k2);  \n\t}  \n}  \n```\n运行结果如下\n{% asset_img DP.png %}\n\n\n#### 打表\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint a[1000000]={0}; \nint main() \n{ \n    int i,n,m,d=0; \n    for(i=1;i<1000000;++i) \n    { \n        if(i%10==4||i/10%10==4||i/100%10==4||i/1000%10==4||i/10000%10==4||i/100000%10==4)a[i]=a[i-1]; \n        else if(i%100==62||i/10%100==62||i/100%100==62||i/1000%100==62||i/10000%100==62)a[i]=a[i-1]; \n        else  a[i]=a[i-1]+1; \n    } \n    for(int i=0;i<600;i++){\n\t\tif(i%30==0)cout<<endl;\n    \tprintf(\"%3d \",a[i]);\n    }\n\tcout<<endl<<endl;\n    while(scanf(\"%d%d\",&n,&m)!=EOF&&n!=0||m!=0) \n        printf(\"%d\\n\",a[m]-a[n-1]); \n}  \n```\n运行结果如下\n{% asset_img 1.png %}\n\n\n通过输出两个不同解法的表 其实很容易看懂代码的意思。","slug":"不要62","published":1,"updated":"2020-02-06T22:40:22.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9a2003g24uwjiwui96t","content":"<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2089\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h3 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h3><blockquote>\n<p><strong>Problem Description</strong><br>杭州人称那些傻乎乎粘嗒嗒的人为62（音：laoer）。<br>杭州交通管理局经常会扩充一些的士车牌照，新近出来一个好消息，以后上牌照，不再含有不吉利的数字了，这样一来，就可以消除个别的士司机和乘客的心理障碍，更安全地服务大众。<br>不吉利的数字为所有含有4或62的号码。例如：<br>62315 73418 88914<br>都属于不吉利号码。但是，61152虽然含有6和2，但不是62连号，所以不属于不吉利数字之列。<br>你的任务是，对于每次给出的一个牌照区间号，推断出交管局今次又要实际上给多少辆新的士车上牌照了。</p>\n</blockquote>\n<blockquote>\n<p><strong>Input</strong><br>输入的都是整数对n、m（0&lt;n≤m&lt;1000000），如果遇到都是0的整数对，则输入结束。</p>\n</blockquote>\n<blockquote>\n<p><strong>Output</strong><br>对于每个整数对，输出一个不含有不吉利数字的统计个数，该数值占一行位置。</p>\n</blockquote>\n<blockquote>\n<p><strong>Sample Input</strong><br>1 100<br>0 0</p>\n</blockquote>\n<blockquote>\n<p><strong>Sample Output</strong><br>80</p>\n</blockquote>\n<h4 id=\"数位DP解法\"><a href=\"#数位DP解法\" class=\"headerlink\" title=\"数位DP解法\"></a>数位DP解法</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> f[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getdp</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tf[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">10</span>;j++)&#123;  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(j==<span class=\"number\">4</span>) f[i][j]=<span class=\"number\">0</span>;  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==<span class=\"number\">6</span>) &#123;  </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">10</span>;k++)  </span><br><span class=\"line\">\t\t\t\t\tf[i][j]+=f[i<span class=\"number\">-1</span>][k];  </span><br><span class=\"line\">\t\t\t\tf[i][j]-=f[i<span class=\"number\">-1</span>][<span class=\"number\">2</span>];  </span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">10</span>;k++)  </span><br><span class=\"line\">\t\t\t\tf[i][j]+=f[i<span class=\"number\">-1</span>][k];  </span><br><span class=\"line\">\t\t\t&#125;   </span><br><span class=\"line\">\t  \t&#125;  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">10</span>;j++) </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%8d \"</span>,f[i][j]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">10</span>];  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span>  <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;  </span><br><span class=\"line\">\ta[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;  </span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n)&#123;  </span><br><span class=\"line\">\t\ta[++a[<span class=\"number\">0</span>]]=n%<span class=\"number\">10</span>;  </span><br><span class=\"line\">\t\tn/=<span class=\"number\">10</span>; </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\ta[a[<span class=\"number\">0</span>]+<span class=\"number\">1</span>]=<span class=\"number\">0</span>;  </span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans=<span class=\"number\">0</span>;  </span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=a[<span class=\"number\">0</span>];i&gt;=<span class=\"number\">1</span>;i--)&#123;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;a[i];j++)  \t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//if(!(a[i+1]==6&amp;&amp;j==2))  </span></span><br><span class=\"line\">\t\t\t\tans+=f[i][j]; </span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;a[i]&lt;&lt;<span class=\"string\">\":\"</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i]==<span class=\"number\">4</span>)<span class=\"keyword\">break</span>;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i+<span class=\"number\">1</span>]==<span class=\"number\">6</span>&amp;&amp;a[i]==<span class=\"number\">2</span>) <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m;  </span><br><span class=\"line\">\tgetdp();  </span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>,&amp;n,&amp;m)==<span class=\"number\">2</span>&amp;&amp;(n||m))&#123;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> k1=solve(m+<span class=\"number\">1</span>);  </span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> k2=solve(n);  </span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>,k1-k2);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下</p>\n<img src=\"/2018/03/31/不要62/DP.png\">\n\n\n<h4 id=\"打表\"><a href=\"#打表\" class=\"headerlink\" title=\"打表\"></a>打表</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">1000000</span>]=&#123;<span class=\"number\">0</span>&#125;; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,n,m,d=<span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">1000000</span>;++i) </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i%<span class=\"number\">10</span>==<span class=\"number\">4</span>||i/<span class=\"number\">10</span>%<span class=\"number\">10</span>==<span class=\"number\">4</span>||i/<span class=\"number\">100</span>%<span class=\"number\">10</span>==<span class=\"number\">4</span>||i/<span class=\"number\">1000</span>%<span class=\"number\">10</span>==<span class=\"number\">4</span>||i/<span class=\"number\">10000</span>%<span class=\"number\">10</span>==<span class=\"number\">4</span>||i/<span class=\"number\">100000</span>%<span class=\"number\">10</span>==<span class=\"number\">4</span>)a[i]=a[i<span class=\"number\">-1</span>]; </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i%<span class=\"number\">100</span>==<span class=\"number\">62</span>||i/<span class=\"number\">10</span>%<span class=\"number\">100</span>==<span class=\"number\">62</span>||i/<span class=\"number\">100</span>%<span class=\"number\">100</span>==<span class=\"number\">62</span>||i/<span class=\"number\">1000</span>%<span class=\"number\">100</span>==<span class=\"number\">62</span>||i/<span class=\"number\">10000</span>%<span class=\"number\">100</span>==<span class=\"number\">62</span>)a[i]=a[i<span class=\"number\">-1</span>]; </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  a[i]=a[i<span class=\"number\">-1</span>]+<span class=\"number\">1</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">600</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i%<span class=\"number\">30</span>==<span class=\"number\">0</span>)<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%3d \"</span>,a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m)!=EOF&amp;&amp;n!=<span class=\"number\">0</span>||m!=<span class=\"number\">0</span>) </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,a[m]-a[n<span class=\"number\">-1</span>]); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下</p>\n<img src=\"/2018/03/31/不要62/1.png\">\n\n\n<p>通过输出两个不同解法的表 其实很容易看懂代码的意思。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2089\" target=\"_blank\" rel=\"noopener\">题目链接</a></p>\n<h3 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h3><blockquote>\n<p><strong>Problem Description</strong><br>杭州人称那些傻乎乎粘嗒嗒的人为62（音：laoer）。<br>杭州交通管理局经常会扩充一些的士车牌照，新近出来一个好消息，以后上牌照，不再含有不吉利的数字了，这样一来，就可以消除个别的士司机和乘客的心理障碍，更安全地服务大众。<br>不吉利的数字为所有含有4或62的号码。例如：<br>62315 73418 88914<br>都属于不吉利号码。但是，61152虽然含有6和2，但不是62连号，所以不属于不吉利数字之列。<br>你的任务是，对于每次给出的一个牌照区间号，推断出交管局今次又要实际上给多少辆新的士车上牌照了。</p>\n</blockquote>\n<blockquote>\n<p><strong>Input</strong><br>输入的都是整数对n、m（0&lt;n≤m&lt;1000000），如果遇到都是0的整数对，则输入结束。</p>\n</blockquote>\n<blockquote>\n<p><strong>Output</strong><br>对于每个整数对，输出一个不含有不吉利数字的统计个数，该数值占一行位置。</p>\n</blockquote>\n<blockquote>\n<p><strong>Sample Input</strong><br>1 100<br>0 0</p>\n</blockquote>\n<blockquote>\n<p><strong>Sample Output</strong><br>80</p>\n</blockquote>\n<h4 id=\"数位DP解法\"><a href=\"#数位DP解法\" class=\"headerlink\" title=\"数位DP解法\"></a>数位DP解法</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> f[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getdp</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tf[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">10</span>;j++)&#123;  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(j==<span class=\"number\">4</span>) f[i][j]=<span class=\"number\">0</span>;  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==<span class=\"number\">6</span>) &#123;  </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">10</span>;k++)  </span><br><span class=\"line\">\t\t\t\t\tf[i][j]+=f[i<span class=\"number\">-1</span>][k];  </span><br><span class=\"line\">\t\t\t\tf[i][j]-=f[i<span class=\"number\">-1</span>][<span class=\"number\">2</span>];  </span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">10</span>;k++)  </span><br><span class=\"line\">\t\t\t\tf[i][j]+=f[i<span class=\"number\">-1</span>][k];  </span><br><span class=\"line\">\t\t\t&#125;   </span><br><span class=\"line\">\t  \t&#125;  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">10</span>;j++) </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%8d \"</span>,f[i][j]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">10</span>];  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span>  <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;  </span><br><span class=\"line\">\ta[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;  </span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n)&#123;  </span><br><span class=\"line\">\t\ta[++a[<span class=\"number\">0</span>]]=n%<span class=\"number\">10</span>;  </span><br><span class=\"line\">\t\tn/=<span class=\"number\">10</span>; </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\ta[a[<span class=\"number\">0</span>]+<span class=\"number\">1</span>]=<span class=\"number\">0</span>;  </span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans=<span class=\"number\">0</span>;  </span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=a[<span class=\"number\">0</span>];i&gt;=<span class=\"number\">1</span>;i--)&#123;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;a[i];j++)  \t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//if(!(a[i+1]==6&amp;&amp;j==2))  </span></span><br><span class=\"line\">\t\t\t\tans+=f[i][j]; </span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;a[i]&lt;&lt;<span class=\"string\">\":\"</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i]==<span class=\"number\">4</span>)<span class=\"keyword\">break</span>;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i+<span class=\"number\">1</span>]==<span class=\"number\">6</span>&amp;&amp;a[i]==<span class=\"number\">2</span>) <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m;  </span><br><span class=\"line\">\tgetdp();  </span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>,&amp;n,&amp;m)==<span class=\"number\">2</span>&amp;&amp;(n||m))&#123;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> k1=solve(m+<span class=\"number\">1</span>);  </span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> k2=solve(n);  </span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>,k1-k2);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下</p>\n<img src=\"/2018/03/31/不要62/DP.png\">\n\n\n<h4 id=\"打表\"><a href=\"#打表\" class=\"headerlink\" title=\"打表\"></a>打表</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">1000000</span>]=&#123;<span class=\"number\">0</span>&#125;; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,n,m,d=<span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">1000000</span>;++i) </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i%<span class=\"number\">10</span>==<span class=\"number\">4</span>||i/<span class=\"number\">10</span>%<span class=\"number\">10</span>==<span class=\"number\">4</span>||i/<span class=\"number\">100</span>%<span class=\"number\">10</span>==<span class=\"number\">4</span>||i/<span class=\"number\">1000</span>%<span class=\"number\">10</span>==<span class=\"number\">4</span>||i/<span class=\"number\">10000</span>%<span class=\"number\">10</span>==<span class=\"number\">4</span>||i/<span class=\"number\">100000</span>%<span class=\"number\">10</span>==<span class=\"number\">4</span>)a[i]=a[i<span class=\"number\">-1</span>]; </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i%<span class=\"number\">100</span>==<span class=\"number\">62</span>||i/<span class=\"number\">10</span>%<span class=\"number\">100</span>==<span class=\"number\">62</span>||i/<span class=\"number\">100</span>%<span class=\"number\">100</span>==<span class=\"number\">62</span>||i/<span class=\"number\">1000</span>%<span class=\"number\">100</span>==<span class=\"number\">62</span>||i/<span class=\"number\">10000</span>%<span class=\"number\">100</span>==<span class=\"number\">62</span>)a[i]=a[i<span class=\"number\">-1</span>]; </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  a[i]=a[i<span class=\"number\">-1</span>]+<span class=\"number\">1</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">600</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i%<span class=\"number\">30</span>==<span class=\"number\">0</span>)<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%3d \"</span>,a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m)!=EOF&amp;&amp;n!=<span class=\"number\">0</span>||m!=<span class=\"number\">0</span>) </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,a[m]-a[n<span class=\"number\">-1</span>]); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下</p>\n<img src=\"/2018/03/31/不要62/1.png\">\n\n\n<p>通过输出两个不同解法的表 其实很容易看懂代码的意思。</p>\n"},{"title":"乘积尾零数目","date":"2018-04-05T17:20:00.000Z","description":null,"_content":"[原题链接](https://www.nowcoder.com/acm/contest/93/E)\n题目描述 \nwyh学长十分钟爱数字‘7’，他想知道每一个数字中有多少个数字‘7’\n\n输入描述:\n输入第一行一个整数T(1<=T<=10)\n接下来有T组测试数据，对于每组测试数据，输入一个整数n(1<=n<=10000000000)\n输出描述:\n对于每组测试数据，输出对应答案\n示例1\n输入\n2\n1234567\n123456\n输出\n1\n0\n\n\n**思路**\n这道题第一感觉就是求5和2最多组合个数，因为是从小到大递增，因子中2的个数一定永远比5的个数多所以就是求5的个数即可；\n一开始我是先求了5的个数，没多想，只除了5就输出，结果一直是WA的，后来才发现错在哪，5的n次方中因子会有n个5，比如25有两个5，125有三个5。。。\n所以就有了下面代码的思路，i<13是来自于我对数据范围100亿以内最大的5的n次方求解得到n最高为12；即5<sup>12</sup>(=244140625)<100亿<5<sup>13<sup>。\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nint main(){\n\tint n;\n\tint flag=0;\n\tscanf(\"%d\",&n);\n\twhile(n--){\n\t\tll num;\n\t\tint sum=0;\n\t\tscanf(\"%lld\",&num);\n\t\tfor(int i=1;i<13;i++)\n\t\t\tsum+=num/pow(5,i);\n\t\tprintf(\"%d\\n\",sum);\n\t}\n\treturn 0;\n}\n```\n\n\nAC by..\\..njfu-edxuanlen","source":"_posts/乘积尾零数目.md","raw":"---\ntitle: 乘积尾零数目\ndate: 2018-04-06 01:20:00\ntags:\ncategories:\ndescription:\n---\n[原题链接](https://www.nowcoder.com/acm/contest/93/E)\n题目描述 \nwyh学长十分钟爱数字‘7’，他想知道每一个数字中有多少个数字‘7’\n\n输入描述:\n输入第一行一个整数T(1<=T<=10)\n接下来有T组测试数据，对于每组测试数据，输入一个整数n(1<=n<=10000000000)\n输出描述:\n对于每组测试数据，输出对应答案\n示例1\n输入\n2\n1234567\n123456\n输出\n1\n0\n\n\n**思路**\n这道题第一感觉就是求5和2最多组合个数，因为是从小到大递增，因子中2的个数一定永远比5的个数多所以就是求5的个数即可；\n一开始我是先求了5的个数，没多想，只除了5就输出，结果一直是WA的，后来才发现错在哪，5的n次方中因子会有n个5，比如25有两个5，125有三个5。。。\n所以就有了下面代码的思路，i<13是来自于我对数据范围100亿以内最大的5的n次方求解得到n最高为12；即5<sup>12</sup>(=244140625)<100亿<5<sup>13<sup>。\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nint main(){\n\tint n;\n\tint flag=0;\n\tscanf(\"%d\",&n);\n\twhile(n--){\n\t\tll num;\n\t\tint sum=0;\n\t\tscanf(\"%lld\",&num);\n\t\tfor(int i=1;i<13;i++)\n\t\t\tsum+=num/pow(5,i);\n\t\tprintf(\"%d\\n\",sum);\n\t}\n\treturn 0;\n}\n```\n\n\nAC by..\\..njfu-edxuanlen","slug":"乘积尾零数目","published":1,"updated":"2020-02-06T22:40:22.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9a5003i24uwbo9o6n9i","content":"<p><a href=\"https://www.nowcoder.com/acm/contest/93/E\" target=\"_blank\" rel=\"noopener\">原题链接</a><br>题目描述<br>wyh学长十分钟爱数字‘7’，他想知道每一个数字中有多少个数字‘7’</p>\n<p>输入描述:<br>输入第一行一个整数T(1&lt;=T&lt;=10)<br>接下来有T组测试数据，对于每组测试数据，输入一个整数n(1&lt;=n&lt;=10000000000)<br>输出描述:<br>对于每组测试数据，输出对应答案<br>示例1<br>输入<br>2<br>1234567<br>123456<br>输出<br>1<br>0</p>\n<p><strong>思路</strong><br>这道题第一感觉就是求5和2最多组合个数，因为是从小到大递增，因子中2的个数一定永远比5的个数多所以就是求5的个数即可；<br>一开始我是先求了5的个数，没多想，只除了5就输出，结果一直是WA的，后来才发现错在哪，5的n次方中因子会有n个5，比如25有两个5，125有三个5。。。<br>所以就有了下面代码的思路，i&lt;13是来自于我对数据范围100亿以内最大的5的n次方求解得到n最高为12；即5<sup>12</sup>(=244140625)&lt;100亿&lt;5<sup>13<sup>。</sup></sup></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">\t\tll num;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;num);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">13</span>;i++)</span><br><span class=\"line\">\t\t\tsum+=num/<span class=\"built_in\">pow</span>(<span class=\"number\">5</span>,i);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>AC by....njfu-edxuanlen</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.nowcoder.com/acm/contest/93/E\" target=\"_blank\" rel=\"noopener\">原题链接</a><br>题目描述<br>wyh学长十分钟爱数字‘7’，他想知道每一个数字中有多少个数字‘7’</p>\n<p>输入描述:<br>输入第一行一个整数T(1&lt;=T&lt;=10)<br>接下来有T组测试数据，对于每组测试数据，输入一个整数n(1&lt;=n&lt;=10000000000)<br>输出描述:<br>对于每组测试数据，输出对应答案<br>示例1<br>输入<br>2<br>1234567<br>123456<br>输出<br>1<br>0</p>\n<p><strong>思路</strong><br>这道题第一感觉就是求5和2最多组合个数，因为是从小到大递增，因子中2的个数一定永远比5的个数多所以就是求5的个数即可；<br>一开始我是先求了5的个数，没多想，只除了5就输出，结果一直是WA的，后来才发现错在哪，5的n次方中因子会有n个5，比如25有两个5，125有三个5。。。<br>所以就有了下面代码的思路，i&lt;13是来自于我对数据范围100亿以内最大的5的n次方求解得到n最高为12；即5<sup>12</sup>(=244140625)&lt;100亿&lt;5<sup>13<sup>。</sup></sup></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">\t\tll num;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;num);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">13</span>;i++)</span><br><span class=\"line\">\t\t\tsum+=num/<span class=\"built_in\">pow</span>(<span class=\"number\">5</span>,i);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>AC by....njfu-edxuanlen</p>\n"},{"title":"全排列","date":"2018-03-30T05:18:06.000Z","description":"全排列的算法(含去重)。","_content":"\n### 递归解全排列\n思想如下\n{% asset_img 2.png %}\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nchar a[3]={'a','b','c'};\nint resove(int n){\n        if(n==3){\n            for(int i=0;i<3;i++)\n            \tcout<<a[i]; \n            cout<<endl;\n            return 0;\n        }\n        for(int i=n;i<3;i++){\n            swap(a[n],a[i]);\n            resove(n+1);\n            swap(a[n],a[i]);\n        }\n}\nint main(){\n    resove(0);\n    return 0;\n}\n```\n{% asset_img 1.png %}\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nchar a[3]={'a','b','a'};\nbool same(char *a,int n,int i){\n\tfor(int j=n;j<i;j++)\n\t\tif(a[j]==a[i])\n\t\t\treturn 1;\n\treturn 0;\n}\nint resove(int n){\n        if(n==3){\n            for(int i=0;i<3;i++)\n            \tcout<<a[i]; \n            cout<<endl;\n            return 0;\n        }\n        for(int i=n;i<3;i++){\n        \tif(!same(a,n,i)){\n        \t\tswap(a[n],a[i]);\n\t            resove(n+1);\n\t            swap(a[n],a[i]);\n\t\t\t}\n        }\n}\nint main(){\n    resove(0);\n    return 0;\n}\n```\n{% asset_img 3.png %}","source":"_posts/全排列.md","raw":"---\ntitle: 全排列\ndate: 2018-03-30 13:18:06\ntags: \n\t- DFS\n\t- 递归\ncategories: C/C++\ndescription: 全排列的算法(含去重)。\n---\n\n### 递归解全排列\n思想如下\n{% asset_img 2.png %}\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nchar a[3]={'a','b','c'};\nint resove(int n){\n        if(n==3){\n            for(int i=0;i<3;i++)\n            \tcout<<a[i]; \n            cout<<endl;\n            return 0;\n        }\n        for(int i=n;i<3;i++){\n            swap(a[n],a[i]);\n            resove(n+1);\n            swap(a[n],a[i]);\n        }\n}\nint main(){\n    resove(0);\n    return 0;\n}\n```\n{% asset_img 1.png %}\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nchar a[3]={'a','b','a'};\nbool same(char *a,int n,int i){\n\tfor(int j=n;j<i;j++)\n\t\tif(a[j]==a[i])\n\t\t\treturn 1;\n\treturn 0;\n}\nint resove(int n){\n        if(n==3){\n            for(int i=0;i<3;i++)\n            \tcout<<a[i]; \n            cout<<endl;\n            return 0;\n        }\n        for(int i=n;i<3;i++){\n        \tif(!same(a,n,i)){\n        \t\tswap(a[n],a[i]);\n\t            resove(n+1);\n\t            swap(a[n],a[i]);\n\t\t\t}\n        }\n}\nint main(){\n    resove(0);\n    return 0;\n}\n```\n{% asset_img 3.png %}","slug":"全排列","published":1,"updated":"2020-02-06T22:40:22.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9a7003n24uw1rtz468q","content":"<h3 id=\"递归解全排列\"><a href=\"#递归解全排列\" class=\"headerlink\" title=\"递归解全排列\"></a>递归解全排列</h3><p>思想如下</p>\n<img src=\"/2018/03/30/全排列/2.png\">\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">3</span>]=&#123;<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">resove</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)</span><br><span class=\"line\">            \t<span class=\"built_in\">cout</span>&lt;&lt;a[i]; </span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">            swap(a[n],a[i]);</span><br><span class=\"line\">            resove(n+<span class=\"number\">1</span>);</span><br><span class=\"line\">            swap(a[n],a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    resove(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2018/03/30/全排列/1.png\">\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">3</span>]=&#123;<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'a'</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">same</span><span class=\"params\">(<span class=\"keyword\">char</span> *a,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=n;j&lt;i;j++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[j]==a[i])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">resove</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)</span><br><span class=\"line\">            \t<span class=\"built_in\">cout</span>&lt;&lt;a[i]; </span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(!same(a,n,i))&#123;</span><br><span class=\"line\">        \t\tswap(a[n],a[i]);</span><br><span class=\"line\">\t            resove(n+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t            swap(a[n],a[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    resove(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2018/03/30/全排列/3.png\">","site":{"data":{}},"excerpt":"","more":"<h3 id=\"递归解全排列\"><a href=\"#递归解全排列\" class=\"headerlink\" title=\"递归解全排列\"></a>递归解全排列</h3><p>思想如下</p>\n<img src=\"/2018/03/30/全排列/2.png\">\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">3</span>]=&#123;<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">resove</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)</span><br><span class=\"line\">            \t<span class=\"built_in\">cout</span>&lt;&lt;a[i]; </span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">            swap(a[n],a[i]);</span><br><span class=\"line\">            resove(n+<span class=\"number\">1</span>);</span><br><span class=\"line\">            swap(a[n],a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    resove(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2018/03/30/全排列/1.png\">\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">3</span>]=&#123;<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'a'</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">same</span><span class=\"params\">(<span class=\"keyword\">char</span> *a,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=n;j&lt;i;j++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[j]==a[i])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">resove</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)</span><br><span class=\"line\">            \t<span class=\"built_in\">cout</span>&lt;&lt;a[i]; </span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(!same(a,n,i))&#123;</span><br><span class=\"line\">        \t\tswap(a[n],a[i]);</span><br><span class=\"line\">\t            resove(n+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t            swap(a[n],a[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    resove(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2018/03/30/全排列/3.png\">"},{"title":"合并数字","date":"2018-03-30T01:34:20.000Z","description":"stack的使用。","_content":"\n**[题目链接!](https://nanti.jisuanke.com/t/25090)**\n题目如下：\n蒜头君得到了 n 个数，他想对这些数进行下面这样的操作，选出最左边的相邻的差的绝对值为 11 的两个数\n，只保留较小的数，删去较大的数，直到没有两个相邻的差的绝对值为 1的数，问最多可以进行多少次这样的操作？\n输入格式：\n输入第一行为一个整数 n(1≤n≤10<sup>5</sup>)，表示数字的总数。\n第二行为 n个整数 x<sub>1</sub>,x<sub>2</sub>,...,x<sub>n</sub>(0≤n≤10<sup>9</sup>)x，表示这些数。\n\n输出格式\n输出一行，为一个整数，表示蒜头君最多可以进行多少次这样的操作。\n样例输入\n4\n1 2 0 1\n样例输出\n3\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    int n,m;\n    scanf(\"%d\",&n);\n    stack<int>s;\n    for(int i=0;i<n;i++){\n    \tscanf(\"%d\",&m);\n    \twhile(!s.empty() && s.top()-m == 1)\n\t\t\ts.pop();\n    \tif(!s.empty() &&m-s.top()!=1||s.empty()) s.push(m);\n\t}\n\tprintf(\"%d\",n-s.size()); \n\treturn 0;\n}\n```\n输出结果:\n{% asset_img 1.png %}","source":"_posts/合并数字.md","raw":"---\ntitle: 合并数字\ndate: 2018-03-30 09:34:20\ntags: \n\t- C/C++题目\n\t- 栈\ncategories: C/C++\ndescription: stack的使用。\n---\n\n**[题目链接!](https://nanti.jisuanke.com/t/25090)**\n题目如下：\n蒜头君得到了 n 个数，他想对这些数进行下面这样的操作，选出最左边的相邻的差的绝对值为 11 的两个数\n，只保留较小的数，删去较大的数，直到没有两个相邻的差的绝对值为 1的数，问最多可以进行多少次这样的操作？\n输入格式：\n输入第一行为一个整数 n(1≤n≤10<sup>5</sup>)，表示数字的总数。\n第二行为 n个整数 x<sub>1</sub>,x<sub>2</sub>,...,x<sub>n</sub>(0≤n≤10<sup>9</sup>)x，表示这些数。\n\n输出格式\n输出一行，为一个整数，表示蒜头君最多可以进行多少次这样的操作。\n样例输入\n4\n1 2 0 1\n样例输出\n3\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    int n,m;\n    scanf(\"%d\",&n);\n    stack<int>s;\n    for(int i=0;i<n;i++){\n    \tscanf(\"%d\",&m);\n    \twhile(!s.empty() && s.top()-m == 1)\n\t\t\ts.pop();\n    \tif(!s.empty() &&m-s.top()!=1||s.empty()) s.push(m);\n\t}\n\tprintf(\"%d\",n-s.size()); \n\treturn 0;\n}\n```\n输出结果:\n{% asset_img 1.png %}","slug":"合并数字","published":1,"updated":"2020-02-06T22:40:22.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9a9003q24uwrwa2z2uo","content":"<p><strong><a href=\"https://nanti.jisuanke.com/t/25090\" target=\"_blank\" rel=\"noopener\">题目链接!</a></strong><br>题目如下：<br>蒜头君得到了 n 个数，他想对这些数进行下面这样的操作，选出最左边的相邻的差的绝对值为 11 的两个数<br>，只保留较小的数，删去较大的数，直到没有两个相邻的差的绝对值为 1的数，问最多可以进行多少次这样的操作？<br>输入格式：<br>输入第一行为一个整数 n(1≤n≤10<sup>5</sup>)，表示数字的总数。<br>第二行为 n个整数 x<sub>1</sub>,x<sub>2</sub>,…,x<sub>n</sub>(0≤n≤10<sup>9</sup>)x，表示这些数。</p>\n<p>输出格式<br>输出一行，为一个整数，表示蒜头君最多可以进行多少次这样的操作。<br>样例输入<br>4<br>1 2 0 1<br>样例输出<br>3</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt;s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;m);</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(!s.empty() &amp;&amp; s.top()-m == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\ts.pop();</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!s.empty() &amp;&amp;m-s.top()!=<span class=\"number\">1</span>||s.empty()) s.push(m);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,n-s.size()); </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果:</p>\n<img src=\"/2018/03/30/合并数字/1.png\">","site":{"data":{}},"excerpt":"","more":"<p><strong><a href=\"https://nanti.jisuanke.com/t/25090\" target=\"_blank\" rel=\"noopener\">题目链接!</a></strong><br>题目如下：<br>蒜头君得到了 n 个数，他想对这些数进行下面这样的操作，选出最左边的相邻的差的绝对值为 11 的两个数<br>，只保留较小的数，删去较大的数，直到没有两个相邻的差的绝对值为 1的数，问最多可以进行多少次这样的操作？<br>输入格式：<br>输入第一行为一个整数 n(1≤n≤10<sup>5</sup>)，表示数字的总数。<br>第二行为 n个整数 x<sub>1</sub>,x<sub>2</sub>,…,x<sub>n</sub>(0≤n≤10<sup>9</sup>)x，表示这些数。</p>\n<p>输出格式<br>输出一行，为一个整数，表示蒜头君最多可以进行多少次这样的操作。<br>样例输入<br>4<br>1 2 0 1<br>样例输出<br>3</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt;s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;m);</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(!s.empty() &amp;&amp; s.top()-m == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\ts.pop();</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!s.empty() &amp;&amp;m-s.top()!=<span class=\"number\">1</span>||s.empty()) s.push(m);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,n-s.size()); </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果:</p>\n<img src=\"/2018/03/30/合并数字/1.png\">"},{"title":"主席树","date":"2019-09-26T03:11:24.000Z","description":"主席树求解第k小。","top":null,"_content":"\n\n","source":"_posts/主席树.md","raw":"---\ntitle: 主席树\ndate: 2019-09-26 11:11:24\ntags:\n    - 模板\ncategories: C/C++\ndescription: 主席树求解第k小。\ntop:\n---\n\n\n","slug":"主席树","published":1,"updated":"2020-02-06T22:40:22.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9ab003t24uwg5q588c4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"最长公共子串LCS","date":"2018-03-27T00:36:12.000Z","description":"解决最长公共子序列（LCS）问题，即求字符串A，B的公共子序列LCS。","_content":"\n### 算法思路\n我们首先想到的肯定是暴力枚举法。\n先来看看：假设序列A有n 个元素，序列B有 m 个元素，那么A，B分别有2^n，2^m个子序列，\n如果任意两个子序列一一比较，比较的的子序列高达2^(m+n)对，这还没有算具体的复杂度。\n所以我们可以试试动态规划，把这个问题分解成子问题：\n求A的前i个元素和B的前j个元素之间的最长公共子序列长度。这时的空间复杂度为O(m+n)。\n**算法思想** \n1. 定义dp [i][j]：表示字符串序列A的前i个字符组成的序列Ax和字符串序列B的前j个字符组成\n的序列By之间的最长公共子序列L(i,j )的长度（m ，n分别为Ax和By的长度，i<=m,j<=n）\n2. 如果Ax [i] =By [j]，那么Ax与By之间的最长公共子序列L( i,j )的最后一项一定是这个元素，\n所以dp [i][j] = dp[i-1][j-1] + 1。\n3. 如果Ax[i] != By[j]，设LCS（i-1,j-1)是L( i -1, j-1 )的最后一个元素，\n或者L（i-1,j-1）是空序列，则 t!= Ax[i]和t!=By[j]至少有一个不成立。\n    (1). 当 LCS（i-1,j-1) != Ax[i] 时，dp[i][j]= dp[i-1][j]；\n    (2). 当 LCS（i-1,j-1) != By[j] 时，ap[i][j]= dp[i][j-1]；\n   所以dp[i][j]= max ( dp[i-1][j]，dp[i][j-1] )。\n4. 初始值为：dp[0][j] = dp[i][0] = 0.\n5. 题意要求求出任意一个最长公共子序列，这点要如何实现呢？\n   仍然考虑上面的递推式，L（i,j）的最后一个元素LCS( i，j )的来源有三种情况，定义数组flag[MAXN][MAXN]用以标记来的方向：\n   (1). dp[i][j] = dp[i-1][j-1] + 1，对应字符LCS( i-1,j-1)接上LCS( i,j)，flag[i][j] = 1,表示从斜向上左方来；\n   (2). dp[i][j] = dp[i-1][j]，对应字符LCS（i-1,j）接上LCS（i,j），flag[i][j] = 2,表示从/上方过来；\n   (3). dp[i][j] = dp[i][j-1]，对应字符LCS（I,j-1）接上LCS（i,j），flag[i][j] = 3,表示从左方过来。\n    **我们只要在计算dp[i][j]时根据来源进行不同的标记，回溯就可以找到一个最长公共子序列。**\n{% asset_img lcs.png LCS示意图 %}\n```C++\n#include<bits/stdc++.h>\nchar a[500],b[500];\nint lcs[501][501]; \t///记录中间结果的数组\nint flag[501][501];    ///标记数组，用于标识下标的走向，构造出公共子序列\nvoid LCS(){ ///动态规划求解\n    int i,j;\n    for(i=1;i<=strlen(a);i++)\n        for(j=1;j<=strlen(b);j++)\n            if(a[i-1]==b[j-1]){\n                lcs[i][j]=lcs[i-1][j-1]+1;\n                flag[i][j]=1;  ///斜向下标记\n            }\n            else if(lcs[i][j-1]>lcs[i-1][j]) {\n                lcs[i][j]=lcs[i][j-1];\n                flag[i][j]=2;  ///向右标记\n            }\n            else {\n                lcs[i][j]=lcs[i-1][j];\n                flag[i][j]=3;  ///向下标记\n            }\n}\nvoid getLCS(){///采用倒推方式求最长公共子序列\n    char res[500];\n    int i=strlen(a);\n    int j=strlen(b);\n    int k=0;    ///用于保存结果的数组标志位\n    while(i>0 && j>0){\n        if(flag[i][j]==1){     ///如果是斜向下标记\n            res[k]=a[--i];\n            k++;\n            j--;\n        }\n        else if(flag[i][j]==2)  ///如果是向右标记\n            j--;\n        else if(flag[i][j]==3)  ///如果是向下标记\n            i--;\n    }\n    for(i=k-1;i>=0;i--)\n        printf(\"%c\",res[i]);\n}\nint main(){\n    int i;\n    strcpy(a,\"ABCBDAB\");\n    strcpy(b,\"BDCABA\");\n    memset(lcs,0,sizeof(lcs));\n    memset(flag,0,sizeof(flag));\n    LCS();\n    printf(\"%d\\n\",lcs[strlen(a)][strlen(b)]);\n    getLCS();\n    return 0;\n}\n```\n运行结果:\n{% asset_img lcs1.png %}\n","source":"_posts/最长公共子串LCS.md","raw":"---\ntitle: 最长公共子串LCS\ndate: 2018-03-27 08:36:12\ntags: 动态规划\ncategories: C/C++\ndescription: 解决最长公共子序列（LCS）问题，即求字符串A，B的公共子序列LCS。\n---\n\n### 算法思路\n我们首先想到的肯定是暴力枚举法。\n先来看看：假设序列A有n 个元素，序列B有 m 个元素，那么A，B分别有2^n，2^m个子序列，\n如果任意两个子序列一一比较，比较的的子序列高达2^(m+n)对，这还没有算具体的复杂度。\n所以我们可以试试动态规划，把这个问题分解成子问题：\n求A的前i个元素和B的前j个元素之间的最长公共子序列长度。这时的空间复杂度为O(m+n)。\n**算法思想** \n1. 定义dp [i][j]：表示字符串序列A的前i个字符组成的序列Ax和字符串序列B的前j个字符组成\n的序列By之间的最长公共子序列L(i,j )的长度（m ，n分别为Ax和By的长度，i<=m,j<=n）\n2. 如果Ax [i] =By [j]，那么Ax与By之间的最长公共子序列L( i,j )的最后一项一定是这个元素，\n所以dp [i][j] = dp[i-1][j-1] + 1。\n3. 如果Ax[i] != By[j]，设LCS（i-1,j-1)是L( i -1, j-1 )的最后一个元素，\n或者L（i-1,j-1）是空序列，则 t!= Ax[i]和t!=By[j]至少有一个不成立。\n    (1). 当 LCS（i-1,j-1) != Ax[i] 时，dp[i][j]= dp[i-1][j]；\n    (2). 当 LCS（i-1,j-1) != By[j] 时，ap[i][j]= dp[i][j-1]；\n   所以dp[i][j]= max ( dp[i-1][j]，dp[i][j-1] )。\n4. 初始值为：dp[0][j] = dp[i][0] = 0.\n5. 题意要求求出任意一个最长公共子序列，这点要如何实现呢？\n   仍然考虑上面的递推式，L（i,j）的最后一个元素LCS( i，j )的来源有三种情况，定义数组flag[MAXN][MAXN]用以标记来的方向：\n   (1). dp[i][j] = dp[i-1][j-1] + 1，对应字符LCS( i-1,j-1)接上LCS( i,j)，flag[i][j] = 1,表示从斜向上左方来；\n   (2). dp[i][j] = dp[i-1][j]，对应字符LCS（i-1,j）接上LCS（i,j），flag[i][j] = 2,表示从/上方过来；\n   (3). dp[i][j] = dp[i][j-1]，对应字符LCS（I,j-1）接上LCS（i,j），flag[i][j] = 3,表示从左方过来。\n    **我们只要在计算dp[i][j]时根据来源进行不同的标记，回溯就可以找到一个最长公共子序列。**\n{% asset_img lcs.png LCS示意图 %}\n```C++\n#include<bits/stdc++.h>\nchar a[500],b[500];\nint lcs[501][501]; \t///记录中间结果的数组\nint flag[501][501];    ///标记数组，用于标识下标的走向，构造出公共子序列\nvoid LCS(){ ///动态规划求解\n    int i,j;\n    for(i=1;i<=strlen(a);i++)\n        for(j=1;j<=strlen(b);j++)\n            if(a[i-1]==b[j-1]){\n                lcs[i][j]=lcs[i-1][j-1]+1;\n                flag[i][j]=1;  ///斜向下标记\n            }\n            else if(lcs[i][j-1]>lcs[i-1][j]) {\n                lcs[i][j]=lcs[i][j-1];\n                flag[i][j]=2;  ///向右标记\n            }\n            else {\n                lcs[i][j]=lcs[i-1][j];\n                flag[i][j]=3;  ///向下标记\n            }\n}\nvoid getLCS(){///采用倒推方式求最长公共子序列\n    char res[500];\n    int i=strlen(a);\n    int j=strlen(b);\n    int k=0;    ///用于保存结果的数组标志位\n    while(i>0 && j>0){\n        if(flag[i][j]==1){     ///如果是斜向下标记\n            res[k]=a[--i];\n            k++;\n            j--;\n        }\n        else if(flag[i][j]==2)  ///如果是向右标记\n            j--;\n        else if(flag[i][j]==3)  ///如果是向下标记\n            i--;\n    }\n    for(i=k-1;i>=0;i--)\n        printf(\"%c\",res[i]);\n}\nint main(){\n    int i;\n    strcpy(a,\"ABCBDAB\");\n    strcpy(b,\"BDCABA\");\n    memset(lcs,0,sizeof(lcs));\n    memset(flag,0,sizeof(flag));\n    LCS();\n    printf(\"%d\\n\",lcs[strlen(a)][strlen(b)]);\n    getLCS();\n    return 0;\n}\n```\n运行结果:\n{% asset_img lcs1.png %}\n","slug":"最长公共子串LCS","published":1,"updated":"2020-02-06T22:40:22.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9ad003x24uwby3oiz0j","content":"<h3 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h3><p>我们首先想到的肯定是暴力枚举法。<br>先来看看：假设序列A有n 个元素，序列B有 m 个元素，那么A，B分别有2^n，2^m个子序列，<br>如果任意两个子序列一一比较，比较的的子序列高达2^(m+n)对，这还没有算具体的复杂度。<br>所以我们可以试试动态规划，把这个问题分解成子问题：<br>求A的前i个元素和B的前j个元素之间的最长公共子序列长度。这时的空间复杂度为O(m+n)。<br><strong>算法思想</strong> </p>\n<ol>\n<li>定义dp [i][j]：表示字符串序列A的前i个字符组成的序列Ax和字符串序列B的前j个字符组成<br>的序列By之间的最长公共子序列L(i,j )的长度（m ，n分别为Ax和By的长度，i&lt;=m,j&lt;=n）</li>\n<li>如果Ax [i] =By [j]，那么Ax与By之间的最长公共子序列L( i,j )的最后一项一定是这个元素，<br>所以dp [i][j] = dp[i-1][j-1] + 1。</li>\n<li>如果Ax[i] != By[j]，设LCS（i-1,j-1)是L( i -1, j-1 )的最后一个元素，<br>或者L（i-1,j-1）是空序列，则 t!= Ax[i]和t!=By[j]至少有一个不成立。<br> (1). 当 LCS（i-1,j-1) != Ax[i] 时，dp[i][j]= dp[i-1][j]；<br> (2). 当 LCS（i-1,j-1) != By[j] 时，ap[i][j]= dp[i][j-1]；<br>所以dp[i][j]= max ( dp[i-1][j]，dp[i][j-1] )。</li>\n<li>初始值为：dp[0][j] = dp[i][0] = 0.</li>\n<li>题意要求求出任意一个最长公共子序列，这点要如何实现呢？<br>仍然考虑上面的递推式，L（i,j）的最后一个元素LCS( i，j )的来源有三种情况，定义数组flag[MAXN][MAXN]用以标记来的方向：<br>(1). dp[i][j] = dp[i-1][j-1] + 1，对应字符LCS( i-1,j-1)接上LCS( i,j)，flag[i][j] = 1,表示从斜向上左方来；<br>(2). dp[i][j] = dp[i-1][j]，对应字符LCS（i-1,j）接上LCS（i,j），flag[i][j] = 2,表示从/上方过来；<br>(3). dp[i][j] = dp[i][j-1]，对应字符LCS（I,j-1）接上LCS（i,j），flag[i][j] = 3,表示从左方过来。<br> <strong>我们只要在计算dp[i][j]时根据来源进行不同的标记，回溯就可以找到一个最长公共子序列。</strong><img src=\"/2018/03/27/最长公共子串LCS/lcs.png\" title=\"LCS示意图\">\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">500</span>],b[<span class=\"number\">500</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> lcs[<span class=\"number\">501</span>][<span class=\"number\">501</span>]; \t<span class=\"comment\">///记录中间结果的数组</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> flag[<span class=\"number\">501</span>][<span class=\"number\">501</span>];    <span class=\"comment\">///标记数组，用于标识下标的走向，构造出公共子序列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LCS</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">///动态规划求解</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=<span class=\"built_in\">strlen</span>(a);i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;j&lt;=<span class=\"built_in\">strlen</span>(b);j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i<span class=\"number\">-1</span>]==b[j<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">                lcs[i][j]=lcs[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                flag[i][j]=<span class=\"number\">1</span>;  <span class=\"comment\">///斜向下标记</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(lcs[i][j<span class=\"number\">-1</span>]&gt;lcs[i<span class=\"number\">-1</span>][j]) &#123;</span><br><span class=\"line\">                lcs[i][j]=lcs[i][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">                flag[i][j]=<span class=\"number\">2</span>;  <span class=\"comment\">///向右标记</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                lcs[i][j]=lcs[i<span class=\"number\">-1</span>][j];</span><br><span class=\"line\">                flag[i][j]=<span class=\"number\">3</span>;  <span class=\"comment\">///向下标记</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getLCS</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">///采用倒推方式求最长公共子序列</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> res[<span class=\"number\">500</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"built_in\">strlen</span>(a);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j=<span class=\"built_in\">strlen</span>(b);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;    <span class=\"comment\">///用于保存结果的数组标志位</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&gt;<span class=\"number\">0</span> &amp;&amp; j&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag[i][j]==<span class=\"number\">1</span>)&#123;     <span class=\"comment\">///如果是斜向下标记</span></span><br><span class=\"line\">            res[k]=a[--i];</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(flag[i][j]==<span class=\"number\">2</span>)  <span class=\"comment\">///如果是向右标记</span></span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(flag[i][j]==<span class=\"number\">3</span>)  <span class=\"comment\">///如果是向下标记</span></span><br><span class=\"line\">            i--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=k<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,res[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(a,<span class=\"string\">\"ABCBDAB\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(b,<span class=\"string\">\"BDCABA\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(lcs,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(lcs));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(flag,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(flag));</span><br><span class=\"line\">    LCS();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,lcs[<span class=\"built_in\">strlen</span>(a)][<span class=\"built_in\">strlen</span>(b)]);</span><br><span class=\"line\">    getLCS();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>运行结果:</p>\n<img src=\"/2018/03/27/最长公共子串LCS/lcs1.png\">\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h3><p>我们首先想到的肯定是暴力枚举法。<br>先来看看：假设序列A有n 个元素，序列B有 m 个元素，那么A，B分别有2^n，2^m个子序列，<br>如果任意两个子序列一一比较，比较的的子序列高达2^(m+n)对，这还没有算具体的复杂度。<br>所以我们可以试试动态规划，把这个问题分解成子问题：<br>求A的前i个元素和B的前j个元素之间的最长公共子序列长度。这时的空间复杂度为O(m+n)。<br><strong>算法思想</strong> </p>\n<ol>\n<li>定义dp [i][j]：表示字符串序列A的前i个字符组成的序列Ax和字符串序列B的前j个字符组成<br>的序列By之间的最长公共子序列L(i,j )的长度（m ，n分别为Ax和By的长度，i&lt;=m,j&lt;=n）</li>\n<li>如果Ax [i] =By [j]，那么Ax与By之间的最长公共子序列L( i,j )的最后一项一定是这个元素，<br>所以dp [i][j] = dp[i-1][j-1] + 1。</li>\n<li>如果Ax[i] != By[j]，设LCS（i-1,j-1)是L( i -1, j-1 )的最后一个元素，<br>或者L（i-1,j-1）是空序列，则 t!= Ax[i]和t!=By[j]至少有一个不成立。<br> (1). 当 LCS（i-1,j-1) != Ax[i] 时，dp[i][j]= dp[i-1][j]；<br> (2). 当 LCS（i-1,j-1) != By[j] 时，ap[i][j]= dp[i][j-1]；<br>所以dp[i][j]= max ( dp[i-1][j]，dp[i][j-1] )。</li>\n<li>初始值为：dp[0][j] = dp[i][0] = 0.</li>\n<li>题意要求求出任意一个最长公共子序列，这点要如何实现呢？<br>仍然考虑上面的递推式，L（i,j）的最后一个元素LCS( i，j )的来源有三种情况，定义数组flag[MAXN][MAXN]用以标记来的方向：<br>(1). dp[i][j] = dp[i-1][j-1] + 1，对应字符LCS( i-1,j-1)接上LCS( i,j)，flag[i][j] = 1,表示从斜向上左方来；<br>(2). dp[i][j] = dp[i-1][j]，对应字符LCS（i-1,j）接上LCS（i,j），flag[i][j] = 2,表示从/上方过来；<br>(3). dp[i][j] = dp[i][j-1]，对应字符LCS（I,j-1）接上LCS（i,j），flag[i][j] = 3,表示从左方过来。<br> <strong>我们只要在计算dp[i][j]时根据来源进行不同的标记，回溯就可以找到一个最长公共子序列。</strong><img src=\"/2018/03/27/最长公共子串LCS/lcs.png\" title=\"LCS示意图\">\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">500</span>],b[<span class=\"number\">500</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> lcs[<span class=\"number\">501</span>][<span class=\"number\">501</span>]; \t<span class=\"comment\">///记录中间结果的数组</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> flag[<span class=\"number\">501</span>][<span class=\"number\">501</span>];    <span class=\"comment\">///标记数组，用于标识下标的走向，构造出公共子序列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LCS</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">///动态规划求解</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=<span class=\"built_in\">strlen</span>(a);i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;j&lt;=<span class=\"built_in\">strlen</span>(b);j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i<span class=\"number\">-1</span>]==b[j<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">                lcs[i][j]=lcs[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                flag[i][j]=<span class=\"number\">1</span>;  <span class=\"comment\">///斜向下标记</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(lcs[i][j<span class=\"number\">-1</span>]&gt;lcs[i<span class=\"number\">-1</span>][j]) &#123;</span><br><span class=\"line\">                lcs[i][j]=lcs[i][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">                flag[i][j]=<span class=\"number\">2</span>;  <span class=\"comment\">///向右标记</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                lcs[i][j]=lcs[i<span class=\"number\">-1</span>][j];</span><br><span class=\"line\">                flag[i][j]=<span class=\"number\">3</span>;  <span class=\"comment\">///向下标记</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getLCS</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">///采用倒推方式求最长公共子序列</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> res[<span class=\"number\">500</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"built_in\">strlen</span>(a);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j=<span class=\"built_in\">strlen</span>(b);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;    <span class=\"comment\">///用于保存结果的数组标志位</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&gt;<span class=\"number\">0</span> &amp;&amp; j&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag[i][j]==<span class=\"number\">1</span>)&#123;     <span class=\"comment\">///如果是斜向下标记</span></span><br><span class=\"line\">            res[k]=a[--i];</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(flag[i][j]==<span class=\"number\">2</span>)  <span class=\"comment\">///如果是向右标记</span></span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(flag[i][j]==<span class=\"number\">3</span>)  <span class=\"comment\">///如果是向下标记</span></span><br><span class=\"line\">            i--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=k<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,res[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(a,<span class=\"string\">\"ABCBDAB\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(b,<span class=\"string\">\"BDCABA\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(lcs,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(lcs));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(flag,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(flag));</span><br><span class=\"line\">    LCS();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,lcs[<span class=\"built_in\">strlen</span>(a)][<span class=\"built_in\">strlen</span>(b)]);</span><br><span class=\"line\">    getLCS();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>运行结果:</p>\n<img src=\"/2018/03/27/最长公共子串LCS/lcs1.png\">\n"},{"title":"最长递增序列LIS(n^2和nlog2n)","date":"2018-03-26T16:33:00.000Z","description":"给出一个数列，找出其中最长的单调递增子序列。O(n<sup>2</sup>)和O(nlog<sub>2</sub>n)两种方法。","_content":"\n### 例题：\n>LIS是最长上升子序列。什么是最长上升子序列？ \n>就是给你一个序列，请你在其中求出一段最长严格上升的部分，它不一定要连续。\n>就像这样：2, 3, 4, 7 和 2, 3, 4, 6 \n>就是序列 2 5 3 4 1 7 6 的两个上升子序列，最长的长度是 4。\n\n### O(n<sup>2</sup>)的方法:\n对于每一个数，他都是在“可以接下去”的中，从前面的最优值+1转移而来。\n{% asset_img LIS.png LIS最优 %}\n代码示例如下：\n\n```C++\n#include<iostream>\n#include<cstring>\nusing namespace std;\nint f[10000], b[10000];\nint lis(int n) {\n    memset(f, 0, sizeof f);\n    int res = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j)\n            if (b[j] < b[i]) {\n                f[i]=max(f[i],f[j]+1);\n        res = max(res, f[i]);\n    }\n    return res+1;\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%d\", b + i);\n    }\n    printf(\"%d\\n\", lis(n));\n    return 0;\n}\n```\n\n### O(nlog<sub>2</sub>n)的方法:\n我们回想一下，在上面O(n<sup>2</sup>)的程序中，哪些地方看起来比较费时？\n没错，就是内层用于更新i的循环。因为每一次他都要查找一遍，效率并不高。\n回到题目，我们发现，他只要我们求长度，所以，我们可以模拟一个栈。\n所以每遇到一个比栈顶元素大的数，就放进栈里，遇到比栈顶元素小的就二分查找前边的元素，\n找到一个“最应该被换掉的元素”，用新数去更新前边的元素。\n这个算法不难证明也是正确的。因为前面每一次的枚举都换成了二分，\n内层的复杂度从n降到了log<sub>2</sub>n，外层不变。所以总的复杂度是O(nlog<sub>2</sub>n)。\nlis代码:\n\n```C++\nint lis(int n) {\n     f[0]=b[0];\n    int len=0;\n    for(int i=1;i<n;i++)\n    {\n        if(b[i]>f[len])\n            f[++len]=b[i];\n        else\n        {\n            int j=lower_bound(f,f+len,b[i])-f;\n            f[j]=b[i]; \n           // for(int k=0;k<len;k++)    \n           // \tprintf(\"%d \",f[k]);\n        }\n       // printf(\"\\n\");\n    }\n   return len+1;  \n}\n```\n注释的代码是为了更好的理解这个算法。\n\n\n\n\n","source":"_posts/最长递增序列LIS(n^2和nlog2n).md","raw":"---\ntitle: 最长递增序列LIS(n^2和nlog2n)\ndate: 2018-03-27 00:33:00\ntags: 动态规划\ncategories: C/C++\ndescription: 给出一个数列，找出其中最长的单调递增子序列。O(n<sup>2</sup>)和O(nlog<sub>2</sub>n)两种方法。\n---\n\n### 例题：\n>LIS是最长上升子序列。什么是最长上升子序列？ \n>就是给你一个序列，请你在其中求出一段最长严格上升的部分，它不一定要连续。\n>就像这样：2, 3, 4, 7 和 2, 3, 4, 6 \n>就是序列 2 5 3 4 1 7 6 的两个上升子序列，最长的长度是 4。\n\n### O(n<sup>2</sup>)的方法:\n对于每一个数，他都是在“可以接下去”的中，从前面的最优值+1转移而来。\n{% asset_img LIS.png LIS最优 %}\n代码示例如下：\n\n```C++\n#include<iostream>\n#include<cstring>\nusing namespace std;\nint f[10000], b[10000];\nint lis(int n) {\n    memset(f, 0, sizeof f);\n    int res = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j)\n            if (b[j] < b[i]) {\n                f[i]=max(f[i],f[j]+1);\n        res = max(res, f[i]);\n    }\n    return res+1;\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%d\", b + i);\n    }\n    printf(\"%d\\n\", lis(n));\n    return 0;\n}\n```\n\n### O(nlog<sub>2</sub>n)的方法:\n我们回想一下，在上面O(n<sup>2</sup>)的程序中，哪些地方看起来比较费时？\n没错，就是内层用于更新i的循环。因为每一次他都要查找一遍，效率并不高。\n回到题目，我们发现，他只要我们求长度，所以，我们可以模拟一个栈。\n所以每遇到一个比栈顶元素大的数，就放进栈里，遇到比栈顶元素小的就二分查找前边的元素，\n找到一个“最应该被换掉的元素”，用新数去更新前边的元素。\n这个算法不难证明也是正确的。因为前面每一次的枚举都换成了二分，\n内层的复杂度从n降到了log<sub>2</sub>n，外层不变。所以总的复杂度是O(nlog<sub>2</sub>n)。\nlis代码:\n\n```C++\nint lis(int n) {\n     f[0]=b[0];\n    int len=0;\n    for(int i=1;i<n;i++)\n    {\n        if(b[i]>f[len])\n            f[++len]=b[i];\n        else\n        {\n            int j=lower_bound(f,f+len,b[i])-f;\n            f[j]=b[i]; \n           // for(int k=0;k<len;k++)    \n           // \tprintf(\"%d \",f[k]);\n        }\n       // printf(\"\\n\");\n    }\n   return len+1;  \n}\n```\n注释的代码是为了更好的理解这个算法。\n\n\n\n\n","slug":"最长递增序列LIS(n^2和nlog2n)","published":1,"updated":"2020-02-06T22:40:22.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9ag004124uwac7xgklb","content":"<h3 id=\"例题：\"><a href=\"#例题：\" class=\"headerlink\" title=\"例题：\"></a>例题：</h3><blockquote>\n<p>LIS是最长上升子序列。什么是最长上升子序列？<br>就是给你一个序列，请你在其中求出一段最长严格上升的部分，它不一定要连续。<br>就像这样：2, 3, 4, 7 和 2, 3, 4, 6<br>就是序列 2 5 3 4 1 7 6 的两个上升子序列，最长的长度是 4。</p>\n</blockquote>\n<h3 id=\"O-n2-的方法\"><a href=\"#O-n2-的方法\" class=\"headerlink\" title=\"O(n2)的方法:\"></a>O(n<sup>2</sup>)的方法:</h3><p>对于每一个数，他都是在“可以接下去”的中，从前面的最优值+1转移而来。</p>\n<img src=\"/2018/03/27/最长递增序列LIS(n%5E2和nlog2n)/LIS.png\" title=\"LIS最优\">\n<p>代码示例如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">10000</span>], b[<span class=\"number\">10000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lis</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(f, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> f);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b[j] &lt; b[i]) &#123;</span><br><span class=\"line\">                f[i]=max(f[i],f[j]+<span class=\"number\">1</span>);</span><br><span class=\"line\">        res = max(res, f[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, b + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, lis(n));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"O-nlog2n-的方法\"><a href=\"#O-nlog2n-的方法\" class=\"headerlink\" title=\"O(nlog2n)的方法:\"></a>O(nlog<sub>2</sub>n)的方法:</h3><p>我们回想一下，在上面O(n<sup>2</sup>)的程序中，哪些地方看起来比较费时？<br>没错，就是内层用于更新i的循环。因为每一次他都要查找一遍，效率并不高。<br>回到题目，我们发现，他只要我们求长度，所以，我们可以模拟一个栈。<br>所以每遇到一个比栈顶元素大的数，就放进栈里，遇到比栈顶元素小的就二分查找前边的元素，<br>找到一个“最应该被换掉的元素”，用新数去更新前边的元素。<br>这个算法不难证明也是正确的。因为前面每一次的枚举都换成了二分，<br>内层的复杂度从n降到了log<sub>2</sub>n，外层不变。所以总的复杂度是O(nlog<sub>2</sub>n)。<br>lis代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lis</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">     f[<span class=\"number\">0</span>]=b[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[i]&gt;f[len])</span><br><span class=\"line\">            f[++len]=b[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j=lower_bound(f,f+len,b[i])-f;</span><br><span class=\"line\">            f[j]=b[i]; </span><br><span class=\"line\">           <span class=\"comment\">// for(int k=0;k&lt;len;k++)    </span></span><br><span class=\"line\">           <span class=\"comment\">// \tprintf(\"%d \",f[k]);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       <span class=\"comment\">// printf(\"\\n\");</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> len+<span class=\"number\">1</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注释的代码是为了更好的理解这个算法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"例题：\"><a href=\"#例题：\" class=\"headerlink\" title=\"例题：\"></a>例题：</h3><blockquote>\n<p>LIS是最长上升子序列。什么是最长上升子序列？<br>就是给你一个序列，请你在其中求出一段最长严格上升的部分，它不一定要连续。<br>就像这样：2, 3, 4, 7 和 2, 3, 4, 6<br>就是序列 2 5 3 4 1 7 6 的两个上升子序列，最长的长度是 4。</p>\n</blockquote>\n<h3 id=\"O-n2-的方法\"><a href=\"#O-n2-的方法\" class=\"headerlink\" title=\"O(n2)的方法:\"></a>O(n<sup>2</sup>)的方法:</h3><p>对于每一个数，他都是在“可以接下去”的中，从前面的最优值+1转移而来。</p>\n<img src=\"/2018/03/27/最长递增序列LIS(n%5E2和nlog2n)/LIS.png\" title=\"LIS最优\">\n<p>代码示例如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">10000</span>], b[<span class=\"number\">10000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lis</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(f, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> f);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b[j] &lt; b[i]) &#123;</span><br><span class=\"line\">                f[i]=max(f[i],f[j]+<span class=\"number\">1</span>);</span><br><span class=\"line\">        res = max(res, f[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, b + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, lis(n));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"O-nlog2n-的方法\"><a href=\"#O-nlog2n-的方法\" class=\"headerlink\" title=\"O(nlog2n)的方法:\"></a>O(nlog<sub>2</sub>n)的方法:</h3><p>我们回想一下，在上面O(n<sup>2</sup>)的程序中，哪些地方看起来比较费时？<br>没错，就是内层用于更新i的循环。因为每一次他都要查找一遍，效率并不高。<br>回到题目，我们发现，他只要我们求长度，所以，我们可以模拟一个栈。<br>所以每遇到一个比栈顶元素大的数，就放进栈里，遇到比栈顶元素小的就二分查找前边的元素，<br>找到一个“最应该被换掉的元素”，用新数去更新前边的元素。<br>这个算法不难证明也是正确的。因为前面每一次的枚举都换成了二分，<br>内层的复杂度从n降到了log<sub>2</sub>n，外层不变。所以总的复杂度是O(nlog<sub>2</sub>n)。<br>lis代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lis</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">     f[<span class=\"number\">0</span>]=b[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[i]&gt;f[len])</span><br><span class=\"line\">            f[++len]=b[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j=lower_bound(f,f+len,b[i])-f;</span><br><span class=\"line\">            f[j]=b[i]; </span><br><span class=\"line\">           <span class=\"comment\">// for(int k=0;k&lt;len;k++)    </span></span><br><span class=\"line\">           <span class=\"comment\">// \tprintf(\"%d \",f[k]);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       <span class=\"comment\">// printf(\"\\n\");</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> len+<span class=\"number\">1</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注释的代码是为了更好的理解这个算法。</p>\n"},{"title":"棋盘问题","date":"2018-03-31T12:17:15.000Z","description":"简单的深度搜索(DFS)问题：在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。","_content":"[原题链接](http://poj.org/problem?id=1321)\n### 题目内容\n>**Description**\n在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。\n<br>\n**Input**\n输入含有多组测试数据。 \n每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n*n的矩阵内描述棋盘，以及摆放棋子的数目。 n <= 8 , k <= n \n当为-1 -1时表示输入结束。 \n随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。 \n<br>\n**Output**\n对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C<2^31）。\n\n>**Sample Input**\n<br>\n2 1\n\\#.\n.#\n4 4\n...#\n..#.\n.#..\n\\#.\\..\n-1 -1\n\n>**Sample Output**\n<br>\n2\n1\n\n题解:\n```C++\n#include<iostream>\n#include<stdio.h>\n#include<string.h>\nusing namespace std;\nint n,k,cnt;\nchar a[9][9];\nint vis[9]; \nvoid dfs(int r,int b){\n\tif(b==k)\n\t\tcnt++;\n\tfor(int i=r;i<n;i++)\n\t\tfor(int j=0;j<n;j++)\n                //判断是否在棋盘中且同列是否已经存在棋子\n                    if(a[i][j]=='#'&&!vis[j]){  \n                        vis[j]=1;    \n                        dfs(i+1,b+1);\n                        vis[j]=0;\n                    }\n}\nint main(){\n\twhile(scanf(\"%d %d\",&n,&k),n!=-1){\n\t\tmemset(a,0,sizeof(a));\n\t\tgetchar();\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<n;j++)\n\t\t\t\ta[i][j]=getchar();\n\t\t\tgetchar();\n\t\t}\n\t\tmemset(vis,0,sizeof(vis));\n\t\tcnt=0;\n\t\tdfs(0,0);\n\t\tcout<<cnt<<endl;\n\t}\n\treturn 0;\n}\n```\n\n已AC....by edxuanlen\n\n","source":"_posts/棋盘问题.md","raw":"---\ntitle: 棋盘问题\ndate: 2018-03-31 20:17:15\ntags: \n    - DFS\ncategories: C/C++\ndescription: 简单的深度搜索(DFS)问题：在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。\n---\n[原题链接](http://poj.org/problem?id=1321)\n### 题目内容\n>**Description**\n在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。\n<br>\n**Input**\n输入含有多组测试数据。 \n每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n*n的矩阵内描述棋盘，以及摆放棋子的数目。 n <= 8 , k <= n \n当为-1 -1时表示输入结束。 \n随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。 \n<br>\n**Output**\n对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C<2^31）。\n\n>**Sample Input**\n<br>\n2 1\n\\#.\n.#\n4 4\n...#\n..#.\n.#..\n\\#.\\..\n-1 -1\n\n>**Sample Output**\n<br>\n2\n1\n\n题解:\n```C++\n#include<iostream>\n#include<stdio.h>\n#include<string.h>\nusing namespace std;\nint n,k,cnt;\nchar a[9][9];\nint vis[9]; \nvoid dfs(int r,int b){\n\tif(b==k)\n\t\tcnt++;\n\tfor(int i=r;i<n;i++)\n\t\tfor(int j=0;j<n;j++)\n                //判断是否在棋盘中且同列是否已经存在棋子\n                    if(a[i][j]=='#'&&!vis[j]){  \n                        vis[j]=1;    \n                        dfs(i+1,b+1);\n                        vis[j]=0;\n                    }\n}\nint main(){\n\twhile(scanf(\"%d %d\",&n,&k),n!=-1){\n\t\tmemset(a,0,sizeof(a));\n\t\tgetchar();\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<n;j++)\n\t\t\t\ta[i][j]=getchar();\n\t\t\tgetchar();\n\t\t}\n\t\tmemset(vis,0,sizeof(vis));\n\t\tcnt=0;\n\t\tdfs(0,0);\n\t\tcout<<cnt<<endl;\n\t}\n\treturn 0;\n}\n```\n\n已AC....by edxuanlen\n\n","slug":"棋盘问题","published":1,"updated":"2020-02-06T22:40:22.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9aj004424uw30lmxlhd","content":"<p><a href=\"http://poj.org/problem?id=1321\" target=\"_blank\" rel=\"noopener\">原题链接</a></p>\n<h3 id=\"题目内容\"><a href=\"#题目内容\" class=\"headerlink\" title=\"题目内容\"></a>题目内容</h3><blockquote>\n<p><strong>Description</strong><br>在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。<br><br><br><strong>Input</strong><br>输入含有多组测试数据。<br>每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n<em>n的矩阵内描述棋盘，以及摆放棋子的数目。 n &lt;= 8 , k &lt;= n<br>当为-1 -1时表示输入结束。<br>随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。<br><br><br>*</em>Output**<br>对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C&lt;2^31）。</p>\n</blockquote>\n<blockquote>\n<p><strong>Sample Input</strong><br><br><br>2 1<br>#.<br>.#<br>4 4<br>…#<br>..#.<br>.#..<br>#...<br>-1 -1</p>\n</blockquote>\n<blockquote>\n<p><strong>Sample Output</strong><br><br><br>2<br>1</p>\n</blockquote>\n<p>题解:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,k,cnt;</span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">9</span>][<span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[<span class=\"number\">9</span>]; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b==k)</span><br><span class=\"line\">\t\tcnt++;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=r;i&lt;n;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)</span><br><span class=\"line\">                <span class=\"comment\">//判断是否在棋盘中且同列是否已经存在棋子</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(a[i][j]==<span class=\"string\">'#'</span>&amp;&amp;!vis[j])&#123;  </span><br><span class=\"line\">                        vis[j]=<span class=\"number\">1</span>;    </span><br><span class=\"line\">                        dfs(i+<span class=\"number\">1</span>,b+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        vis[j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>,&amp;n,&amp;k),n!=<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(a,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(a));</span><br><span class=\"line\">\t\tgetchar();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)</span><br><span class=\"line\">\t\t\t\ta[i][j]=getchar();</span><br><span class=\"line\">\t\t\tgetchar();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">\t\tcnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tdfs(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;cnt&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>已AC….by edxuanlen</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://poj.org/problem?id=1321\" target=\"_blank\" rel=\"noopener\">原题链接</a></p>\n<h3 id=\"题目内容\"><a href=\"#题目内容\" class=\"headerlink\" title=\"题目内容\"></a>题目内容</h3><blockquote>\n<p><strong>Description</strong><br>在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。<br><br><br><strong>Input</strong><br>输入含有多组测试数据。<br>每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n<em>n的矩阵内描述棋盘，以及摆放棋子的数目。 n &lt;= 8 , k &lt;= n<br>当为-1 -1时表示输入结束。<br>随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。<br><br><br>*</em>Output**<br>对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C&lt;2^31）。</p>\n</blockquote>\n<blockquote>\n<p><strong>Sample Input</strong><br><br><br>2 1<br>#.<br>.#<br>4 4<br>…#<br>..#.<br>.#..<br>#...<br>-1 -1</p>\n</blockquote>\n<blockquote>\n<p><strong>Sample Output</strong><br><br><br>2<br>1</p>\n</blockquote>\n<p>题解:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,k,cnt;</span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">9</span>][<span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[<span class=\"number\">9</span>]; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(b==k)</span><br><span class=\"line\">\t\tcnt++;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=r;i&lt;n;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)</span><br><span class=\"line\">                <span class=\"comment\">//判断是否在棋盘中且同列是否已经存在棋子</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(a[i][j]==<span class=\"string\">'#'</span>&amp;&amp;!vis[j])&#123;  </span><br><span class=\"line\">                        vis[j]=<span class=\"number\">1</span>;    </span><br><span class=\"line\">                        dfs(i+<span class=\"number\">1</span>,b+<span class=\"number\">1</span>);</span><br><span class=\"line\">                        vis[j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>,&amp;n,&amp;k),n!=<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(a,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(a));</span><br><span class=\"line\">\t\tgetchar();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)</span><br><span class=\"line\">\t\t\t\ta[i][j]=getchar();</span><br><span class=\"line\">\t\t\tgetchar();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">\t\tcnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tdfs(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;cnt&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>已AC….by edxuanlen</p>\n"},{"title":"线段树模板","date":"2019-09-23T00:22:37.000Z","description":"线段树的模板。","top":null,"_content":"\n\n## 线段树区域加模板\n\n```C++\n# include <bits/stdc++.h>\n# define ls (p << 1)\n# define rs (p << 1 | 1)\n\n\nusing namespace std;\n\nconst int MAXN = 100010;\nint n;\ntypedef long long ll;\n\nint a[MAXN + 2];\n\nstruct tree{\n    int l, r;\n    ll pre, add;\n}t[4 * MAXN + 2];\n\ninline void build(int p, int l, int r){\n    t[p].l = l; t[p].r = r;\n    if (l == r){\n        t[p].pre = a[l];\n        return ;\n    }\n    int mid = l + r >> 1;\n    build (ls, l, mid);\n    build (rs, mid + 1, r);\n    t[p].pre = t[ls].pre + t[rs].pre;\n}\n\ninline void spread(int p){ // 向下传递懒标记\n    if(t[p].add){\n        t[ls].pre += t[p].add * (t[ls].r - t[ls].l + 1);\n        t[rs].pre += t[p].add * (t[rs].r - t[rs].l + 1);\n        t[ls].add += t[p].add;\n        t[rs].add += t[p].add;\n        t[p].add = 0;\n    }\n}\n\ninline void change(int p, int x, int y, int z){\n    if(x <= t[p].l && y >= t[p].r){  // 覆盖\n        t[p].pre += (ll)z * (t[p].r - t[p].l + 1);\n        t[p].add += z;\n        return ;\n    }\n    spread(p);\n    int mid = t[p].l + t[p].r >> 1;\n    if(x <= mid ) change (ls, x, y, z);\n    if(y > mid ) change (rs, x, y, z);\n    t[p].pre = t[ls].pre + t[rs].pre;\n}\n\ninline ll ask(int p, int x, int y){\n    if(x <= t[p].l && y >= t[p].r) return t[p].pre;\n    spread(p);\n    int mid = t[p].l + t[p].r >> 1;\n    ll ans = 0;\n    if( x <= mid ) ans += ask(ls, x, y);\n    if( y > mid ) ans += ask(rs, x, y);\n    return ans;\n}\n\nint main(){\n    ios::sync_with_stdio(false);\n    int n, m;\n    cin >> n >> m;\n    int s, x, y, k;\n    for(int i = 1; i <= n; i ++) cin >> a[i];\n    build(1, 1, n);\n    while ( m -- ){\n        cin >> s;\n        if( s == 1 ){\n            cin >> x >> y >> k;\n            change(1, x, y, k);\n            // cout << ask(1,1,n) << \"\\n\" ;\n        } else {\n            cin >> x >> y;\n            cout << ask(1, x, y) << \"\\n\";\n        }\n    }\n    return 0;\n}\n```\n\n## 线段树区间加，乘法和查询\n\n```C++\n#include <bits/stdc++.h>\n#define rs p * 2 + 1\n#define ls p * 2\nusing namespace std;\n\ntypedef long long ll;\n\nconst int MAXN = 100001;\n\nint n, m, a[MAXN];\nll mod = 0xfffffffffffffff;  // mod 注意修改\nstruct node {\n  ll sum, l, r, mul, add;\n} t[MAXN * 4 + 1];\n\nint read() {\n  ll x = 0;\n  char ch = getchar();\n  while (ch < '0' || ch > '9')\n    ch = getchar();\n  while (ch >= '0' && ch <= '9')\n    x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n  return x;\n}\nvoid build(ll p, ll l, ll r) {\n  t[p].l = l, t[p].r = r;\n  t[p].mul = 1;\n  if (l == r) {\n    t[p].sum = a[l] % mod;\n    return;\n  }\n  ll mid = (l + r) >> 1;\n  build(ls, l, mid);\n  build(rs, mid + 1, r);\n  t[p].sum = (t[ls].sum + t[rs].sum) % mod;\n}\nvoid spread(ll p) {\n  t[ls].sum =\n      (ll)(t[p].mul * t[ls].sum + ((t[ls].r - t[ls].l + 1) * t[p].add) % mod) %\n      mod;\n  t[rs].sum =\n      (ll)(t[p].mul * t[rs].sum + (t[p].add * (t[rs].r - t[rs].l + 1)) % mod) %\n      mod; // add已经乘过mu啦\n\n  t[ls].mul = (ll)(t[ls].mul * t[p].mul) % mod;\n  t[rs].mul = (ll)(t[rs].mul * t[p].mul) % mod;\n\n  t[ls].add = (ll)(t[ls].add * t[p].mul + t[p].add) % mod;\n  t[rs].add = (ll)(t[rs].add * t[p].mul + t[p].add) % mod;\n\n  t[p].mul = 1, t[p].add = 0;\n}\nvoid add(ll p, ll l, ll r, ll k) {\n  if (t[p].l >= l && t[p].r <= r) {\n    t[p].add = (t[p].add + k) % mod;\n    t[p].sum = (ll)(t[p].sum + k * (t[p].r - t[p].l + 1)) % mod;\n    return;\n  }\n  spread(p);\n  t[p].sum = (t[ls].sum + t[rs].sum) % mod;\n  ll mid = (t[p].l + t[p].r) >> 1;\n  if (l <= mid)\n    add(ls, l, r, k);\n  if (mid < r)\n    add(rs, l, r, k);\n  t[p].sum = (t[ls].sum + t[rs].sum) % mod;\n}\nvoid mul(ll p, ll l, ll r, ll k) {\n  if (t[p].l >= l && t[p].r <= r) {\n    t[p].add = (t[p].add * k) % mod;\n    t[p].mul = (t[p].mul * k) % mod;\n    t[p].sum = (t[p].sum * k) % mod;\n    return;\n  }\n  spread(p);\n  t[p].sum = t[ls].sum + t[rs].sum;\n  ll mid = (t[p].l + t[p].r) >> 1;\n  if (l <= mid)\n    mul(ls, l, r, k);\n  if (mid < r)\n    mul(rs, l, r, k);\n  t[p].sum = (t[ls].sum + t[rs].sum) % mod;\n}\nll ask(ll p, ll l, ll r) {\n  if (t[p].l >= l && t[p].r <= r) {\n    return t[p].sum;\n  }\n  spread(p);\n  ll val = 0;\n  ll mid = (t[p].l + t[p].r) >> 1;\n  if (l <= mid)\n    val = (val + ask(ls, l, r)) % mod;\n  if (mid < r)\n    val = (val + ask(rs, l, r)) % mod;\n  return val;\n}\nint main() {\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    a[i] = read();\n  }\n  build(1, 1, n);\n  for (int i = 1; i <= m; i++) {\n    int ty = read();\n    if (ty == 1) {\n      ll cn = read(), cm = read(), cw = read();\n      add(1, cn, cm, cw);\n    } else {\n      ll cn = read(), cm = read();\n      cout << ask(1, cn, cm) << endl;\n    }\n  }\n  return 0;\n}\n\n```\n\n\n","source":"_posts/线段树模板.md","raw":"---\ntitle: 线段树模板\ndate: 2019-09-23 08:22:37\ntags:\n    - 模板\ncategories: C/C++\ndescription: 线段树的模板。\ntop:\n---\n\n\n## 线段树区域加模板\n\n```C++\n# include <bits/stdc++.h>\n# define ls (p << 1)\n# define rs (p << 1 | 1)\n\n\nusing namespace std;\n\nconst int MAXN = 100010;\nint n;\ntypedef long long ll;\n\nint a[MAXN + 2];\n\nstruct tree{\n    int l, r;\n    ll pre, add;\n}t[4 * MAXN + 2];\n\ninline void build(int p, int l, int r){\n    t[p].l = l; t[p].r = r;\n    if (l == r){\n        t[p].pre = a[l];\n        return ;\n    }\n    int mid = l + r >> 1;\n    build (ls, l, mid);\n    build (rs, mid + 1, r);\n    t[p].pre = t[ls].pre + t[rs].pre;\n}\n\ninline void spread(int p){ // 向下传递懒标记\n    if(t[p].add){\n        t[ls].pre += t[p].add * (t[ls].r - t[ls].l + 1);\n        t[rs].pre += t[p].add * (t[rs].r - t[rs].l + 1);\n        t[ls].add += t[p].add;\n        t[rs].add += t[p].add;\n        t[p].add = 0;\n    }\n}\n\ninline void change(int p, int x, int y, int z){\n    if(x <= t[p].l && y >= t[p].r){  // 覆盖\n        t[p].pre += (ll)z * (t[p].r - t[p].l + 1);\n        t[p].add += z;\n        return ;\n    }\n    spread(p);\n    int mid = t[p].l + t[p].r >> 1;\n    if(x <= mid ) change (ls, x, y, z);\n    if(y > mid ) change (rs, x, y, z);\n    t[p].pre = t[ls].pre + t[rs].pre;\n}\n\ninline ll ask(int p, int x, int y){\n    if(x <= t[p].l && y >= t[p].r) return t[p].pre;\n    spread(p);\n    int mid = t[p].l + t[p].r >> 1;\n    ll ans = 0;\n    if( x <= mid ) ans += ask(ls, x, y);\n    if( y > mid ) ans += ask(rs, x, y);\n    return ans;\n}\n\nint main(){\n    ios::sync_with_stdio(false);\n    int n, m;\n    cin >> n >> m;\n    int s, x, y, k;\n    for(int i = 1; i <= n; i ++) cin >> a[i];\n    build(1, 1, n);\n    while ( m -- ){\n        cin >> s;\n        if( s == 1 ){\n            cin >> x >> y >> k;\n            change(1, x, y, k);\n            // cout << ask(1,1,n) << \"\\n\" ;\n        } else {\n            cin >> x >> y;\n            cout << ask(1, x, y) << \"\\n\";\n        }\n    }\n    return 0;\n}\n```\n\n## 线段树区间加，乘法和查询\n\n```C++\n#include <bits/stdc++.h>\n#define rs p * 2 + 1\n#define ls p * 2\nusing namespace std;\n\ntypedef long long ll;\n\nconst int MAXN = 100001;\n\nint n, m, a[MAXN];\nll mod = 0xfffffffffffffff;  // mod 注意修改\nstruct node {\n  ll sum, l, r, mul, add;\n} t[MAXN * 4 + 1];\n\nint read() {\n  ll x = 0;\n  char ch = getchar();\n  while (ch < '0' || ch > '9')\n    ch = getchar();\n  while (ch >= '0' && ch <= '9')\n    x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n  return x;\n}\nvoid build(ll p, ll l, ll r) {\n  t[p].l = l, t[p].r = r;\n  t[p].mul = 1;\n  if (l == r) {\n    t[p].sum = a[l] % mod;\n    return;\n  }\n  ll mid = (l + r) >> 1;\n  build(ls, l, mid);\n  build(rs, mid + 1, r);\n  t[p].sum = (t[ls].sum + t[rs].sum) % mod;\n}\nvoid spread(ll p) {\n  t[ls].sum =\n      (ll)(t[p].mul * t[ls].sum + ((t[ls].r - t[ls].l + 1) * t[p].add) % mod) %\n      mod;\n  t[rs].sum =\n      (ll)(t[p].mul * t[rs].sum + (t[p].add * (t[rs].r - t[rs].l + 1)) % mod) %\n      mod; // add已经乘过mu啦\n\n  t[ls].mul = (ll)(t[ls].mul * t[p].mul) % mod;\n  t[rs].mul = (ll)(t[rs].mul * t[p].mul) % mod;\n\n  t[ls].add = (ll)(t[ls].add * t[p].mul + t[p].add) % mod;\n  t[rs].add = (ll)(t[rs].add * t[p].mul + t[p].add) % mod;\n\n  t[p].mul = 1, t[p].add = 0;\n}\nvoid add(ll p, ll l, ll r, ll k) {\n  if (t[p].l >= l && t[p].r <= r) {\n    t[p].add = (t[p].add + k) % mod;\n    t[p].sum = (ll)(t[p].sum + k * (t[p].r - t[p].l + 1)) % mod;\n    return;\n  }\n  spread(p);\n  t[p].sum = (t[ls].sum + t[rs].sum) % mod;\n  ll mid = (t[p].l + t[p].r) >> 1;\n  if (l <= mid)\n    add(ls, l, r, k);\n  if (mid < r)\n    add(rs, l, r, k);\n  t[p].sum = (t[ls].sum + t[rs].sum) % mod;\n}\nvoid mul(ll p, ll l, ll r, ll k) {\n  if (t[p].l >= l && t[p].r <= r) {\n    t[p].add = (t[p].add * k) % mod;\n    t[p].mul = (t[p].mul * k) % mod;\n    t[p].sum = (t[p].sum * k) % mod;\n    return;\n  }\n  spread(p);\n  t[p].sum = t[ls].sum + t[rs].sum;\n  ll mid = (t[p].l + t[p].r) >> 1;\n  if (l <= mid)\n    mul(ls, l, r, k);\n  if (mid < r)\n    mul(rs, l, r, k);\n  t[p].sum = (t[ls].sum + t[rs].sum) % mod;\n}\nll ask(ll p, ll l, ll r) {\n  if (t[p].l >= l && t[p].r <= r) {\n    return t[p].sum;\n  }\n  spread(p);\n  ll val = 0;\n  ll mid = (t[p].l + t[p].r) >> 1;\n  if (l <= mid)\n    val = (val + ask(ls, l, r)) % mod;\n  if (mid < r)\n    val = (val + ask(rs, l, r)) % mod;\n  return val;\n}\nint main() {\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    a[i] = read();\n  }\n  build(1, 1, n);\n  for (int i = 1; i <= m; i++) {\n    int ty = read();\n    if (ty == 1) {\n      ll cn = read(), cm = read(), cw = read();\n      add(1, cn, cm, cw);\n    } else {\n      ll cn = read(), cm = read();\n      cout << ask(1, cn, cm) << endl;\n    }\n  }\n  return 0;\n}\n\n```\n\n\n","slug":"线段树模板","published":1,"updated":"2020-02-06T22:40:22.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9al004824uwcf9zhk72","content":"<h2 id=\"线段树区域加模板\"><a href=\"#线段树区域加模板\" class=\"headerlink\" title=\"线段树区域加模板\"></a>线段树区域加模板</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> ls (p &lt;&lt; 1)</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> rs (p &lt;&lt; 1 | 1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[MAXN + <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\">    ll pre, add;</span><br><span class=\"line\">&#125;t[<span class=\"number\">4</span> * MAXN + <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    t[p].l = l; t[p].r = r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == r)&#123;</span><br><span class=\"line\">        t[p].pre = a[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    build (ls, l, mid);</span><br><span class=\"line\">    build (rs, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    t[p].pre = t[ls].pre + t[rs].pre;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">spread</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123; <span class=\"comment\">// 向下传递懒标记</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t[p].add)&#123;</span><br><span class=\"line\">        t[ls].pre += t[p].add * (t[ls].r - t[ls].l + <span class=\"number\">1</span>);</span><br><span class=\"line\">        t[rs].pre += t[p].add * (t[rs].r - t[rs].l + <span class=\"number\">1</span>);</span><br><span class=\"line\">        t[ls].add += t[p].add;</span><br><span class=\"line\">        t[rs].add += t[p].add;</span><br><span class=\"line\">        t[p].add = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> z)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt;= t[p].l &amp;&amp; y &gt;= t[p].r)&#123;  <span class=\"comment\">// 覆盖</span></span><br><span class=\"line\">        t[p].pre += (ll)z * (t[p].r - t[p].l + <span class=\"number\">1</span>);</span><br><span class=\"line\">        t[p].add += z;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    spread(p);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = t[p].l + t[p].r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt;= mid ) change (ls, x, y, z);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y &gt; mid ) change (rs, x, y, z);</span><br><span class=\"line\">    t[p].pre = t[ls].pre + t[rs].pre;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">ask</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt;= t[p].l &amp;&amp; y &gt;= t[p].r) <span class=\"keyword\">return</span> t[p].pre;</span><br><span class=\"line\">    spread(p);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = t[p].l + t[p].r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( x &lt;= mid ) ans += ask(ls, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( y &gt; mid ) ans += ask(rs, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s, x, y, k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++) <span class=\"built_in\">cin</span> &gt;&gt; a[i];</span><br><span class=\"line\">    build(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( m -- )&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( s == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; k;</span><br><span class=\"line\">            change(<span class=\"number\">1</span>, x, y, k);</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; ask(1,1,n) &lt;&lt; \"\\n\" ;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; ask(<span class=\"number\">1</span>, x, y) &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线段树区间加，乘法和查询\"><a href=\"#线段树区间加，乘法和查询\" class=\"headerlink\" title=\"线段树区间加，乘法和查询\"></a>线段树区间加，乘法和查询</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rs p * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ls p * 2</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">100001</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, a[MAXN];</span><br><span class=\"line\">ll mod = <span class=\"number\">0xfffffffffffffff</span>;  <span class=\"comment\">// mod 注意修改</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">  ll sum, l, r, mul, add;</span><br><span class=\"line\">&#125; t[MAXN * <span class=\"number\">4</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  ll x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">'0'</span> || ch &gt; <span class=\"string\">'9'</span>)</span><br><span class=\"line\">    ch = getchar();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>)</span><br><span class=\"line\">    x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>), ch = getchar();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(ll p, ll l, ll r)</span> </span>&#123;</span><br><span class=\"line\">  t[p].l = l, t[p].r = r;</span><br><span class=\"line\">  t[p].mul = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">    t[p].sum = a[l] % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ll mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  build(ls, l, mid);</span><br><span class=\"line\">  build(rs, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">  t[p].sum = (t[ls].sum + t[rs].sum) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spread</span><span class=\"params\">(ll p)</span> </span>&#123;</span><br><span class=\"line\">  t[ls].sum =</span><br><span class=\"line\">      (ll)(t[p].mul * t[ls].sum + ((t[ls].r - t[ls].l + <span class=\"number\">1</span>) * t[p].add) % mod) %</span><br><span class=\"line\">      mod;</span><br><span class=\"line\">  t[rs].sum =</span><br><span class=\"line\">      (ll)(t[p].mul * t[rs].sum + (t[p].add * (t[rs].r - t[rs].l + <span class=\"number\">1</span>)) % mod) %</span><br><span class=\"line\">      mod; <span class=\"comment\">// add已经乘过mu啦</span></span><br><span class=\"line\"></span><br><span class=\"line\">  t[ls].mul = (ll)(t[ls].mul * t[p].mul) % mod;</span><br><span class=\"line\">  t[rs].mul = (ll)(t[rs].mul * t[p].mul) % mod;</span><br><span class=\"line\"></span><br><span class=\"line\">  t[ls].add = (ll)(t[ls].add * t[p].mul + t[p].add) % mod;</span><br><span class=\"line\">  t[rs].add = (ll)(t[rs].add * t[p].mul + t[p].add) % mod;</span><br><span class=\"line\"></span><br><span class=\"line\">  t[p].mul = <span class=\"number\">1</span>, t[p].add = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(ll p, ll l, ll r, ll k)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r) &#123;</span><br><span class=\"line\">    t[p].add = (t[p].add + k) % mod;</span><br><span class=\"line\">    t[p].sum = (ll)(t[p].sum + k * (t[p].r - t[p].l + <span class=\"number\">1</span>)) % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  spread(p);</span><br><span class=\"line\">  t[p].sum = (t[ls].sum + t[rs].sum) % mod;</span><br><span class=\"line\">  ll mid = (t[p].l + t[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">    add(ls, l, r, k);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mid &lt; r)</span><br><span class=\"line\">    add(rs, l, r, k);</span><br><span class=\"line\">  t[p].sum = (t[ls].sum + t[rs].sum) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mul</span><span class=\"params\">(ll p, ll l, ll r, ll k)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r) &#123;</span><br><span class=\"line\">    t[p].add = (t[p].add * k) % mod;</span><br><span class=\"line\">    t[p].mul = (t[p].mul * k) % mod;</span><br><span class=\"line\">    t[p].sum = (t[p].sum * k) % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  spread(p);</span><br><span class=\"line\">  t[p].sum = t[ls].sum + t[rs].sum;</span><br><span class=\"line\">  ll mid = (t[p].l + t[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">    mul(ls, l, r, k);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mid &lt; r)</span><br><span class=\"line\">    mul(rs, l, r, k);</span><br><span class=\"line\">  t[p].sum = (t[ls].sum + t[rs].sum) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">ask</span><span class=\"params\">(ll p, ll l, ll r)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t[p].sum;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  spread(p);</span><br><span class=\"line\">  ll val = <span class=\"number\">0</span>;</span><br><span class=\"line\">  ll mid = (t[p].l + t[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">    val = (val + ask(ls, l, r)) % mod;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mid &lt; r)</span><br><span class=\"line\">    val = (val + ask(rs, l, r)) % mod;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    a[i] = read();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  build(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ty = read();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ty == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      ll cn = read(), cm = read(), cw = read();</span><br><span class=\"line\">      add(<span class=\"number\">1</span>, cn, cm, cw);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      ll cn = read(), cm = read();</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; ask(<span class=\"number\">1</span>, cn, cm) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"线段树区域加模板\"><a href=\"#线段树区域加模板\" class=\"headerlink\" title=\"线段树区域加模板\"></a>线段树区域加模板</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> ls (p &lt;&lt; 1)</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> rs (p &lt;&lt; 1 | 1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[MAXN + <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tree</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\">    ll pre, add;</span><br><span class=\"line\">&#125;t[<span class=\"number\">4</span> * MAXN + <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    t[p].l = l; t[p].r = r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == r)&#123;</span><br><span class=\"line\">        t[p].pre = a[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    build (ls, l, mid);</span><br><span class=\"line\">    build (rs, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    t[p].pre = t[ls].pre + t[rs].pre;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">spread</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123; <span class=\"comment\">// 向下传递懒标记</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t[p].add)&#123;</span><br><span class=\"line\">        t[ls].pre += t[p].add * (t[ls].r - t[ls].l + <span class=\"number\">1</span>);</span><br><span class=\"line\">        t[rs].pre += t[p].add * (t[rs].r - t[rs].l + <span class=\"number\">1</span>);</span><br><span class=\"line\">        t[ls].add += t[p].add;</span><br><span class=\"line\">        t[rs].add += t[p].add;</span><br><span class=\"line\">        t[p].add = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> z)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt;= t[p].l &amp;&amp; y &gt;= t[p].r)&#123;  <span class=\"comment\">// 覆盖</span></span><br><span class=\"line\">        t[p].pre += (ll)z * (t[p].r - t[p].l + <span class=\"number\">1</span>);</span><br><span class=\"line\">        t[p].add += z;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    spread(p);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = t[p].l + t[p].r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt;= mid ) change (ls, x, y, z);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y &gt; mid ) change (rs, x, y, z);</span><br><span class=\"line\">    t[p].pre = t[ls].pre + t[rs].pre;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">ask</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt;= t[p].l &amp;&amp; y &gt;= t[p].r) <span class=\"keyword\">return</span> t[p].pre;</span><br><span class=\"line\">    spread(p);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = t[p].l + t[p].r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( x &lt;= mid ) ans += ask(ls, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( y &gt; mid ) ans += ask(rs, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s, x, y, k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++) <span class=\"built_in\">cin</span> &gt;&gt; a[i];</span><br><span class=\"line\">    build(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( m -- )&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( s == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; k;</span><br><span class=\"line\">            change(<span class=\"number\">1</span>, x, y, k);</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; ask(1,1,n) &lt;&lt; \"\\n\" ;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; ask(<span class=\"number\">1</span>, x, y) &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线段树区间加，乘法和查询\"><a href=\"#线段树区间加，乘法和查询\" class=\"headerlink\" title=\"线段树区间加，乘法和查询\"></a>线段树区间加，乘法和查询</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rs p * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ls p * 2</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">100001</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, a[MAXN];</span><br><span class=\"line\">ll mod = <span class=\"number\">0xfffffffffffffff</span>;  <span class=\"comment\">// mod 注意修改</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">  ll sum, l, r, mul, add;</span><br><span class=\"line\">&#125; t[MAXN * <span class=\"number\">4</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  ll x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">'0'</span> || ch &gt; <span class=\"string\">'9'</span>)</span><br><span class=\"line\">    ch = getchar();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>)</span><br><span class=\"line\">    x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>), ch = getchar();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(ll p, ll l, ll r)</span> </span>&#123;</span><br><span class=\"line\">  t[p].l = l, t[p].r = r;</span><br><span class=\"line\">  t[p].mul = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">    t[p].sum = a[l] % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ll mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  build(ls, l, mid);</span><br><span class=\"line\">  build(rs, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">  t[p].sum = (t[ls].sum + t[rs].sum) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spread</span><span class=\"params\">(ll p)</span> </span>&#123;</span><br><span class=\"line\">  t[ls].sum =</span><br><span class=\"line\">      (ll)(t[p].mul * t[ls].sum + ((t[ls].r - t[ls].l + <span class=\"number\">1</span>) * t[p].add) % mod) %</span><br><span class=\"line\">      mod;</span><br><span class=\"line\">  t[rs].sum =</span><br><span class=\"line\">      (ll)(t[p].mul * t[rs].sum + (t[p].add * (t[rs].r - t[rs].l + <span class=\"number\">1</span>)) % mod) %</span><br><span class=\"line\">      mod; <span class=\"comment\">// add已经乘过mu啦</span></span><br><span class=\"line\"></span><br><span class=\"line\">  t[ls].mul = (ll)(t[ls].mul * t[p].mul) % mod;</span><br><span class=\"line\">  t[rs].mul = (ll)(t[rs].mul * t[p].mul) % mod;</span><br><span class=\"line\"></span><br><span class=\"line\">  t[ls].add = (ll)(t[ls].add * t[p].mul + t[p].add) % mod;</span><br><span class=\"line\">  t[rs].add = (ll)(t[rs].add * t[p].mul + t[p].add) % mod;</span><br><span class=\"line\"></span><br><span class=\"line\">  t[p].mul = <span class=\"number\">1</span>, t[p].add = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(ll p, ll l, ll r, ll k)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r) &#123;</span><br><span class=\"line\">    t[p].add = (t[p].add + k) % mod;</span><br><span class=\"line\">    t[p].sum = (ll)(t[p].sum + k * (t[p].r - t[p].l + <span class=\"number\">1</span>)) % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  spread(p);</span><br><span class=\"line\">  t[p].sum = (t[ls].sum + t[rs].sum) % mod;</span><br><span class=\"line\">  ll mid = (t[p].l + t[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">    add(ls, l, r, k);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mid &lt; r)</span><br><span class=\"line\">    add(rs, l, r, k);</span><br><span class=\"line\">  t[p].sum = (t[ls].sum + t[rs].sum) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mul</span><span class=\"params\">(ll p, ll l, ll r, ll k)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r) &#123;</span><br><span class=\"line\">    t[p].add = (t[p].add * k) % mod;</span><br><span class=\"line\">    t[p].mul = (t[p].mul * k) % mod;</span><br><span class=\"line\">    t[p].sum = (t[p].sum * k) % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  spread(p);</span><br><span class=\"line\">  t[p].sum = t[ls].sum + t[rs].sum;</span><br><span class=\"line\">  ll mid = (t[p].l + t[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">    mul(ls, l, r, k);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mid &lt; r)</span><br><span class=\"line\">    mul(rs, l, r, k);</span><br><span class=\"line\">  t[p].sum = (t[ls].sum + t[rs].sum) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">ask</span><span class=\"params\">(ll p, ll l, ll r)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t[p].sum;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  spread(p);</span><br><span class=\"line\">  ll val = <span class=\"number\">0</span>;</span><br><span class=\"line\">  ll mid = (t[p].l + t[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">    val = (val + ask(ls, l, r)) % mod;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mid &lt; r)</span><br><span class=\"line\">    val = (val + ask(rs, l, r)) % mod;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    a[i] = read();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  build(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ty = read();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ty == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      ll cn = read(), cm = read(), cw = read();</span><br><span class=\"line\">      add(<span class=\"number\">1</span>, cn, cm, cw);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      ll cn = read(), cm = read();</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; ask(<span class=\"number\">1</span>, cn, cm) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"第九届蓝桥杯试题、答案以及比赛经历","date":"2018-04-05T07:04:32.000Z","description":"第一次竞赛经历，第九届蓝桥杯初赛。","_content":"\n时间:2018年愚人节\n地点：南京航空航天大学(江宁校区)\n事件：第九届蓝桥杯省赛\n\n\n废话不多说，直接上题目：\n\n## 第一题： 第几天(满分5分)\n### 题目描述：\n> 2000年的1月1日，是那一年的第1天。那么，2000年的5月4日，是那一年的第几天？ \n> 注意：需要提交的是一个整数，不要填写任何多余内容。\n\n个人感受：\n    很简单的一道题，学习了各位大佬的比赛经验，这种题目也不去考虑编程了，不仅要判断几月是几天还要去思考是否闰年\n\n### 题目答案：\n答案：125\n方法: 日历/excel\n例如：用excel快速求解，第一个单元格输入2000/1/1，第二个单元格输入2000/5/4，然后在第三个单元格生成，第二个单元格减去第一个单元格的值\n哦，对了 ，算完是124，还要加上1！5s出答案。\n\n## 第二题： 明码(满分7分)\n### 题目描述：\n>汉字的字形存在于字库中，即便在今天，16点阵的字库也仍然使用广泛。\n16点阵的字库把每个汉字看成是16x16个像素信息。并把这些信息记录在字节中。\n一个字节可以存储8位信息，用32个字节就可以存一个汉字的字形了。\n把每个字节转为2进制表示，1表示墨迹，0表示底色。每行2个字节，\n一共16行，布局是：\n    第1字节，第2字节\n    第3字节，第4字节\n    ....\n    第31字节, 第32字节\n这道题目是给你一段多个汉字组成的信息，每个汉字用32个字节表示，这里给出了字节作为有符号整数的值。\n题目的要求隐藏在这些信息中。你的任务是复原这些汉字的字形，从中看出题目的要求，并根据要求填写答案。\n这段信息是（一共10个汉字）：\n4 0 4 0 4 0 4 32 -1 -16 4 32 4 32 4 32 4 32 4 32 8 32 8 32 16 34 16 34 32 30 -64 0 \n16 64 16 64 34 68 127 126 66 -124 67 4 66 4 66 -124 126 100 66 36 66 4 66 4 66 4 126 4 66 40 0 16 \n4 0 4 0 4 0 4 32 -1 -16 4 32 4 32 4 32 4 32 4 32 8 32 8 32 16 34 16 34 32 30 -64 0 \n0 -128 64 -128 48 -128 17 8 1 -4 2 8 8 80 16 64 32 64 -32 64 32 -96 32 -96 33 16 34 8 36 14 40 4 \n4 0 3 0 1 0 0 4 -1 -2 4 0 4 16 7 -8 4 16 4 16 4 16 8 16 8 16 16 16 32 -96 64 64 \n16 64 20 72 62 -4 73 32 5 16 1 0 63 -8 1 0 -1 -2 0 64 0 80 63 -8 8 64 4 64 1 64 0 -128 \n0 16 63 -8 1 0 1 0 1 0 1 4 -1 -2 1 0 1 0 1 0 1 0 1 0 1 0 1 0 5 0 2 0 \n2 0 2 0 7 -16 8 32 24 64 37 -128 2 -128 12 -128 113 -4 2 8 12 16 18 32 33 -64 1 0 14 0 112 0 \n1 0 1 0 1 0 9 32 9 16 17 12 17 4 33 16 65 16 1 32 1 64 0 -128 1 0 2 0 12 0 112 0 \n0 0 0 0 7 -16 24 24 48 12 56 12 0 56 0 -32 0 -64 0 -128 0 0 0 0 1 -128 3 -64 1 -128 0 0 \n**注意：需要提交的是一个整数，不要填写任何多余内容。**\n\n个人感受：\n    很有趣的一道题目，一开始有点懵圈，这么多的数据，想到的就是转化为八位二进制，然后两个一组输出 然后换行，\n最后从一堆二进制中看出 题目：九的九次方等于多少？(一开始我还以为时输入转化得到的话，结果看到了最后一个翻译出来是问号==emmm，又看了下题目最后一行，整数！emmmm)\nPS:负数直接用128相加一下就差不多能看了.\n### 题目答案：\n387420489\n**代码一**\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(int x){\n\tint a[8]={0};\n\tif(x<0)\n\t\tx+=128;\n\tfor(int i=7;i>=0;i--){\n\t\ta[i]=x%2;\n\t\tx/=2;\n\t}\n\tfor(int i=0;i<8;i++)\n\t\tif(a[i]) cout<<\"*\";\n\t\telse cout<<\" \";\n}\nint main(){\n\tfor(int i=0;i<10;i++){\n\t\tfor(int i=0;i<16;i++){\n\t\t\t//由题目很容易可以看出 两个八位二进制一行 \n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tprint(x);\n\t\t\tprint(y);\n\t\t\tcout<<endl;\n\t\t}\n\t\tcout<<endl<<endl;\n\t}\n\treturn 0; \n}\n```\n**代码二**\n有大佬用位运算写:\n位运算不不用考虑负数的问题..直接按位进行运算\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(int x){\n\tfor(int i=7;i>=0;i--){\n\t\t// x=4    100 &  10000000  = 0\n\t\t//        100 &  1000000   = 0\n\t\t//        100 &  100000    = 0\n\t\t//        100 &  10000     = 0\n\t\t//        100 &  1000      = 0\n\t\t//        100 &  100       = 100\n\t\t//        100 &  10        = 0\t\n\t\t//        100 &  1         = 0\n\t\tif(x&(1<<i))\n\t\t\tcout<<(x&(1<<i))<<'*';\n\t\telse cout<<' ';\n\t}\nint main(){\n\tfor(int i=0;i<10;i++){\n\t\tfor(int i=0;i<16;i++){\n\t\t\t//由题目很容易可以看出 两个八位二进制一行 \n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tprint(x);\n\t\t\tprint(y);\n\t\t\tcout<<endl;\n\t\t}\n\t\tcout<<endl<<endl;\n\t}\n\treturn 0; \n}\n```\n\n## 第三题： 乘积尾零(满分13分)\n### 题目描述：\n>如下的10行数据，每行有10个整数，请你求出它们的乘积的末尾有多少个零？\n5650 4542 3554 473 946 4114 3871 9073 90 4329 \n2758 7949 6113 5659 5245 7432 3051 4434 6704 3594 \n9937 1173 6866 3397 4759 7557 3070 2287 1453 9899 \n1486 5722 3135 1170 4014 5510 5120 729 2880 9019 \n2049 698 4582 4346 4427 646 9742 7340 1230 7683 \n5693 7015 6887 7381 4172 4341 2909 2027 7355 5649 \n6701 6645 1671 5978 2704 9926 295 3125 3878 6785 \n2066 4247 4800 1578 6652 4616 1113 6205 3264 2915 \n3966 5291 2904 1285 2193 1428 2265 8730 9436 7074 \n689 5510 8243 6114 337 4096 8199 7313 3685 211 \n注意：需要提交的是一个整数，表示末尾零的个数。不要填写任何多余内容。\n\n个人感受：\n    大数这道题。。写的时候还是贼开心的==  因为。。我以为写出来了==\n对于这种数学弱鸡，简直不懂分解为2和5。。只会一行一行的去十个十个相乘再去模一亿取余\n然而==死在了 我只保留了最后两位 非零数。。。。导致杀千刀的少了三个0(大佬说要保留四位（后我实测为3位）)\n这道题 错的 特别 不该  代码也就三分钟的事==\n{% asset_img 1.png %}\n\n思路：两种方法\n①直接将所有数相乘，然后每乘一个数就把后面0全部去掉记一下，不过中间会爆long long，这个好办，每次乘完只保留后4位非0数字，例如216037就只保留6037\n**②正解：所有的0都一定是2*5产生的，所以将每个数拆成一堆2乘上一堆5再乘上一个数，之后统计下有多少个2和多少个5取少的那个就是答案**\n### 题目答案：\n答案：31\n**思路一的代码**\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tint a[101],cnt=0;\n\tfor(int i=0;i<100;i++)\n\t\tscanf(\"%d\",a+i);\n\tfor(int i=0;i<99;i++){\n\t\ta[i+1]*=a[i];\n\t\twhile(a[i+1]%10==0){\n\t\t\ta[i+1]/=10;\n\t\t\tcnt++;\n\t\t}\n\t\ta[i+1]%=1000;\n\t}\n\tcout<<cnt; \n\treturn 0;\n} \n```\n**思路二的代码**\n```C++\n#include<bits/stdc++.h>  \nusing namespace std;  \nint main(){  \n    int res2=0,res5=0;  \n    for(int i=0;i<100;i++){  \n        int x;\n\t\tscanf(\"%d\",&x);  \n        int y=x;  \n        while(x%2==0)res2++,x/=2; \n\t\twhile(x%5==0)res5++,x/=5;  \n    }  \n    cout<<min(res2,res5)<<endl;  \n}  \n```\n\n## 第四题： 测试次数(满分17分)\n### 题目描述：\n> x星球的居民脾气不太好，但好在他们生气的时候唯一的异常举动是：摔手机。\n各大厂商也就纷纷推出各种耐摔型手机。x星球的质监局规定了手机必须经过耐摔测试，并且评定出一个耐摔指数来，之后才允许上市流通。\nx星球有很多高耸入云的高塔，刚好可以用来做耐摔测试。塔的每一层高度都是一样的，与地球上稍有不同的是，他们的第一层不是地面，而是相当于我们的2楼。\n如果手机从第7层扔下去没摔坏，但第8层摔坏了，则手机耐摔指数=7。\n特别地，如果手机从第1层扔下去就坏了，则耐摔指数=0。\n如果到了塔的最高层第n层扔没摔坏，则耐摔指数=n\n为了减少测试次数，从每个厂家抽样3部手机参加测试。\n某次测试的塔高为1000层，如果我们总是采用最佳策略，在最坏的运气下最多需要测试多少次才能确定手机的耐摔指数呢？\n请填写这个最多测试次数。\n注意：需要填写的是一个整数，不要填写任何多余内容。\n\n个人感受：\n    这道题凉凉，很凉，透心凉\n教训，下次一定要先看分值==\n看到题目，最优策略？OK二分！然后就算出了  九次吧==然后自信直接过\n回来车上在复盘，忽然想到，等下。。那个。。摔手机？手机。。手机。。会摔坏了吧。。\nmm了个大p，一问舍友(zl) ，他不是还给了三个手机吗？\n我.....好的。。。题目都没看清。。都不知道我在干嘛。。\n\n不过就算知道了，我也没算对。。。心理平衡了一点\n\n后来我只能算出28。。。emmmm\n大佬: 直接三维 dp dp[0][1000][3] 第一个0一定不爆，第二个1000一定爆，第三个 3个手机。。\nemmmmm......还是不会\n\n### 题目答案：\n答案：19\n\n## 第五题： 快速排序(满分9分)\n### 题目描述：\n> 以下代码可以从数组a[]中找出第k小的元素。\n它使用了类似快速排序中的分治算法，期望时间复杂度是O(N)的。\n请仔细阅读分析源码，填写划线部分缺失的内容。\n```C++\n#include <stdio.h>\n\nint quick_select(int a[], int l, int r, int k) {\n\tint p = rand() % (r - l + 1) + l;\n\tint x = a[p];\n\t{int t = a[p]; a[p] = a[r]; a[r] = t;}\n\tint i = l, j = r;\n\twhile(i < j) {\n\t\twhile(i < j && a[i] < x) i++;\n\t\tif(i < j) {\n\t\t\ta[j] = a[i];\n\t\t\tj--;\n\t\t}\n\t\twhile(i < j && a[j] > x) j--;\n\t\tif(i < j) {\n\t\t\ta[i] = a[j];\n\t\t\ti++;\n\t\t}\n\t}\n\ta[i] = x;\n\tp = i;\n\tif(i - l + 1 == k) return a[i];\n\tif(i - l + 1 < k) return quick_select( _____________________________ ); //填空\n\telse return quick_select(a, l, i - 1, k);\n}\n\t\nint main()\n{\n\tint a[] = {1, 4, 2, 8, 5, 7, 23, 58, 16, 27, 55, 13, 26, 24, 12};\n\tprintf(\"%d\\n\", quick_select(a, 0, 14, 5));\n\treturn 0;\n}\n注意：只填写划线部分缺少的代码，不要抄写已经存在的代码或符号。\n\n```\n个人感受：\n    这道题。。算了。。填空这种题目每次我都是瞎jb猜，然后看答案对不对。。\n我写了个(a,l,r,k)大概对了，就交了。。宛如智障\n以为。。对了的\n好的\n\n### 题目答案：\n答案：a,i+1,r,k-(i-l+1)\n\n\n## 第六题： 递增三元组(满分11分)\n### 题目描述：\n>给定三个整数数组\nA = [A1, A2, ... AN], \nB = [B1, B2, ... BN], \nC = [C1, C2, ... CN]，\n请你统计有多少个三元组(i, j, k) 满足：\n1. 1 <= i, j, k <= N  \n2. Ai < Bj < Ck  \n\n>【输入格式】 \n第一行包含一个整数N。\n第二行包含N个整数A1, A2, ... AN。\n第三行包含N个整数B1, B2, ... BN。\n第四行包含N个整数C1, C2, ... CN。\n对于30%的数据，1 <= N <= 100  \n对于60%的数据，1 <= N <= 1000 \n对于100%的数据，1 <= N <= 100000 0 <= Ai, Bi, Ci <= 100000 \n\n>【输出格式】\n一个整数表示答案\n\n>【样例输入】\n3\n1 1 1\n2 2 2\n3 3 3\n\n>【样例输出】\n27 \n\n>资源约定：\n峰值内存消耗（含虚拟机） < 256M\nCPU消耗  < 1000ms\n\n个人感受：\n    最简单的一道题了== 暴力for。。虽然不知道最后会不会爆。。但至少有60吧\n一开始看到..emmm 不就深搜嘛，最近写了不少，好的。。三分钟码完。。挖草 怎么样例输入答案一直是3\n心态崩了，换了三个for....老子就不信了。。咦。。怎么还是3\n我特么。。dev坏了吧？？？偷偷换个VC还是3  VS2010  还是3\n心态崩了。。  输出中间值明明有27次啊。。 \n忽然。。发现。。 调用函数没return最后的cnt  。。好小子，你过来，不打死你\n以至最后也懒得换回dfs了。。最后，如果有人看了我的代码，可能会觉得被欺骗了。。函数名=dfs，一看。。里面只有三个for。。。\n哈哈哈哈哈哈\n\n### 题目答案：\n**dfs**\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint cnt=0,n;\nint a[100001],b[100001],c[100001]; \nint dfs(int i,int j,int k){\n\tif(a[i]<b[j]&&b[j]<c[k])\n\t\tcnt++;\n\tif(i==n-1&&j==n-1&&k==n-1)\n\t\treturn cnt;\n\tif(k<n) dfs(i,j,k+1);\n\telse if(j<n) dfs(i,j+1,0);\n\t\telse if(i<n) dfs(i+1,0,0);\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++)\n\t\tscanf(\"%d\",&a[i]);\n\tfor(int i=0;i<n;i++)\n\t\tscanf(\"%d\",&b[i]);\n\tfor(int i=0;i<n;i++)\n\t\tscanf(\"%d\",&c[i]);\n\tprintf(\"%d\",dfs(0,0,0));\n\treturn 0;\n} \n```\n**三个for 暴力求解**\n```C++\nfor(int i=0;i<n;i++)\n\t\tfor(int j=0;j<n;j++)\n\t\t\tfor(int k=0;k<n;k++)\n\t\t\t\tif(a[i]<b[j]&&b[j]<c[k])\n\t\t\t\t\tcnt++;\n\treturn cnt;\n```\n\n**最优解**\n思路：分别排序\n先看b和c两个数组，设两个下标i，j分别指向bc数组，对于每一个b[i],可以找到对应的c[j]恰好大于b[i]，那么对于b[i]有n-j个c[j]满足b[i]<c[j]。令sumb[i]=n-j，表示每个b[i]对应的c[j]个数。将sumb处理成后缀和。\n然后再看a和b数组，用同样的方法打出数组suma，不过suma[i]=sumb[j]；\n然后将suma处理成后缀和，suma[0]即为答案。\n```C++\n#include<bits/stdc++.h>  \nusing namespace std;  \ntypedef long long ll;  \nconst int N=1e6+10;  \nll suma[N],sumb[N];  \nint a[N],b[N],c[N];  \nint n;  \nint main(){  \n    scanf(\"%d\",&n);  \n    for(int i=0;i<n;i++)  \n        scanf(\"%d\",&a[i]);  \n    for(int i=0;i<n;i++)  \n        scanf(\"%d\",&b[i]);  \n    for(int i=0;i<n;i++)  \n        scanf(\"%d\",&c[i]);  \n    sort(a,a+n);  \n    sort(b,b+n);  \n    sort(c,c+n);  \n    memset(sumb,0,sizeof(sumb));  \n    for(int i=0,j=0;i<n;i++){  \n        while(j<n&&b[i]>=c[j])j++;  \n        if(j>=n)break;  \n        sumb[i]=n-j;  \n    }  \n    for(int i=n-2;i>=0;i--) //b hou zhui he  \n        sumb[i]+=sumb[i+1];  \n  \n    for(int i=0,j=0;i<n;i++){  \n        while(j<n&&a[i]>=b[j])j++;  \n        if(j>=n)break;  \n        suma[i]=sumb[j];  \n    }  \n    for(int i=n-2;i>=0;i--) //a hou zhui he  \n        suma[i]+=suma[i+1];  \n  \n    printf(\"%lld\\n\",suma[0]);  \n}  \n```\n\n## 第七题： 螺旋折线(满分19分)\n### 题目描述：\n>如图p1.png所示的螺旋折线经过平面上所有整点恰好一次。  \n对于整点(X, Y)，我们定义它到原点的距离dis(X, Y)是从原点到(X, Y)的螺旋折线段的长度。  \n例如dis(0, 1)=3, dis(-2, -1)=9  \n给出整点坐标(X, Y)，你能计算出dis(X, Y)吗？\n\n>【输入格式】\nX和Y  \n对于40%的数据，-1000 <= X, Y <= 1000  \n对于70%的数据，-100000 <= X， Y <= 100000  \n对于100%的数据, -1000000000 <= X, Y <= 1000000000  \n\n>【输出格式】\n输出dis(X, Y)  \n\n>【样例输入】\n0 1\n\n>【样例输出】\n3\n\n>资源约定：\n峰值内存消耗（含虚拟机） < 256M\nCPU消耗  < 1000ms\n\n{% asset_img 2.png %}\n个人感受：\n    并列最简单的一题，emmmm  没啥操作。。就是循环到那个点\n应该时间上会爆了，反正至少50吧。。\n\n### 题目答案：\n**代码：**\n#include<bits/stdc++.h>\nusing namespace std;\nint ex,ey,nx=0,ny=0; \nint check(){\n\tif(nx==ex&&ny==ey)\n\t\treturn 1;\n\telse return 0;\n}\nint main(){\n\tscanf(\"%d%d\",&ex,&ey);\n\tint h=0,cnt=0;\n\twhile(1){\n\t\tfor(int i=0;i<4;i++){\n\t\t\th++;\n\t\t\tif(i==0)\n\t\t\t\tfor(int j=0;j<(h+1)/2;j++){\n\t\t\t\t\tnx--;\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(check()){\n\t\t\t\t\t\tprintf(\"%d\",cnt);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\telse if(i==1)\n\t\t\t\tfor(int j=0;j<h/2;j++){\n\t\t\t\t\tny++;\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(check()){\n\t\t\t\t\t\tprintf(\"%d\",cnt);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\telse if(i==2)\n\t\t\t\tfor(int j=0;j<(h+1)/2;j++){\n\t\t\t\t\tnx++;\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(check()){\n\t\t\t\t\t\tprintf(\"%d\",cnt);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tfor(int j=0;j<h/2;j++){\n\t\t\t\t\tny--;\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(check()){\n\t\t\t\t\t\tprintf(\"%d\",cnt);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n## 第八题： 日志统计(满分21分)\n### 题目描述：\n> 小明维护着一个程序员论坛。现在他收集了一份\"点赞\"日志，日志共有N行。其中每一行的格式是：\nts id  \n表示在ts时刻编号id的帖子收到一个\"赞\"。  \n现在小明想统计有哪些帖子曾经是\"热帖\"。如果一个帖子曾在任意一个长度为D的时间段内收到不少于K个赞，小明就认为这个帖子曾是\"热帖\"。  \n具体来说，如果存在某个时刻T满足该帖在[T, T+D)这段时间内(注意是左闭右开区间)收到不少于K个赞，该帖就曾是\"热帖\"。  \n给定日志，请你帮助小明统计出所有曾是\"热帖\"的帖子编号。  \n\n>【输入格式】\n第一行包含三个整数N、D和K。  \n以下N行每行一条日志，包含两个整数ts和id。  \n对于50%的数据，1 <= K <= N <= 1000  \n对于100%的数据，1 <= K <= N <= 100000 0 <= ts <= 100000 0 <= id <= 100000  \n\n>【输出格式】\n按从小到大的顺序输出热帖id。每个id一行。  \n\n>【输入样例】\n7 10 2  \n0 1  \n0 10    \n10 10  \n10 1  \n9 1\n100 3  \n100 3  \n\n>【输出样例】\n1  \n3  \n\n\n>资源约定：\n峰值内存消耗（含虚拟机） < 256M\nCPU消耗  < 1000ms\n\n个人感受：\n    很烦的一道题。。 思路就是先筛选 ts大于k的   然后再按照 ts在 某段时间内多少排序。。\n道理都懂。。就是弱鸡。。。。没写完就交了==  没写完的我  输入正常，输出 print(\"1\\n3\");\n哈哈哈哈 看看能不能 骗上10分\n\n### 题目答案：\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=1e6+10;\nstruct node{\n\tint t,id;\n}e[N];\nbool cmp(node a,node b){\t// 对结构体按某个条件排序 \n\treturn a.t<b.t;\n}\nint sta[N],top;\nint c[N];\nint n,d,k;\nbool insta[N];\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&d,&k);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d\",&e[i].t,&e[i].id);\n\t}\n\tsort(e+1,e+1+n,cmp);\n\tmemset(c,0,sizeof(c));\n\tmemset(insta,0,sizeof(insta));\n\ttop=0;\n\tfor(int i=1,j=1;i<=n;i++)\n\t{\n\t\twhile(j<=n&&e[i].t-e[j].t>=d)\n\t\tc[e[j++].id]--;\n\t\tc[e[i].id]++;\n\t\tif(c[e[i].id]>=k&&!insta[e[i].id]){\n\t\t\tsta[top++]=e[i].id;\n\t\t\tinsta[e[i].id]=1;\n\t\t}\n\n\t}\n\tsort(sta,sta+top);\n\ttop=unique(sta,sta+top)-sta;\n\tfor(int i=0;i<top;i++)\n\t\tprintf(\"%d\\n\",sta[i]);\n}\n```\n\n## 第九题：全球变暖(满分23分)\n### 题目描述：\n>你有一张某海域NxN像素的照片，\".\"表示海洋、\"#\"表示陆地，如下所示：\n..\\..\\..\\.\n.#\\#..\\..\n.#\\#..\\..\n..\\..##.\n.\\.####.\n..\\.###.\n..\\..\\..\\.\n其中\"上下左右\"四个方向上连在一起的一片陆地组成一座岛屿。例如上图就有2座岛屿。  \n由于全球变暖导致了海面上升，科学家预测未来几十年，岛屿边缘一个像素的范围会被海水淹没。具体来说如果一块陆地像素与海洋相邻(上下左右四个相邻像素中有海洋)，它就会被淹没。  \n例如上图中的海域未来会变成如下样子：\n..\\..\\..\\.\n..\\..\\..\\.\n..\\..\\..\\.\n..\\..\\..\\.\n..\\..\\#..\n..\\..\\..\\.\n.\\..\\..\\..\n请你计算：依照科学家的预测，照片中有多少岛屿会被完全淹没。  \n\n>【输入格式】\n第一行包含一个整数N。  (1 <= N <= 1000)  \n以下N行N列代表一张海域照片。  \n照片保证第1行、第1列、第N行、第N列的像素都是海洋。  \n\n>【输出格式】\n一个整数表示答案。\n\n>【输入样例】\n7 \n..\\..\\..\\.\n.##..\\..\n.##.\\...\n..\\..##.\n..####.\n...###.\n..\\..\\..\\.  \n\n>【输出样例】\n1  \n\n>资源约定：\n峰值内存消耗（含虚拟机） < 256M\nCPU消耗  < 1000ms\n\n个人感受：\n    为啥样例 淹没是1.。没被淹没是1\n我傻傻的看错了==  输出了相反的。。 阿西吧 心痛\n反正我的就是两个bfs\n还有一个很有趣的\n有人给了一组这样的数据：\n\\### ###\n\\#######\n\\### ###\n只有一个岛屿但是淹没后你会发现“岛屿”还会多出来一个！如下\n\n\\# # \n\n这个。。输出0还是-1.。我也不知道。。等答案了。。。\n\n\n### 题目答案：\n**这个 有一个正解代码**\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e3+10;\nint dir[4][2]={-1,0,0,1,1,0,0,-1};\nbool vis[N][N];\nchar mmp[N][N];\nint n,flag;\nbool check(int x,int y){//check if sea;\n\tfor(int i=0;i<4;i++){\n\t\tint fx=x+dir[i][0];\n\t\tint fy=y+dir[i][1];\n\t\tif(fx&&fy&&fx<=n&&fy<=n&&mmp[fx][fy]=='.')\n\t\t\treturn 1; //sea;\n\t}\n\treturn 0; //no sea;\n}\nvoid dfs(int x,int y){\n\tvis[x][y]=1;\n\tif(!check(x,y))flag=1; //remain lu di\n\tfor(int i=0;i<4;i++){\n\t\tint fx=x+dir[i][0];\n\t\tint fy=y+dir[i][1];\n\t\tif(fx&&fy&&fx<=n&&fy<=n&&!vis[fx][fy]&&mmp[fx][fy]=='#')\n\t\t\tdfs(fx,fy);\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%s\",mmp[i]+1);\n\t}\n\tmemset(vis,0,sizeof(vis));\n\tint ans=0,ludi=0;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(!vis[i][j]&&mmp[i][j]=='#'){\n            ludi++;\n\t\t\t\tflag=0; //yan mo\n\t\t\t\tdfs(i,j);\n\t\t\t\tif(flag) ans++; //remained\n\t\t\t}\n\n\t}\n\tprintf(\"%d\",ludi-ans);\n}\n\n```\n\n## 第一题： 乘积最大(满分25分)\n### 题目描述：\n>给定N个整数A1, A2, ... AN。请你从中选出K个数，使其乘积最大。  \n请你求出最大的乘积，由于乘积可能超出整型范围，你只需输出乘积除以1000000009的余数。  \n注意，如果X<0， 我们定义X除以1000000009的余数是负(-X)除以1000000009的余数。\n即：0-((0-x) % 1000000009)\n\n>【输入格式】\n第一行包含两个整数N和K。  \n以下N行每行一个整数Ai。  \n对于40%的数据，1 <= K <= N <= 100  \n对于60%的数据，1 <= K <= 1000  \n对于100%的数据，1 <= K <= N <= 100000  -100000 <= Ai <= 100000  \n\n>【输出格式】\n一个整数，表示答案。\n\n>【输入样例】\n5 3 \n-100000   \n-10000   \n2   \n100000  \n10000  \n\n>【输出样例】\n999100009\n\n>再例如：\n【输入样例】\n5 3 \n-100000   \n-100000   \n-2   \n-100000  \n-100000\n\n>【输出样例】\n-999999829\n\n资源约定：\n峰值内存消耗（含虚拟机） < 256M\nCPU消耗  < 1000ms\n\n个人感受：\n    别说了。。我 也不知道为啥。。第二个案例一直是-1.。。。脑阔疼  还是交了，毕竟如果都跟第一个案例一样。。我还是能对的==\n瑟瑟发抖的提交了。。\n看了大佬的分析 我终于知道弱鸡的自己错哪了==\n### 题目答案：\n【分析】像贪模拟贪心。\n\n分了三种情况，1.不含负数，2.不含正数，3.正负都有。 0的情况可以同时放在这三种情况中。\n\n情况1：从最大数开始选即可\n情况2：先考虑能否为0，再考虑选偶数个最小负数，若都做不到，就选奇数个最大负数\n情况3：最难。先考虑用尽量少的负数，尽可能用正数，再从最小负数开始考虑，每次拿两个，乘积去和最小整数的进行比较，若大于，则可用这两个负数替换那两个正数\n\n**【代码】**\n```C++      \n#include<bits/stdc++.h>  \nusing namespace std;  \ntypedef long long ll;  \nconst int mod=1e9+9;  \nconst int N=1e5+10;  \n  \nbool cmp(int i,int j){  \n    return i>j;  \n}  \nll a[N],b[N];  \nint ta,tb,n,k;  \nint main()  \n{  \n    scanf(\"%d%d\",&n,&k);  \n    ta=tb=0;  \n    int x;  \n    int c0=0;  \n    for(int i=0;i<n;i++)  \n    {  \n        scanf(\"%d\",&x);  \n        if(x>0)a[ta++]=x;  \n        else if(x<0)b[tb++]=x;  \n        else c0++;  \n    }  \n    sort(a,a+ta,cmp);  \n    sort(b,b+tb);  \n    ll ans=1;  \n    if(tb==0) //positive and 0  \n    {  \n        if(ta<k)ans=0; //0  \n        else {  \n            for(int i=0;i<k;i++)  \n                ans=ans*a[i]%mod;  \n        }  \n    }  \n    else if(ta==0) //negetive and 0  \n    {  \n        if(k%2&&c0 || tb<k)ans=0;  \n        else {  \n            if(k%2) //k is odd, but no 0  \n            {  \n                for(int i=0,j=tb-1;i<k;i++,j--)  \n                    ans=ans*b[j]%mod;  \n            }  \n            else{  \n                for(int i=0;i<k;i++)  \n                    ans=ans*b[i]%mod;  \n            }  \n        }  \n    }  \n    else  //-,+, 0  \n    {  \n        if(c0&&ta+tb<k){  \n            ans=0;  \n        }  \n        else if(ta+tb==k&&c0==0){  \n            for(int i=0;i<tb;i++)ans=ans*b[i]%mod;  \n            for(int i=0;i<ta;i++)ans=ans*a[i]%mod;  \n        }  \n        else{  \n            int fu;  \n            if(k<=ta)fu=0;  \n            else fu=(k-ta+1)&(-2);  \n            cout<<\"fu\"<<fu<<endl;  \n            int t=fu;  \n            for(int i=fu;i<=tb&&i<=k;i+=2)  \n                if(i>=2&&k-i>=0)  \n                {  \n                    cout<<\"i \"<<i<<endl;  \n                    if(b[i-1]*b[i-2]>a[k-i]*a[k-i+1])  \n                        t=i;  \n                    else break;  \n                }  \n            for(int i=0;i<t;i++)  ans=ans*b[i]%mod;  \n            for(int i=0;i<k-t;i++)ans=ans*a[i]%mod;  \n        }  \n    }  \n    printf(\"%lld\\n\",ans);  \n}  \n```\n\n个人总结：垃圾的我!\n\t一开始以为 对了8题(不难吧~)\n\t好的，发现两道题看错了\n\t对六道有省二嘛？\t\n\t等到答案出来。。填空再去两道== 傻逼答案\n\t所以 愚人节快乐\n\t其实真的不难。。看到答案心态易爆炸\n笑死人的讨论区，值得一看。。。\nhttps://www.zhihu.com/question/270622751\n\n想想是真的菜\n好好努力 尽力试试能不能进入ACM训练队吧！\nPS:其实省赛的难度真的不大，好好准备一下明年再来！\n\n\n\nPS:居然水进了国赛。。。。美滋滋哈哈哈哈 开心了好久。。公费游北京  我来了！！！\n最近多刷刷题 争取能有机会冲击国奖吧(虽然没啥可能)\n2018/4/9","source":"_posts/第九届蓝桥杯试题、答案以及比赛经历.md","raw":"---\ntitle: 第九届蓝桥杯试题、答案以及比赛经历\ndate: 2018-04-05 15:04:32\ntags: \n    - 经历\n    - C/C++题目\ncategories: C/C++ \ndescription: 第一次竞赛经历，第九届蓝桥杯初赛。\n---\n\n时间:2018年愚人节\n地点：南京航空航天大学(江宁校区)\n事件：第九届蓝桥杯省赛\n\n\n废话不多说，直接上题目：\n\n## 第一题： 第几天(满分5分)\n### 题目描述：\n> 2000年的1月1日，是那一年的第1天。那么，2000年的5月4日，是那一年的第几天？ \n> 注意：需要提交的是一个整数，不要填写任何多余内容。\n\n个人感受：\n    很简单的一道题，学习了各位大佬的比赛经验，这种题目也不去考虑编程了，不仅要判断几月是几天还要去思考是否闰年\n\n### 题目答案：\n答案：125\n方法: 日历/excel\n例如：用excel快速求解，第一个单元格输入2000/1/1，第二个单元格输入2000/5/4，然后在第三个单元格生成，第二个单元格减去第一个单元格的值\n哦，对了 ，算完是124，还要加上1！5s出答案。\n\n## 第二题： 明码(满分7分)\n### 题目描述：\n>汉字的字形存在于字库中，即便在今天，16点阵的字库也仍然使用广泛。\n16点阵的字库把每个汉字看成是16x16个像素信息。并把这些信息记录在字节中。\n一个字节可以存储8位信息，用32个字节就可以存一个汉字的字形了。\n把每个字节转为2进制表示，1表示墨迹，0表示底色。每行2个字节，\n一共16行，布局是：\n    第1字节，第2字节\n    第3字节，第4字节\n    ....\n    第31字节, 第32字节\n这道题目是给你一段多个汉字组成的信息，每个汉字用32个字节表示，这里给出了字节作为有符号整数的值。\n题目的要求隐藏在这些信息中。你的任务是复原这些汉字的字形，从中看出题目的要求，并根据要求填写答案。\n这段信息是（一共10个汉字）：\n4 0 4 0 4 0 4 32 -1 -16 4 32 4 32 4 32 4 32 4 32 8 32 8 32 16 34 16 34 32 30 -64 0 \n16 64 16 64 34 68 127 126 66 -124 67 4 66 4 66 -124 126 100 66 36 66 4 66 4 66 4 126 4 66 40 0 16 \n4 0 4 0 4 0 4 32 -1 -16 4 32 4 32 4 32 4 32 4 32 8 32 8 32 16 34 16 34 32 30 -64 0 \n0 -128 64 -128 48 -128 17 8 1 -4 2 8 8 80 16 64 32 64 -32 64 32 -96 32 -96 33 16 34 8 36 14 40 4 \n4 0 3 0 1 0 0 4 -1 -2 4 0 4 16 7 -8 4 16 4 16 4 16 8 16 8 16 16 16 32 -96 64 64 \n16 64 20 72 62 -4 73 32 5 16 1 0 63 -8 1 0 -1 -2 0 64 0 80 63 -8 8 64 4 64 1 64 0 -128 \n0 16 63 -8 1 0 1 0 1 0 1 4 -1 -2 1 0 1 0 1 0 1 0 1 0 1 0 1 0 5 0 2 0 \n2 0 2 0 7 -16 8 32 24 64 37 -128 2 -128 12 -128 113 -4 2 8 12 16 18 32 33 -64 1 0 14 0 112 0 \n1 0 1 0 1 0 9 32 9 16 17 12 17 4 33 16 65 16 1 32 1 64 0 -128 1 0 2 0 12 0 112 0 \n0 0 0 0 7 -16 24 24 48 12 56 12 0 56 0 -32 0 -64 0 -128 0 0 0 0 1 -128 3 -64 1 -128 0 0 \n**注意：需要提交的是一个整数，不要填写任何多余内容。**\n\n个人感受：\n    很有趣的一道题目，一开始有点懵圈，这么多的数据，想到的就是转化为八位二进制，然后两个一组输出 然后换行，\n最后从一堆二进制中看出 题目：九的九次方等于多少？(一开始我还以为时输入转化得到的话，结果看到了最后一个翻译出来是问号==emmm，又看了下题目最后一行，整数！emmmm)\nPS:负数直接用128相加一下就差不多能看了.\n### 题目答案：\n387420489\n**代码一**\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(int x){\n\tint a[8]={0};\n\tif(x<0)\n\t\tx+=128;\n\tfor(int i=7;i>=0;i--){\n\t\ta[i]=x%2;\n\t\tx/=2;\n\t}\n\tfor(int i=0;i<8;i++)\n\t\tif(a[i]) cout<<\"*\";\n\t\telse cout<<\" \";\n}\nint main(){\n\tfor(int i=0;i<10;i++){\n\t\tfor(int i=0;i<16;i++){\n\t\t\t//由题目很容易可以看出 两个八位二进制一行 \n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tprint(x);\n\t\t\tprint(y);\n\t\t\tcout<<endl;\n\t\t}\n\t\tcout<<endl<<endl;\n\t}\n\treturn 0; \n}\n```\n**代码二**\n有大佬用位运算写:\n位运算不不用考虑负数的问题..直接按位进行运算\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(int x){\n\tfor(int i=7;i>=0;i--){\n\t\t// x=4    100 &  10000000  = 0\n\t\t//        100 &  1000000   = 0\n\t\t//        100 &  100000    = 0\n\t\t//        100 &  10000     = 0\n\t\t//        100 &  1000      = 0\n\t\t//        100 &  100       = 100\n\t\t//        100 &  10        = 0\t\n\t\t//        100 &  1         = 0\n\t\tif(x&(1<<i))\n\t\t\tcout<<(x&(1<<i))<<'*';\n\t\telse cout<<' ';\n\t}\nint main(){\n\tfor(int i=0;i<10;i++){\n\t\tfor(int i=0;i<16;i++){\n\t\t\t//由题目很容易可以看出 两个八位二进制一行 \n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tprint(x);\n\t\t\tprint(y);\n\t\t\tcout<<endl;\n\t\t}\n\t\tcout<<endl<<endl;\n\t}\n\treturn 0; \n}\n```\n\n## 第三题： 乘积尾零(满分13分)\n### 题目描述：\n>如下的10行数据，每行有10个整数，请你求出它们的乘积的末尾有多少个零？\n5650 4542 3554 473 946 4114 3871 9073 90 4329 \n2758 7949 6113 5659 5245 7432 3051 4434 6704 3594 \n9937 1173 6866 3397 4759 7557 3070 2287 1453 9899 \n1486 5722 3135 1170 4014 5510 5120 729 2880 9019 \n2049 698 4582 4346 4427 646 9742 7340 1230 7683 \n5693 7015 6887 7381 4172 4341 2909 2027 7355 5649 \n6701 6645 1671 5978 2704 9926 295 3125 3878 6785 \n2066 4247 4800 1578 6652 4616 1113 6205 3264 2915 \n3966 5291 2904 1285 2193 1428 2265 8730 9436 7074 \n689 5510 8243 6114 337 4096 8199 7313 3685 211 \n注意：需要提交的是一个整数，表示末尾零的个数。不要填写任何多余内容。\n\n个人感受：\n    大数这道题。。写的时候还是贼开心的==  因为。。我以为写出来了==\n对于这种数学弱鸡，简直不懂分解为2和5。。只会一行一行的去十个十个相乘再去模一亿取余\n然而==死在了 我只保留了最后两位 非零数。。。。导致杀千刀的少了三个0(大佬说要保留四位（后我实测为3位）)\n这道题 错的 特别 不该  代码也就三分钟的事==\n{% asset_img 1.png %}\n\n思路：两种方法\n①直接将所有数相乘，然后每乘一个数就把后面0全部去掉记一下，不过中间会爆long long，这个好办，每次乘完只保留后4位非0数字，例如216037就只保留6037\n**②正解：所有的0都一定是2*5产生的，所以将每个数拆成一堆2乘上一堆5再乘上一个数，之后统计下有多少个2和多少个5取少的那个就是答案**\n### 题目答案：\n答案：31\n**思路一的代码**\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tint a[101],cnt=0;\n\tfor(int i=0;i<100;i++)\n\t\tscanf(\"%d\",a+i);\n\tfor(int i=0;i<99;i++){\n\t\ta[i+1]*=a[i];\n\t\twhile(a[i+1]%10==0){\n\t\t\ta[i+1]/=10;\n\t\t\tcnt++;\n\t\t}\n\t\ta[i+1]%=1000;\n\t}\n\tcout<<cnt; \n\treturn 0;\n} \n```\n**思路二的代码**\n```C++\n#include<bits/stdc++.h>  \nusing namespace std;  \nint main(){  \n    int res2=0,res5=0;  \n    for(int i=0;i<100;i++){  \n        int x;\n\t\tscanf(\"%d\",&x);  \n        int y=x;  \n        while(x%2==0)res2++,x/=2; \n\t\twhile(x%5==0)res5++,x/=5;  \n    }  \n    cout<<min(res2,res5)<<endl;  \n}  \n```\n\n## 第四题： 测试次数(满分17分)\n### 题目描述：\n> x星球的居民脾气不太好，但好在他们生气的时候唯一的异常举动是：摔手机。\n各大厂商也就纷纷推出各种耐摔型手机。x星球的质监局规定了手机必须经过耐摔测试，并且评定出一个耐摔指数来，之后才允许上市流通。\nx星球有很多高耸入云的高塔，刚好可以用来做耐摔测试。塔的每一层高度都是一样的，与地球上稍有不同的是，他们的第一层不是地面，而是相当于我们的2楼。\n如果手机从第7层扔下去没摔坏，但第8层摔坏了，则手机耐摔指数=7。\n特别地，如果手机从第1层扔下去就坏了，则耐摔指数=0。\n如果到了塔的最高层第n层扔没摔坏，则耐摔指数=n\n为了减少测试次数，从每个厂家抽样3部手机参加测试。\n某次测试的塔高为1000层，如果我们总是采用最佳策略，在最坏的运气下最多需要测试多少次才能确定手机的耐摔指数呢？\n请填写这个最多测试次数。\n注意：需要填写的是一个整数，不要填写任何多余内容。\n\n个人感受：\n    这道题凉凉，很凉，透心凉\n教训，下次一定要先看分值==\n看到题目，最优策略？OK二分！然后就算出了  九次吧==然后自信直接过\n回来车上在复盘，忽然想到，等下。。那个。。摔手机？手机。。手机。。会摔坏了吧。。\nmm了个大p，一问舍友(zl) ，他不是还给了三个手机吗？\n我.....好的。。。题目都没看清。。都不知道我在干嘛。。\n\n不过就算知道了，我也没算对。。。心理平衡了一点\n\n后来我只能算出28。。。emmmm\n大佬: 直接三维 dp dp[0][1000][3] 第一个0一定不爆，第二个1000一定爆，第三个 3个手机。。\nemmmmm......还是不会\n\n### 题目答案：\n答案：19\n\n## 第五题： 快速排序(满分9分)\n### 题目描述：\n> 以下代码可以从数组a[]中找出第k小的元素。\n它使用了类似快速排序中的分治算法，期望时间复杂度是O(N)的。\n请仔细阅读分析源码，填写划线部分缺失的内容。\n```C++\n#include <stdio.h>\n\nint quick_select(int a[], int l, int r, int k) {\n\tint p = rand() % (r - l + 1) + l;\n\tint x = a[p];\n\t{int t = a[p]; a[p] = a[r]; a[r] = t;}\n\tint i = l, j = r;\n\twhile(i < j) {\n\t\twhile(i < j && a[i] < x) i++;\n\t\tif(i < j) {\n\t\t\ta[j] = a[i];\n\t\t\tj--;\n\t\t}\n\t\twhile(i < j && a[j] > x) j--;\n\t\tif(i < j) {\n\t\t\ta[i] = a[j];\n\t\t\ti++;\n\t\t}\n\t}\n\ta[i] = x;\n\tp = i;\n\tif(i - l + 1 == k) return a[i];\n\tif(i - l + 1 < k) return quick_select( _____________________________ ); //填空\n\telse return quick_select(a, l, i - 1, k);\n}\n\t\nint main()\n{\n\tint a[] = {1, 4, 2, 8, 5, 7, 23, 58, 16, 27, 55, 13, 26, 24, 12};\n\tprintf(\"%d\\n\", quick_select(a, 0, 14, 5));\n\treturn 0;\n}\n注意：只填写划线部分缺少的代码，不要抄写已经存在的代码或符号。\n\n```\n个人感受：\n    这道题。。算了。。填空这种题目每次我都是瞎jb猜，然后看答案对不对。。\n我写了个(a,l,r,k)大概对了，就交了。。宛如智障\n以为。。对了的\n好的\n\n### 题目答案：\n答案：a,i+1,r,k-(i-l+1)\n\n\n## 第六题： 递增三元组(满分11分)\n### 题目描述：\n>给定三个整数数组\nA = [A1, A2, ... AN], \nB = [B1, B2, ... BN], \nC = [C1, C2, ... CN]，\n请你统计有多少个三元组(i, j, k) 满足：\n1. 1 <= i, j, k <= N  \n2. Ai < Bj < Ck  \n\n>【输入格式】 \n第一行包含一个整数N。\n第二行包含N个整数A1, A2, ... AN。\n第三行包含N个整数B1, B2, ... BN。\n第四行包含N个整数C1, C2, ... CN。\n对于30%的数据，1 <= N <= 100  \n对于60%的数据，1 <= N <= 1000 \n对于100%的数据，1 <= N <= 100000 0 <= Ai, Bi, Ci <= 100000 \n\n>【输出格式】\n一个整数表示答案\n\n>【样例输入】\n3\n1 1 1\n2 2 2\n3 3 3\n\n>【样例输出】\n27 \n\n>资源约定：\n峰值内存消耗（含虚拟机） < 256M\nCPU消耗  < 1000ms\n\n个人感受：\n    最简单的一道题了== 暴力for。。虽然不知道最后会不会爆。。但至少有60吧\n一开始看到..emmm 不就深搜嘛，最近写了不少，好的。。三分钟码完。。挖草 怎么样例输入答案一直是3\n心态崩了，换了三个for....老子就不信了。。咦。。怎么还是3\n我特么。。dev坏了吧？？？偷偷换个VC还是3  VS2010  还是3\n心态崩了。。  输出中间值明明有27次啊。。 \n忽然。。发现。。 调用函数没return最后的cnt  。。好小子，你过来，不打死你\n以至最后也懒得换回dfs了。。最后，如果有人看了我的代码，可能会觉得被欺骗了。。函数名=dfs，一看。。里面只有三个for。。。\n哈哈哈哈哈哈\n\n### 题目答案：\n**dfs**\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint cnt=0,n;\nint a[100001],b[100001],c[100001]; \nint dfs(int i,int j,int k){\n\tif(a[i]<b[j]&&b[j]<c[k])\n\t\tcnt++;\n\tif(i==n-1&&j==n-1&&k==n-1)\n\t\treturn cnt;\n\tif(k<n) dfs(i,j,k+1);\n\telse if(j<n) dfs(i,j+1,0);\n\t\telse if(i<n) dfs(i+1,0,0);\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++)\n\t\tscanf(\"%d\",&a[i]);\n\tfor(int i=0;i<n;i++)\n\t\tscanf(\"%d\",&b[i]);\n\tfor(int i=0;i<n;i++)\n\t\tscanf(\"%d\",&c[i]);\n\tprintf(\"%d\",dfs(0,0,0));\n\treturn 0;\n} \n```\n**三个for 暴力求解**\n```C++\nfor(int i=0;i<n;i++)\n\t\tfor(int j=0;j<n;j++)\n\t\t\tfor(int k=0;k<n;k++)\n\t\t\t\tif(a[i]<b[j]&&b[j]<c[k])\n\t\t\t\t\tcnt++;\n\treturn cnt;\n```\n\n**最优解**\n思路：分别排序\n先看b和c两个数组，设两个下标i，j分别指向bc数组，对于每一个b[i],可以找到对应的c[j]恰好大于b[i]，那么对于b[i]有n-j个c[j]满足b[i]<c[j]。令sumb[i]=n-j，表示每个b[i]对应的c[j]个数。将sumb处理成后缀和。\n然后再看a和b数组，用同样的方法打出数组suma，不过suma[i]=sumb[j]；\n然后将suma处理成后缀和，suma[0]即为答案。\n```C++\n#include<bits/stdc++.h>  \nusing namespace std;  \ntypedef long long ll;  \nconst int N=1e6+10;  \nll suma[N],sumb[N];  \nint a[N],b[N],c[N];  \nint n;  \nint main(){  \n    scanf(\"%d\",&n);  \n    for(int i=0;i<n;i++)  \n        scanf(\"%d\",&a[i]);  \n    for(int i=0;i<n;i++)  \n        scanf(\"%d\",&b[i]);  \n    for(int i=0;i<n;i++)  \n        scanf(\"%d\",&c[i]);  \n    sort(a,a+n);  \n    sort(b,b+n);  \n    sort(c,c+n);  \n    memset(sumb,0,sizeof(sumb));  \n    for(int i=0,j=0;i<n;i++){  \n        while(j<n&&b[i]>=c[j])j++;  \n        if(j>=n)break;  \n        sumb[i]=n-j;  \n    }  \n    for(int i=n-2;i>=0;i--) //b hou zhui he  \n        sumb[i]+=sumb[i+1];  \n  \n    for(int i=0,j=0;i<n;i++){  \n        while(j<n&&a[i]>=b[j])j++;  \n        if(j>=n)break;  \n        suma[i]=sumb[j];  \n    }  \n    for(int i=n-2;i>=0;i--) //a hou zhui he  \n        suma[i]+=suma[i+1];  \n  \n    printf(\"%lld\\n\",suma[0]);  \n}  \n```\n\n## 第七题： 螺旋折线(满分19分)\n### 题目描述：\n>如图p1.png所示的螺旋折线经过平面上所有整点恰好一次。  \n对于整点(X, Y)，我们定义它到原点的距离dis(X, Y)是从原点到(X, Y)的螺旋折线段的长度。  \n例如dis(0, 1)=3, dis(-2, -1)=9  \n给出整点坐标(X, Y)，你能计算出dis(X, Y)吗？\n\n>【输入格式】\nX和Y  \n对于40%的数据，-1000 <= X, Y <= 1000  \n对于70%的数据，-100000 <= X， Y <= 100000  \n对于100%的数据, -1000000000 <= X, Y <= 1000000000  \n\n>【输出格式】\n输出dis(X, Y)  \n\n>【样例输入】\n0 1\n\n>【样例输出】\n3\n\n>资源约定：\n峰值内存消耗（含虚拟机） < 256M\nCPU消耗  < 1000ms\n\n{% asset_img 2.png %}\n个人感受：\n    并列最简单的一题，emmmm  没啥操作。。就是循环到那个点\n应该时间上会爆了，反正至少50吧。。\n\n### 题目答案：\n**代码：**\n#include<bits/stdc++.h>\nusing namespace std;\nint ex,ey,nx=0,ny=0; \nint check(){\n\tif(nx==ex&&ny==ey)\n\t\treturn 1;\n\telse return 0;\n}\nint main(){\n\tscanf(\"%d%d\",&ex,&ey);\n\tint h=0,cnt=0;\n\twhile(1){\n\t\tfor(int i=0;i<4;i++){\n\t\t\th++;\n\t\t\tif(i==0)\n\t\t\t\tfor(int j=0;j<(h+1)/2;j++){\n\t\t\t\t\tnx--;\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(check()){\n\t\t\t\t\t\tprintf(\"%d\",cnt);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\telse if(i==1)\n\t\t\t\tfor(int j=0;j<h/2;j++){\n\t\t\t\t\tny++;\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(check()){\n\t\t\t\t\t\tprintf(\"%d\",cnt);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\telse if(i==2)\n\t\t\t\tfor(int j=0;j<(h+1)/2;j++){\n\t\t\t\t\tnx++;\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(check()){\n\t\t\t\t\t\tprintf(\"%d\",cnt);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tfor(int j=0;j<h/2;j++){\n\t\t\t\t\tny--;\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(check()){\n\t\t\t\t\t\tprintf(\"%d\",cnt);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n## 第八题： 日志统计(满分21分)\n### 题目描述：\n> 小明维护着一个程序员论坛。现在他收集了一份\"点赞\"日志，日志共有N行。其中每一行的格式是：\nts id  \n表示在ts时刻编号id的帖子收到一个\"赞\"。  \n现在小明想统计有哪些帖子曾经是\"热帖\"。如果一个帖子曾在任意一个长度为D的时间段内收到不少于K个赞，小明就认为这个帖子曾是\"热帖\"。  \n具体来说，如果存在某个时刻T满足该帖在[T, T+D)这段时间内(注意是左闭右开区间)收到不少于K个赞，该帖就曾是\"热帖\"。  \n给定日志，请你帮助小明统计出所有曾是\"热帖\"的帖子编号。  \n\n>【输入格式】\n第一行包含三个整数N、D和K。  \n以下N行每行一条日志，包含两个整数ts和id。  \n对于50%的数据，1 <= K <= N <= 1000  \n对于100%的数据，1 <= K <= N <= 100000 0 <= ts <= 100000 0 <= id <= 100000  \n\n>【输出格式】\n按从小到大的顺序输出热帖id。每个id一行。  \n\n>【输入样例】\n7 10 2  \n0 1  \n0 10    \n10 10  \n10 1  \n9 1\n100 3  \n100 3  \n\n>【输出样例】\n1  \n3  \n\n\n>资源约定：\n峰值内存消耗（含虚拟机） < 256M\nCPU消耗  < 1000ms\n\n个人感受：\n    很烦的一道题。。 思路就是先筛选 ts大于k的   然后再按照 ts在 某段时间内多少排序。。\n道理都懂。。就是弱鸡。。。。没写完就交了==  没写完的我  输入正常，输出 print(\"1\\n3\");\n哈哈哈哈 看看能不能 骗上10分\n\n### 题目答案：\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=1e6+10;\nstruct node{\n\tint t,id;\n}e[N];\nbool cmp(node a,node b){\t// 对结构体按某个条件排序 \n\treturn a.t<b.t;\n}\nint sta[N],top;\nint c[N];\nint n,d,k;\nbool insta[N];\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&d,&k);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d\",&e[i].t,&e[i].id);\n\t}\n\tsort(e+1,e+1+n,cmp);\n\tmemset(c,0,sizeof(c));\n\tmemset(insta,0,sizeof(insta));\n\ttop=0;\n\tfor(int i=1,j=1;i<=n;i++)\n\t{\n\t\twhile(j<=n&&e[i].t-e[j].t>=d)\n\t\tc[e[j++].id]--;\n\t\tc[e[i].id]++;\n\t\tif(c[e[i].id]>=k&&!insta[e[i].id]){\n\t\t\tsta[top++]=e[i].id;\n\t\t\tinsta[e[i].id]=1;\n\t\t}\n\n\t}\n\tsort(sta,sta+top);\n\ttop=unique(sta,sta+top)-sta;\n\tfor(int i=0;i<top;i++)\n\t\tprintf(\"%d\\n\",sta[i]);\n}\n```\n\n## 第九题：全球变暖(满分23分)\n### 题目描述：\n>你有一张某海域NxN像素的照片，\".\"表示海洋、\"#\"表示陆地，如下所示：\n..\\..\\..\\.\n.#\\#..\\..\n.#\\#..\\..\n..\\..##.\n.\\.####.\n..\\.###.\n..\\..\\..\\.\n其中\"上下左右\"四个方向上连在一起的一片陆地组成一座岛屿。例如上图就有2座岛屿。  \n由于全球变暖导致了海面上升，科学家预测未来几十年，岛屿边缘一个像素的范围会被海水淹没。具体来说如果一块陆地像素与海洋相邻(上下左右四个相邻像素中有海洋)，它就会被淹没。  \n例如上图中的海域未来会变成如下样子：\n..\\..\\..\\.\n..\\..\\..\\.\n..\\..\\..\\.\n..\\..\\..\\.\n..\\..\\#..\n..\\..\\..\\.\n.\\..\\..\\..\n请你计算：依照科学家的预测，照片中有多少岛屿会被完全淹没。  \n\n>【输入格式】\n第一行包含一个整数N。  (1 <= N <= 1000)  \n以下N行N列代表一张海域照片。  \n照片保证第1行、第1列、第N行、第N列的像素都是海洋。  \n\n>【输出格式】\n一个整数表示答案。\n\n>【输入样例】\n7 \n..\\..\\..\\.\n.##..\\..\n.##.\\...\n..\\..##.\n..####.\n...###.\n..\\..\\..\\.  \n\n>【输出样例】\n1  \n\n>资源约定：\n峰值内存消耗（含虚拟机） < 256M\nCPU消耗  < 1000ms\n\n个人感受：\n    为啥样例 淹没是1.。没被淹没是1\n我傻傻的看错了==  输出了相反的。。 阿西吧 心痛\n反正我的就是两个bfs\n还有一个很有趣的\n有人给了一组这样的数据：\n\\### ###\n\\#######\n\\### ###\n只有一个岛屿但是淹没后你会发现“岛屿”还会多出来一个！如下\n\n\\# # \n\n这个。。输出0还是-1.。我也不知道。。等答案了。。。\n\n\n### 题目答案：\n**这个 有一个正解代码**\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e3+10;\nint dir[4][2]={-1,0,0,1,1,0,0,-1};\nbool vis[N][N];\nchar mmp[N][N];\nint n,flag;\nbool check(int x,int y){//check if sea;\n\tfor(int i=0;i<4;i++){\n\t\tint fx=x+dir[i][0];\n\t\tint fy=y+dir[i][1];\n\t\tif(fx&&fy&&fx<=n&&fy<=n&&mmp[fx][fy]=='.')\n\t\t\treturn 1; //sea;\n\t}\n\treturn 0; //no sea;\n}\nvoid dfs(int x,int y){\n\tvis[x][y]=1;\n\tif(!check(x,y))flag=1; //remain lu di\n\tfor(int i=0;i<4;i++){\n\t\tint fx=x+dir[i][0];\n\t\tint fy=y+dir[i][1];\n\t\tif(fx&&fy&&fx<=n&&fy<=n&&!vis[fx][fy]&&mmp[fx][fy]=='#')\n\t\t\tdfs(fx,fy);\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%s\",mmp[i]+1);\n\t}\n\tmemset(vis,0,sizeof(vis));\n\tint ans=0,ludi=0;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(!vis[i][j]&&mmp[i][j]=='#'){\n            ludi++;\n\t\t\t\tflag=0; //yan mo\n\t\t\t\tdfs(i,j);\n\t\t\t\tif(flag) ans++; //remained\n\t\t\t}\n\n\t}\n\tprintf(\"%d\",ludi-ans);\n}\n\n```\n\n## 第一题： 乘积最大(满分25分)\n### 题目描述：\n>给定N个整数A1, A2, ... AN。请你从中选出K个数，使其乘积最大。  \n请你求出最大的乘积，由于乘积可能超出整型范围，你只需输出乘积除以1000000009的余数。  \n注意，如果X<0， 我们定义X除以1000000009的余数是负(-X)除以1000000009的余数。\n即：0-((0-x) % 1000000009)\n\n>【输入格式】\n第一行包含两个整数N和K。  \n以下N行每行一个整数Ai。  \n对于40%的数据，1 <= K <= N <= 100  \n对于60%的数据，1 <= K <= 1000  \n对于100%的数据，1 <= K <= N <= 100000  -100000 <= Ai <= 100000  \n\n>【输出格式】\n一个整数，表示答案。\n\n>【输入样例】\n5 3 \n-100000   \n-10000   \n2   \n100000  \n10000  \n\n>【输出样例】\n999100009\n\n>再例如：\n【输入样例】\n5 3 \n-100000   \n-100000   \n-2   \n-100000  \n-100000\n\n>【输出样例】\n-999999829\n\n资源约定：\n峰值内存消耗（含虚拟机） < 256M\nCPU消耗  < 1000ms\n\n个人感受：\n    别说了。。我 也不知道为啥。。第二个案例一直是-1.。。。脑阔疼  还是交了，毕竟如果都跟第一个案例一样。。我还是能对的==\n瑟瑟发抖的提交了。。\n看了大佬的分析 我终于知道弱鸡的自己错哪了==\n### 题目答案：\n【分析】像贪模拟贪心。\n\n分了三种情况，1.不含负数，2.不含正数，3.正负都有。 0的情况可以同时放在这三种情况中。\n\n情况1：从最大数开始选即可\n情况2：先考虑能否为0，再考虑选偶数个最小负数，若都做不到，就选奇数个最大负数\n情况3：最难。先考虑用尽量少的负数，尽可能用正数，再从最小负数开始考虑，每次拿两个，乘积去和最小整数的进行比较，若大于，则可用这两个负数替换那两个正数\n\n**【代码】**\n```C++      \n#include<bits/stdc++.h>  \nusing namespace std;  \ntypedef long long ll;  \nconst int mod=1e9+9;  \nconst int N=1e5+10;  \n  \nbool cmp(int i,int j){  \n    return i>j;  \n}  \nll a[N],b[N];  \nint ta,tb,n,k;  \nint main()  \n{  \n    scanf(\"%d%d\",&n,&k);  \n    ta=tb=0;  \n    int x;  \n    int c0=0;  \n    for(int i=0;i<n;i++)  \n    {  \n        scanf(\"%d\",&x);  \n        if(x>0)a[ta++]=x;  \n        else if(x<0)b[tb++]=x;  \n        else c0++;  \n    }  \n    sort(a,a+ta,cmp);  \n    sort(b,b+tb);  \n    ll ans=1;  \n    if(tb==0) //positive and 0  \n    {  \n        if(ta<k)ans=0; //0  \n        else {  \n            for(int i=0;i<k;i++)  \n                ans=ans*a[i]%mod;  \n        }  \n    }  \n    else if(ta==0) //negetive and 0  \n    {  \n        if(k%2&&c0 || tb<k)ans=0;  \n        else {  \n            if(k%2) //k is odd, but no 0  \n            {  \n                for(int i=0,j=tb-1;i<k;i++,j--)  \n                    ans=ans*b[j]%mod;  \n            }  \n            else{  \n                for(int i=0;i<k;i++)  \n                    ans=ans*b[i]%mod;  \n            }  \n        }  \n    }  \n    else  //-,+, 0  \n    {  \n        if(c0&&ta+tb<k){  \n            ans=0;  \n        }  \n        else if(ta+tb==k&&c0==0){  \n            for(int i=0;i<tb;i++)ans=ans*b[i]%mod;  \n            for(int i=0;i<ta;i++)ans=ans*a[i]%mod;  \n        }  \n        else{  \n            int fu;  \n            if(k<=ta)fu=0;  \n            else fu=(k-ta+1)&(-2);  \n            cout<<\"fu\"<<fu<<endl;  \n            int t=fu;  \n            for(int i=fu;i<=tb&&i<=k;i+=2)  \n                if(i>=2&&k-i>=0)  \n                {  \n                    cout<<\"i \"<<i<<endl;  \n                    if(b[i-1]*b[i-2]>a[k-i]*a[k-i+1])  \n                        t=i;  \n                    else break;  \n                }  \n            for(int i=0;i<t;i++)  ans=ans*b[i]%mod;  \n            for(int i=0;i<k-t;i++)ans=ans*a[i]%mod;  \n        }  \n    }  \n    printf(\"%lld\\n\",ans);  \n}  \n```\n\n个人总结：垃圾的我!\n\t一开始以为 对了8题(不难吧~)\n\t好的，发现两道题看错了\n\t对六道有省二嘛？\t\n\t等到答案出来。。填空再去两道== 傻逼答案\n\t所以 愚人节快乐\n\t其实真的不难。。看到答案心态易爆炸\n笑死人的讨论区，值得一看。。。\nhttps://www.zhihu.com/question/270622751\n\n想想是真的菜\n好好努力 尽力试试能不能进入ACM训练队吧！\nPS:其实省赛的难度真的不大，好好准备一下明年再来！\n\n\n\nPS:居然水进了国赛。。。。美滋滋哈哈哈哈 开心了好久。。公费游北京  我来了！！！\n最近多刷刷题 争取能有机会冲击国奖吧(虽然没啥可能)\n2018/4/9","slug":"第九届蓝桥杯试题、答案以及比赛经历","published":1,"updated":"2020-02-06T22:40:22.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9ap004b24uwz8l14g48","content":"<p>时间:2018年愚人节<br>地点：南京航空航天大学(江宁校区)<br>事件：第九届蓝桥杯省赛</p>\n<p>废话不多说，直接上题目：</p>\n<h2 id=\"第一题：-第几天-满分5分\"><a href=\"#第一题：-第几天-满分5分\" class=\"headerlink\" title=\"第一题： 第几天(满分5分)\"></a>第一题： 第几天(满分5分)</h2><h3 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>2000年的1月1日，是那一年的第1天。那么，2000年的5月4日，是那一年的第几天？<br>注意：需要提交的是一个整数，不要填写任何多余内容。</p>\n</blockquote>\n<p>个人感受：<br>    很简单的一道题，学习了各位大佬的比赛经验，这种题目也不去考虑编程了，不仅要判断几月是几天还要去思考是否闰年</p>\n<h3 id=\"题目答案：\"><a href=\"#题目答案：\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p>答案：125<br>方法: 日历/excel<br>例如：用excel快速求解，第一个单元格输入2000/1/1，第二个单元格输入2000/5/4，然后在第三个单元格生成，第二个单元格减去第一个单元格的值<br>哦，对了 ，算完是124，还要加上1！5s出答案。</p>\n<h2 id=\"第二题：-明码-满分7分\"><a href=\"#第二题：-明码-满分7分\" class=\"headerlink\" title=\"第二题： 明码(满分7分)\"></a>第二题： 明码(满分7分)</h2><h3 id=\"题目描述：-1\"><a href=\"#题目描述：-1\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>汉字的字形存在于字库中，即便在今天，16点阵的字库也仍然使用广泛。<br>16点阵的字库把每个汉字看成是16x16个像素信息。并把这些信息记录在字节中。<br>一个字节可以存储8位信息，用32个字节就可以存一个汉字的字形了。<br>把每个字节转为2进制表示，1表示墨迹，0表示底色。每行2个字节，<br>一共16行，布局是：<br>    第1字节，第2字节<br>    第3字节，第4字节<br>    ….<br>    第31字节, 第32字节<br>这道题目是给你一段多个汉字组成的信息，每个汉字用32个字节表示，这里给出了字节作为有符号整数的值。<br>题目的要求隐藏在这些信息中。你的任务是复原这些汉字的字形，从中看出题目的要求，并根据要求填写答案。<br>这段信息是（一共10个汉字）：<br>4 0 4 0 4 0 4 32 -1 -16 4 32 4 32 4 32 4 32 4 32 8 32 8 32 16 34 16 34 32 30 -64 0<br>16 64 16 64 34 68 127 126 66 -124 67 4 66 4 66 -124 126 100 66 36 66 4 66 4 66 4 126 4 66 40 0 16<br>4 0 4 0 4 0 4 32 -1 -16 4 32 4 32 4 32 4 32 4 32 8 32 8 32 16 34 16 34 32 30 -64 0<br>0 -128 64 -128 48 -128 17 8 1 -4 2 8 8 80 16 64 32 64 -32 64 32 -96 32 -96 33 16 34 8 36 14 40 4<br>4 0 3 0 1 0 0 4 -1 -2 4 0 4 16 7 -8 4 16 4 16 4 16 8 16 8 16 16 16 32 -96 64 64<br>16 64 20 72 62 -4 73 32 5 16 1 0 63 -8 1 0 -1 -2 0 64 0 80 63 -8 8 64 4 64 1 64 0 -128<br>0 16 63 -8 1 0 1 0 1 0 1 4 -1 -2 1 0 1 0 1 0 1 0 1 0 1 0 1 0 5 0 2 0<br>2 0 2 0 7 -16 8 32 24 64 37 -128 2 -128 12 -128 113 -4 2 8 12 16 18 32 33 -64 1 0 14 0 112 0<br>1 0 1 0 1 0 9 32 9 16 17 12 17 4 33 16 65 16 1 32 1 64 0 -128 1 0 2 0 12 0 112 0<br>0 0 0 0 7 -16 24 24 48 12 56 12 0 56 0 -32 0 -64 0 -128 0 0 0 0 1 -128 3 -64 1 -128 0 0<br><strong>注意：需要提交的是一个整数，不要填写任何多余内容。</strong></p>\n</blockquote>\n<p>个人感受：<br>    很有趣的一道题目，一开始有点懵圈，这么多的数据，想到的就是转化为八位二进制，然后两个一组输出 然后换行，<br>最后从一堆二进制中看出 题目：九的九次方等于多少？(一开始我还以为时输入转化得到的话，结果看到了最后一个翻译出来是问号==emmm，又看了下题目最后一行，整数！emmmm)<br>PS:负数直接用128相加一下就差不多能看了.</p>\n<h3 id=\"题目答案：-1\"><a href=\"#题目答案：-1\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p>387420489<br><strong>代码一</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">8</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tx+=<span class=\"number\">128</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">7</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">\t\ta[i]=x%<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tx/=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">8</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i]) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"*\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">16</span>;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//由题目很容易可以看出 两个八位二进制一行 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;x,&amp;y);</span><br><span class=\"line\">\t\t\tprint(x);</span><br><span class=\"line\">\t\t\tprint(y);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码二</strong><br>有大佬用位运算写:<br>位运算不不用考虑负数的问题..直接按位进行运算</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">7</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// x=4    100 &amp;  10000000  = 0</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//        100 &amp;  1000000   = 0</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//        100 &amp;  100000    = 0</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//        100 &amp;  10000     = 0</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//        100 &amp;  1000      = 0</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//        100 &amp;  100       = 100</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//        100 &amp;  10        = 0\t</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//        100 &amp;  1         = 0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x&amp;(<span class=\"number\">1</span>&lt;&lt;i))</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;(x&amp;(<span class=\"number\">1</span>&lt;&lt;i))&lt;&lt;<span class=\"string\">'*'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">16</span>;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//由题目很容易可以看出 两个八位二进制一行 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;x,&amp;y);</span><br><span class=\"line\">\t\t\tprint(x);</span><br><span class=\"line\">\t\t\tprint(y);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三题：-乘积尾零-满分13分\"><a href=\"#第三题：-乘积尾零-满分13分\" class=\"headerlink\" title=\"第三题： 乘积尾零(满分13分)\"></a>第三题： 乘积尾零(满分13分)</h2><h3 id=\"题目描述：-2\"><a href=\"#题目描述：-2\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>如下的10行数据，每行有10个整数，请你求出它们的乘积的末尾有多少个零？<br>5650 4542 3554 473 946 4114 3871 9073 90 4329<br>2758 7949 6113 5659 5245 7432 3051 4434 6704 3594<br>9937 1173 6866 3397 4759 7557 3070 2287 1453 9899<br>1486 5722 3135 1170 4014 5510 5120 729 2880 9019<br>2049 698 4582 4346 4427 646 9742 7340 1230 7683<br>5693 7015 6887 7381 4172 4341 2909 2027 7355 5649<br>6701 6645 1671 5978 2704 9926 295 3125 3878 6785<br>2066 4247 4800 1578 6652 4616 1113 6205 3264 2915<br>3966 5291 2904 1285 2193 1428 2265 8730 9436 7074<br>689 5510 8243 6114 337 4096 8199 7313 3685 211<br>注意：需要提交的是一个整数，表示末尾零的个数。不要填写任何多余内容。</p>\n</blockquote>\n<p>个人感受：<br>    大数这道题。。写的时候还是贼开心的==  因为。。我以为写出来了==<br>对于这种数学弱鸡，简直不懂分解为2和5。。只会一行一行的去十个十个相乘再去模一亿取余<br>然而==死在了 我只保留了最后两位 非零数。。。。导致杀千刀的少了三个0(大佬说要保留四位（后我实测为3位）)<br>这道题 错的 特别 不该  代码也就三分钟的事==</p>\n\n\n<p>思路：两种方法<br>①直接将所有数相乘，然后每乘一个数就把后面0全部去掉记一下，不过中间会爆long long，这个好办，每次乘完只保留后4位非0数字，例如216037就只保留6037<br><strong>②正解：所有的0都一定是2*5产生的，所以将每个数拆成一堆2乘上一堆5再乘上一个数，之后统计下有多少个2和多少个5取少的那个就是答案</strong></p>\n<h3 id=\"题目答案：-2\"><a href=\"#题目答案：-2\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p>答案：31<br><strong>思路一的代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">101</span>],cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,a+i);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">99</span>;i++)&#123;</span><br><span class=\"line\">\t\ta[i+<span class=\"number\">1</span>]*=a[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(a[i+<span class=\"number\">1</span>]%<span class=\"number\">10</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\ta[i+<span class=\"number\">1</span>]/=<span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\tcnt++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[i+<span class=\"number\">1</span>]%=<span class=\"number\">1000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;cnt; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>思路二的代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> res2=<span class=\"number\">0</span>,res5=<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> y=x;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x%<span class=\"number\">2</span>==<span class=\"number\">0</span>)res2++,x/=<span class=\"number\">2</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(x%<span class=\"number\">5</span>==<span class=\"number\">0</span>)res5++,x/=<span class=\"number\">5</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;min(res2,res5)&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第四题：-测试次数-满分17分\"><a href=\"#第四题：-测试次数-满分17分\" class=\"headerlink\" title=\"第四题： 测试次数(满分17分)\"></a>第四题： 测试次数(满分17分)</h2><h3 id=\"题目描述：-3\"><a href=\"#题目描述：-3\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>x星球的居民脾气不太好，但好在他们生气的时候唯一的异常举动是：摔手机。<br>各大厂商也就纷纷推出各种耐摔型手机。x星球的质监局规定了手机必须经过耐摔测试，并且评定出一个耐摔指数来，之后才允许上市流通。<br>x星球有很多高耸入云的高塔，刚好可以用来做耐摔测试。塔的每一层高度都是一样的，与地球上稍有不同的是，他们的第一层不是地面，而是相当于我们的2楼。<br>如果手机从第7层扔下去没摔坏，但第8层摔坏了，则手机耐摔指数=7。<br>特别地，如果手机从第1层扔下去就坏了，则耐摔指数=0。<br>如果到了塔的最高层第n层扔没摔坏，则耐摔指数=n<br>为了减少测试次数，从每个厂家抽样3部手机参加测试。<br>某次测试的塔高为1000层，如果我们总是采用最佳策略，在最坏的运气下最多需要测试多少次才能确定手机的耐摔指数呢？<br>请填写这个最多测试次数。<br>注意：需要填写的是一个整数，不要填写任何多余内容。</p>\n</blockquote>\n<p>个人感受：<br>    这道题凉凉，很凉，透心凉<br>教训，下次一定要先看分值==<br>看到题目，最优策略？OK二分！然后就算出了  九次吧==然后自信直接过<br>回来车上在复盘，忽然想到，等下。。那个。。摔手机？手机。。手机。。会摔坏了吧。。<br>mm了个大p，一问舍友(zl) ，他不是还给了三个手机吗？<br>我…..好的。。。题目都没看清。。都不知道我在干嘛。。</p>\n<p>不过就算知道了，我也没算对。。。心理平衡了一点</p>\n<p>后来我只能算出28。。。emmmm<br>大佬: 直接三维 dp dp[0][1000][3] 第一个0一定不爆，第二个1000一定爆，第三个 3个手机。。<br>emmmmm……还是不会</p>\n<h3 id=\"题目答案：-3\"><a href=\"#题目答案：-3\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p>答案：19</p>\n<h2 id=\"第五题：-快速排序-满分9分\"><a href=\"#第五题：-快速排序-满分9分\" class=\"headerlink\" title=\"第五题： 快速排序(满分9分)\"></a>第五题： 快速排序(满分9分)</h2><h3 id=\"题目描述：-4\"><a href=\"#题目描述：-4\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>以下代码可以从数组a[]中找出第k小的元素。<br>它使用了类似快速排序中的分治算法，期望时间复杂度是O(N)的。<br>请仔细阅读分析源码，填写划线部分缺失的内容。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">quick_select</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> p = rand() % (r - l + <span class=\"number\">1</span>) + l;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = a[p];</span><br><span class=\"line\">\t&#123;<span class=\"keyword\">int</span> t = a[p]; a[p] = a[r]; a[r] = t;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = l, j = r;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &lt; j) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(i &lt; j &amp;&amp; a[i] &lt; x) i++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i &lt; j) &#123;</span><br><span class=\"line\">\t\t\ta[j] = a[i];</span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(i &lt; j &amp;&amp; a[j] &gt; x) j--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i &lt; j) &#123;</span><br><span class=\"line\">\t\t\ta[i] = a[j];</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[i] = x;</span><br><span class=\"line\">\tp = i;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i - l + <span class=\"number\">1</span> == k) <span class=\"keyword\">return</span> a[i];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i - l + <span class=\"number\">1</span> &lt; k) <span class=\"keyword\">return</span> quick_select( _____________________________ ); <span class=\"comment\">//填空</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> quick_select(a, l, i - <span class=\"number\">1</span>, k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">23</span>, <span class=\"number\">58</span>, <span class=\"number\">16</span>, <span class=\"number\">27</span>, <span class=\"number\">55</span>, <span class=\"number\">13</span>, <span class=\"number\">26</span>, <span class=\"number\">24</span>, <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, quick_select(a, <span class=\"number\">0</span>, <span class=\"number\">14</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">注意：只填写划线部分缺少的代码，不要抄写已经存在的代码或符号。</span><br></pre></td></tr></table></figure>\n\n<p>个人感受：<br>    这道题。。算了。。填空这种题目每次我都是瞎jb猜，然后看答案对不对。。<br>我写了个(a,l,r,k)大概对了，就交了。。宛如智障<br>以为。。对了的<br>好的</p>\n<h3 id=\"题目答案：-4\"><a href=\"#题目答案：-4\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p>答案：a,i+1,r,k-(i-l+1)</p>\n<h2 id=\"第六题：-递增三元组-满分11分\"><a href=\"#第六题：-递增三元组-满分11分\" class=\"headerlink\" title=\"第六题： 递增三元组(满分11分)\"></a>第六题： 递增三元组(满分11分)</h2><h3 id=\"题目描述：-5\"><a href=\"#题目描述：-5\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>给定三个整数数组<br>A = [A1, A2, … AN],<br>B = [B1, B2, … BN],<br>C = [C1, C2, … CN]，<br>请你统计有多少个三元组(i, j, k) 满足：</p>\n</blockquote>\n<ol>\n<li>1 &lt;= i, j, k &lt;= N  </li>\n<li>Ai &lt; Bj &lt; Ck  </li>\n</ol>\n<blockquote>\n<p>【输入格式】<br>第一行包含一个整数N。<br>第二行包含N个整数A1, A2, … AN。<br>第三行包含N个整数B1, B2, … BN。<br>第四行包含N个整数C1, C2, … CN。<br>对于30%的数据，1 &lt;= N &lt;= 100<br>对于60%的数据，1 &lt;= N &lt;= 1000<br>对于100%的数据，1 &lt;= N &lt;= 100000 0 &lt;= Ai, Bi, Ci &lt;= 100000 </p>\n</blockquote>\n<blockquote>\n<p>【输出格式】<br>一个整数表示答案</p>\n</blockquote>\n<blockquote>\n<p>【样例输入】<br>3<br>1 1 1<br>2 2 2<br>3 3 3</p>\n</blockquote>\n<blockquote>\n<p>【样例输出】<br>27 </p>\n</blockquote>\n<blockquote>\n<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗  &lt; 1000ms</p>\n</blockquote>\n<p>个人感受：<br>    最简单的一道题了== 暴力for。。虽然不知道最后会不会爆。。但至少有60吧<br>一开始看到..emmm 不就深搜嘛，最近写了不少，好的。。三分钟码完。。挖草 怎么样例输入答案一直是3<br>心态崩了，换了三个for….老子就不信了。。咦。。怎么还是3<br>我特么。。dev坏了吧？？？偷偷换个VC还是3  VS2010  还是3<br>心态崩了。。  输出中间值明明有27次啊。。<br>忽然。。发现。。 调用函数没return最后的cnt  。。好小子，你过来，不打死你<br>以至最后也懒得换回dfs了。。最后，如果有人看了我的代码，可能会觉得被欺骗了。。函数名=dfs，一看。。里面只有三个for。。。<br>哈哈哈哈哈哈</p>\n<h3 id=\"题目答案：-5\"><a href=\"#题目答案：-5\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p><strong>dfs</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>,n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">100001</span>],b[<span class=\"number\">100001</span>],c[<span class=\"number\">100001</span>]; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j,<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a[i]&lt;b[j]&amp;&amp;b[j]&lt;c[k])</span><br><span class=\"line\">\t\tcnt++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i==n<span class=\"number\">-1</span>&amp;&amp;j==n<span class=\"number\">-1</span>&amp;&amp;k==n<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(k&lt;n) dfs(i,j,k+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&lt;n) dfs(i,j+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i&lt;n) dfs(i+<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;b[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;c[i]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,dfs(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>三个for 暴力求解</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;n;k++)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(a[i]&lt;b[j]&amp;&amp;b[j]&lt;c[k])</span><br><span class=\"line\">\t\t\t\t\tcnt++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cnt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>最优解</strong><br>思路：分别排序<br>先看b和c两个数组，设两个下标i，j分别指向bc数组，对于每一个b[i],可以找到对应的c[j]恰好大于b[i]，那么对于b[i]有n-j个c[j]满足b[i]&lt;c[j]。令sumb[i]=n-j，表示每个b[i]对应的c[j]个数。将sumb处理成后缀和。<br>然后再看a和b数组，用同样的方法打出数组suma，不过suma[i]=sumb[j]；<br>然后将suma处理成后缀和，suma[0]即为答案。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;  </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;  </span><br><span class=\"line\">ll suma[N],sumb[N];  </span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N],b[N],c[N];  </span><br><span class=\"line\"><span class=\"keyword\">int</span> n;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;b[i]);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;c[i]);  </span><br><span class=\"line\">    sort(a,a+n);  </span><br><span class=\"line\">    sort(b,b+n);  </span><br><span class=\"line\">    sort(c,c+n);  </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(sumb,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(sumb));  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;n;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&lt;n&amp;&amp;b[i]&gt;=c[j])j++;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j&gt;=n)<span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        sumb[i]=n-j;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n<span class=\"number\">-2</span>;i&gt;=<span class=\"number\">0</span>;i--) <span class=\"comment\">//b hou zhui he  </span></span><br><span class=\"line\">        sumb[i]+=sumb[i+<span class=\"number\">1</span>];  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;n;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&lt;n&amp;&amp;a[i]&gt;=b[j])j++;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j&gt;=n)<span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        suma[i]=sumb[j];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n<span class=\"number\">-2</span>;i&gt;=<span class=\"number\">0</span>;i--) <span class=\"comment\">//a hou zhui he  </span></span><br><span class=\"line\">        suma[i]+=suma[i+<span class=\"number\">1</span>];  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,suma[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第七题：-螺旋折线-满分19分\"><a href=\"#第七题：-螺旋折线-满分19分\" class=\"headerlink\" title=\"第七题： 螺旋折线(满分19分)\"></a>第七题： 螺旋折线(满分19分)</h2><h3 id=\"题目描述：-6\"><a href=\"#题目描述：-6\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>如图p1.png所示的螺旋折线经过平面上所有整点恰好一次。<br>对于整点(X, Y)，我们定义它到原点的距离dis(X, Y)是从原点到(X, Y)的螺旋折线段的长度。<br>例如dis(0, 1)=3, dis(-2, -1)=9<br>给出整点坐标(X, Y)，你能计算出dis(X, Y)吗？</p>\n</blockquote>\n<blockquote>\n<p>【输入格式】<br>X和Y<br>对于40%的数据，-1000 &lt;= X, Y &lt;= 1000<br>对于70%的数据，-100000 &lt;= X， Y &lt;= 100000<br>对于100%的数据, -1000000000 &lt;= X, Y &lt;= 1000000000  </p>\n</blockquote>\n<blockquote>\n<p>【输出格式】<br>输出dis(X, Y)  </p>\n</blockquote>\n<blockquote>\n<p>【样例输入】<br>0 1</p>\n</blockquote>\n<blockquote>\n<p>【样例输出】<br>3</p>\n</blockquote>\n<blockquote>\n<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗  &lt; 1000ms</p>\n</blockquote>\n\n<p>个人感受：<br>    并列最简单的一题，emmmm  没啥操作。。就是循环到那个点<br>应该时间上会爆了，反正至少50吧。。</p>\n<h3 id=\"题目答案：-6\"><a href=\"#题目答案：-6\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p><strong>代码：</strong><br>#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br>int ex,ey,nx=0,ny=0;<br>int check(){<br>    if(nx==ex&amp;&amp;ny==ey)<br>        return 1;<br>    else return 0;<br>}<br>int main(){<br>    scanf(“%d%d”,&amp;ex,&amp;ey);<br>    int h=0,cnt=0;<br>    while(1){<br>        for(int i=0;i&lt;4;i++){<br>            h++;<br>            if(i==0)<br>                for(int j=0;j&lt;(h+1)/2;j++){<br>                    nx–;<br>                    cnt++;<br>                    if(check()){<br>                        printf(“%d”,cnt);<br>                        return 0;<br>                    }<br>                }<br>            else if(i==1)<br>                for(int j=0;j&lt;h/2;j++){<br>                    ny++;<br>                    cnt++;<br>                    if(check()){<br>                        printf(“%d”,cnt);<br>                        return 0;<br>                    }<br>                }<br>            else if(i==2)<br>                for(int j=0;j&lt;(h+1)/2;j++){<br>                    nx++;<br>                    cnt++;<br>                    if(check()){<br>                        printf(“%d”,cnt);<br>                        return 0;<br>                    }<br>                }<br>            else<br>                for(int j=0;j&lt;h/2;j++){<br>                    ny–;<br>                    cnt++;<br>                    if(check()){<br>                        printf(“%d”,cnt);<br>                        return 0;<br>                    }<br>                }<br>        }<br>    }<br>    return 0;<br>}</p>\n<h2 id=\"第八题：-日志统计-满分21分\"><a href=\"#第八题：-日志统计-满分21分\" class=\"headerlink\" title=\"第八题： 日志统计(满分21分)\"></a>第八题： 日志统计(满分21分)</h2><h3 id=\"题目描述：-7\"><a href=\"#题目描述：-7\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>小明维护着一个程序员论坛。现在他收集了一份”点赞”日志，日志共有N行。其中每一行的格式是：<br>ts id<br>表示在ts时刻编号id的帖子收到一个”赞”。<br>现在小明想统计有哪些帖子曾经是”热帖”。如果一个帖子曾在任意一个长度为D的时间段内收到不少于K个赞，小明就认为这个帖子曾是”热帖”。<br>具体来说，如果存在某个时刻T满足该帖在[T, T+D)这段时间内(注意是左闭右开区间)收到不少于K个赞，该帖就曾是”热帖”。<br>给定日志，请你帮助小明统计出所有曾是”热帖”的帖子编号。  </p>\n</blockquote>\n<blockquote>\n<p>【输入格式】<br>第一行包含三个整数N、D和K。<br>以下N行每行一条日志，包含两个整数ts和id。<br>对于50%的数据，1 &lt;= K &lt;= N &lt;= 1000<br>对于100%的数据，1 &lt;= K &lt;= N &lt;= 100000 0 &lt;= ts &lt;= 100000 0 &lt;= id &lt;= 100000  </p>\n</blockquote>\n<blockquote>\n<p>【输出格式】<br>按从小到大的顺序输出热帖id。每个id一行。  </p>\n</blockquote>\n<blockquote>\n<p>【输入样例】<br>7 10 2<br>0 1<br>0 10<br>10 10<br>10 1<br>9 1<br>100 3<br>100 3  </p>\n</blockquote>\n<blockquote>\n<p>【输出样例】<br>1<br>3  </p>\n</blockquote>\n<blockquote>\n<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗  &lt; 1000ms</p>\n</blockquote>\n<p>个人感受：<br>    很烦的一道题。。 思路就是先筛选 ts大于k的   然后再按照 ts在 某段时间内多少排序。。<br>道理都懂。。就是弱鸡。。。。没写完就交了==  没写完的我  输入正常，输出 print(“1\\n3”);<br>哈哈哈哈 看看能不能 骗上10分</p>\n<h3 id=\"题目答案：-7\"><a href=\"#题目答案：-7\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> t,id;</span><br><span class=\"line\">&#125;e[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(node a,node b)</span></span>&#123;\t<span class=\"comment\">// 对结构体按某个条件排序 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.t&lt;b.t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sta[N],top;</span><br><span class=\"line\"><span class=\"keyword\">int</span> c[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,d,k;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> insta[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;n,&amp;d,&amp;k);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;e[i].t,&amp;e[i].id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsort(e+<span class=\"number\">1</span>,e+<span class=\"number\">1</span>+n,cmp);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(c,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(c));</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(insta,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(insta));</span><br><span class=\"line\">\ttop=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,j=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(j&lt;=n&amp;&amp;e[i].t-e[j].t&gt;=d)</span><br><span class=\"line\">\t\tc[e[j++].id]--;</span><br><span class=\"line\">\t\tc[e[i].id]++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(c[e[i].id]&gt;=k&amp;&amp;!insta[e[i].id])&#123;</span><br><span class=\"line\">\t\t\tsta[top++]=e[i].id;</span><br><span class=\"line\">\t\t\tinsta[e[i].id]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsort(sta,sta+top);</span><br><span class=\"line\">\ttop=unique(sta,sta+top)-sta;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;top;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,sta[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第九题：全球变暖-满分23分\"><a href=\"#第九题：全球变暖-满分23分\" class=\"headerlink\" title=\"第九题：全球变暖(满分23分)\"></a>第九题：全球变暖(满分23分)</h2><h3 id=\"题目描述：-8\"><a href=\"#题目描述：-8\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>你有一张某海域NxN像素的照片，”.”表示海洋、”#”表示陆地，如下所示：<br>.......<br>.##....<br>.##....<br>....##.<br>..####.<br>...###.<br>.......<br>其中”上下左右”四个方向上连在一起的一片陆地组成一座岛屿。例如上图就有2座岛屿。<br>由于全球变暖导致了海面上升，科学家预测未来几十年，岛屿边缘一个像素的范围会被海水淹没。具体来说如果一块陆地像素与海洋相邻(上下左右四个相邻像素中有海洋)，它就会被淹没。<br>例如上图中的海域未来会变成如下样子：<br>.......<br>.......<br>.......<br>.......<br>....#..<br>.......<br>.......<br>请你计算：依照科学家的预测，照片中有多少岛屿会被完全淹没。  </p>\n</blockquote>\n<blockquote>\n<p>【输入格式】<br>第一行包含一个整数N。  (1 &lt;= N &lt;= 1000)<br>以下N行N列代表一张海域照片。<br>照片保证第1行、第1列、第N行、第N列的像素都是海洋。  </p>\n</blockquote>\n<blockquote>\n<p>【输出格式】<br>一个整数表示答案。</p>\n</blockquote>\n<blockquote>\n<p>【输入样例】<br>7<br>.......<br>.##....<br>.##....<br>....##.<br>..####.<br>…###.<br>.......  </p>\n</blockquote>\n<blockquote>\n<p>【输出样例】<br>1  </p>\n</blockquote>\n<blockquote>\n<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗  &lt; 1000ms</p>\n</blockquote>\n<p>个人感受：<br>    为啥样例 淹没是1.。没被淹没是1<br>我傻傻的看错了==  输出了相反的。。 阿西吧 心痛<br>反正我的就是两个bfs<br>还有一个很有趣的<br>有人给了一组这样的数据：<br>### ###<br>#######<br>### ###<br>只有一个岛屿但是淹没后你会发现“岛屿”还会多出来一个！如下</p>\n<p># # </p>\n<p>这个。。输出0还是-1.。我也不知道。。等答案了。。。</p>\n<h3 id=\"题目答案：-8\"><a href=\"#题目答案：-8\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p><strong>这个 有一个正解代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">1e3</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dir[<span class=\"number\">4</span>][<span class=\"number\">2</span>]=&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[N][N];</span><br><span class=\"line\"><span class=\"keyword\">char</span> mmp[N][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,flag;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;<span class=\"comment\">//check if sea;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> fx=x+dir[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> fy=y+dir[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(fx&amp;&amp;fy&amp;&amp;fx&lt;=n&amp;&amp;fy&lt;=n&amp;&amp;mmp[fx][fy]==<span class=\"string\">'.'</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">//sea;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">//no sea;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">\tvis[x][y]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!check(x,y))flag=<span class=\"number\">1</span>; <span class=\"comment\">//remain lu di</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> fx=x+dir[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> fy=y+dir[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(fx&amp;&amp;fy&amp;&amp;fx&lt;=n&amp;&amp;fy&lt;=n&amp;&amp;!vis[fx][fy]&amp;&amp;mmp[fx][fy]==<span class=\"string\">'#'</span>)</span><br><span class=\"line\">\t\t\tdfs(fx,fy);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,mmp[i]+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>,ludi=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!vis[i][j]&amp;&amp;mmp[i][j]==<span class=\"string\">'#'</span>)&#123;</span><br><span class=\"line\">            ludi++;</span><br><span class=\"line\">\t\t\t\tflag=<span class=\"number\">0</span>; <span class=\"comment\">//yan mo</span></span><br><span class=\"line\">\t\t\t\tdfs(i,j);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(flag) ans++; <span class=\"comment\">//remained</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,ludi-ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第一题：-乘积最大-满分25分\"><a href=\"#第一题：-乘积最大-满分25分\" class=\"headerlink\" title=\"第一题： 乘积最大(满分25分)\"></a>第一题： 乘积最大(满分25分)</h2><h3 id=\"题目描述：-9\"><a href=\"#题目描述：-9\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>给定N个整数A1, A2, … AN。请你从中选出K个数，使其乘积最大。<br>请你求出最大的乘积，由于乘积可能超出整型范围，你只需输出乘积除以1000000009的余数。<br>注意，如果X&lt;0， 我们定义X除以1000000009的余数是负(-X)除以1000000009的余数。<br>即：0-((0-x) % 1000000009)</p>\n</blockquote>\n<blockquote>\n<p>【输入格式】<br>第一行包含两个整数N和K。<br>以下N行每行一个整数Ai。<br>对于40%的数据，1 &lt;= K &lt;= N &lt;= 100<br>对于60%的数据，1 &lt;= K &lt;= 1000<br>对于100%的数据，1 &lt;= K &lt;= N &lt;= 100000  -100000 &lt;= Ai &lt;= 100000  </p>\n</blockquote>\n<blockquote>\n<p>【输出格式】<br>一个整数，表示答案。</p>\n</blockquote>\n<blockquote>\n<p>【输入样例】<br>5 3<br>-100000<br>-10000<br>2<br>100000<br>10000  </p>\n</blockquote>\n<blockquote>\n<p>【输出样例】<br>999100009</p>\n</blockquote>\n<blockquote>\n<p>再例如：<br>【输入样例】<br>5 3<br>-100000<br>-100000<br>-2<br>-100000<br>-100000</p>\n</blockquote>\n<blockquote>\n<p>【输出样例】<br>-999999829</p>\n</blockquote>\n<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗  &lt; 1000ms</p>\n<p>个人感受：<br>    别说了。。我 也不知道为啥。。第二个案例一直是-1.。。。脑阔疼  还是交了，毕竟如果都跟第一个案例一样。。我还是能对的==<br>瑟瑟发抖的提交了。。<br>看了大佬的分析 我终于知道弱鸡的自己错哪了==</p>\n<h3 id=\"题目答案：-9\"><a href=\"#题目答案：-9\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p>【分析】像贪模拟贪心。</p>\n<p>分了三种情况，1.不含负数，2.不含正数，3.正负都有。 0的情况可以同时放在这三种情况中。</p>\n<p>情况1：从最大数开始选即可<br>情况2：先考虑能否为0，再考虑选偶数个最小负数，若都做不到，就选奇数个最大负数<br>情况3：最难。先考虑用尽量少的负数，尽可能用正数，再从最小负数开始考虑，每次拿两个，乘积去和最小整数的进行比较，若大于，则可用这两个负数替换那两个正数</p>\n<p><strong>【代码】</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;  </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">9</span>;  </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> i&gt;j;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">ll a[N],b[N];  </span><br><span class=\"line\"><span class=\"keyword\">int</span> ta,tb,n,k;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;k);  </span><br><span class=\"line\">    ta=tb=<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> c0=<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">0</span>)a[ta++]=x;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)b[tb++]=x;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> c0++;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    sort(a,a+ta,cmp);  </span><br><span class=\"line\">    sort(b,b+tb);  </span><br><span class=\"line\">    ll ans=<span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tb==<span class=\"number\">0</span>) <span class=\"comment\">//positive and 0  </span></span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ta&lt;k)ans=<span class=\"number\">0</span>; <span class=\"comment\">//0  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)  </span><br><span class=\"line\">                ans=ans*a[i]%mod;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ta==<span class=\"number\">0</span>) <span class=\"comment\">//negetive and 0  </span></span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k%<span class=\"number\">2</span>&amp;&amp;c0 || tb&lt;k)ans=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(k%<span class=\"number\">2</span>) <span class=\"comment\">//k is odd, but no 0  </span></span><br><span class=\"line\">            &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j=tb<span class=\"number\">-1</span>;i&lt;k;i++,j--)  </span><br><span class=\"line\">                    ans=ans*b[j]%mod;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)  </span><br><span class=\"line\">                    ans=ans*b[i]%mod;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"comment\">//-,+, 0  </span></span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c0&amp;&amp;ta+tb&lt;k)&#123;  </span><br><span class=\"line\">            ans=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ta+tb==k&amp;&amp;c0==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;tb;i++)ans=ans*b[i]%mod;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;ta;i++)ans=ans*a[i]%mod;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> fu;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(k&lt;=ta)fu=<span class=\"number\">0</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> fu=(k-ta+<span class=\"number\">1</span>)&amp;(<span class=\"number\">-2</span>);  </span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"fu\"</span>&lt;&lt;fu&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> t=fu;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=fu;i&lt;=tb&amp;&amp;i&lt;=k;i+=<span class=\"number\">2</span>)  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&gt;=<span class=\"number\">2</span>&amp;&amp;k-i&gt;=<span class=\"number\">0</span>)  </span><br><span class=\"line\">                &#123;  </span><br><span class=\"line\">                    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"i \"</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(b[i<span class=\"number\">-1</span>]*b[i<span class=\"number\">-2</span>]&gt;a[k-i]*a[k-i+<span class=\"number\">1</span>])  </span><br><span class=\"line\">                        t=i;  </span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;t;i++)  ans=ans*b[i]%mod;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k-t;i++)ans=ans*a[i]%mod;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ans);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>个人总结：垃圾的我!<br>    一开始以为 对了8题(不难吧~)<br>    好的，发现两道题看错了<br>    对六道有省二嘛？<br>    等到答案出来。。填空再去两道== 傻逼答案<br>    所以 愚人节快乐<br>    其实真的不难。。看到答案心态易爆炸<br>笑死人的讨论区，值得一看。。。<br><a href=\"https://www.zhihu.com/question/270622751\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/270622751</a></p>\n<p>想想是真的菜<br>好好努力 尽力试试能不能进入ACM训练队吧！<br>PS:其实省赛的难度真的不大，好好准备一下明年再来！</p>\n<p>PS:居然水进了国赛。。。。美滋滋哈哈哈哈 开心了好久。。公费游北京  我来了！！！<br>最近多刷刷题 争取能有机会冲击国奖吧(虽然没啥可能)<br>2018/4/9</p>\n","site":{"data":{}},"excerpt":"","more":"<p>时间:2018年愚人节<br>地点：南京航空航天大学(江宁校区)<br>事件：第九届蓝桥杯省赛</p>\n<p>废话不多说，直接上题目：</p>\n<h2 id=\"第一题：-第几天-满分5分\"><a href=\"#第一题：-第几天-满分5分\" class=\"headerlink\" title=\"第一题： 第几天(满分5分)\"></a>第一题： 第几天(满分5分)</h2><h3 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>2000年的1月1日，是那一年的第1天。那么，2000年的5月4日，是那一年的第几天？<br>注意：需要提交的是一个整数，不要填写任何多余内容。</p>\n</blockquote>\n<p>个人感受：<br>    很简单的一道题，学习了各位大佬的比赛经验，这种题目也不去考虑编程了，不仅要判断几月是几天还要去思考是否闰年</p>\n<h3 id=\"题目答案：\"><a href=\"#题目答案：\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p>答案：125<br>方法: 日历/excel<br>例如：用excel快速求解，第一个单元格输入2000/1/1，第二个单元格输入2000/5/4，然后在第三个单元格生成，第二个单元格减去第一个单元格的值<br>哦，对了 ，算完是124，还要加上1！5s出答案。</p>\n<h2 id=\"第二题：-明码-满分7分\"><a href=\"#第二题：-明码-满分7分\" class=\"headerlink\" title=\"第二题： 明码(满分7分)\"></a>第二题： 明码(满分7分)</h2><h3 id=\"题目描述：-1\"><a href=\"#题目描述：-1\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>汉字的字形存在于字库中，即便在今天，16点阵的字库也仍然使用广泛。<br>16点阵的字库把每个汉字看成是16x16个像素信息。并把这些信息记录在字节中。<br>一个字节可以存储8位信息，用32个字节就可以存一个汉字的字形了。<br>把每个字节转为2进制表示，1表示墨迹，0表示底色。每行2个字节，<br>一共16行，布局是：<br>    第1字节，第2字节<br>    第3字节，第4字节<br>    ….<br>    第31字节, 第32字节<br>这道题目是给你一段多个汉字组成的信息，每个汉字用32个字节表示，这里给出了字节作为有符号整数的值。<br>题目的要求隐藏在这些信息中。你的任务是复原这些汉字的字形，从中看出题目的要求，并根据要求填写答案。<br>这段信息是（一共10个汉字）：<br>4 0 4 0 4 0 4 32 -1 -16 4 32 4 32 4 32 4 32 4 32 8 32 8 32 16 34 16 34 32 30 -64 0<br>16 64 16 64 34 68 127 126 66 -124 67 4 66 4 66 -124 126 100 66 36 66 4 66 4 66 4 126 4 66 40 0 16<br>4 0 4 0 4 0 4 32 -1 -16 4 32 4 32 4 32 4 32 4 32 8 32 8 32 16 34 16 34 32 30 -64 0<br>0 -128 64 -128 48 -128 17 8 1 -4 2 8 8 80 16 64 32 64 -32 64 32 -96 32 -96 33 16 34 8 36 14 40 4<br>4 0 3 0 1 0 0 4 -1 -2 4 0 4 16 7 -8 4 16 4 16 4 16 8 16 8 16 16 16 32 -96 64 64<br>16 64 20 72 62 -4 73 32 5 16 1 0 63 -8 1 0 -1 -2 0 64 0 80 63 -8 8 64 4 64 1 64 0 -128<br>0 16 63 -8 1 0 1 0 1 0 1 4 -1 -2 1 0 1 0 1 0 1 0 1 0 1 0 1 0 5 0 2 0<br>2 0 2 0 7 -16 8 32 24 64 37 -128 2 -128 12 -128 113 -4 2 8 12 16 18 32 33 -64 1 0 14 0 112 0<br>1 0 1 0 1 0 9 32 9 16 17 12 17 4 33 16 65 16 1 32 1 64 0 -128 1 0 2 0 12 0 112 0<br>0 0 0 0 7 -16 24 24 48 12 56 12 0 56 0 -32 0 -64 0 -128 0 0 0 0 1 -128 3 -64 1 -128 0 0<br><strong>注意：需要提交的是一个整数，不要填写任何多余内容。</strong></p>\n</blockquote>\n<p>个人感受：<br>    很有趣的一道题目，一开始有点懵圈，这么多的数据，想到的就是转化为八位二进制，然后两个一组输出 然后换行，<br>最后从一堆二进制中看出 题目：九的九次方等于多少？(一开始我还以为时输入转化得到的话，结果看到了最后一个翻译出来是问号==emmm，又看了下题目最后一行，整数！emmmm)<br>PS:负数直接用128相加一下就差不多能看了.</p>\n<h3 id=\"题目答案：-1\"><a href=\"#题目答案：-1\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p>387420489<br><strong>代码一</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">8</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tx+=<span class=\"number\">128</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">7</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">\t\ta[i]=x%<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tx/=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">8</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i]) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"*\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">16</span>;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//由题目很容易可以看出 两个八位二进制一行 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;x,&amp;y);</span><br><span class=\"line\">\t\t\tprint(x);</span><br><span class=\"line\">\t\t\tprint(y);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码二</strong><br>有大佬用位运算写:<br>位运算不不用考虑负数的问题..直接按位进行运算</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">7</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// x=4    100 &amp;  10000000  = 0</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//        100 &amp;  1000000   = 0</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//        100 &amp;  100000    = 0</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//        100 &amp;  10000     = 0</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//        100 &amp;  1000      = 0</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//        100 &amp;  100       = 100</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//        100 &amp;  10        = 0\t</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//        100 &amp;  1         = 0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x&amp;(<span class=\"number\">1</span>&lt;&lt;i))</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;(x&amp;(<span class=\"number\">1</span>&lt;&lt;i))&lt;&lt;<span class=\"string\">'*'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">16</span>;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//由题目很容易可以看出 两个八位二进制一行 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;x,&amp;y);</span><br><span class=\"line\">\t\t\tprint(x);</span><br><span class=\"line\">\t\t\tprint(y);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三题：-乘积尾零-满分13分\"><a href=\"#第三题：-乘积尾零-满分13分\" class=\"headerlink\" title=\"第三题： 乘积尾零(满分13分)\"></a>第三题： 乘积尾零(满分13分)</h2><h3 id=\"题目描述：-2\"><a href=\"#题目描述：-2\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>如下的10行数据，每行有10个整数，请你求出它们的乘积的末尾有多少个零？<br>5650 4542 3554 473 946 4114 3871 9073 90 4329<br>2758 7949 6113 5659 5245 7432 3051 4434 6704 3594<br>9937 1173 6866 3397 4759 7557 3070 2287 1453 9899<br>1486 5722 3135 1170 4014 5510 5120 729 2880 9019<br>2049 698 4582 4346 4427 646 9742 7340 1230 7683<br>5693 7015 6887 7381 4172 4341 2909 2027 7355 5649<br>6701 6645 1671 5978 2704 9926 295 3125 3878 6785<br>2066 4247 4800 1578 6652 4616 1113 6205 3264 2915<br>3966 5291 2904 1285 2193 1428 2265 8730 9436 7074<br>689 5510 8243 6114 337 4096 8199 7313 3685 211<br>注意：需要提交的是一个整数，表示末尾零的个数。不要填写任何多余内容。</p>\n</blockquote>\n<p>个人感受：<br>    大数这道题。。写的时候还是贼开心的==  因为。。我以为写出来了==<br>对于这种数学弱鸡，简直不懂分解为2和5。。只会一行一行的去十个十个相乘再去模一亿取余<br>然而==死在了 我只保留了最后两位 非零数。。。。导致杀千刀的少了三个0(大佬说要保留四位（后我实测为3位）)<br>这道题 错的 特别 不该  代码也就三分钟的事==</p>\n\n\n<p>思路：两种方法<br>①直接将所有数相乘，然后每乘一个数就把后面0全部去掉记一下，不过中间会爆long long，这个好办，每次乘完只保留后4位非0数字，例如216037就只保留6037<br><strong>②正解：所有的0都一定是2*5产生的，所以将每个数拆成一堆2乘上一堆5再乘上一个数，之后统计下有多少个2和多少个5取少的那个就是答案</strong></p>\n<h3 id=\"题目答案：-2\"><a href=\"#题目答案：-2\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p>答案：31<br><strong>思路一的代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">101</span>],cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,a+i);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">99</span>;i++)&#123;</span><br><span class=\"line\">\t\ta[i+<span class=\"number\">1</span>]*=a[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(a[i+<span class=\"number\">1</span>]%<span class=\"number\">10</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\ta[i+<span class=\"number\">1</span>]/=<span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\tcnt++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[i+<span class=\"number\">1</span>]%=<span class=\"number\">1000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;cnt; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>思路二的代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> res2=<span class=\"number\">0</span>,res5=<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> y=x;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x%<span class=\"number\">2</span>==<span class=\"number\">0</span>)res2++,x/=<span class=\"number\">2</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(x%<span class=\"number\">5</span>==<span class=\"number\">0</span>)res5++,x/=<span class=\"number\">5</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;min(res2,res5)&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第四题：-测试次数-满分17分\"><a href=\"#第四题：-测试次数-满分17分\" class=\"headerlink\" title=\"第四题： 测试次数(满分17分)\"></a>第四题： 测试次数(满分17分)</h2><h3 id=\"题目描述：-3\"><a href=\"#题目描述：-3\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>x星球的居民脾气不太好，但好在他们生气的时候唯一的异常举动是：摔手机。<br>各大厂商也就纷纷推出各种耐摔型手机。x星球的质监局规定了手机必须经过耐摔测试，并且评定出一个耐摔指数来，之后才允许上市流通。<br>x星球有很多高耸入云的高塔，刚好可以用来做耐摔测试。塔的每一层高度都是一样的，与地球上稍有不同的是，他们的第一层不是地面，而是相当于我们的2楼。<br>如果手机从第7层扔下去没摔坏，但第8层摔坏了，则手机耐摔指数=7。<br>特别地，如果手机从第1层扔下去就坏了，则耐摔指数=0。<br>如果到了塔的最高层第n层扔没摔坏，则耐摔指数=n<br>为了减少测试次数，从每个厂家抽样3部手机参加测试。<br>某次测试的塔高为1000层，如果我们总是采用最佳策略，在最坏的运气下最多需要测试多少次才能确定手机的耐摔指数呢？<br>请填写这个最多测试次数。<br>注意：需要填写的是一个整数，不要填写任何多余内容。</p>\n</blockquote>\n<p>个人感受：<br>    这道题凉凉，很凉，透心凉<br>教训，下次一定要先看分值==<br>看到题目，最优策略？OK二分！然后就算出了  九次吧==然后自信直接过<br>回来车上在复盘，忽然想到，等下。。那个。。摔手机？手机。。手机。。会摔坏了吧。。<br>mm了个大p，一问舍友(zl) ，他不是还给了三个手机吗？<br>我…..好的。。。题目都没看清。。都不知道我在干嘛。。</p>\n<p>不过就算知道了，我也没算对。。。心理平衡了一点</p>\n<p>后来我只能算出28。。。emmmm<br>大佬: 直接三维 dp dp[0][1000][3] 第一个0一定不爆，第二个1000一定爆，第三个 3个手机。。<br>emmmmm……还是不会</p>\n<h3 id=\"题目答案：-3\"><a href=\"#题目答案：-3\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p>答案：19</p>\n<h2 id=\"第五题：-快速排序-满分9分\"><a href=\"#第五题：-快速排序-满分9分\" class=\"headerlink\" title=\"第五题： 快速排序(满分9分)\"></a>第五题： 快速排序(满分9分)</h2><h3 id=\"题目描述：-4\"><a href=\"#题目描述：-4\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>以下代码可以从数组a[]中找出第k小的元素。<br>它使用了类似快速排序中的分治算法，期望时间复杂度是O(N)的。<br>请仔细阅读分析源码，填写划线部分缺失的内容。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">quick_select</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> p = rand() % (r - l + <span class=\"number\">1</span>) + l;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = a[p];</span><br><span class=\"line\">\t&#123;<span class=\"keyword\">int</span> t = a[p]; a[p] = a[r]; a[r] = t;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = l, j = r;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &lt; j) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(i &lt; j &amp;&amp; a[i] &lt; x) i++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i &lt; j) &#123;</span><br><span class=\"line\">\t\t\ta[j] = a[i];</span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(i &lt; j &amp;&amp; a[j] &gt; x) j--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i &lt; j) &#123;</span><br><span class=\"line\">\t\t\ta[i] = a[j];</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[i] = x;</span><br><span class=\"line\">\tp = i;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i - l + <span class=\"number\">1</span> == k) <span class=\"keyword\">return</span> a[i];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i - l + <span class=\"number\">1</span> &lt; k) <span class=\"keyword\">return</span> quick_select( _____________________________ ); <span class=\"comment\">//填空</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> quick_select(a, l, i - <span class=\"number\">1</span>, k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">23</span>, <span class=\"number\">58</span>, <span class=\"number\">16</span>, <span class=\"number\">27</span>, <span class=\"number\">55</span>, <span class=\"number\">13</span>, <span class=\"number\">26</span>, <span class=\"number\">24</span>, <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, quick_select(a, <span class=\"number\">0</span>, <span class=\"number\">14</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">注意：只填写划线部分缺少的代码，不要抄写已经存在的代码或符号。</span><br></pre></td></tr></table></figure>\n\n<p>个人感受：<br>    这道题。。算了。。填空这种题目每次我都是瞎jb猜，然后看答案对不对。。<br>我写了个(a,l,r,k)大概对了，就交了。。宛如智障<br>以为。。对了的<br>好的</p>\n<h3 id=\"题目答案：-4\"><a href=\"#题目答案：-4\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p>答案：a,i+1,r,k-(i-l+1)</p>\n<h2 id=\"第六题：-递增三元组-满分11分\"><a href=\"#第六题：-递增三元组-满分11分\" class=\"headerlink\" title=\"第六题： 递增三元组(满分11分)\"></a>第六题： 递增三元组(满分11分)</h2><h3 id=\"题目描述：-5\"><a href=\"#题目描述：-5\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>给定三个整数数组<br>A = [A1, A2, … AN],<br>B = [B1, B2, … BN],<br>C = [C1, C2, … CN]，<br>请你统计有多少个三元组(i, j, k) 满足：</p>\n</blockquote>\n<ol>\n<li>1 &lt;= i, j, k &lt;= N  </li>\n<li>Ai &lt; Bj &lt; Ck  </li>\n</ol>\n<blockquote>\n<p>【输入格式】<br>第一行包含一个整数N。<br>第二行包含N个整数A1, A2, … AN。<br>第三行包含N个整数B1, B2, … BN。<br>第四行包含N个整数C1, C2, … CN。<br>对于30%的数据，1 &lt;= N &lt;= 100<br>对于60%的数据，1 &lt;= N &lt;= 1000<br>对于100%的数据，1 &lt;= N &lt;= 100000 0 &lt;= Ai, Bi, Ci &lt;= 100000 </p>\n</blockquote>\n<blockquote>\n<p>【输出格式】<br>一个整数表示答案</p>\n</blockquote>\n<blockquote>\n<p>【样例输入】<br>3<br>1 1 1<br>2 2 2<br>3 3 3</p>\n</blockquote>\n<blockquote>\n<p>【样例输出】<br>27 </p>\n</blockquote>\n<blockquote>\n<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗  &lt; 1000ms</p>\n</blockquote>\n<p>个人感受：<br>    最简单的一道题了== 暴力for。。虽然不知道最后会不会爆。。但至少有60吧<br>一开始看到..emmm 不就深搜嘛，最近写了不少，好的。。三分钟码完。。挖草 怎么样例输入答案一直是3<br>心态崩了，换了三个for….老子就不信了。。咦。。怎么还是3<br>我特么。。dev坏了吧？？？偷偷换个VC还是3  VS2010  还是3<br>心态崩了。。  输出中间值明明有27次啊。。<br>忽然。。发现。。 调用函数没return最后的cnt  。。好小子，你过来，不打死你<br>以至最后也懒得换回dfs了。。最后，如果有人看了我的代码，可能会觉得被欺骗了。。函数名=dfs，一看。。里面只有三个for。。。<br>哈哈哈哈哈哈</p>\n<h3 id=\"题目答案：-5\"><a href=\"#题目答案：-5\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p><strong>dfs</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>,n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">100001</span>],b[<span class=\"number\">100001</span>],c[<span class=\"number\">100001</span>]; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j,<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a[i]&lt;b[j]&amp;&amp;b[j]&lt;c[k])</span><br><span class=\"line\">\t\tcnt++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i==n<span class=\"number\">-1</span>&amp;&amp;j==n<span class=\"number\">-1</span>&amp;&amp;k==n<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(k&lt;n) dfs(i,j,k+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&lt;n) dfs(i,j+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i&lt;n) dfs(i+<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;b[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;c[i]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,dfs(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>三个for 暴力求解</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;n;k++)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(a[i]&lt;b[j]&amp;&amp;b[j]&lt;c[k])</span><br><span class=\"line\">\t\t\t\t\tcnt++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cnt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>最优解</strong><br>思路：分别排序<br>先看b和c两个数组，设两个下标i，j分别指向bc数组，对于每一个b[i],可以找到对应的c[j]恰好大于b[i]，那么对于b[i]有n-j个c[j]满足b[i]&lt;c[j]。令sumb[i]=n-j，表示每个b[i]对应的c[j]个数。将sumb处理成后缀和。<br>然后再看a和b数组，用同样的方法打出数组suma，不过suma[i]=sumb[j]；<br>然后将suma处理成后缀和，suma[0]即为答案。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;  </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;  </span><br><span class=\"line\">ll suma[N],sumb[N];  </span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N],b[N],c[N];  </span><br><span class=\"line\"><span class=\"keyword\">int</span> n;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;b[i]);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;c[i]);  </span><br><span class=\"line\">    sort(a,a+n);  </span><br><span class=\"line\">    sort(b,b+n);  </span><br><span class=\"line\">    sort(c,c+n);  </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(sumb,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(sumb));  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;n;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&lt;n&amp;&amp;b[i]&gt;=c[j])j++;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j&gt;=n)<span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        sumb[i]=n-j;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n<span class=\"number\">-2</span>;i&gt;=<span class=\"number\">0</span>;i--) <span class=\"comment\">//b hou zhui he  </span></span><br><span class=\"line\">        sumb[i]+=sumb[i+<span class=\"number\">1</span>];  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;n;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&lt;n&amp;&amp;a[i]&gt;=b[j])j++;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j&gt;=n)<span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        suma[i]=sumb[j];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n<span class=\"number\">-2</span>;i&gt;=<span class=\"number\">0</span>;i--) <span class=\"comment\">//a hou zhui he  </span></span><br><span class=\"line\">        suma[i]+=suma[i+<span class=\"number\">1</span>];  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,suma[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第七题：-螺旋折线-满分19分\"><a href=\"#第七题：-螺旋折线-满分19分\" class=\"headerlink\" title=\"第七题： 螺旋折线(满分19分)\"></a>第七题： 螺旋折线(满分19分)</h2><h3 id=\"题目描述：-6\"><a href=\"#题目描述：-6\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>如图p1.png所示的螺旋折线经过平面上所有整点恰好一次。<br>对于整点(X, Y)，我们定义它到原点的距离dis(X, Y)是从原点到(X, Y)的螺旋折线段的长度。<br>例如dis(0, 1)=3, dis(-2, -1)=9<br>给出整点坐标(X, Y)，你能计算出dis(X, Y)吗？</p>\n</blockquote>\n<blockquote>\n<p>【输入格式】<br>X和Y<br>对于40%的数据，-1000 &lt;= X, Y &lt;= 1000<br>对于70%的数据，-100000 &lt;= X， Y &lt;= 100000<br>对于100%的数据, -1000000000 &lt;= X, Y &lt;= 1000000000  </p>\n</blockquote>\n<blockquote>\n<p>【输出格式】<br>输出dis(X, Y)  </p>\n</blockquote>\n<blockquote>\n<p>【样例输入】<br>0 1</p>\n</blockquote>\n<blockquote>\n<p>【样例输出】<br>3</p>\n</blockquote>\n<blockquote>\n<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗  &lt; 1000ms</p>\n</blockquote>\n\n<p>个人感受：<br>    并列最简单的一题，emmmm  没啥操作。。就是循环到那个点<br>应该时间上会爆了，反正至少50吧。。</p>\n<h3 id=\"题目答案：-6\"><a href=\"#题目答案：-6\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p><strong>代码：</strong><br>#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br>int ex,ey,nx=0,ny=0;<br>int check(){<br>    if(nx==ex&amp;&amp;ny==ey)<br>        return 1;<br>    else return 0;<br>}<br>int main(){<br>    scanf(“%d%d”,&amp;ex,&amp;ey);<br>    int h=0,cnt=0;<br>    while(1){<br>        for(int i=0;i&lt;4;i++){<br>            h++;<br>            if(i==0)<br>                for(int j=0;j&lt;(h+1)/2;j++){<br>                    nx–;<br>                    cnt++;<br>                    if(check()){<br>                        printf(“%d”,cnt);<br>                        return 0;<br>                    }<br>                }<br>            else if(i==1)<br>                for(int j=0;j&lt;h/2;j++){<br>                    ny++;<br>                    cnt++;<br>                    if(check()){<br>                        printf(“%d”,cnt);<br>                        return 0;<br>                    }<br>                }<br>            else if(i==2)<br>                for(int j=0;j&lt;(h+1)/2;j++){<br>                    nx++;<br>                    cnt++;<br>                    if(check()){<br>                        printf(“%d”,cnt);<br>                        return 0;<br>                    }<br>                }<br>            else<br>                for(int j=0;j&lt;h/2;j++){<br>                    ny–;<br>                    cnt++;<br>                    if(check()){<br>                        printf(“%d”,cnt);<br>                        return 0;<br>                    }<br>                }<br>        }<br>    }<br>    return 0;<br>}</p>\n<h2 id=\"第八题：-日志统计-满分21分\"><a href=\"#第八题：-日志统计-满分21分\" class=\"headerlink\" title=\"第八题： 日志统计(满分21分)\"></a>第八题： 日志统计(满分21分)</h2><h3 id=\"题目描述：-7\"><a href=\"#题目描述：-7\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>小明维护着一个程序员论坛。现在他收集了一份”点赞”日志，日志共有N行。其中每一行的格式是：<br>ts id<br>表示在ts时刻编号id的帖子收到一个”赞”。<br>现在小明想统计有哪些帖子曾经是”热帖”。如果一个帖子曾在任意一个长度为D的时间段内收到不少于K个赞，小明就认为这个帖子曾是”热帖”。<br>具体来说，如果存在某个时刻T满足该帖在[T, T+D)这段时间内(注意是左闭右开区间)收到不少于K个赞，该帖就曾是”热帖”。<br>给定日志，请你帮助小明统计出所有曾是”热帖”的帖子编号。  </p>\n</blockquote>\n<blockquote>\n<p>【输入格式】<br>第一行包含三个整数N、D和K。<br>以下N行每行一条日志，包含两个整数ts和id。<br>对于50%的数据，1 &lt;= K &lt;= N &lt;= 1000<br>对于100%的数据，1 &lt;= K &lt;= N &lt;= 100000 0 &lt;= ts &lt;= 100000 0 &lt;= id &lt;= 100000  </p>\n</blockquote>\n<blockquote>\n<p>【输出格式】<br>按从小到大的顺序输出热帖id。每个id一行。  </p>\n</blockquote>\n<blockquote>\n<p>【输入样例】<br>7 10 2<br>0 1<br>0 10<br>10 10<br>10 1<br>9 1<br>100 3<br>100 3  </p>\n</blockquote>\n<blockquote>\n<p>【输出样例】<br>1<br>3  </p>\n</blockquote>\n<blockquote>\n<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗  &lt; 1000ms</p>\n</blockquote>\n<p>个人感受：<br>    很烦的一道题。。 思路就是先筛选 ts大于k的   然后再按照 ts在 某段时间内多少排序。。<br>道理都懂。。就是弱鸡。。。。没写完就交了==  没写完的我  输入正常，输出 print(“1\\n3”);<br>哈哈哈哈 看看能不能 骗上10分</p>\n<h3 id=\"题目答案：-7\"><a href=\"#题目答案：-7\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> t,id;</span><br><span class=\"line\">&#125;e[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(node a,node b)</span></span>&#123;\t<span class=\"comment\">// 对结构体按某个条件排序 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.t&lt;b.t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sta[N],top;</span><br><span class=\"line\"><span class=\"keyword\">int</span> c[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,d,k;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> insta[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;n,&amp;d,&amp;k);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;e[i].t,&amp;e[i].id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsort(e+<span class=\"number\">1</span>,e+<span class=\"number\">1</span>+n,cmp);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(c,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(c));</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(insta,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(insta));</span><br><span class=\"line\">\ttop=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,j=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(j&lt;=n&amp;&amp;e[i].t-e[j].t&gt;=d)</span><br><span class=\"line\">\t\tc[e[j++].id]--;</span><br><span class=\"line\">\t\tc[e[i].id]++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(c[e[i].id]&gt;=k&amp;&amp;!insta[e[i].id])&#123;</span><br><span class=\"line\">\t\t\tsta[top++]=e[i].id;</span><br><span class=\"line\">\t\t\tinsta[e[i].id]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsort(sta,sta+top);</span><br><span class=\"line\">\ttop=unique(sta,sta+top)-sta;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;top;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,sta[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第九题：全球变暖-满分23分\"><a href=\"#第九题：全球变暖-满分23分\" class=\"headerlink\" title=\"第九题：全球变暖(满分23分)\"></a>第九题：全球变暖(满分23分)</h2><h3 id=\"题目描述：-8\"><a href=\"#题目描述：-8\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>你有一张某海域NxN像素的照片，”.”表示海洋、”#”表示陆地，如下所示：<br>.......<br>.##....<br>.##....<br>....##.<br>..####.<br>...###.<br>.......<br>其中”上下左右”四个方向上连在一起的一片陆地组成一座岛屿。例如上图就有2座岛屿。<br>由于全球变暖导致了海面上升，科学家预测未来几十年，岛屿边缘一个像素的范围会被海水淹没。具体来说如果一块陆地像素与海洋相邻(上下左右四个相邻像素中有海洋)，它就会被淹没。<br>例如上图中的海域未来会变成如下样子：<br>.......<br>.......<br>.......<br>.......<br>....#..<br>.......<br>.......<br>请你计算：依照科学家的预测，照片中有多少岛屿会被完全淹没。  </p>\n</blockquote>\n<blockquote>\n<p>【输入格式】<br>第一行包含一个整数N。  (1 &lt;= N &lt;= 1000)<br>以下N行N列代表一张海域照片。<br>照片保证第1行、第1列、第N行、第N列的像素都是海洋。  </p>\n</blockquote>\n<blockquote>\n<p>【输出格式】<br>一个整数表示答案。</p>\n</blockquote>\n<blockquote>\n<p>【输入样例】<br>7<br>.......<br>.##....<br>.##....<br>....##.<br>..####.<br>…###.<br>.......  </p>\n</blockquote>\n<blockquote>\n<p>【输出样例】<br>1  </p>\n</blockquote>\n<blockquote>\n<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗  &lt; 1000ms</p>\n</blockquote>\n<p>个人感受：<br>    为啥样例 淹没是1.。没被淹没是1<br>我傻傻的看错了==  输出了相反的。。 阿西吧 心痛<br>反正我的就是两个bfs<br>还有一个很有趣的<br>有人给了一组这样的数据：<br>### ###<br>#######<br>### ###<br>只有一个岛屿但是淹没后你会发现“岛屿”还会多出来一个！如下</p>\n<p># # </p>\n<p>这个。。输出0还是-1.。我也不知道。。等答案了。。。</p>\n<h3 id=\"题目答案：-8\"><a href=\"#题目答案：-8\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p><strong>这个 有一个正解代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">1e3</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dir[<span class=\"number\">4</span>][<span class=\"number\">2</span>]=&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[N][N];</span><br><span class=\"line\"><span class=\"keyword\">char</span> mmp[N][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,flag;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;<span class=\"comment\">//check if sea;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> fx=x+dir[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> fy=y+dir[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(fx&amp;&amp;fy&amp;&amp;fx&lt;=n&amp;&amp;fy&lt;=n&amp;&amp;mmp[fx][fy]==<span class=\"string\">'.'</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">//sea;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">//no sea;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">\tvis[x][y]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!check(x,y))flag=<span class=\"number\">1</span>; <span class=\"comment\">//remain lu di</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> fx=x+dir[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> fy=y+dir[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(fx&amp;&amp;fy&amp;&amp;fx&lt;=n&amp;&amp;fy&lt;=n&amp;&amp;!vis[fx][fy]&amp;&amp;mmp[fx][fy]==<span class=\"string\">'#'</span>)</span><br><span class=\"line\">\t\t\tdfs(fx,fy);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,mmp[i]+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>,ludi=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!vis[i][j]&amp;&amp;mmp[i][j]==<span class=\"string\">'#'</span>)&#123;</span><br><span class=\"line\">            ludi++;</span><br><span class=\"line\">\t\t\t\tflag=<span class=\"number\">0</span>; <span class=\"comment\">//yan mo</span></span><br><span class=\"line\">\t\t\t\tdfs(i,j);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(flag) ans++; <span class=\"comment\">//remained</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,ludi-ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第一题：-乘积最大-满分25分\"><a href=\"#第一题：-乘积最大-满分25分\" class=\"headerlink\" title=\"第一题： 乘积最大(满分25分)\"></a>第一题： 乘积最大(满分25分)</h2><h3 id=\"题目描述：-9\"><a href=\"#题目描述：-9\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><blockquote>\n<p>给定N个整数A1, A2, … AN。请你从中选出K个数，使其乘积最大。<br>请你求出最大的乘积，由于乘积可能超出整型范围，你只需输出乘积除以1000000009的余数。<br>注意，如果X&lt;0， 我们定义X除以1000000009的余数是负(-X)除以1000000009的余数。<br>即：0-((0-x) % 1000000009)</p>\n</blockquote>\n<blockquote>\n<p>【输入格式】<br>第一行包含两个整数N和K。<br>以下N行每行一个整数Ai。<br>对于40%的数据，1 &lt;= K &lt;= N &lt;= 100<br>对于60%的数据，1 &lt;= K &lt;= 1000<br>对于100%的数据，1 &lt;= K &lt;= N &lt;= 100000  -100000 &lt;= Ai &lt;= 100000  </p>\n</blockquote>\n<blockquote>\n<p>【输出格式】<br>一个整数，表示答案。</p>\n</blockquote>\n<blockquote>\n<p>【输入样例】<br>5 3<br>-100000<br>-10000<br>2<br>100000<br>10000  </p>\n</blockquote>\n<blockquote>\n<p>【输出样例】<br>999100009</p>\n</blockquote>\n<blockquote>\n<p>再例如：<br>【输入样例】<br>5 3<br>-100000<br>-100000<br>-2<br>-100000<br>-100000</p>\n</blockquote>\n<blockquote>\n<p>【输出样例】<br>-999999829</p>\n</blockquote>\n<p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗  &lt; 1000ms</p>\n<p>个人感受：<br>    别说了。。我 也不知道为啥。。第二个案例一直是-1.。。。脑阔疼  还是交了，毕竟如果都跟第一个案例一样。。我还是能对的==<br>瑟瑟发抖的提交了。。<br>看了大佬的分析 我终于知道弱鸡的自己错哪了==</p>\n<h3 id=\"题目答案：-9\"><a href=\"#题目答案：-9\" class=\"headerlink\" title=\"题目答案：\"></a>题目答案：</h3><p>【分析】像贪模拟贪心。</p>\n<p>分了三种情况，1.不含负数，2.不含正数，3.正负都有。 0的情况可以同时放在这三种情况中。</p>\n<p>情况1：从最大数开始选即可<br>情况2：先考虑能否为0，再考虑选偶数个最小负数，若都做不到，就选奇数个最大负数<br>情况3：最难。先考虑用尽量少的负数，尽可能用正数，再从最小负数开始考虑，每次拿两个，乘积去和最小整数的进行比较，若大于，则可用这两个负数替换那两个正数</p>\n<p><strong>【代码】</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;  </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">9</span>;  </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> i&gt;j;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">ll a[N],b[N];  </span><br><span class=\"line\"><span class=\"keyword\">int</span> ta,tb,n,k;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;k);  </span><br><span class=\"line\">    ta=tb=<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> c0=<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">0</span>)a[ta++]=x;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)b[tb++]=x;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> c0++;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    sort(a,a+ta,cmp);  </span><br><span class=\"line\">    sort(b,b+tb);  </span><br><span class=\"line\">    ll ans=<span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tb==<span class=\"number\">0</span>) <span class=\"comment\">//positive and 0  </span></span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ta&lt;k)ans=<span class=\"number\">0</span>; <span class=\"comment\">//0  </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)  </span><br><span class=\"line\">                ans=ans*a[i]%mod;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ta==<span class=\"number\">0</span>) <span class=\"comment\">//negetive and 0  </span></span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k%<span class=\"number\">2</span>&amp;&amp;c0 || tb&lt;k)ans=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(k%<span class=\"number\">2</span>) <span class=\"comment\">//k is odd, but no 0  </span></span><br><span class=\"line\">            &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j=tb<span class=\"number\">-1</span>;i&lt;k;i++,j--)  </span><br><span class=\"line\">                    ans=ans*b[j]%mod;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)  </span><br><span class=\"line\">                    ans=ans*b[i]%mod;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"comment\">//-,+, 0  </span></span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c0&amp;&amp;ta+tb&lt;k)&#123;  </span><br><span class=\"line\">            ans=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ta+tb==k&amp;&amp;c0==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;tb;i++)ans=ans*b[i]%mod;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;ta;i++)ans=ans*a[i]%mod;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> fu;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(k&lt;=ta)fu=<span class=\"number\">0</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> fu=(k-ta+<span class=\"number\">1</span>)&amp;(<span class=\"number\">-2</span>);  </span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"fu\"</span>&lt;&lt;fu&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> t=fu;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=fu;i&lt;=tb&amp;&amp;i&lt;=k;i+=<span class=\"number\">2</span>)  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&gt;=<span class=\"number\">2</span>&amp;&amp;k-i&gt;=<span class=\"number\">0</span>)  </span><br><span class=\"line\">                &#123;  </span><br><span class=\"line\">                    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"i \"</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(b[i<span class=\"number\">-1</span>]*b[i<span class=\"number\">-2</span>]&gt;a[k-i]*a[k-i+<span class=\"number\">1</span>])  </span><br><span class=\"line\">                        t=i;  </span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;t;i++)  ans=ans*b[i]%mod;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k-t;i++)ans=ans*a[i]%mod;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ans);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>个人总结：垃圾的我!<br>    一开始以为 对了8题(不难吧~)<br>    好的，发现两道题看错了<br>    对六道有省二嘛？<br>    等到答案出来。。填空再去两道== 傻逼答案<br>    所以 愚人节快乐<br>    其实真的不难。。看到答案心态易爆炸<br>笑死人的讨论区，值得一看。。。<br><a href=\"https://www.zhihu.com/question/270622751\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/270622751</a></p>\n<p>想想是真的菜<br>好好努力 尽力试试能不能进入ACM训练队吧！<br>PS:其实省赛的难度真的不大，好好准备一下明年再来！</p>\n<p>PS:居然水进了国赛。。。。美滋滋哈哈哈哈 开心了好久。。公费游北京  我来了！！！<br>最近多刷刷题 争取能有机会冲击国奖吧(虽然没啥可能)<br>2018/4/9</p>\n"},{"title":"网站搭建","date":"2018-03-20T05:18:37.000Z","description":"某公司的官网搭建，对于一些网站建设的坑的一些解决办法。","_content":"\n\n# MySQL的坑\n\n1. 新版本安装无提示设 root 用户密码。\n\n```\nsudo mysql -u root --skip-password\nmysql > alter user 'root'@'localhost' identified by 'xxxxxxxxx'; // xx is new password\n```\n\n2. 忘了 root 密码\n先find mysql 的 .cnf 配置文件\n找到[mysqld] 的下一行写入\n\n```\nskip -grant -tables\nmysql\nmysql > alter ....\nmysql > flush privaileges;\n```\n记得要重启mysql服务\n\n\n# Apache2的坑\n\n1. 开多端口多路径\n\nports.conf 文件中添加 \"Listen + 端口号\"。\nsites-availabe/000-default-conf文件中添加如下代码\n```\n<VirtualHost *:61212>\n     ServerAdmin webmaster@localhost:61212\n     DocumentRoot /home/edxuanlen/Documents/ftp\n     ServerName localhost\n     ErrorLog ${APACHE_LOG_DIR}/error.log\n     CustomLog ${APACHE_LOG_DIR}/access.log combined\n</VirtualHost>\n```\napache2.conf 文件中加入\n\n```\n<Directory /home/edxuanlen/Documents/ftp >\n\tOptions Indexes FollowSymLinks\n    AllowOverride None\n    Require all granted\n</Directory>\n```\n\nservice apache2 restart\n\n3. Phpstorm 的使用\n\n提示mysqli为定义类，其实是因为没有下载 php-mysql 这个文件\n```\napt-get install php-mysql\n```\n\n端口问题，一直无法通过浏览器显示。报cgi错误。\n```\napt-get install php7.2-cgi\n```\n4. Php 的使用\n\nphp-bcmath\nphp-mysqli\nlibapache2-mod-php7\n\n","source":"_posts/网站.md","raw":"---\ntitle: 网站搭建\ndate: 2018-03-20 13:18:37\ntags: 网站\ncategories: 网站\ndescription: 某公司的官网搭建，对于一些网站建设的坑的一些解决办法。\n\n---\n\n\n# MySQL的坑\n\n1. 新版本安装无提示设 root 用户密码。\n\n```\nsudo mysql -u root --skip-password\nmysql > alter user 'root'@'localhost' identified by 'xxxxxxxxx'; // xx is new password\n```\n\n2. 忘了 root 密码\n先find mysql 的 .cnf 配置文件\n找到[mysqld] 的下一行写入\n\n```\nskip -grant -tables\nmysql\nmysql > alter ....\nmysql > flush privaileges;\n```\n记得要重启mysql服务\n\n\n# Apache2的坑\n\n1. 开多端口多路径\n\nports.conf 文件中添加 \"Listen + 端口号\"。\nsites-availabe/000-default-conf文件中添加如下代码\n```\n<VirtualHost *:61212>\n     ServerAdmin webmaster@localhost:61212\n     DocumentRoot /home/edxuanlen/Documents/ftp\n     ServerName localhost\n     ErrorLog ${APACHE_LOG_DIR}/error.log\n     CustomLog ${APACHE_LOG_DIR}/access.log combined\n</VirtualHost>\n```\napache2.conf 文件中加入\n\n```\n<Directory /home/edxuanlen/Documents/ftp >\n\tOptions Indexes FollowSymLinks\n    AllowOverride None\n    Require all granted\n</Directory>\n```\n\nservice apache2 restart\n\n3. Phpstorm 的使用\n\n提示mysqli为定义类，其实是因为没有下载 php-mysql 这个文件\n```\napt-get install php-mysql\n```\n\n端口问题，一直无法通过浏览器显示。报cgi错误。\n```\napt-get install php7.2-cgi\n```\n4. Php 的使用\n\nphp-bcmath\nphp-mysqli\nlibapache2-mod-php7\n\n","slug":"网站","published":1,"updated":"2020-02-06T22:40:22.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9as004f24uwp11lwa0k","content":"<h1 id=\"MySQL的坑\"><a href=\"#MySQL的坑\" class=\"headerlink\" title=\"MySQL的坑\"></a>MySQL的坑</h1><ol>\n<li>新版本安装无提示设 root 用户密码。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mysql -u root --skip-password</span><br><span class=\"line\">mysql &gt; alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;xxxxxxxxx&apos;; // xx is new password</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>忘了 root 密码<br>先find mysql 的 .cnf 配置文件<br>找到[mysqld] 的下一行写入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skip -grant -tables</span><br><span class=\"line\">mysql</span><br><span class=\"line\">mysql &gt; alter ....</span><br><span class=\"line\">mysql &gt; flush privaileges;</span><br></pre></td></tr></table></figure>\n\n<p>记得要重启mysql服务</p>\n<h1 id=\"Apache2的坑\"><a href=\"#Apache2的坑\" class=\"headerlink\" title=\"Apache2的坑\"></a>Apache2的坑</h1><ol>\n<li>开多端口多路径</li>\n</ol>\n<p>ports.conf 文件中添加 “Listen + 端口号”。<br>sites-availabe/000-default-conf文件中添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:61212&gt;</span><br><span class=\"line\">     ServerAdmin webmaster@localhost:61212</span><br><span class=\"line\">     DocumentRoot /home/edxuanlen/Documents/ftp</span><br><span class=\"line\">     ServerName localhost</span><br><span class=\"line\">     ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class=\"line\">     CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n\n<p>apache2.conf 文件中加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory /home/edxuanlen/Documents/ftp &gt;</span><br><span class=\"line\">\tOptions Indexes FollowSymLinks</span><br><span class=\"line\">    AllowOverride None</span><br><span class=\"line\">    Require all granted</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>\n\n<p>service apache2 restart</p>\n<ol start=\"3\">\n<li>Phpstorm 的使用</li>\n</ol>\n<p>提示mysqli为定义类，其实是因为没有下载 php-mysql 这个文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install php-mysql</span><br></pre></td></tr></table></figure>\n\n<p>端口问题，一直无法通过浏览器显示。报cgi错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install php7.2-cgi</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>Php 的使用</li>\n</ol>\n<p>php-bcmath<br>php-mysqli<br>libapache2-mod-php7</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MySQL的坑\"><a href=\"#MySQL的坑\" class=\"headerlink\" title=\"MySQL的坑\"></a>MySQL的坑</h1><ol>\n<li>新版本安装无提示设 root 用户密码。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mysql -u root --skip-password</span><br><span class=\"line\">mysql &gt; alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;xxxxxxxxx&apos;; // xx is new password</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>忘了 root 密码<br>先find mysql 的 .cnf 配置文件<br>找到[mysqld] 的下一行写入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skip -grant -tables</span><br><span class=\"line\">mysql</span><br><span class=\"line\">mysql &gt; alter ....</span><br><span class=\"line\">mysql &gt; flush privaileges;</span><br></pre></td></tr></table></figure>\n\n<p>记得要重启mysql服务</p>\n<h1 id=\"Apache2的坑\"><a href=\"#Apache2的坑\" class=\"headerlink\" title=\"Apache2的坑\"></a>Apache2的坑</h1><ol>\n<li>开多端口多路径</li>\n</ol>\n<p>ports.conf 文件中添加 “Listen + 端口号”。<br>sites-availabe/000-default-conf文件中添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:61212&gt;</span><br><span class=\"line\">     ServerAdmin webmaster@localhost:61212</span><br><span class=\"line\">     DocumentRoot /home/edxuanlen/Documents/ftp</span><br><span class=\"line\">     ServerName localhost</span><br><span class=\"line\">     ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class=\"line\">     CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n\n<p>apache2.conf 文件中加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory /home/edxuanlen/Documents/ftp &gt;</span><br><span class=\"line\">\tOptions Indexes FollowSymLinks</span><br><span class=\"line\">    AllowOverride None</span><br><span class=\"line\">    Require all granted</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>\n\n<p>service apache2 restart</p>\n<ol start=\"3\">\n<li>Phpstorm 的使用</li>\n</ol>\n<p>提示mysqli为定义类，其实是因为没有下载 php-mysql 这个文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install php-mysql</span><br></pre></td></tr></table></figure>\n\n<p>端口问题，一直无法通过浏览器显示。报cgi错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install php7.2-cgi</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>Php 的使用</li>\n</ol>\n<p>php-bcmath<br>php-mysqli<br>libapache2-mod-php7</p>\n"},{"title":"给博客添加live2d","date":"2019-09-23T00:11:23.000Z","description":"给hexo博客添加live2d","top":null,"_content":"\n## live2d 相关博客\n\n[live2d 模型预览](https://blog.csdn.net/wang_123_zy/article/details/87181892)\n\n[live2d 它想动](https://blog.csdn.net/dataiyangu/article/details/83021854)\n\n\n\n","source":"_posts/给博客添加live2d.md","raw":"---\ntitle: 给博客添加live2d\ndate: 2019-09-23 08:11:23\ntags: \n    - 网站\ncategories:\n\n\ndescription: 给hexo博客添加live2d\ntop:\n---\n\n## live2d 相关博客\n\n[live2d 模型预览](https://blog.csdn.net/wang_123_zy/article/details/87181892)\n\n[live2d 它想动](https://blog.csdn.net/dataiyangu/article/details/83021854)\n\n\n\n","slug":"给博客添加live2d","published":1,"updated":"2020-02-06T22:40:22.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9av004j24uwgy613kgz","content":"<h2 id=\"live2d-相关博客\"><a href=\"#live2d-相关博客\" class=\"headerlink\" title=\"live2d 相关博客\"></a>live2d 相关博客</h2><p><a href=\"https://blog.csdn.net/wang_123_zy/article/details/87181892\" target=\"_blank\" rel=\"noopener\">live2d 模型预览</a></p>\n<p><a href=\"https://blog.csdn.net/dataiyangu/article/details/83021854\" target=\"_blank\" rel=\"noopener\">live2d 它想动</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"live2d-相关博客\"><a href=\"#live2d-相关博客\" class=\"headerlink\" title=\"live2d 相关博客\"></a>live2d 相关博客</h2><p><a href=\"https://blog.csdn.net/wang_123_zy/article/details/87181892\" target=\"_blank\" rel=\"noopener\">live2d 模型预览</a></p>\n<p><a href=\"https://blog.csdn.net/dataiyangu/article/details/83021854\" target=\"_blank\" rel=\"noopener\">live2d 它想动</a></p>\n"},{"title":"蓝桥杯试题集_历届试题","date":"2019-02-20T07:03:04.000Z","description":null,"_content":"","source":"_posts/蓝桥杯试题集-历届试题.md","raw":"---\ntitle: 蓝桥杯试题集_历届试题\ndate: 2019-02-20 15:03:04\ntags:\ncategories:\ndescription:\n---\n","slug":"蓝桥杯试题集-历届试题","published":1,"updated":"2020-02-06T22:40:22.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9ax004m24uwkeyqio79","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"背包","date":"2018-03-20T05:18:37.000Z","description":"给定n种物品和一个容量为C的背包，物品i的重量是wi,其价值为vi。应该如何选择装入背包的物品，使得装入背包中的物品的总价值最大？","_content":"\n**题目大意**\n有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使价值总和最大。\n\n\n**状态转化方程  dp[i][j]=max[dp[i-1][j],a[i-1][j-w[i]]+v[i]]**\n\n### 一维解法\n```C++\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 5000*2+5;\nint f[maxn],n,m,w,v;\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tmemset(f,0,sizeof f);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d%d\",&w,&v);\n\t\tfor(int j=m;j>=w;j--)\n\t\t\tf[j]=max(f[j],f[j-w]+v);\n\t\tfor(int i=1;i<=m;i++)printf(\"%d \",f[i]);\n\t}\n\tprintf(\"%d\\n\",f[m]);\n\treturn 0;\n}\n```\n### 二维解法\n```C++\n#include<stdio.h>\n#include<iostream>\n#include<string.h>\nusing namespace std;\nint a[201][5001];\nint main()\n{\tint n,m,i,j;\n\tint w[201],v[201];\n\tscanf(\"%d%d\",&n,&m);\n\tmemset(a,0,sizeof(a));\n\tfor(i=1;i<=n;i++)\n\t\tscanf(\"%d%d\",&w[i],&v[i]);\n\tfor(i=1;i<=n;i++)\n\t\tfor(j=1;j<=m;j++)\n\t\t\tif(j>=w[i])\n\t\t\t\ta[i][j]=max(a[i-1][j],a[i-1][j-w[i]]+v[i]);\n\t\t\telse\n\t \t\t\ta[i][j]=a[i-1][j];\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tcout<<a[i][j]<<' ';\n\t\tcout<<endl;\n\t}\n\tprintf(\"%d\",a[i-1][j-1]);\n\treturn 0;\n}\n\n```","source":"_posts/背包.md","raw":"---\ntitle: 背包\ndate: 2018-03-20 13:18:37\ntags: 动态规划\ncategories: C/C++\ndescription: 给定n种物品和一个容量为C的背包，物品i的重量是wi,其价值为vi。应该如何选择装入背包的物品，使得装入背包中的物品的总价值最大？\n---\n\n**题目大意**\n有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使价值总和最大。\n\n\n**状态转化方程  dp[i][j]=max[dp[i-1][j],a[i-1][j-w[i]]+v[i]]**\n\n### 一维解法\n```C++\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 5000*2+5;\nint f[maxn],n,m,w,v;\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tmemset(f,0,sizeof f);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d%d\",&w,&v);\n\t\tfor(int j=m;j>=w;j--)\n\t\t\tf[j]=max(f[j],f[j-w]+v);\n\t\tfor(int i=1;i<=m;i++)printf(\"%d \",f[i]);\n\t}\n\tprintf(\"%d\\n\",f[m]);\n\treturn 0;\n}\n```\n### 二维解法\n```C++\n#include<stdio.h>\n#include<iostream>\n#include<string.h>\nusing namespace std;\nint a[201][5001];\nint main()\n{\tint n,m,i,j;\n\tint w[201],v[201];\n\tscanf(\"%d%d\",&n,&m);\n\tmemset(a,0,sizeof(a));\n\tfor(i=1;i<=n;i++)\n\t\tscanf(\"%d%d\",&w[i],&v[i]);\n\tfor(i=1;i<=n;i++)\n\t\tfor(j=1;j<=m;j++)\n\t\t\tif(j>=w[i])\n\t\t\t\ta[i][j]=max(a[i-1][j],a[i-1][j-w[i]]+v[i]);\n\t\t\telse\n\t \t\t\ta[i][j]=a[i-1][j];\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tcout<<a[i][j]<<' ';\n\t\tcout<<endl;\n\t}\n\tprintf(\"%d\",a[i-1][j-1]);\n\treturn 0;\n}\n\n```","slug":"背包","published":1,"updated":"2020-02-06T22:40:22.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9az004p24uwazuhoqjk","content":"<p><strong>题目大意</strong><br>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使价值总和最大。</p>\n<p><strong>状态转化方程  dp[i][j]=max[dp[i-1][j],a[i-1][j-w[i]]+v[i]]</strong></p>\n<h3 id=\"一维解法\"><a href=\"#一维解法\" class=\"headerlink\" title=\"一维解法\"></a>一维解法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">5000</span>*<span class=\"number\">2</span>+<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[maxn],n,m,w,v;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(f,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span> f);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;w,&amp;v);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=m;j&gt;=w;j--)</span><br><span class=\"line\">\t\t\tf[j]=max(f[j],f[j-w]+v);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,f[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,f[m]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二维解法\"><a href=\"#二维解法\" class=\"headerlink\" title=\"二维解法\"></a>二维解法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">201</span>][<span class=\"number\">5001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t<span class=\"keyword\">int</span> n,m,i,j;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> w[<span class=\"number\">201</span>],v[<span class=\"number\">201</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(a,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(a));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;w[i],&amp;v[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(j&gt;=w[i])</span><br><span class=\"line\">\t\t\t\ta[i][j]=max(a[i<span class=\"number\">-1</span>][j],a[i<span class=\"number\">-1</span>][j-w[i]]+v[i]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t \t\t\ta[i][j]=a[i<span class=\"number\">-1</span>][j];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,a[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><strong>题目大意</strong><br>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使价值总和最大。</p>\n<p><strong>状态转化方程  dp[i][j]=max[dp[i-1][j],a[i-1][j-w[i]]+v[i]]</strong></p>\n<h3 id=\"一维解法\"><a href=\"#一维解法\" class=\"headerlink\" title=\"一维解法\"></a>一维解法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">5000</span>*<span class=\"number\">2</span>+<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[maxn],n,m,w,v;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(f,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span> f);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;w,&amp;v);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=m;j&gt;=w;j--)</span><br><span class=\"line\">\t\t\tf[j]=max(f[j],f[j-w]+v);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,f[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,f[m]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二维解法\"><a href=\"#二维解法\" class=\"headerlink\" title=\"二维解法\"></a>二维解法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">201</span>][<span class=\"number\">5001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t<span class=\"keyword\">int</span> n,m,i,j;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> w[<span class=\"number\">201</span>],v[<span class=\"number\">201</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(a,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(a));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;w[i],&amp;v[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(j&gt;=w[i])</span><br><span class=\"line\">\t\t\t\ta[i][j]=max(a[i<span class=\"number\">-1</span>][j],a[i<span class=\"number\">-1</span>][j-w[i]]+v[i]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t \t\t\ta[i][j]=a[i<span class=\"number\">-1</span>][j];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,a[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"自建SS服务","date":"2019-10-09T09:47:28.000Z","description":"科学上网，求学必备的方式。","top":true,"_content":"\n\n最近zf的净网行动导致了很多VPN崩溃了，由于科学上网的需要，我决定自己动手搭建一个VPN\\\n事实证明特别简单，费用也不是很高，($2.5/month)\n\n\n## 服务器\n\n### 选用和购买\n\n由于需要外网ip的VPS才能科学上网，所以需要一个国外的服务器。\\\n这里要注意的是 **千万不要选阿里云等国内代理商的国外服务器** \\\n原因是他不会允许你使用服务器代理流量访问国外的网站， 如果你这么做了会接受到警告和封闭  \n\n我们可以选用国外服务器的代理商，我选用了Vultr，因为对比下来价格最便宜  \n注册送$50, 但仅限于第一个月内用  \n我选用了一个美国的服务器, 最低$3.5/mo  \n不同地区的价格和延迟都不一样，大家自己都可以试一下  \n**要注意的是，$2.5/mo的服务器是ipv6 only**\n\n\n### 安装相关软件\n\n```bash\nsudo apt-get -y update && sudo apt-get install python-pip python-setuptools m2crypto shadowsocks\nssserver -s 0.0.0.0 -p 2333 -k \"QWERTYU\" -t 600 -m aes-256-cfb\n// 2333是服务器开放的ssr的端口，QWERTYU是连接的密码，最大延迟时间，aes-256-cfb是加密方式\n```\n\n这样就可以运行了，只需要本地用shadowsocks的客户端连接即可。\n需要客户端可以到 https://github.com/Alvin9999/new-pac/wiki/ss免费账号#ssssr免费账号长期更新 去下载\n\n上面ssr服务器端的配置也可以写成一个配置文件\n\n```sh\ncd ~\nmkdir ss\ncd ss\nvim ss.json\n```\n\nss.json 内容如下:\n\n```json\n{\n    \"server\":\"0.0.0.0\",\n    \"server_port\": 2333,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n    \"password\":\"QWERTYU\",\n    \"timeout\":600,\n    \"method\":\"aes-256-cfb\"\n}\n```\n\n然后运行：\n\n```sh\nssserver -c ~/ss/ss.json\n```\n\n后台挂起\n```sh\nnohup ssserver -c ~/ss/ss.json >/dev/null 2>&1 &\n```\n\n\n\n如果有需求，但自己不想搭的话也可以联系我，或者在下面评论，可以一起合租一个服务器。\n// 5835\n\n参考博客: https://viencoding.com/article/90  \n","source":"_posts/自建SS服务.md","raw":"---\ntitle: 自建SS服务\ndate: 2019-10-09 17:47:28\ntags:\n    - 应用\ncategories:\n    - 应用\ndescription: 科学上网，求学必备的方式。\ntop: true\n---\n\n\n最近zf的净网行动导致了很多VPN崩溃了，由于科学上网的需要，我决定自己动手搭建一个VPN\\\n事实证明特别简单，费用也不是很高，($2.5/month)\n\n\n## 服务器\n\n### 选用和购买\n\n由于需要外网ip的VPS才能科学上网，所以需要一个国外的服务器。\\\n这里要注意的是 **千万不要选阿里云等国内代理商的国外服务器** \\\n原因是他不会允许你使用服务器代理流量访问国外的网站， 如果你这么做了会接受到警告和封闭  \n\n我们可以选用国外服务器的代理商，我选用了Vultr，因为对比下来价格最便宜  \n注册送$50, 但仅限于第一个月内用  \n我选用了一个美国的服务器, 最低$3.5/mo  \n不同地区的价格和延迟都不一样，大家自己都可以试一下  \n**要注意的是，$2.5/mo的服务器是ipv6 only**\n\n\n### 安装相关软件\n\n```bash\nsudo apt-get -y update && sudo apt-get install python-pip python-setuptools m2crypto shadowsocks\nssserver -s 0.0.0.0 -p 2333 -k \"QWERTYU\" -t 600 -m aes-256-cfb\n// 2333是服务器开放的ssr的端口，QWERTYU是连接的密码，最大延迟时间，aes-256-cfb是加密方式\n```\n\n这样就可以运行了，只需要本地用shadowsocks的客户端连接即可。\n需要客户端可以到 https://github.com/Alvin9999/new-pac/wiki/ss免费账号#ssssr免费账号长期更新 去下载\n\n上面ssr服务器端的配置也可以写成一个配置文件\n\n```sh\ncd ~\nmkdir ss\ncd ss\nvim ss.json\n```\n\nss.json 内容如下:\n\n```json\n{\n    \"server\":\"0.0.0.0\",\n    \"server_port\": 2333,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n    \"password\":\"QWERTYU\",\n    \"timeout\":600,\n    \"method\":\"aes-256-cfb\"\n}\n```\n\n然后运行：\n\n```sh\nssserver -c ~/ss/ss.json\n```\n\n后台挂起\n```sh\nnohup ssserver -c ~/ss/ss.json >/dev/null 2>&1 &\n```\n\n\n\n如果有需求，但自己不想搭的话也可以联系我，或者在下面评论，可以一起合租一个服务器。\n// 5835\n\n参考博客: https://viencoding.com/article/90  \n","slug":"自建SS服务","published":1,"updated":"2020-03-08T07:37:50.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9b1004s24uwpah3atao","content":"<p>最近zf的净网行动导致了很多VPN崩溃了，由于科学上网的需要，我决定自己动手搭建一个VPN<br>事实证明特别简单，费用也不是很高，($2.5/month)</p>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><h3 id=\"选用和购买\"><a href=\"#选用和购买\" class=\"headerlink\" title=\"选用和购买\"></a>选用和购买</h3><p>由于需要外网ip的VPS才能科学上网，所以需要一个国外的服务器。<br>这里要注意的是 <strong>千万不要选阿里云等国内代理商的国外服务器</strong> <br>原因是他不会允许你使用服务器代理流量访问国外的网站， 如果你这么做了会接受到警告和封闭  </p>\n<p>我们可以选用国外服务器的代理商，我选用了Vultr，因为对比下来价格最便宜<br>注册送$50, 但仅限于第一个月内用<br>我选用了一个美国的服务器, 最低$3.5/mo<br>不同地区的价格和延迟都不一样，大家自己都可以试一下<br><strong>要注意的是，$2.5/mo的服务器是ipv6 only</strong></p>\n<h3 id=\"安装相关软件\"><a href=\"#安装相关软件\" class=\"headerlink\" title=\"安装相关软件\"></a>安装相关软件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y update &amp;&amp; sudo apt-get install python-pip python-setuptools m2crypto shadowsocks</span><br><span class=\"line\">ssserver -s 0.0.0.0 -p 2333 -k <span class=\"string\">\"QWERTYU\"</span> -t 600 -m aes-256-cfb</span><br><span class=\"line\">// 2333是服务器开放的ssr的端口，QWERTYU是连接的密码，最大延迟时间，aes-256-cfb是加密方式</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以运行了，只需要本地用shadowsocks的客户端连接即可。<br>需要客户端可以到 <a href=\"https://github.com/Alvin9999/new-pac/wiki/ss免费账号#ssssr免费账号长期更新\" target=\"_blank\" rel=\"noopener\">https://github.com/Alvin9999/new-pac/wiki/ss免费账号#ssssr免费账号长期更新</a> 去下载</p>\n<p>上面ssr服务器端的配置也可以写成一个配置文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">mkdir ss</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ss</span><br><span class=\"line\">vim ss.json</span><br></pre></td></tr></table></figure>\n\n<p>ss.json 内容如下:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"server_port\"</span>: <span class=\"number\">2333</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"local_port\"</span>: <span class=\"number\">1080</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"QWERTYU\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后运行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c ~/ss/ss.json</span><br></pre></td></tr></table></figure>\n\n<p>后台挂起</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup ssserver -c ~/ss/ss.json &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>如果有需求，但自己不想搭的话也可以联系我，或者在下面评论，可以一起合租一个服务器。<br>// 5835</p>\n<p>参考博客: <a href=\"https://viencoding.com/article/90\" target=\"_blank\" rel=\"noopener\">https://viencoding.com/article/90</a>  </p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近zf的净网行动导致了很多VPN崩溃了，由于科学上网的需要，我决定自己动手搭建一个VPN<br>事实证明特别简单，费用也不是很高，($2.5/month)</p>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><h3 id=\"选用和购买\"><a href=\"#选用和购买\" class=\"headerlink\" title=\"选用和购买\"></a>选用和购买</h3><p>由于需要外网ip的VPS才能科学上网，所以需要一个国外的服务器。<br>这里要注意的是 <strong>千万不要选阿里云等国内代理商的国外服务器</strong> <br>原因是他不会允许你使用服务器代理流量访问国外的网站， 如果你这么做了会接受到警告和封闭  </p>\n<p>我们可以选用国外服务器的代理商，我选用了Vultr，因为对比下来价格最便宜<br>注册送$50, 但仅限于第一个月内用<br>我选用了一个美国的服务器, 最低$3.5/mo<br>不同地区的价格和延迟都不一样，大家自己都可以试一下<br><strong>要注意的是，$2.5/mo的服务器是ipv6 only</strong></p>\n<h3 id=\"安装相关软件\"><a href=\"#安装相关软件\" class=\"headerlink\" title=\"安装相关软件\"></a>安装相关软件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y update &amp;&amp; sudo apt-get install python-pip python-setuptools m2crypto shadowsocks</span><br><span class=\"line\">ssserver -s 0.0.0.0 -p 2333 -k <span class=\"string\">\"QWERTYU\"</span> -t 600 -m aes-256-cfb</span><br><span class=\"line\">// 2333是服务器开放的ssr的端口，QWERTYU是连接的密码，最大延迟时间，aes-256-cfb是加密方式</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以运行了，只需要本地用shadowsocks的客户端连接即可。<br>需要客户端可以到 <a href=\"https://github.com/Alvin9999/new-pac/wiki/ss免费账号#ssssr免费账号长期更新\" target=\"_blank\" rel=\"noopener\">https://github.com/Alvin9999/new-pac/wiki/ss免费账号#ssssr免费账号长期更新</a> 去下载</p>\n<p>上面ssr服务器端的配置也可以写成一个配置文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">mkdir ss</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ss</span><br><span class=\"line\">vim ss.json</span><br></pre></td></tr></table></figure>\n\n<p>ss.json 内容如下:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"server_port\"</span>: <span class=\"number\">2333</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"local_port\"</span>: <span class=\"number\">1080</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"QWERTYU\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后运行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c ~/ss/ss.json</span><br></pre></td></tr></table></figure>\n\n<p>后台挂起</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup ssserver -c ~/ss/ss.json &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>如果有需求，但自己不想搭的话也可以联系我，或者在下面评论，可以一起合租一个服务器。<br>// 5835</p>\n<p>参考博客: <a href=\"https://viencoding.com/article/90\" target=\"_blank\" rel=\"noopener\">https://viencoding.com/article/90</a>  </p>\n"},{"title":"蓝桥杯试题集_入门训练","date":"2019-02-19T18:02:11.000Z","description":"入门。","_content":"\n\n[蓝桥杯入门训练](http://lx.lanqiao.cn/problemsets.page)\n\n## BEGIN 1:\n[A+B问题](http://lx.lanqiao.cn/problem.page?gpid=T1)\n### 问题描述\n```\n输入A、B，输出A+B。\n说明：在“问题描述”这部分，会给出试题的意思，以及所要求的目标。\n```\n**输入格式**\n```\n输入的第一行包括两个整数，由空格分隔，分别表示A、B。\n说明：“输入格式”是描述在测试你的程序时，所给的输入一定满足的格式。\n\n做题时你应该假设所给的输入是一定满足输入格式的要求的，所以你不需要对输入的格式进行检查。\n多余的格式检查可能会适得其反，使用你的程序错误。\n\n在测试的时候，系统会自动将输入数据输入到你的程序中，你不能给任何提示。比如，你在输入的时候提示“请输入A、B”之类的话是不需要的，这些多余的输出会使得你的程序被判定为错误。\n```\n**输出格式**\n```\n输出一行，包括一个整数，表示A+B的值。\n说明：“输出格式”是要求你的程序在输出结果的时候必须满足的格式。\n\n在输出时，你的程序必须满足这个格式的要求，不能少任何内容，也不能多任何内容。如果你的内容和输出格式要求的不一样，你的程序会被判断为错误，包括你输出了提示信息、中间调试信息、计时或者统计的信息等。\n```\n**样例输入**\n```\n12 45\n说明：“样例输入”给出了一组满足“输入格式”要求的输入的例子。\n\n这里给出的输入只是可能用来测试你的程序的一个输入，在测试的时候，还会有更多的输入用来测试你的程序。\n```\n**样例输出**\n```\n 57\n说明：“样例输出”给出了一组满足“输出格式”要求的输出的例子。\n\n样例输出中的结果是和样例输入中的是对应的，因此，你可以使用样例的输入输出简单的检查你的程序。\n\n要特别指出的是，能够通过样例输入输出的程序并不一定是正确的程序，在测试的时候，会用很多组数据进行测试，而不局限于样例数据。有可能一个程序通过了样例数据，但测试的时候仍只能得0分，可能因为这个程序只在一些类似样例的特例中正确，而不具有通用性，再测试更多数据时会出现错误。\n\n比如，对于本题，如果你写一个程序不管输入是什么都输入57，则样例数据是对的，但是测试其他数据，哪怕输入是1和2，这个程序也输出57，则对于其他数据这个程序都不正确。\n\n数据规模与约定\n-10000 <= A, B <= 10000。\n说明：“数据规模与约定”中给出了试题中主要参数的范围。\n\n这个范围对于解题非常重要，不同的数据范围会导致试题需要使用不同的解法来解决。比如本题中给的A、B范围不大，可以使用整型(int)来保存，如果范围更大，超过int的范围，则要考虑其他方法来保存大数。\n\n有一些范围在方便的时候是在“问题描述”中直接给的，所以在做题时不仅要看这个范围，还要注意问题描述。\n```\n### 问题分析\n略\n\n### AC代码\n**本题的C++源代码如下：**\n\n```C++\n#include <iostream>\n \nusing namespace std;\n \nint main()\n{\n    int a, b;\n    cin >> a >> b;\n    cout << a + b;\n    return 0;\n}\n```\n\n**本题的C源代码如下：**\n\n```C\n#include <stdio.h>\n \nint main()\n{\n    int a, b;\n    scanf(\"%d%d\", &a, &b);\n    printf(\"%d\", a+b);\n    return 0;\n}\n```\n\n**本题的Java源代码如下：**\n\n```JAVA\nimport java.util.*;\n \npublic class Main\n{\n    public static void main(String args[])\n    {\n        Scanner sc = new Scanner(System.in);\n        Integer a = sc.nextInt();\n        Integer b = sc.nextInt();\n        System.out.println(a + b);\n    }\n}\n```\n\n## BEGIN 2:\n[ 序列求和](http://lx.lanqiao.cn/problem.page?gpid=T2)\n### 问题描述\n```\n求1+2+3+...+n的值。\n输入包括一个整数n。\n\n```\n```\n样例输入\n\n```\n```\n样例输出\n\n```\n### 问题分析\n略\n\n### AC代码\n\n```C++\n#include <iostream>\n \nusing namespace std;\n \nint main()\n{\n    int a, b;\n    cin >> a >> b;\n    cout << a + b;\n    return 0;\n}\n```\n\n\n## BEGIN 2:\n[序列求和](http://lx.lanqiao.cn/problem.page?gpid=T2)\n### 问题描述\n```\n求1+2+3+...+n的值。\n```\n**输入格式**\n```\n输入包括一个整数n。\n```\n**输出格式**\n```\n输出一行，包括一个整数，表示1+2+3+...+n的值。\n```\n**样例输入**\n```\n4\n```\n**样例输出**\n```\n10\n```\n**样例输入**\n```\n100\n```\n**样例输出**\n```\n5050\n```\n**数据规模与约定**\n```\n1 <= n <= 1,000,000,000\n```\n### 问题分析\n数据范围比较大如果累加会超时如下代码:\n\n```C++\nwhile (n) ans += n --;\n```\n所以应该使用求和公式\n\n\n### AC代码\n```C++\n# include <stdio.h>\ntype long long ll;\nint main() {\n\tll n;\n\tscanf(\"%d\", &n);\n \tprintf(\"%I64d\", (1 + n) * n / 2);\n \treturn 0;\n}\n```\n\n## BEGIN 3:\n[圆的面积](http://lx.lanqiao.cn/problem.page?gpid=T3)\n### 问题描述\n```\n给定圆的半径r，求圆的面积。\n```\n**输入格式**\n```\n输入包含一个整数r，表示圆的半径。\n```\n**输出格式**\n\n```\n输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。\n\n说明：在本题中，输入是一个整数，但是输出是一个实数。\n对于实数输出的问题，请一定看清楚实数输出的要求，比如本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误。\n实数输出的问题如果没有特别说明，舍入都是按四舍五入进行。\n```\n**样例输入**\n```\n4\n```\n**样例输出**\n```\n50.2654825\n```\n**数据规模与约定**\n```\n1 <= r <= 100000\n本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI=3.14159265358979323，也可以使用数学公式来求π，比如PI=atan(1.0)*4。\n```\n### 问题分析\n使用浮点数计算\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\ndouble PI=3.14159265358979323;\nint main(){\n\tint r;\n\tscanf (\"%d\", &r);\n\tprintf (\"%.7lf\", PI * r * r);\n\treturn 0;\n}\n```\n\n## BEGIN 4:\n[Fibonacci数列](http://lx.lanqiao.cn/problem.page?gpid=T4)\n### 问题描述\n```\nFibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。\n当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。\n```\n**输入格式**\n```\n输入包含一个整数n。\n```\n**输出格式**\n```\n输出一行，包含一个整数，表示Fn除以10007的余数。\n说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。\n```\n**样例输入**\n```\n10\n```\n**样例输出**\n```\n55\n```\n**样例输入**\n```\n22\n```\n**样例输出**\n```\n7704\n```\n**数据规模与约定**\n```\n1 <= n <= 1,000,000\n```\n### 问题分析\n略\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint MOD = 10007;\nint main(){\n\tint n;\n\twhile (cin >> n){\n\t\tint a = 1, b = 1;\n\t\tif (n <= 2){  \t\t\t\t// n <= 2时都是1\n\t\t\tcout << \"1\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\twhile (-- n){\n\t\t\tswap(a, b);\n\t\t\tb = (a + b) % MOD;\n\t\t}\n\t\tcout << a << endl;\n\t}\n\treturn 0;\n}\n```\n\n","source":"_posts/蓝桥杯试题集-入门训练.md","raw":"---\ntitle: 蓝桥杯试题集_入门训练\ndate: 2019-02-20 02:02:11\ntags: 蓝桥杯\ncategories: C/C++\ndescription: 入门。\n---\n\n\n[蓝桥杯入门训练](http://lx.lanqiao.cn/problemsets.page)\n\n## BEGIN 1:\n[A+B问题](http://lx.lanqiao.cn/problem.page?gpid=T1)\n### 问题描述\n```\n输入A、B，输出A+B。\n说明：在“问题描述”这部分，会给出试题的意思，以及所要求的目标。\n```\n**输入格式**\n```\n输入的第一行包括两个整数，由空格分隔，分别表示A、B。\n说明：“输入格式”是描述在测试你的程序时，所给的输入一定满足的格式。\n\n做题时你应该假设所给的输入是一定满足输入格式的要求的，所以你不需要对输入的格式进行检查。\n多余的格式检查可能会适得其反，使用你的程序错误。\n\n在测试的时候，系统会自动将输入数据输入到你的程序中，你不能给任何提示。比如，你在输入的时候提示“请输入A、B”之类的话是不需要的，这些多余的输出会使得你的程序被判定为错误。\n```\n**输出格式**\n```\n输出一行，包括一个整数，表示A+B的值。\n说明：“输出格式”是要求你的程序在输出结果的时候必须满足的格式。\n\n在输出时，你的程序必须满足这个格式的要求，不能少任何内容，也不能多任何内容。如果你的内容和输出格式要求的不一样，你的程序会被判断为错误，包括你输出了提示信息、中间调试信息、计时或者统计的信息等。\n```\n**样例输入**\n```\n12 45\n说明：“样例输入”给出了一组满足“输入格式”要求的输入的例子。\n\n这里给出的输入只是可能用来测试你的程序的一个输入，在测试的时候，还会有更多的输入用来测试你的程序。\n```\n**样例输出**\n```\n 57\n说明：“样例输出”给出了一组满足“输出格式”要求的输出的例子。\n\n样例输出中的结果是和样例输入中的是对应的，因此，你可以使用样例的输入输出简单的检查你的程序。\n\n要特别指出的是，能够通过样例输入输出的程序并不一定是正确的程序，在测试的时候，会用很多组数据进行测试，而不局限于样例数据。有可能一个程序通过了样例数据，但测试的时候仍只能得0分，可能因为这个程序只在一些类似样例的特例中正确，而不具有通用性，再测试更多数据时会出现错误。\n\n比如，对于本题，如果你写一个程序不管输入是什么都输入57，则样例数据是对的，但是测试其他数据，哪怕输入是1和2，这个程序也输出57，则对于其他数据这个程序都不正确。\n\n数据规模与约定\n-10000 <= A, B <= 10000。\n说明：“数据规模与约定”中给出了试题中主要参数的范围。\n\n这个范围对于解题非常重要，不同的数据范围会导致试题需要使用不同的解法来解决。比如本题中给的A、B范围不大，可以使用整型(int)来保存，如果范围更大，超过int的范围，则要考虑其他方法来保存大数。\n\n有一些范围在方便的时候是在“问题描述”中直接给的，所以在做题时不仅要看这个范围，还要注意问题描述。\n```\n### 问题分析\n略\n\n### AC代码\n**本题的C++源代码如下：**\n\n```C++\n#include <iostream>\n \nusing namespace std;\n \nint main()\n{\n    int a, b;\n    cin >> a >> b;\n    cout << a + b;\n    return 0;\n}\n```\n\n**本题的C源代码如下：**\n\n```C\n#include <stdio.h>\n \nint main()\n{\n    int a, b;\n    scanf(\"%d%d\", &a, &b);\n    printf(\"%d\", a+b);\n    return 0;\n}\n```\n\n**本题的Java源代码如下：**\n\n```JAVA\nimport java.util.*;\n \npublic class Main\n{\n    public static void main(String args[])\n    {\n        Scanner sc = new Scanner(System.in);\n        Integer a = sc.nextInt();\n        Integer b = sc.nextInt();\n        System.out.println(a + b);\n    }\n}\n```\n\n## BEGIN 2:\n[ 序列求和](http://lx.lanqiao.cn/problem.page?gpid=T2)\n### 问题描述\n```\n求1+2+3+...+n的值。\n输入包括一个整数n。\n\n```\n```\n样例输入\n\n```\n```\n样例输出\n\n```\n### 问题分析\n略\n\n### AC代码\n\n```C++\n#include <iostream>\n \nusing namespace std;\n \nint main()\n{\n    int a, b;\n    cin >> a >> b;\n    cout << a + b;\n    return 0;\n}\n```\n\n\n## BEGIN 2:\n[序列求和](http://lx.lanqiao.cn/problem.page?gpid=T2)\n### 问题描述\n```\n求1+2+3+...+n的值。\n```\n**输入格式**\n```\n输入包括一个整数n。\n```\n**输出格式**\n```\n输出一行，包括一个整数，表示1+2+3+...+n的值。\n```\n**样例输入**\n```\n4\n```\n**样例输出**\n```\n10\n```\n**样例输入**\n```\n100\n```\n**样例输出**\n```\n5050\n```\n**数据规模与约定**\n```\n1 <= n <= 1,000,000,000\n```\n### 问题分析\n数据范围比较大如果累加会超时如下代码:\n\n```C++\nwhile (n) ans += n --;\n```\n所以应该使用求和公式\n\n\n### AC代码\n```C++\n# include <stdio.h>\ntype long long ll;\nint main() {\n\tll n;\n\tscanf(\"%d\", &n);\n \tprintf(\"%I64d\", (1 + n) * n / 2);\n \treturn 0;\n}\n```\n\n## BEGIN 3:\n[圆的面积](http://lx.lanqiao.cn/problem.page?gpid=T3)\n### 问题描述\n```\n给定圆的半径r，求圆的面积。\n```\n**输入格式**\n```\n输入包含一个整数r，表示圆的半径。\n```\n**输出格式**\n\n```\n输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。\n\n说明：在本题中，输入是一个整数，但是输出是一个实数。\n对于实数输出的问题，请一定看清楚实数输出的要求，比如本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误。\n实数输出的问题如果没有特别说明，舍入都是按四舍五入进行。\n```\n**样例输入**\n```\n4\n```\n**样例输出**\n```\n50.2654825\n```\n**数据规模与约定**\n```\n1 <= r <= 100000\n本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI=3.14159265358979323，也可以使用数学公式来求π，比如PI=atan(1.0)*4。\n```\n### 问题分析\n使用浮点数计算\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\ndouble PI=3.14159265358979323;\nint main(){\n\tint r;\n\tscanf (\"%d\", &r);\n\tprintf (\"%.7lf\", PI * r * r);\n\treturn 0;\n}\n```\n\n## BEGIN 4:\n[Fibonacci数列](http://lx.lanqiao.cn/problem.page?gpid=T4)\n### 问题描述\n```\nFibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。\n当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。\n```\n**输入格式**\n```\n输入包含一个整数n。\n```\n**输出格式**\n```\n输出一行，包含一个整数，表示Fn除以10007的余数。\n说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。\n```\n**样例输入**\n```\n10\n```\n**样例输出**\n```\n55\n```\n**样例输入**\n```\n22\n```\n**样例输出**\n```\n7704\n```\n**数据规模与约定**\n```\n1 <= n <= 1,000,000\n```\n### 问题分析\n略\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint MOD = 10007;\nint main(){\n\tint n;\n\twhile (cin >> n){\n\t\tint a = 1, b = 1;\n\t\tif (n <= 2){  \t\t\t\t// n <= 2时都是1\n\t\t\tcout << \"1\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\twhile (-- n){\n\t\t\tswap(a, b);\n\t\t\tb = (a + b) % MOD;\n\t\t}\n\t\tcout << a << endl;\n\t}\n\treturn 0;\n}\n```\n\n","slug":"蓝桥杯试题集-入门训练","published":1,"updated":"2020-02-06T22:40:22.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9b3004v24uwnlibqzmb","content":"<p><a href=\"http://lx.lanqiao.cn/problemsets.page\" target=\"_blank\" rel=\"noopener\">蓝桥杯入门训练</a></p>\n<h2 id=\"BEGIN-1\"><a href=\"#BEGIN-1\" class=\"headerlink\" title=\"BEGIN 1:\"></a>BEGIN 1:</h2><p><a href=\"http://lx.lanqiao.cn/problem.page?gpid=T1\" target=\"_blank\" rel=\"noopener\">A+B问题</a></p>\n<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入A、B，输出A+B。</span><br><span class=\"line\">说明：在“问题描述”这部分，会给出试题的意思，以及所要求的目标。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入的第一行包括两个整数，由空格分隔，分别表示A、B。</span><br><span class=\"line\">说明：“输入格式”是描述在测试你的程序时，所给的输入一定满足的格式。</span><br><span class=\"line\"></span><br><span class=\"line\">做题时你应该假设所给的输入是一定满足输入格式的要求的，所以你不需要对输入的格式进行检查。</span><br><span class=\"line\">多余的格式检查可能会适得其反，使用你的程序错误。</span><br><span class=\"line\"></span><br><span class=\"line\">在测试的时候，系统会自动将输入数据输入到你的程序中，你不能给任何提示。比如，你在输入的时候提示“请输入A、B”之类的话是不需要的，这些多余的输出会使得你的程序被判定为错误。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出一行，包括一个整数，表示A+B的值。</span><br><span class=\"line\">说明：“输出格式”是要求你的程序在输出结果的时候必须满足的格式。</span><br><span class=\"line\"></span><br><span class=\"line\">在输出时，你的程序必须满足这个格式的要求，不能少任何内容，也不能多任何内容。如果你的内容和输出格式要求的不一样，你的程序会被判断为错误，包括你输出了提示信息、中间调试信息、计时或者统计的信息等。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12 45</span><br><span class=\"line\">说明：“样例输入”给出了一组满足“输入格式”要求的输入的例子。</span><br><span class=\"line\"></span><br><span class=\"line\">这里给出的输入只是可能用来测试你的程序的一个输入，在测试的时候，还会有更多的输入用来测试你的程序。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 57</span><br><span class=\"line\">说明：“样例输出”给出了一组满足“输出格式”要求的输出的例子。</span><br><span class=\"line\"></span><br><span class=\"line\">样例输出中的结果是和样例输入中的是对应的，因此，你可以使用样例的输入输出简单的检查你的程序。</span><br><span class=\"line\"></span><br><span class=\"line\">要特别指出的是，能够通过样例输入输出的程序并不一定是正确的程序，在测试的时候，会用很多组数据进行测试，而不局限于样例数据。有可能一个程序通过了样例数据，但测试的时候仍只能得0分，可能因为这个程序只在一些类似样例的特例中正确，而不具有通用性，再测试更多数据时会出现错误。</span><br><span class=\"line\"></span><br><span class=\"line\">比如，对于本题，如果你写一个程序不管输入是什么都输入57，则样例数据是对的，但是测试其他数据，哪怕输入是1和2，这个程序也输出57，则对于其他数据这个程序都不正确。</span><br><span class=\"line\"></span><br><span class=\"line\">数据规模与约定</span><br><span class=\"line\">-10000 &lt;= A, B &lt;= 10000。</span><br><span class=\"line\">说明：“数据规模与约定”中给出了试题中主要参数的范围。</span><br><span class=\"line\"></span><br><span class=\"line\">这个范围对于解题非常重要，不同的数据范围会导致试题需要使用不同的解法来解决。比如本题中给的A、B范围不大，可以使用整型(int)来保存，如果范围更大，超过int的范围，则要考虑其他方法来保存大数。</span><br><span class=\"line\"></span><br><span class=\"line\">有一些范围在方便的时候是在“问题描述”中直接给的，所以在做题时不仅要看这个范围，还要注意问题描述。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>略</p>\n<h3 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><p><strong>本题的C++源代码如下：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; a + b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>本题的C源代码如下：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, a+b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>本题的Java源代码如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        Integer a = sc.nextInt();</span><br><span class=\"line\">        Integer b = sc.nextInt();</span><br><span class=\"line\">        System.out.println(a + b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BEGIN-2\"><a href=\"#BEGIN-2\" class=\"headerlink\" title=\"BEGIN 2:\"></a>BEGIN 2:</h2><p><a href=\"http://lx.lanqiao.cn/problem.page?gpid=T2\" target=\"_blank\" rel=\"noopener\"> 序列求和</a></p>\n<h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求1+2+3+...+n的值。</span><br><span class=\"line\">输入包括一个整数n。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">样例输入</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">样例输出</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题分析-1\"><a href=\"#问题分析-1\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>略</p>\n<h3 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; a + b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BEGIN-2-1\"><a href=\"#BEGIN-2-1\" class=\"headerlink\" title=\"BEGIN 2:\"></a>BEGIN 2:</h2><p><a href=\"http://lx.lanqiao.cn/problem.page?gpid=T2\" target=\"_blank\" rel=\"noopener\">序列求和</a></p>\n<h3 id=\"问题描述-2\"><a href=\"#问题描述-2\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求1+2+3+...+n的值。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入包括一个整数n。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出一行，包括一个整数，表示1+2+3+...+n的值。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5050</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= n &lt;= 1,000,000,000</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题分析-2\"><a href=\"#问题分析-2\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>数据范围比较大如果累加会超时如下代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (n) ans += n --;</span><br></pre></td></tr></table></figure>\n\n<p>所以应该使用求和公式</p>\n<h3 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\">type <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tll n;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\"> \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\"</span>, (<span class=\"number\">1</span> + n) * n / <span class=\"number\">2</span>);</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BEGIN-3\"><a href=\"#BEGIN-3\" class=\"headerlink\" title=\"BEGIN 3:\"></a>BEGIN 3:</h2><p><a href=\"http://lx.lanqiao.cn/problem.page?gpid=T3\" target=\"_blank\" rel=\"noopener\">圆的面积</a></p>\n<h3 id=\"问题描述-3\"><a href=\"#问题描述-3\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定圆的半径r，求圆的面积。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入包含一个整数r，表示圆的半径。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。</span><br><span class=\"line\"></span><br><span class=\"line\">说明：在本题中，输入是一个整数，但是输出是一个实数。</span><br><span class=\"line\">对于实数输出的问题，请一定看清楚实数输出的要求，比如本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误。</span><br><span class=\"line\">实数输出的问题如果没有特别说明，舍入都是按四舍五入进行。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">50.2654825</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= r &lt;= 100000</span><br><span class=\"line\">本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI=3.14159265358979323，也可以使用数学公式来求π，比如PI=atan(1.0)*4。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题分析-3\"><a href=\"#问题分析-3\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>使用浮点数计算</p>\n<h3 id=\"AC代码-3\"><a href=\"#AC代码-3\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> PI=<span class=\"number\">3.14159265358979323</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> r;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span> (<span class=\"string\">\"%d\"</span>, &amp;r);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span> (<span class=\"string\">\"%.7lf\"</span>, PI * r * r);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BEGIN-4\"><a href=\"#BEGIN-4\" class=\"headerlink\" title=\"BEGIN 4:\"></a>BEGIN 4:</h2><p><a href=\"http://lx.lanqiao.cn/problem.page?gpid=T4\" target=\"_blank\" rel=\"noopener\">Fibonacci数列</a></p>\n<h3 id=\"问题描述-4\"><a href=\"#问题描述-4\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。</span><br><span class=\"line\">当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入包含一个整数n。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出一行，包含一个整数，表示Fn除以10007的余数。</span><br><span class=\"line\">说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">55</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">22</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7704</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= n &lt;= 1,000,000</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题分析-4\"><a href=\"#问题分析-4\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>略</p>\n<h3 id=\"AC代码-4\"><a href=\"#AC代码-4\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> MOD = <span class=\"number\">10007</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">2</span>)&#123;  \t\t\t\t<span class=\"comment\">// n &lt;= 2时都是1</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (-- n)&#123;</span><br><span class=\"line\">\t\t\tswap(a, b);</span><br><span class=\"line\">\t\t\tb = (a + b) % MOD;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://lx.lanqiao.cn/problemsets.page\" target=\"_blank\" rel=\"noopener\">蓝桥杯入门训练</a></p>\n<h2 id=\"BEGIN-1\"><a href=\"#BEGIN-1\" class=\"headerlink\" title=\"BEGIN 1:\"></a>BEGIN 1:</h2><p><a href=\"http://lx.lanqiao.cn/problem.page?gpid=T1\" target=\"_blank\" rel=\"noopener\">A+B问题</a></p>\n<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入A、B，输出A+B。</span><br><span class=\"line\">说明：在“问题描述”这部分，会给出试题的意思，以及所要求的目标。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入的第一行包括两个整数，由空格分隔，分别表示A、B。</span><br><span class=\"line\">说明：“输入格式”是描述在测试你的程序时，所给的输入一定满足的格式。</span><br><span class=\"line\"></span><br><span class=\"line\">做题时你应该假设所给的输入是一定满足输入格式的要求的，所以你不需要对输入的格式进行检查。</span><br><span class=\"line\">多余的格式检查可能会适得其反，使用你的程序错误。</span><br><span class=\"line\"></span><br><span class=\"line\">在测试的时候，系统会自动将输入数据输入到你的程序中，你不能给任何提示。比如，你在输入的时候提示“请输入A、B”之类的话是不需要的，这些多余的输出会使得你的程序被判定为错误。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出一行，包括一个整数，表示A+B的值。</span><br><span class=\"line\">说明：“输出格式”是要求你的程序在输出结果的时候必须满足的格式。</span><br><span class=\"line\"></span><br><span class=\"line\">在输出时，你的程序必须满足这个格式的要求，不能少任何内容，也不能多任何内容。如果你的内容和输出格式要求的不一样，你的程序会被判断为错误，包括你输出了提示信息、中间调试信息、计时或者统计的信息等。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12 45</span><br><span class=\"line\">说明：“样例输入”给出了一组满足“输入格式”要求的输入的例子。</span><br><span class=\"line\"></span><br><span class=\"line\">这里给出的输入只是可能用来测试你的程序的一个输入，在测试的时候，还会有更多的输入用来测试你的程序。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 57</span><br><span class=\"line\">说明：“样例输出”给出了一组满足“输出格式”要求的输出的例子。</span><br><span class=\"line\"></span><br><span class=\"line\">样例输出中的结果是和样例输入中的是对应的，因此，你可以使用样例的输入输出简单的检查你的程序。</span><br><span class=\"line\"></span><br><span class=\"line\">要特别指出的是，能够通过样例输入输出的程序并不一定是正确的程序，在测试的时候，会用很多组数据进行测试，而不局限于样例数据。有可能一个程序通过了样例数据，但测试的时候仍只能得0分，可能因为这个程序只在一些类似样例的特例中正确，而不具有通用性，再测试更多数据时会出现错误。</span><br><span class=\"line\"></span><br><span class=\"line\">比如，对于本题，如果你写一个程序不管输入是什么都输入57，则样例数据是对的，但是测试其他数据，哪怕输入是1和2，这个程序也输出57，则对于其他数据这个程序都不正确。</span><br><span class=\"line\"></span><br><span class=\"line\">数据规模与约定</span><br><span class=\"line\">-10000 &lt;= A, B &lt;= 10000。</span><br><span class=\"line\">说明：“数据规模与约定”中给出了试题中主要参数的范围。</span><br><span class=\"line\"></span><br><span class=\"line\">这个范围对于解题非常重要，不同的数据范围会导致试题需要使用不同的解法来解决。比如本题中给的A、B范围不大，可以使用整型(int)来保存，如果范围更大，超过int的范围，则要考虑其他方法来保存大数。</span><br><span class=\"line\"></span><br><span class=\"line\">有一些范围在方便的时候是在“问题描述”中直接给的，所以在做题时不仅要看这个范围，还要注意问题描述。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>略</p>\n<h3 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><p><strong>本题的C++源代码如下：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; a + b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>本题的C源代码如下：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, a+b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>本题的Java源代码如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        Integer a = sc.nextInt();</span><br><span class=\"line\">        Integer b = sc.nextInt();</span><br><span class=\"line\">        System.out.println(a + b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BEGIN-2\"><a href=\"#BEGIN-2\" class=\"headerlink\" title=\"BEGIN 2:\"></a>BEGIN 2:</h2><p><a href=\"http://lx.lanqiao.cn/problem.page?gpid=T2\" target=\"_blank\" rel=\"noopener\"> 序列求和</a></p>\n<h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求1+2+3+...+n的值。</span><br><span class=\"line\">输入包括一个整数n。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">样例输入</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">样例输出</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题分析-1\"><a href=\"#问题分析-1\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>略</p>\n<h3 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; a + b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BEGIN-2-1\"><a href=\"#BEGIN-2-1\" class=\"headerlink\" title=\"BEGIN 2:\"></a>BEGIN 2:</h2><p><a href=\"http://lx.lanqiao.cn/problem.page?gpid=T2\" target=\"_blank\" rel=\"noopener\">序列求和</a></p>\n<h3 id=\"问题描述-2\"><a href=\"#问题描述-2\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求1+2+3+...+n的值。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入包括一个整数n。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出一行，包括一个整数，表示1+2+3+...+n的值。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5050</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= n &lt;= 1,000,000,000</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题分析-2\"><a href=\"#问题分析-2\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>数据范围比较大如果累加会超时如下代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (n) ans += n --;</span><br></pre></td></tr></table></figure>\n\n<p>所以应该使用求和公式</p>\n<h3 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\">type <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tll n;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\"> \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\"</span>, (<span class=\"number\">1</span> + n) * n / <span class=\"number\">2</span>);</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BEGIN-3\"><a href=\"#BEGIN-3\" class=\"headerlink\" title=\"BEGIN 3:\"></a>BEGIN 3:</h2><p><a href=\"http://lx.lanqiao.cn/problem.page?gpid=T3\" target=\"_blank\" rel=\"noopener\">圆的面积</a></p>\n<h3 id=\"问题描述-3\"><a href=\"#问题描述-3\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定圆的半径r，求圆的面积。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入包含一个整数r，表示圆的半径。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。</span><br><span class=\"line\"></span><br><span class=\"line\">说明：在本题中，输入是一个整数，但是输出是一个实数。</span><br><span class=\"line\">对于实数输出的问题，请一定看清楚实数输出的要求，比如本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误。</span><br><span class=\"line\">实数输出的问题如果没有特别说明，舍入都是按四舍五入进行。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">50.2654825</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= r &lt;= 100000</span><br><span class=\"line\">本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI=3.14159265358979323，也可以使用数学公式来求π，比如PI=atan(1.0)*4。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题分析-3\"><a href=\"#问题分析-3\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>使用浮点数计算</p>\n<h3 id=\"AC代码-3\"><a href=\"#AC代码-3\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> PI=<span class=\"number\">3.14159265358979323</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> r;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span> (<span class=\"string\">\"%d\"</span>, &amp;r);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span> (<span class=\"string\">\"%.7lf\"</span>, PI * r * r);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BEGIN-4\"><a href=\"#BEGIN-4\" class=\"headerlink\" title=\"BEGIN 4:\"></a>BEGIN 4:</h2><p><a href=\"http://lx.lanqiao.cn/problem.page?gpid=T4\" target=\"_blank\" rel=\"noopener\">Fibonacci数列</a></p>\n<h3 id=\"问题描述-4\"><a href=\"#问题描述-4\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。</span><br><span class=\"line\">当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入包含一个整数n。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出一行，包含一个整数，表示Fn除以10007的余数。</span><br><span class=\"line\">说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">55</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">22</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7704</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= n &lt;= 1,000,000</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题分析-4\"><a href=\"#问题分析-4\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>略</p>\n<h3 id=\"AC代码-4\"><a href=\"#AC代码-4\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> MOD = <span class=\"number\">10007</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; n)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">2</span>)&#123;  \t\t\t\t<span class=\"comment\">// n &lt;= 2时都是1</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (-- n)&#123;</span><br><span class=\"line\">\t\t\tswap(a, b);</span><br><span class=\"line\">\t\t\tb = (a + b) % MOD;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"蓝桥杯试题集_基础练习","date":"2019-02-20T08:22:50.000Z","description":"基础。","_content":"\n[蓝桥杯基础练习](http://lx.lanqiao.cn/problemset.page?code=BASIC-)\n\n## BASIC 1 [闰年判断 ](http://lx.lanqiao.cn/problem.page?gpid=T5)\n\n**问题描述**\n```\n给定一个年份，判断这一年是不是闰年。\n当以下情况之一满足时，这一年是闰年：\n1. 年份是4的倍数而不是100的倍数；\n2. 年份是400的倍数。\n其他的年份都不是闰年。\n```\n**输入格式**\n```\n输入包含一个整数y，表示当前的年份。\n```\n**输出格式**\n```\n输出一行，如果给定的年份是闰年，则输出yes，否则输出no。\n说明：当试题指定你输出一个字符串作为结果（比如本题的yes或者no，你需要严格按照试题中给定的大小写，写错大小写将不得分。\n```\n**样例输入**\n```\n2013\n```\n**样例输出**\n```\nno\n```\n**样例输入**\n```\n2016\n```\n**样例输出**\n```\nyes\n```\n**数据规模与约定**\n```\n1990 <= y <= 2050\n```\n\n**问题分析**\n略\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint y;\n\tcin >> y;\n\tif( y % 4 == 0 && ( y % 400 == 0 || y % 100 != 0) )\n\t\tputs(\"yes\");\n\telse puts(\"no\");\n\treturn 0;\n}\n```\n\n## BASIC 2 [01字串](http://lx.lanqiao.cn/problem.page?gpid=T6)\n\n**问题描述**\n```\n对于长度为5位的一个01串，每一位都可能是0或1，一共有32种可能。它们的前几个是：\n00000\n00001\n00010\n00011\n00100\n请按从小到大的顺序输出这32种01串。\n```\n\n**输入格式**\n```\n本试题没有输入。\n```\n**输出格式**\n```\n输出32行，按从小到大的顺序每行一个长度为5的01串。\n```\n**样例输出**\n```markdown\n00000\n00001\n00010\n00011\n<以下部分省略>\n```\n\n**问题分析**\n1. 可以循环嵌套实现\n2. 可以模拟二进制直接从低位到高位逢2进位\n3. 也可以直接使用STL的容器bitset\n\n### AC代码\n```C++\n// 循环嵌套\n# include <bits/stdc++.h>\nusing namespace std;\nint main(){\n\tfor(int i1 = 0; i1 < 2; i1 ++)\n\t\tfor(int i2 = 0; i2 < 2; i2 ++)\n\t\t\tfor(int i3 = 0; i3 < 2; i3 ++)\n\t\t\t\tfor(int i4 = 0; i4 < 2; i4 ++)\n\t\t\t\t\tfor(int i5 = 0; i5 < 2; i5 ++)\n\t\t\t\t\t\tcout << i1<< i2 << i3 << i4 << i5 << endl;\n\treturn 0;\n}\n```\n\n```C++\n// 模拟二进制\n# include <bits/stdc++.h>\nusing namespace std;\nint main(){\n\tstring a = \"00000\";\n\tfor(int i = 0; i < 32 ; i ++){\n\t\tcout << a << endl;\n\t\ta[4] += 1;\n\t\tfor(int j = 4 ; j >= 0 ; j --)\n\t\t\tif(a[j] == '2'){\n\t\t\t\ta[j - 1] += 1;\n\t\t\t\ta[j] = '0';\n\t\t\t}\n\t}\n\treturn 0;\n}\n```\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tfor (int i = 0; i < 32; i ++){\n\t\tbitset<5> b(i);   // 头文件 <bitset>\n\t\tcout << b << endl;\n\t} \n\treturn 0;\n}\n\n// bitset 容器每个位置存储值只能为0和1\n// 用在这里正好合适\n```\n[bitset文档](http://www.cplusplus.com/reference/bitset/bitset/)\n\n\n## BASIC 3 [字母图形](http://lx.lanqiao.cn/problem.page?gpid=T7)\n\n**问题描述**\n```\n利用字母可以组成一些美丽的图形，下面给出了一个例子：\nABCDEFG\nBABCDEF\nCBABCDE\nDCBABCD\nEDCBABC\n这是一个5行7列的图形，请找出这个图形的规律，并输出一个n行m列的图形。\n```\n**输入格式**\n```\n输入一行，包含两个整数n和m，分别表示你要输出的图形的行数的列数。\n```\n**输出格式**\n```\n输出n行，每个m个字符，为你的图形。\n```\n**样例输入**\n```\n5 7\n```\n**样例输出**\n```markdown\nABCDEFG\nBABCDEF\nCBABCDE\nDCBABCD\nEDCBABC\n```\n**数据规模与约定**\n```\n1 <= n, m <= 26\n```\n\n**问题分析**\n可以直接两层循环直接输出ASCII码\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint n, m;\n\tcin >> n >> m;\n\tfor (int i = 0; i < n; i ++){\n\t\tfor (int j = 0; j < m; j ++)\n\t\t\tputchar( abs(j - i) + 65 );  \n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n```\n\n## BASIC 4 [数列特征](http://lx.lanqiao.cn/problem.page?gpid=T8)\n\n**问题描述**\n```\n给出n个数，找出这n个数的最大值，最小值，和。\n```\n**输入格式**\n```\n第一行为整数n，表示数的个数\n第二行有n个数，为给定的n个数，每个数的绝对值都小于10000。\n```\n**输出格式**\n```\n输出三行，每行一个整数。第一行表示这些数中的最大值，第二行表示这些数中的最小值，第三行表示这些数的和。\n```\n**样例输入**\n```\n5\n1  3  -2  4  5\n```\n**样例输出**\n```markdown\n5\n-2\n11\n```\n**数据规模与约定**\n```\n1 <= n <= 10000\n```\n\n**问题分析**\n在读入的过程中判断是否是最小和最大值，并加进总和中\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint n, x, Min = 10000, Max = -10000, sum = 0;\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i ++){\n\t\tscanf(\"%d\", &x);\n\t\tMin = min(Min, x);\n\t\tMax = max(Max, x);\n\t\tsum += x;\n\t}\n\tprintf(\"%d\\n%d\\n%d\\n\", Max, Min, sum);\n\treturn 0;\n}\n```\n\n## BASIC 5 [查找整数](http://lx.lanqiao.cn/problem.page?gpid=T9)\n\n**问题描述**\n```markdown\n给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。\n```\n**输入格式**\n```markdown\n第一行包含一个整数n。\n第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。\n第三行包含一个整数a，为待查找的数。\n```\n**输出格式**\n```markdown\n如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。\n```\n**样例输入**\n```markdown\n6\n1 9 4 8 3 9\n9\n```\n**样例输出**\n```markdown\n2\n```\n**数据规模与约定**\n```markdown\n1 <= n <= 1000\n```\n\n**问题分析**\n读取数组, 然后使用find函数\t\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint n, x;\n\tint a[1001];\n\tscanf (\"%d\", &n);\n\tfor (int i = 0; i < n; i ++)\n\t\tscanf(\"%d\", a + i);\n\tscanf (\"%d\", &x);\n\tint ans = find(a, a + n, x) - a;\n\tif( ans != n ) cout << ans + 1;\n\telse puts(\"-1\");\n\treturn 0;\n}\n```\n　　\n给出n，输出它的前n行。\n\n## BASIC 6 [杨辉三角形](http://lx.lanqiao.cn/problem.page?gpid=T10)\n\n**问题描述**\n```markdown\n杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。\n它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。\n下面给出了杨辉三角形的前4行：　\n   1\n  1 1\n 1 2 1　　\n1 3 3 1\n```\n**输入格式**\n```markdown\n输入包含一个数n。\n```\n**输出格式**\n```markdown\n输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。\n```\n**样例输入**\n```markdown\n4\n```\n**样例输出**\n```markdown\n1\n1 1\n1 2 1\n1 3 3 1\n```\n**数据规模与约定**\n```markdown\n1 <= n <= 34\n```\n\n**问题分析**\n略\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint n;\n\tcin >> n;\n\tint a[35];\n\tmemset(a, 0, sizeof(a));\n\ta[0] = 1;\n\tfor (int i = 1; i <= n; i ++){\n\t\tfor (int j = 0; j < i; j ++)\n\t\t\tprintf (\"%d \", a[j]);\n\t\tint temp = 1;\n\t\tfor (int j = 1; j <= i + 1; j ++){\n\t\t\ttemp = a[j] + temp;\n\t\t\tswap(temp, a[j]);\n\t\t}\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n```\n\n\n## BASIC 7 [特殊的数字](http://lx.lanqiao.cn/problem.page?gpid=T46)\n**问题描述**\n```markdown\n153是一个非常特殊的数，它等于它的每位数字的立方和，即153=1*1*1+5*5*5+3*3*3。编程求所有满足这种条件的三位十进制数。\n```\n**输出格式**\n```markdown\n按从小到大的顺序输出满足条件的三位十进制数，每个数占一行。\n```\n**问题分析**\n循环跑一遍，公式都给了，范围是三位数\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h> \nusing namespace std;\n\nint main(){\n\tint i,a,b,c; \n\tfor(i = 100; i < 1000; i ++){\n\t\ta = i  /100;\t// 百位\t\n\t\tb = ( i % 100 ) / 10;\t// 十位 \n\t\tc = i % 10;\t\t// 个位 \n\t\tif(i == a * a * a + b * b * b + c * c * c)\n\t\t\tcout << i << endl; \n\t} \n\treturn 0;\n}\n```\n## BASIC 8 [回文数](http://lx.lanqiao.cn/problem.page?gpid=T47)\n**问题描述**\n```markdown\n1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。\n```\n**输出格式**\n```markdown\n按从小到大的顺序输出满足条件的四位十进制数。\n```\n**问题分析**\n直接循环找到千位和个位相等，百位和十位相等。\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tfor (int i = 1001; i < 10000; i ++){\n\t\tif( i % 10 == i / 1000 && i % 100 / 10 == i / 100 % 10)\n\t\t\tcout << i << endl;\n\t}\t\n\treturn 0;\n}\n```\n\n## BASIC 9 [特殊回文数](http://lx.lanqiao.cn/problem.page?gpid=T48)\n**问题描述**\n```markdown\n123321是一个非常特殊的数，它从左边读和从右边读是一样的。\n输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。\n```\n**输入格式**\n```markdown\n输入一行，包含一个正整数n。\n```\n**输出格式**\n```markdown\n按从小到大的顺序输出满足条件的整数，每个整数占一行。\n```\n**样例输入**\n```markdown\n52\n```\n**样例输出**\n```markdown\n899998\n989989\n998899\n```\n**数据规模与约定**\n```markdown\n1 <= n <= 54\n```\n**问题分析**\n六位数是回文数，且六个数总和是n。\n取高三位，总和为n / 2。因此如果为奇数则一定没有解。\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint n;\n\tcin >> n;\n\tif( n % 2 != 0 )\n\t\tfor (int i = 1; i < 10; i ++)\n\t\t\tfor (int j = 0; j < 10; j ++)\n\t\t\t\tfor (int k = 0; k < 10; k ++)\n\t\t\t\t\tif( i + j + k == n / 2)\n\t\t\t\t\t\tcout << i << j << k << k << j << i << endl;\n\treturn 0;\n}\n```\n\n## BASIC 10 [十进制转十六进制](http://lx.lanqiao.cn/problem.page?gpid=T49)\n**问题描述**\n```markdown\n十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。\n十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。\n给出一个非负整数，将它表示成十六进制的形式。\n```\n**输入格式**\n```markdown\n输入包含一个非负整数a，表示要转换的数。0<=a<=2147483647\n```\n**输出格式**\n```markdown\n输出这个整数的16进制表示\n```\n**样例输入**\n```markdown\n30\n```\n**样例输出**\n```markdown\n1E\n```\n**问题分析**\n这类问题模仿十进制转二进制的过程即可，使用了STL的string\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nstring Turn(int n, int d){\n\tstring ans;\n\tif( !n ) puts(\"0\");\n\twhile ( n ){\n\t\tint x = n % d;\n\t\tif( x < 10 ) ans += x + 48;\n\t\telse ans += 55 + x;\n\t\tn /= d;\n\t}\n\treverse(ans.begin(), ans.end());\n\treturn ans;\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tcout << Turn(n, 16);\n\treturn 0;\n}\n```\n\n## BASIC 11 [十六进制转十进制](http://lx.lanqiao.cn/problem.page?gpid=T50)\n**问题描述**\n```markdown\n从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。\n注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。\n```\n**样例输入**\n```markdown\nFFFF\n```\n**样例输出**\n```markdown\n65535\n```\n**问题分析**\n(FFFF)<sub>H</sub> => (65535)<sub>D</sub>\n也就是 F * 16 <sup>0</sup> + F * 16 <sup>1</sup> + F * 16 <sup>2</sup> + F * 16 <sup>3</sup> = 65535.\n这里F代表的是数字15\n需要注意的是不能用int，FFFFFFFF会爆int。\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\nunsigned int Pow(int d, int p){\n\tunsigned int mul = 1;\n\twhile ( -- p ) mul *= d;\n\treturn mul;\n}\n\nunsigned int Turn(string str, int d){\n\tunsigned int sum = 0;\n\tfor (int i = str.size() - 1; i >= 0; i --)\n\t\tif( str[i] < 57 )\n\t\t\tsum += (str[i] - 48) * Pow(d, str.size() - i);\n\t\telse\n\t\t\tsum += (str[i] - 55) * Pow(d, str.size() - i);\n\treturn sum;\n}\n\nint main(){\n\tstring str;\n\tcin >> str;\n\tcout << Turn(str, 16);\n\treturn 0;\n}\n```\n\n\n## BASIC 12 [十六进制转八进制](http://lx.lanqiao.cn/problem.page?gpid=T51)\n**问题描述**\n```markdown\n给定n个十六进制正整数，输出它们对应的八进制数。\n```\n**输入格式**\n```\n输入的第一行为一个正整数n （1<=n<=10）。\n接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。\n```\n**输出格式**\n```\n输出n行，每行为输入对应的八进制正整数。\n【注意】\n输入的十六进制数不会有前导0，比如012A。\n输出的八进制数也不能有前导0。\n```\n**样例输入**\n```markdown\n2\n39\n123ABC\n```\n**样例输出**\n```markdown\n71\n4435274\n```\n**提示**\n先将十六进制数转换成某进制数，再由某进制数转换成八进制。\n\n**问题分析**\n很多人第一眼看到这题，十六进制转十进制再转八进制即可，思路同上两题。但这题要注意到的是数据范围，每个十六进制数长度不超过100000。\n我的做法是转成二进制，而不是十进制。\n这个对上题的代码需要进行改动。\n但to_string函数编译不通过手写一个To_string。\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nstring hexTurnbin(string str){\n\tstring bin;\n\tfor (int i = 0; i < str.size(); i ++){\n\t\tint hex = str[i] < 65 ? str[i] - 48 : str[i] - 55;\n\t\tstring t;\n\t\twhile( hex ){\n\t\t\tt += hex % 2 + 48;\n\t\t\thex /= 2;\n\t\t}\n\t\treverse(t.begin(), t.end());\n\t\tfor (int i = t.size(); i < 4; i ++) bin += '0';  // 二进制补前置0\n\t\tbin += t;\n\t}\n\treturn bin;\n}\n\nstring To_string(int n){\n\tstring str;\n\tif( n )\n\t\twhile( n ){\n\t\t\tstr += (n % 10 + 48);\n\t\t\tn /= 10;\n\t\t}\n\telse str = \"0\";\n\treverse(str.begin(), str.end());\n\treturn str;\n}\n\nstring binTurnoct(string str){\n\tstring oct;\n\tint M = 1, mul = 0;\n\tfor (int i = str.size() - 1; i >= 0; i --){\n\t\tmul += M * (str[i] - 48);\n\t\tM *= 2;\n\t\tif( M == 8 ){\n\t\t\tM = 1;\n\t\t\toct += To_string(mul);  // to_string 用于int 转成 string\n\t\t\tmul = 0;\n\t\t}\n\t}\n\tif( mul ) oct += To_string(mul);\n\treverse(oct.begin(), oct.end());\n\treturn oct;\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\twhile ( n -- ){\n\t\tstring str;\n\t\tcin >> str;\n\t\tstr = hexTurnbin(str);\n\t\tstr = binTurnoct(str);\n\t\tint i = 0;\n\t\tfor (; i < str.size(); i ++) if( str[i] != 48 ) break;\n\t\tfor (; i < str.size(); i ++) putchar(str[i]);\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```\n\n## BASIC 13 [数列排序](http://lx.lanqiao.cn/problem.page?gpid=T52)\n**问题描述**\n```markdown\n给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1<=n<=200\n```\n**输入格式**\n```markdown\n第一行为一个整数n。\n第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。\n```\n**输出格式**\n```markdown\n输出一行，按从小到大的顺序输出排序后的数列。\n```\n**样例输入**\n```markdown\n5\n8 3 6 4 9\n```\n**样例输出**\n```markdown\n3 4 6 8 9\n```\n**问题分析**\n直接使用algorithm里面的sort函数即可(有兴趣可以自己了解sort实现的方法)\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint a[201];\nint main(){\n\tint n;\n\tcin >> n;\n\tfor(int i = 0; i < n; i ++)\n\t\tscanf(\"%d\", &a[i]);\n\tsort(a, a + n);\n\tfor(int i = 0; i < n; i ++)\n\t\tprintf(\"%d \", a[i]);\n\treturn 0;\n}\n```\n\n\n## BASIC 14 [时间转换](http://lx.lanqiao.cn/problem.page?gpid=T54)\n**问题描述**\n```markdown\n给定一个以秒为单位的时间t，要求用“<H>:<M>:<S>”的格式来表示这个时间。<H>表示时间，<M>表示分钟，而<S>表示秒，它们都是整数且没有前导的“0”。例如，若t=0，则应输出是“0:0:0”；若t=3661，则输出“1:1:1”。\n```\n**输入格式**\n```markdown\n输入只有一行，是一个整数t（0<=t<=86399）。\n```\n**输出格式**\n```markdown\n输出只有一行，是以“<H>:<M>:<S>”的格式所表示的时间，不包括引号。\n```\n**样例输入**\n```markdown\n0\n```\n**样例输出**\n```markdown\n0:0:0\n```\n**样例输入**\n```markdown\n5436\n```\n**样例输出**\n```markdown\n1:30:36\n```\n**问题分析**\n略\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint t;\n\tcin >> t;\n\tprintf(\"%d:%d:%d\", t / 3600 , (t / 60 % 60), t % 60);\n\treturn 0;\n}\n```\n\n## BASIC 15 [字符串对比](http://lx.lanqiao.cn/problem.page?gpid=T56)\n**问题描述**\n```markdown\n　　给定两个仅由大写字母或小写字母组成的字符串(长度介于1到10之间)，它们之间的关系是以下4中情况之一：\n　　1：两个字符串长度不等。比如 Beijing 和 Hebei\n　　2：两个字符串不仅长度相等，而且相应位置上的字符完全一致(区分大小写)，比如 Beijing 和 Beijing\n　　3：两个字符串长度相等，相应位置上的字符仅在不区分大小写的前提下才能达到完全一致（也就是说，它并不满足情况2）。比如 beijing 和 BEIjing\n　　4：两个字符串长度相等，但是即使是不区分大小写也不能使这两个字符串一致。比如 Beijing 和 Nanjing\n　　编程判断输入的两个字符串之间的关系属于这四类中的哪一类，给出所属的类的编号。\n```\n**输入格式**\n```markdown\n包括两行，每行都是一个字符串\n```\n**输出格式**\n```markdown\n仅有一个数字，表明这两个字符串的关系编号\n```\n**样例输入**\n```markdown\nBEIjing\nbeiJing \n```\n**样例输出**\n```markdown\n3\n```\n**问题分析**\n使用transform 函数使string 整个转大写或小写。\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tstring str1, str2;\n\tcin >> str1 >> str2;\n\tif ( str1.size() != str2.size() ) cout << \"1\";\n\telse if ( str1 == str2 ) cout << \"2\";\n\telse{\n\t\ttransform(str1.begin(), str1.end(), str1.begin(), ::toupper);\n\t\ttransform(str2.begin(), str2.end(), str2.begin(), ::toupper);\n\t\tif( str1 == str2 ) cout << \"3\";\n\t\telse cout << \"4\";\n\t}\n\treturn 0;\n}\n```\n\n## BASIC 16 [分解质因数 ](http://lx.lanqiao.cn/problem.page?gpid=T57)\n**问题描述**\n```markdown\n求出区间[a,b]中所有整数的质因数分解。\n```\n**输入格式**\n```markdown\n输入两个整数a，b。\n```\n**输出格式**\n```markdown\n每行输出一个数的分解，形如k=a1*a2*a3...(a1<=a2<=a3...，k也是从小到大的)(具体可看样例)\n```\n**样例输入**\n```markdown\n3 10\n```\n**样例输出**\n```markdown\n3=3\n4=2*2\n5=5\n6=2*3\n7=7\n8=2*2*2\n9=3*3\n10=2*5\n```\n**提示**\n先筛出所有素数，然后再分解。\n\n**数据规模与约定**\n```markdown\n1 <= n <= 1,000,000\n```\n**问题分析**\n打出素数表，然后按素数表顺序用 2 3 5 7 9，依次选择。\n若可以整除，则除以这个素数。\n\n例如 18 = 2， 3， 3。\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint a, b, k = 0;\nint p[10001];\nint P[5000];\nvoid init(){\n\tmemset(p, 0, sizeof(p));\n\tp[0] = p[1] = 1;\n\tfor (int i = 2; i <= b; i ++)\n\t\tif( !p[i] ){\n\t\t\tP[k ++] = i;\n\t\t\tfor (int j = 2; i * j <= b; j ++)\n\t\t\t\tp[i * j] = 1;\n\t\t}\t\n}\n\nint main(){\n\tcin >> a >> b;\n\tinit();\n\tfor(int i = a; i <= b; i ++){\n\t\tint j = i, h = 0;\n\t\tprintf(\"%d=\", i);\n\t\tif( !p[i] )\t{\n\t\t\tprintf(\"%d\\n\", i);\n\t\t\tcontinue;\n\t\t}\n\t\twhile ( j > 1 ){\n\t\t\twhile ( j % P[h] == 0 ){\n\t\t\t\tif( j == P[h] )\n\t\t\t\t\tcout << P[h];\n\t\t\t\telse\n\t\t\t\t\tcout << P[h] << \"*\";\n\t\t\t\tj /= P[h];\n\t\t\t}\n\t\t\th ++;\n\t\t}\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```\n## BEGIN 17:\n[矩阵乘法](http://lx.lanqiao.cn/problem.page?58)\n### 问题描述\n```\n给定一个N阶矩阵A，输出A的M次幂（M是非负整数）\n例如：\n　　A =\n　　1 2\n　　3 4\n　　A的2次幂\n　　7 10\n　　15 22\n```\n**输入格式**\n```\n第一行是一个正整数N、M（1<=N<=30, 0<=M<=5），表示矩阵A的阶数和要求的幂数\n接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值\n```\n**输出格式**\n```\n输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开\n```\n**样例输入**\n```\n2 2\n1 2\n3 4\n```\n**样例输出**\n```\n7 10\n15 22\n```\n\n**问题分析**\n直接对矩阵进行乘法运算，但要注意一点的是，数组开int类型会爆。\n也可以学习矩阵快速幂。\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\nint n;\ntypedef struct matnode{\n\tll a[31][31];\n\tvoid reset (){\n\t\tfor (int i = 0; i < n; i ++)\n\t\t\ta[i][i] = 1;\n\t}\n\tvoid print(){\n\t\tfor (int i = 0; i < n; i ++){\n\t\t\tfor (int j = 0; j < n; j ++)\n\t\t\t\tprintf(\"%lld \", a[i][j]);\n\t\t\tputchar('\\n');\n\t\t}\n\t}\n}mat;\n\nmat operator * ( mat a, mat b ){  // 重载乘法\n\tmat ans;\n\tfor (int i = 0; i < n; i ++)\n\t\tfor (int j = 0; j < n; j ++){\n\t\t\tans.a[i][j] = 0;\n\t\t\tfor (int k = 0; k < n; k ++)\n\t\t\t\tans.a[i][j] += a.a[i][k] * b.a[k][j];\n\t}\n\treturn ans;\n}\n\nmat qpow( mat a, int m ){   //快速幂\n\tmat ans;\n\tans.reset();\n\twhile ( m ){\n\t\tif( m & 1 )\n\t\t\tans = ans * a;\n\t\ta = a * a;\n\t\tm /= 2;\n\t}\n\treturn ans;\n}\n\nint main(){\n\tint  m;\n\tcin >> n >> m;\n\tmat a;\n\tfor (int i = 0; i < n; i ++)\n\t\tfor (int j = 0; j < n; j ++)\n\t\t\tscanf (\"%lld\", &a.a[i][j]);\n\ta = qpow( a, m );\n\ta.print();\n\t\n\treturn 0;\n}\n\n```\n\n\n\n\n","source":"_posts/蓝桥杯试题集-基础练习.md","raw":"---\ntitle: 蓝桥杯试题集_基础练习\ndate: 2019-02-20 16:22:50\ntags: 蓝桥杯\ncategories: C/C++\ndescription: 基础。\n---\n\n[蓝桥杯基础练习](http://lx.lanqiao.cn/problemset.page?code=BASIC-)\n\n## BASIC 1 [闰年判断 ](http://lx.lanqiao.cn/problem.page?gpid=T5)\n\n**问题描述**\n```\n给定一个年份，判断这一年是不是闰年。\n当以下情况之一满足时，这一年是闰年：\n1. 年份是4的倍数而不是100的倍数；\n2. 年份是400的倍数。\n其他的年份都不是闰年。\n```\n**输入格式**\n```\n输入包含一个整数y，表示当前的年份。\n```\n**输出格式**\n```\n输出一行，如果给定的年份是闰年，则输出yes，否则输出no。\n说明：当试题指定你输出一个字符串作为结果（比如本题的yes或者no，你需要严格按照试题中给定的大小写，写错大小写将不得分。\n```\n**样例输入**\n```\n2013\n```\n**样例输出**\n```\nno\n```\n**样例输入**\n```\n2016\n```\n**样例输出**\n```\nyes\n```\n**数据规模与约定**\n```\n1990 <= y <= 2050\n```\n\n**问题分析**\n略\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint y;\n\tcin >> y;\n\tif( y % 4 == 0 && ( y % 400 == 0 || y % 100 != 0) )\n\t\tputs(\"yes\");\n\telse puts(\"no\");\n\treturn 0;\n}\n```\n\n## BASIC 2 [01字串](http://lx.lanqiao.cn/problem.page?gpid=T6)\n\n**问题描述**\n```\n对于长度为5位的一个01串，每一位都可能是0或1，一共有32种可能。它们的前几个是：\n00000\n00001\n00010\n00011\n00100\n请按从小到大的顺序输出这32种01串。\n```\n\n**输入格式**\n```\n本试题没有输入。\n```\n**输出格式**\n```\n输出32行，按从小到大的顺序每行一个长度为5的01串。\n```\n**样例输出**\n```markdown\n00000\n00001\n00010\n00011\n<以下部分省略>\n```\n\n**问题分析**\n1. 可以循环嵌套实现\n2. 可以模拟二进制直接从低位到高位逢2进位\n3. 也可以直接使用STL的容器bitset\n\n### AC代码\n```C++\n// 循环嵌套\n# include <bits/stdc++.h>\nusing namespace std;\nint main(){\n\tfor(int i1 = 0; i1 < 2; i1 ++)\n\t\tfor(int i2 = 0; i2 < 2; i2 ++)\n\t\t\tfor(int i3 = 0; i3 < 2; i3 ++)\n\t\t\t\tfor(int i4 = 0; i4 < 2; i4 ++)\n\t\t\t\t\tfor(int i5 = 0; i5 < 2; i5 ++)\n\t\t\t\t\t\tcout << i1<< i2 << i3 << i4 << i5 << endl;\n\treturn 0;\n}\n```\n\n```C++\n// 模拟二进制\n# include <bits/stdc++.h>\nusing namespace std;\nint main(){\n\tstring a = \"00000\";\n\tfor(int i = 0; i < 32 ; i ++){\n\t\tcout << a << endl;\n\t\ta[4] += 1;\n\t\tfor(int j = 4 ; j >= 0 ; j --)\n\t\t\tif(a[j] == '2'){\n\t\t\t\ta[j - 1] += 1;\n\t\t\t\ta[j] = '0';\n\t\t\t}\n\t}\n\treturn 0;\n}\n```\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tfor (int i = 0; i < 32; i ++){\n\t\tbitset<5> b(i);   // 头文件 <bitset>\n\t\tcout << b << endl;\n\t} \n\treturn 0;\n}\n\n// bitset 容器每个位置存储值只能为0和1\n// 用在这里正好合适\n```\n[bitset文档](http://www.cplusplus.com/reference/bitset/bitset/)\n\n\n## BASIC 3 [字母图形](http://lx.lanqiao.cn/problem.page?gpid=T7)\n\n**问题描述**\n```\n利用字母可以组成一些美丽的图形，下面给出了一个例子：\nABCDEFG\nBABCDEF\nCBABCDE\nDCBABCD\nEDCBABC\n这是一个5行7列的图形，请找出这个图形的规律，并输出一个n行m列的图形。\n```\n**输入格式**\n```\n输入一行，包含两个整数n和m，分别表示你要输出的图形的行数的列数。\n```\n**输出格式**\n```\n输出n行，每个m个字符，为你的图形。\n```\n**样例输入**\n```\n5 7\n```\n**样例输出**\n```markdown\nABCDEFG\nBABCDEF\nCBABCDE\nDCBABCD\nEDCBABC\n```\n**数据规模与约定**\n```\n1 <= n, m <= 26\n```\n\n**问题分析**\n可以直接两层循环直接输出ASCII码\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint n, m;\n\tcin >> n >> m;\n\tfor (int i = 0; i < n; i ++){\n\t\tfor (int j = 0; j < m; j ++)\n\t\t\tputchar( abs(j - i) + 65 );  \n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n```\n\n## BASIC 4 [数列特征](http://lx.lanqiao.cn/problem.page?gpid=T8)\n\n**问题描述**\n```\n给出n个数，找出这n个数的最大值，最小值，和。\n```\n**输入格式**\n```\n第一行为整数n，表示数的个数\n第二行有n个数，为给定的n个数，每个数的绝对值都小于10000。\n```\n**输出格式**\n```\n输出三行，每行一个整数。第一行表示这些数中的最大值，第二行表示这些数中的最小值，第三行表示这些数的和。\n```\n**样例输入**\n```\n5\n1  3  -2  4  5\n```\n**样例输出**\n```markdown\n5\n-2\n11\n```\n**数据规模与约定**\n```\n1 <= n <= 10000\n```\n\n**问题分析**\n在读入的过程中判断是否是最小和最大值，并加进总和中\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint n, x, Min = 10000, Max = -10000, sum = 0;\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i ++){\n\t\tscanf(\"%d\", &x);\n\t\tMin = min(Min, x);\n\t\tMax = max(Max, x);\n\t\tsum += x;\n\t}\n\tprintf(\"%d\\n%d\\n%d\\n\", Max, Min, sum);\n\treturn 0;\n}\n```\n\n## BASIC 5 [查找整数](http://lx.lanqiao.cn/problem.page?gpid=T9)\n\n**问题描述**\n```markdown\n给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。\n```\n**输入格式**\n```markdown\n第一行包含一个整数n。\n第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。\n第三行包含一个整数a，为待查找的数。\n```\n**输出格式**\n```markdown\n如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。\n```\n**样例输入**\n```markdown\n6\n1 9 4 8 3 9\n9\n```\n**样例输出**\n```markdown\n2\n```\n**数据规模与约定**\n```markdown\n1 <= n <= 1000\n```\n\n**问题分析**\n读取数组, 然后使用find函数\t\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint n, x;\n\tint a[1001];\n\tscanf (\"%d\", &n);\n\tfor (int i = 0; i < n; i ++)\n\t\tscanf(\"%d\", a + i);\n\tscanf (\"%d\", &x);\n\tint ans = find(a, a + n, x) - a;\n\tif( ans != n ) cout << ans + 1;\n\telse puts(\"-1\");\n\treturn 0;\n}\n```\n　　\n给出n，输出它的前n行。\n\n## BASIC 6 [杨辉三角形](http://lx.lanqiao.cn/problem.page?gpid=T10)\n\n**问题描述**\n```markdown\n杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。\n它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。\n下面给出了杨辉三角形的前4行：　\n   1\n  1 1\n 1 2 1　　\n1 3 3 1\n```\n**输入格式**\n```markdown\n输入包含一个数n。\n```\n**输出格式**\n```markdown\n输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。\n```\n**样例输入**\n```markdown\n4\n```\n**样例输出**\n```markdown\n1\n1 1\n1 2 1\n1 3 3 1\n```\n**数据规模与约定**\n```markdown\n1 <= n <= 34\n```\n\n**问题分析**\n略\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint n;\n\tcin >> n;\n\tint a[35];\n\tmemset(a, 0, sizeof(a));\n\ta[0] = 1;\n\tfor (int i = 1; i <= n; i ++){\n\t\tfor (int j = 0; j < i; j ++)\n\t\t\tprintf (\"%d \", a[j]);\n\t\tint temp = 1;\n\t\tfor (int j = 1; j <= i + 1; j ++){\n\t\t\ttemp = a[j] + temp;\n\t\t\tswap(temp, a[j]);\n\t\t}\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n```\n\n\n## BASIC 7 [特殊的数字](http://lx.lanqiao.cn/problem.page?gpid=T46)\n**问题描述**\n```markdown\n153是一个非常特殊的数，它等于它的每位数字的立方和，即153=1*1*1+5*5*5+3*3*3。编程求所有满足这种条件的三位十进制数。\n```\n**输出格式**\n```markdown\n按从小到大的顺序输出满足条件的三位十进制数，每个数占一行。\n```\n**问题分析**\n循环跑一遍，公式都给了，范围是三位数\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h> \nusing namespace std;\n\nint main(){\n\tint i,a,b,c; \n\tfor(i = 100; i < 1000; i ++){\n\t\ta = i  /100;\t// 百位\t\n\t\tb = ( i % 100 ) / 10;\t// 十位 \n\t\tc = i % 10;\t\t// 个位 \n\t\tif(i == a * a * a + b * b * b + c * c * c)\n\t\t\tcout << i << endl; \n\t} \n\treturn 0;\n}\n```\n## BASIC 8 [回文数](http://lx.lanqiao.cn/problem.page?gpid=T47)\n**问题描述**\n```markdown\n1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。\n```\n**输出格式**\n```markdown\n按从小到大的顺序输出满足条件的四位十进制数。\n```\n**问题分析**\n直接循环找到千位和个位相等，百位和十位相等。\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tfor (int i = 1001; i < 10000; i ++){\n\t\tif( i % 10 == i / 1000 && i % 100 / 10 == i / 100 % 10)\n\t\t\tcout << i << endl;\n\t}\t\n\treturn 0;\n}\n```\n\n## BASIC 9 [特殊回文数](http://lx.lanqiao.cn/problem.page?gpid=T48)\n**问题描述**\n```markdown\n123321是一个非常特殊的数，它从左边读和从右边读是一样的。\n输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。\n```\n**输入格式**\n```markdown\n输入一行，包含一个正整数n。\n```\n**输出格式**\n```markdown\n按从小到大的顺序输出满足条件的整数，每个整数占一行。\n```\n**样例输入**\n```markdown\n52\n```\n**样例输出**\n```markdown\n899998\n989989\n998899\n```\n**数据规模与约定**\n```markdown\n1 <= n <= 54\n```\n**问题分析**\n六位数是回文数，且六个数总和是n。\n取高三位，总和为n / 2。因此如果为奇数则一定没有解。\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint n;\n\tcin >> n;\n\tif( n % 2 != 0 )\n\t\tfor (int i = 1; i < 10; i ++)\n\t\t\tfor (int j = 0; j < 10; j ++)\n\t\t\t\tfor (int k = 0; k < 10; k ++)\n\t\t\t\t\tif( i + j + k == n / 2)\n\t\t\t\t\t\tcout << i << j << k << k << j << i << endl;\n\treturn 0;\n}\n```\n\n## BASIC 10 [十进制转十六进制](http://lx.lanqiao.cn/problem.page?gpid=T49)\n**问题描述**\n```markdown\n十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。\n十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。\n给出一个非负整数，将它表示成十六进制的形式。\n```\n**输入格式**\n```markdown\n输入包含一个非负整数a，表示要转换的数。0<=a<=2147483647\n```\n**输出格式**\n```markdown\n输出这个整数的16进制表示\n```\n**样例输入**\n```markdown\n30\n```\n**样例输出**\n```markdown\n1E\n```\n**问题分析**\n这类问题模仿十进制转二进制的过程即可，使用了STL的string\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nstring Turn(int n, int d){\n\tstring ans;\n\tif( !n ) puts(\"0\");\n\twhile ( n ){\n\t\tint x = n % d;\n\t\tif( x < 10 ) ans += x + 48;\n\t\telse ans += 55 + x;\n\t\tn /= d;\n\t}\n\treverse(ans.begin(), ans.end());\n\treturn ans;\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tcout << Turn(n, 16);\n\treturn 0;\n}\n```\n\n## BASIC 11 [十六进制转十进制](http://lx.lanqiao.cn/problem.page?gpid=T50)\n**问题描述**\n```markdown\n从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。\n注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。\n```\n**样例输入**\n```markdown\nFFFF\n```\n**样例输出**\n```markdown\n65535\n```\n**问题分析**\n(FFFF)<sub>H</sub> => (65535)<sub>D</sub>\n也就是 F * 16 <sup>0</sup> + F * 16 <sup>1</sup> + F * 16 <sup>2</sup> + F * 16 <sup>3</sup> = 65535.\n这里F代表的是数字15\n需要注意的是不能用int，FFFFFFFF会爆int。\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\nunsigned int Pow(int d, int p){\n\tunsigned int mul = 1;\n\twhile ( -- p ) mul *= d;\n\treturn mul;\n}\n\nunsigned int Turn(string str, int d){\n\tunsigned int sum = 0;\n\tfor (int i = str.size() - 1; i >= 0; i --)\n\t\tif( str[i] < 57 )\n\t\t\tsum += (str[i] - 48) * Pow(d, str.size() - i);\n\t\telse\n\t\t\tsum += (str[i] - 55) * Pow(d, str.size() - i);\n\treturn sum;\n}\n\nint main(){\n\tstring str;\n\tcin >> str;\n\tcout << Turn(str, 16);\n\treturn 0;\n}\n```\n\n\n## BASIC 12 [十六进制转八进制](http://lx.lanqiao.cn/problem.page?gpid=T51)\n**问题描述**\n```markdown\n给定n个十六进制正整数，输出它们对应的八进制数。\n```\n**输入格式**\n```\n输入的第一行为一个正整数n （1<=n<=10）。\n接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。\n```\n**输出格式**\n```\n输出n行，每行为输入对应的八进制正整数。\n【注意】\n输入的十六进制数不会有前导0，比如012A。\n输出的八进制数也不能有前导0。\n```\n**样例输入**\n```markdown\n2\n39\n123ABC\n```\n**样例输出**\n```markdown\n71\n4435274\n```\n**提示**\n先将十六进制数转换成某进制数，再由某进制数转换成八进制。\n\n**问题分析**\n很多人第一眼看到这题，十六进制转十进制再转八进制即可，思路同上两题。但这题要注意到的是数据范围，每个十六进制数长度不超过100000。\n我的做法是转成二进制，而不是十进制。\n这个对上题的代码需要进行改动。\n但to_string函数编译不通过手写一个To_string。\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nstring hexTurnbin(string str){\n\tstring bin;\n\tfor (int i = 0; i < str.size(); i ++){\n\t\tint hex = str[i] < 65 ? str[i] - 48 : str[i] - 55;\n\t\tstring t;\n\t\twhile( hex ){\n\t\t\tt += hex % 2 + 48;\n\t\t\thex /= 2;\n\t\t}\n\t\treverse(t.begin(), t.end());\n\t\tfor (int i = t.size(); i < 4; i ++) bin += '0';  // 二进制补前置0\n\t\tbin += t;\n\t}\n\treturn bin;\n}\n\nstring To_string(int n){\n\tstring str;\n\tif( n )\n\t\twhile( n ){\n\t\t\tstr += (n % 10 + 48);\n\t\t\tn /= 10;\n\t\t}\n\telse str = \"0\";\n\treverse(str.begin(), str.end());\n\treturn str;\n}\n\nstring binTurnoct(string str){\n\tstring oct;\n\tint M = 1, mul = 0;\n\tfor (int i = str.size() - 1; i >= 0; i --){\n\t\tmul += M * (str[i] - 48);\n\t\tM *= 2;\n\t\tif( M == 8 ){\n\t\t\tM = 1;\n\t\t\toct += To_string(mul);  // to_string 用于int 转成 string\n\t\t\tmul = 0;\n\t\t}\n\t}\n\tif( mul ) oct += To_string(mul);\n\treverse(oct.begin(), oct.end());\n\treturn oct;\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\twhile ( n -- ){\n\t\tstring str;\n\t\tcin >> str;\n\t\tstr = hexTurnbin(str);\n\t\tstr = binTurnoct(str);\n\t\tint i = 0;\n\t\tfor (; i < str.size(); i ++) if( str[i] != 48 ) break;\n\t\tfor (; i < str.size(); i ++) putchar(str[i]);\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```\n\n## BASIC 13 [数列排序](http://lx.lanqiao.cn/problem.page?gpid=T52)\n**问题描述**\n```markdown\n给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1<=n<=200\n```\n**输入格式**\n```markdown\n第一行为一个整数n。\n第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。\n```\n**输出格式**\n```markdown\n输出一行，按从小到大的顺序输出排序后的数列。\n```\n**样例输入**\n```markdown\n5\n8 3 6 4 9\n```\n**样例输出**\n```markdown\n3 4 6 8 9\n```\n**问题分析**\n直接使用algorithm里面的sort函数即可(有兴趣可以自己了解sort实现的方法)\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint a[201];\nint main(){\n\tint n;\n\tcin >> n;\n\tfor(int i = 0; i < n; i ++)\n\t\tscanf(\"%d\", &a[i]);\n\tsort(a, a + n);\n\tfor(int i = 0; i < n; i ++)\n\t\tprintf(\"%d \", a[i]);\n\treturn 0;\n}\n```\n\n\n## BASIC 14 [时间转换](http://lx.lanqiao.cn/problem.page?gpid=T54)\n**问题描述**\n```markdown\n给定一个以秒为单位的时间t，要求用“<H>:<M>:<S>”的格式来表示这个时间。<H>表示时间，<M>表示分钟，而<S>表示秒，它们都是整数且没有前导的“0”。例如，若t=0，则应输出是“0:0:0”；若t=3661，则输出“1:1:1”。\n```\n**输入格式**\n```markdown\n输入只有一行，是一个整数t（0<=t<=86399）。\n```\n**输出格式**\n```markdown\n输出只有一行，是以“<H>:<M>:<S>”的格式所表示的时间，不包括引号。\n```\n**样例输入**\n```markdown\n0\n```\n**样例输出**\n```markdown\n0:0:0\n```\n**样例输入**\n```markdown\n5436\n```\n**样例输出**\n```markdown\n1:30:36\n```\n**问题分析**\n略\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint t;\n\tcin >> t;\n\tprintf(\"%d:%d:%d\", t / 3600 , (t / 60 % 60), t % 60);\n\treturn 0;\n}\n```\n\n## BASIC 15 [字符串对比](http://lx.lanqiao.cn/problem.page?gpid=T56)\n**问题描述**\n```markdown\n　　给定两个仅由大写字母或小写字母组成的字符串(长度介于1到10之间)，它们之间的关系是以下4中情况之一：\n　　1：两个字符串长度不等。比如 Beijing 和 Hebei\n　　2：两个字符串不仅长度相等，而且相应位置上的字符完全一致(区分大小写)，比如 Beijing 和 Beijing\n　　3：两个字符串长度相等，相应位置上的字符仅在不区分大小写的前提下才能达到完全一致（也就是说，它并不满足情况2）。比如 beijing 和 BEIjing\n　　4：两个字符串长度相等，但是即使是不区分大小写也不能使这两个字符串一致。比如 Beijing 和 Nanjing\n　　编程判断输入的两个字符串之间的关系属于这四类中的哪一类，给出所属的类的编号。\n```\n**输入格式**\n```markdown\n包括两行，每行都是一个字符串\n```\n**输出格式**\n```markdown\n仅有一个数字，表明这两个字符串的关系编号\n```\n**样例输入**\n```markdown\nBEIjing\nbeiJing \n```\n**样例输出**\n```markdown\n3\n```\n**问题分析**\n使用transform 函数使string 整个转大写或小写。\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tstring str1, str2;\n\tcin >> str1 >> str2;\n\tif ( str1.size() != str2.size() ) cout << \"1\";\n\telse if ( str1 == str2 ) cout << \"2\";\n\telse{\n\t\ttransform(str1.begin(), str1.end(), str1.begin(), ::toupper);\n\t\ttransform(str2.begin(), str2.end(), str2.begin(), ::toupper);\n\t\tif( str1 == str2 ) cout << \"3\";\n\t\telse cout << \"4\";\n\t}\n\treturn 0;\n}\n```\n\n## BASIC 16 [分解质因数 ](http://lx.lanqiao.cn/problem.page?gpid=T57)\n**问题描述**\n```markdown\n求出区间[a,b]中所有整数的质因数分解。\n```\n**输入格式**\n```markdown\n输入两个整数a，b。\n```\n**输出格式**\n```markdown\n每行输出一个数的分解，形如k=a1*a2*a3...(a1<=a2<=a3...，k也是从小到大的)(具体可看样例)\n```\n**样例输入**\n```markdown\n3 10\n```\n**样例输出**\n```markdown\n3=3\n4=2*2\n5=5\n6=2*3\n7=7\n8=2*2*2\n9=3*3\n10=2*5\n```\n**提示**\n先筛出所有素数，然后再分解。\n\n**数据规模与约定**\n```markdown\n1 <= n <= 1,000,000\n```\n**问题分析**\n打出素数表，然后按素数表顺序用 2 3 5 7 9，依次选择。\n若可以整除，则除以这个素数。\n\n例如 18 = 2， 3， 3。\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\nint a, b, k = 0;\nint p[10001];\nint P[5000];\nvoid init(){\n\tmemset(p, 0, sizeof(p));\n\tp[0] = p[1] = 1;\n\tfor (int i = 2; i <= b; i ++)\n\t\tif( !p[i] ){\n\t\t\tP[k ++] = i;\n\t\t\tfor (int j = 2; i * j <= b; j ++)\n\t\t\t\tp[i * j] = 1;\n\t\t}\t\n}\n\nint main(){\n\tcin >> a >> b;\n\tinit();\n\tfor(int i = a; i <= b; i ++){\n\t\tint j = i, h = 0;\n\t\tprintf(\"%d=\", i);\n\t\tif( !p[i] )\t{\n\t\t\tprintf(\"%d\\n\", i);\n\t\t\tcontinue;\n\t\t}\n\t\twhile ( j > 1 ){\n\t\t\twhile ( j % P[h] == 0 ){\n\t\t\t\tif( j == P[h] )\n\t\t\t\t\tcout << P[h];\n\t\t\t\telse\n\t\t\t\t\tcout << P[h] << \"*\";\n\t\t\t\tj /= P[h];\n\t\t\t}\n\t\t\th ++;\n\t\t}\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```\n## BEGIN 17:\n[矩阵乘法](http://lx.lanqiao.cn/problem.page?58)\n### 问题描述\n```\n给定一个N阶矩阵A，输出A的M次幂（M是非负整数）\n例如：\n　　A =\n　　1 2\n　　3 4\n　　A的2次幂\n　　7 10\n　　15 22\n```\n**输入格式**\n```\n第一行是一个正整数N、M（1<=N<=30, 0<=M<=5），表示矩阵A的阶数和要求的幂数\n接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值\n```\n**输出格式**\n```\n输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开\n```\n**样例输入**\n```\n2 2\n1 2\n3 4\n```\n**样例输出**\n```\n7 10\n15 22\n```\n\n**问题分析**\n直接对矩阵进行乘法运算，但要注意一点的是，数组开int类型会爆。\n也可以学习矩阵快速幂。\n\n### AC代码\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\nint n;\ntypedef struct matnode{\n\tll a[31][31];\n\tvoid reset (){\n\t\tfor (int i = 0; i < n; i ++)\n\t\t\ta[i][i] = 1;\n\t}\n\tvoid print(){\n\t\tfor (int i = 0; i < n; i ++){\n\t\t\tfor (int j = 0; j < n; j ++)\n\t\t\t\tprintf(\"%lld \", a[i][j]);\n\t\t\tputchar('\\n');\n\t\t}\n\t}\n}mat;\n\nmat operator * ( mat a, mat b ){  // 重载乘法\n\tmat ans;\n\tfor (int i = 0; i < n; i ++)\n\t\tfor (int j = 0; j < n; j ++){\n\t\t\tans.a[i][j] = 0;\n\t\t\tfor (int k = 0; k < n; k ++)\n\t\t\t\tans.a[i][j] += a.a[i][k] * b.a[k][j];\n\t}\n\treturn ans;\n}\n\nmat qpow( mat a, int m ){   //快速幂\n\tmat ans;\n\tans.reset();\n\twhile ( m ){\n\t\tif( m & 1 )\n\t\t\tans = ans * a;\n\t\ta = a * a;\n\t\tm /= 2;\n\t}\n\treturn ans;\n}\n\nint main(){\n\tint  m;\n\tcin >> n >> m;\n\tmat a;\n\tfor (int i = 0; i < n; i ++)\n\t\tfor (int j = 0; j < n; j ++)\n\t\t\tscanf (\"%lld\", &a.a[i][j]);\n\ta = qpow( a, m );\n\ta.print();\n\t\n\treturn 0;\n}\n\n```\n\n\n\n\n","slug":"蓝桥杯试题集-基础练习","published":1,"updated":"2020-02-06T22:40:22.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9b5004y24uwk9cw5hlg","content":"<p><a href=\"http://lx.lanqiao.cn/problemset.page?code=BASIC-\" target=\"_blank\" rel=\"noopener\">蓝桥杯基础练习</a></p>\n<h2 id=\"BASIC-1-闰年判断\"><a href=\"#BASIC-1-闰年判断\" class=\"headerlink\" title=\"BASIC 1 闰年判断 \"></a>BASIC 1 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T5\" target=\"_blank\" rel=\"noopener\">闰年判断 </a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个年份，判断这一年是不是闰年。</span><br><span class=\"line\">当以下情况之一满足时，这一年是闰年：</span><br><span class=\"line\">1. 年份是4的倍数而不是100的倍数；</span><br><span class=\"line\">2. 年份是400的倍数。</span><br><span class=\"line\">其他的年份都不是闰年。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入包含一个整数y，表示当前的年份。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出一行，如果给定的年份是闰年，则输出yes，否则输出no。</span><br><span class=\"line\">说明：当试题指定你输出一个字符串作为结果（比如本题的yes或者no，你需要严格按照试题中给定的大小写，写错大小写将不得分。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2013</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">no</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2016</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yes</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1990 &lt;= y &lt;= 2050</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>略</p>\n<h3 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> y;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; y;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( y % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; ( y % <span class=\"number\">400</span> == <span class=\"number\">0</span> || y % <span class=\"number\">100</span> != <span class=\"number\">0</span>) )</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"yes\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"no\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-2-01字串\"><a href=\"#BASIC-2-01字串\" class=\"headerlink\" title=\"BASIC 2 01字串\"></a>BASIC 2 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T6\" target=\"_blank\" rel=\"noopener\">01字串</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于长度为5位的一个01串，每一位都可能是0或1，一共有32种可能。它们的前几个是：</span><br><span class=\"line\">00000</span><br><span class=\"line\">00001</span><br><span class=\"line\">00010</span><br><span class=\"line\">00011</span><br><span class=\"line\">00100</span><br><span class=\"line\">请按从小到大的顺序输出这32种01串。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本试题没有输入。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出32行，按从小到大的顺序每行一个长度为5的01串。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000</span><br><span class=\"line\">00001</span><br><span class=\"line\">00010</span><br><span class=\"line\">00011</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">以下部分省略</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong></p>\n<ol>\n<li>可以循环嵌套实现</li>\n<li>可以模拟二进制直接从低位到高位逢2进位</li>\n<li>也可以直接使用STL的容器bitset</li>\n</ol>\n<h3 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环嵌套</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i1 = <span class=\"number\">0</span>; i1 &lt; <span class=\"number\">2</span>; i1 ++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i2 = <span class=\"number\">0</span>; i2 &lt; <span class=\"number\">2</span>; i2 ++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i3 = <span class=\"number\">0</span>; i3 &lt; <span class=\"number\">2</span>; i3 ++)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i4 = <span class=\"number\">0</span>; i4 &lt; <span class=\"number\">2</span>; i4 ++)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i5 = <span class=\"number\">0</span>; i5 &lt; <span class=\"number\">2</span>; i5 ++)</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; i1&lt;&lt; i2 &lt;&lt; i3 &lt;&lt; i4 &lt;&lt; i5 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟二进制</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> a = <span class=\"string\">\"00000\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span> ; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\ta[<span class=\"number\">4</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">4</span> ; j &gt;= <span class=\"number\">0</span> ; j --)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[j] == <span class=\"string\">'2'</span>)&#123;</span><br><span class=\"line\">\t\t\t\ta[j - <span class=\"number\">1</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\ta[j] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">bitset</span>&lt;5&gt; b(i);   <span class=\"comment\">// 头文件 &lt;bitset&gt;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bitset 容器每个位置存储值只能为0和1</span></span><br><span class=\"line\"><span class=\"comment\">// 用在这里正好合适</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.cplusplus.com/reference/bitset/bitset/\" target=\"_blank\" rel=\"noopener\">bitset文档</a></p>\n<h2 id=\"BASIC-3-字母图形\"><a href=\"#BASIC-3-字母图形\" class=\"headerlink\" title=\"BASIC 3 字母图形\"></a>BASIC 3 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T7\" target=\"_blank\" rel=\"noopener\">字母图形</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">利用字母可以组成一些美丽的图形，下面给出了一个例子：</span><br><span class=\"line\">ABCDEFG</span><br><span class=\"line\">BABCDEF</span><br><span class=\"line\">CBABCDE</span><br><span class=\"line\">DCBABCD</span><br><span class=\"line\">EDCBABC</span><br><span class=\"line\">这是一个5行7列的图形，请找出这个图形的规律，并输出一个n行m列的图形。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入一行，包含两个整数n和m，分别表示你要输出的图形的行数的列数。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出n行，每个m个字符，为你的图形。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 7</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABCDEFG</span><br><span class=\"line\">BABCDEF</span><br><span class=\"line\">CBABCDE</span><br><span class=\"line\">DCBABCD</span><br><span class=\"line\">EDCBABC</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= n, m &lt;= 26</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>可以直接两层循环直接输出ASCII码</p>\n<h3 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j ++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">putchar</span>( <span class=\"built_in\">abs</span>(j - i) + <span class=\"number\">65</span> );  </span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-4-数列特征\"><a href=\"#BASIC-4-数列特征\" class=\"headerlink\" title=\"BASIC 4 数列特征\"></a>BASIC 4 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T8\" target=\"_blank\" rel=\"noopener\">数列特征</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给出n个数，找出这n个数的最大值，最小值，和。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一行为整数n，表示数的个数</span><br><span class=\"line\">第二行有n个数，为给定的n个数，每个数的绝对值都小于10000。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出三行，每行一个整数。第一行表示这些数中的最大值，第二行表示这些数中的最小值，第三行表示这些数的和。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">1  3  -2  4  5</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">-2</span><br><span class=\"line\">11</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= n &lt;= 10000</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>在读入的过程中判断是否是最小和最大值，并加进总和中</p>\n<h3 id=\"AC代码-3\"><a href=\"#AC代码-3\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, x, Min = <span class=\"number\">10000</span>, Max = <span class=\"number\">-10000</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</span><br><span class=\"line\">\t\tMin = min(Min, x);</span><br><span class=\"line\">\t\tMax = max(Max, x);</span><br><span class=\"line\">\t\tsum += x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n%d\\n%d\\n\"</span>, Max, Min, sum);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-5-查找整数\"><a href=\"#BASIC-5-查找整数\" class=\"headerlink\" title=\"BASIC 5 查找整数\"></a>BASIC 5 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T9\" target=\"_blank\" rel=\"noopener\">查找整数</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一行包含一个整数n。</span><br><span class=\"line\">第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。</span><br><span class=\"line\">第三行包含一个整数a，为待查找的数。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\">1 9 4 8 3 9</span><br><span class=\"line\">9</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=</span> <span class=\"attr\">n</span> &lt;= <span class=\"string\">1000</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>读取数组, 然后使用find函数    </p>\n<h3 id=\"AC代码-4\"><a href=\"#AC代码-4\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, x;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">1001</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span> (<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span> (<span class=\"string\">\"%d\"</span>, &amp;x);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans = find(a, a + n, x) - a;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( ans != n ) <span class=\"built_in\">cout</span> &lt;&lt; ans + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　<br>给出n，输出它的前n行。</p>\n<h2 id=\"BASIC-6-杨辉三角形\"><a href=\"#BASIC-6-杨辉三角形\" class=\"headerlink\" title=\"BASIC 6 杨辉三角形\"></a>BASIC 6 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T10\" target=\"_blank\" rel=\"noopener\">杨辉三角形</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。</span><br><span class=\"line\">它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。</span><br><span class=\"line\">下面给出了杨辉三角形的前4行：　</span><br><span class=\"line\">   1</span><br><span class=\"line\">  1 1</span><br><span class=\"line\"> 1 2 1　　</span><br><span class=\"line\">1 3 3 1</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入包含一个数n。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1 1</span><br><span class=\"line\">1 2 1</span><br><span class=\"line\">1 3 3 1</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=</span> <span class=\"attr\">n</span> &lt;= <span class=\"string\">34</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>略</p>\n<h3 id=\"AC代码-5\"><a href=\"#AC代码-5\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">35</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(a));</span><br><span class=\"line\">\ta[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j ++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span> (<span class=\"string\">\"%d \"</span>, a[j]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> temp = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= i + <span class=\"number\">1</span>; j ++)&#123;</span><br><span class=\"line\">\t\t\ttemp = a[j] + temp;</span><br><span class=\"line\">\t\t\tswap(temp, a[j]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-7-特殊的数字\"><a href=\"#BASIC-7-特殊的数字\" class=\"headerlink\" title=\"BASIC 7 特殊的数字\"></a>BASIC 7 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T46\" target=\"_blank\" rel=\"noopener\">特殊的数字</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">153是一个非常特殊的数，它等于它的每位数字的立方和，即153=1<span class=\"emphasis\">*1*</span>1+5<span class=\"emphasis\">*5*</span>5+3<span class=\"emphasis\">*3*</span>3。编程求所有满足这种条件的三位十进制数。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">按从小到大的顺序输出满足条件的三位十进制数，每个数占一行。</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>循环跑一遍，公式都给了，范围是三位数</p>\n<h3 id=\"AC代码-6\"><a href=\"#AC代码-6\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt; </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,a,b,c; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">100</span>; i &lt; <span class=\"number\">1000</span>; i ++)&#123;</span><br><span class=\"line\">\t\ta = i  /<span class=\"number\">100</span>;\t<span class=\"comment\">// 百位\t</span></span><br><span class=\"line\">\t\tb = ( i % <span class=\"number\">100</span> ) / <span class=\"number\">10</span>;\t<span class=\"comment\">// 十位 </span></span><br><span class=\"line\">\t\tc = i % <span class=\"number\">10</span>;\t\t<span class=\"comment\">// 个位 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i == a * a * a + b * b * b + c * c * c)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>; </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-8-回文数\"><a href=\"#BASIC-8-回文数\" class=\"headerlink\" title=\"BASIC 8 回文数\"></a>BASIC 8 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T47\" target=\"_blank\" rel=\"noopener\">回文数</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">按从小到大的顺序输出满足条件的四位十进制数。</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>直接循环找到千位和个位相等，百位和十位相等。</p>\n<h3 id=\"AC代码-7\"><a href=\"#AC代码-7\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1001</span>; i &lt; <span class=\"number\">10000</span>; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( i % <span class=\"number\">10</span> == i / <span class=\"number\">1000</span> &amp;&amp; i % <span class=\"number\">100</span> / <span class=\"number\">10</span> == i / <span class=\"number\">100</span> % <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-9-特殊回文数\"><a href=\"#BASIC-9-特殊回文数\" class=\"headerlink\" title=\"BASIC 9 特殊回文数\"></a>BASIC 9 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T48\" target=\"_blank\" rel=\"noopener\">特殊回文数</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123321是一个非常特殊的数，它从左边读和从右边读是一样的。</span><br><span class=\"line\">输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入一行，包含一个正整数n。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">按从小到大的顺序输出满足条件的整数，每个整数占一行。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">52</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">899998</span><br><span class=\"line\">989989</span><br><span class=\"line\">998899</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=</span> <span class=\"attr\">n</span> &lt;= <span class=\"string\">54</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>六位数是回文数，且六个数总和是n。<br>取高三位，总和为n / 2。因此如果为奇数则一定没有解。</p>\n<h3 id=\"AC代码-8\"><a href=\"#AC代码-8\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( n % <span class=\"number\">2</span> != <span class=\"number\">0</span> )</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i ++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j ++)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10</span>; k ++)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>( i + j + k == n / <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; j &lt;&lt; k &lt;&lt; k &lt;&lt; j &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-10-十进制转十六进制\"><a href=\"#BASIC-10-十进制转十六进制\" class=\"headerlink\" title=\"BASIC 10 十进制转十六进制\"></a>BASIC 10 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T49\" target=\"_blank\" rel=\"noopener\">十进制转十六进制</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。</span><br><span class=\"line\">十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。</span><br><span class=\"line\">给出一个非负整数，将它表示成十六进制的形式。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入包含一个非负整数a，表示要转换的数。0<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=a</span>&lt;=<span class=\"string\">2147483647</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出这个整数的16进制表示</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1E</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>这类问题模仿十进制转二进制的过程即可，使用了STL的string</p>\n<h3 id=\"AC代码-9\"><a href=\"#AC代码-9\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">Turn</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> ans;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( !n ) <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ( n )&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = n % d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( x &lt; <span class=\"number\">10</span> ) ans += x + <span class=\"number\">48</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> ans += <span class=\"number\">55</span> + x;</span><br><span class=\"line\">\t\tn /= d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treverse(ans.begin(), ans.end());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; Turn(n, <span class=\"number\">16</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-11-十六进制转十进制\"><a href=\"#BASIC-11-十六进制转十进制\" class=\"headerlink\" title=\"BASIC 11 十六进制转十进制\"></a>BASIC 11 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T50\" target=\"_blank\" rel=\"noopener\">十六进制转十进制</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。</span><br><span class=\"line\">注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FFFF</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">65535</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>(FFFF)<sub>H</sub> =&gt; (65535)<sub>D</sub><br>也就是 F * 16 <sup>0</sup> + F * 16 <sup>1</sup> + F * 16 <sup>2</sup> + F * 16 <sup>3</sup> = 65535.<br>这里F代表的是数字15<br>需要注意的是不能用int，FFFFFFFF会爆int。</p>\n<h3 id=\"AC代码-10\"><a href=\"#AC代码-10\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">Pow</span><span class=\"params\">(<span class=\"keyword\">int</span> d, <span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> mul = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ( -- p ) mul *= d;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> mul;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">Turn</span><span class=\"params\">(<span class=\"built_in\">string</span> str, <span class=\"keyword\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = str.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i --)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( str[i] &lt; <span class=\"number\">57</span> )</span><br><span class=\"line\">\t\t\tsum += (str[i] - <span class=\"number\">48</span>) * Pow(d, str.size() - i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tsum += (str[i] - <span class=\"number\">55</span>) * Pow(d, str.size() - i);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; Turn(str, <span class=\"number\">16</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-12-十六进制转八进制\"><a href=\"#BASIC-12-十六进制转八进制\" class=\"headerlink\" title=\"BASIC 12 十六进制转八进制\"></a>BASIC 12 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T51\" target=\"_blank\" rel=\"noopener\">十六进制转八进制</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定n个十六进制正整数，输出它们对应的八进制数。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入的第一行为一个正整数n （1&lt;=n&lt;=10）。</span><br><span class=\"line\">接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出n行，每行为输入对应的八进制正整数。</span><br><span class=\"line\">【注意】</span><br><span class=\"line\">输入的十六进制数不会有前导0，比如012A。</span><br><span class=\"line\">输出的八进制数也不能有前导0。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">39</span><br><span class=\"line\">123ABC</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">71</span><br><span class=\"line\">4435274</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示</strong><br>先将十六进制数转换成某进制数，再由某进制数转换成八进制。</p>\n<p><strong>问题分析</strong><br>很多人第一眼看到这题，十六进制转十进制再转八进制即可，思路同上两题。但这题要注意到的是数据范围，每个十六进制数长度不超过100000。<br>我的做法是转成二进制，而不是十进制。<br>这个对上题的代码需要进行改动。<br>但to_string函数编译不通过手写一个To_string。</p>\n<h3 id=\"AC代码-11\"><a href=\"#AC代码-11\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">hexTurnbin</span><span class=\"params\">(<span class=\"built_in\">string</span> str)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> bin;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.size(); i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> hex = str[i] &lt; <span class=\"number\">65</span> ? str[i] - <span class=\"number\">48</span> : str[i] - <span class=\"number\">55</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> t;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>( hex )&#123;</span><br><span class=\"line\">\t\t\tt += hex % <span class=\"number\">2</span> + <span class=\"number\">48</span>;</span><br><span class=\"line\">\t\t\thex /= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treverse(t.begin(), t.end());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = t.size(); i &lt; <span class=\"number\">4</span>; i ++) bin += <span class=\"string\">'0'</span>;  <span class=\"comment\">// 二进制补前置0</span></span><br><span class=\"line\">\t\tbin += t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bin;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">To_string</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( n )</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>( n )&#123;</span><br><span class=\"line\">\t\t\tstr += (n % <span class=\"number\">10</span> + <span class=\"number\">48</span>);</span><br><span class=\"line\">\t\t\tn /= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> str = <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">\treverse(str.begin(), str.end());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">binTurnoct</span><span class=\"params\">(<span class=\"built_in\">string</span> str)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> oct;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> M = <span class=\"number\">1</span>, mul = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = str.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i --)&#123;</span><br><span class=\"line\">\t\tmul += M * (str[i] - <span class=\"number\">48</span>);</span><br><span class=\"line\">\t\tM *= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( M == <span class=\"number\">8</span> )&#123;</span><br><span class=\"line\">\t\t\tM = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\toct += To_string(mul);  <span class=\"comment\">// to_string 用于int 转成 string</span></span><br><span class=\"line\">\t\t\tmul = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( mul ) oct += To_string(mul);</span><br><span class=\"line\">\treverse(oct.begin(), oct.end());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> oct;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ( n -- )&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">\t\tstr = hexTurnbin(str);</span><br><span class=\"line\">\t\tstr = binTurnoct(str);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (; i &lt; str.size(); i ++) <span class=\"keyword\">if</span>( str[i] != <span class=\"number\">48</span> ) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (; i &lt; str.size(); i ++) <span class=\"built_in\">putchar</span>(str[i]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-13-数列排序\"><a href=\"#BASIC-13-数列排序\" class=\"headerlink\" title=\"BASIC 13 数列排序\"></a>BASIC 13 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T52\" target=\"_blank\" rel=\"noopener\">数列排序</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=n</span>&lt;=<span class=\"string\">200</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一行为一个整数n。</span><br><span class=\"line\">第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出一行，按从小到大的顺序输出排序后的数列。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">8 3 6 4 9</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 4 6 8 9</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>直接使用algorithm里面的sort函数即可(有兴趣可以自己了解sort实现的方法)</p>\n<h3 id=\"AC代码-12\"><a href=\"#AC代码-12\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">201</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a[i]);</span><br><span class=\"line\">\tsort(a, a + n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, a[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-14-时间转换\"><a href=\"#BASIC-14-时间转换\" class=\"headerlink\" title=\"BASIC 14 时间转换\"></a>BASIC 14 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T54\" target=\"_blank\" rel=\"noopener\">时间转换</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个以秒为单位的时间t，要求用“<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">H</span>&gt;</span></span>:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">M</span>&gt;</span></span>:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">S</span>&gt;</span></span>”的格式来表示这个时间。<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">H</span>&gt;</span></span>表示时间，<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">M</span>&gt;</span></span>表示分钟，而<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">S</span>&gt;</span></span>表示秒，它们都是整数且没有前导的“0”。例如，若t=0，则应输出是“0:0:0”；若t=3661，则输出“1:1:1”。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入只有一行，是一个整数t（0<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=t</span>&lt;=<span class=\"string\">86399）。</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出只有一行，是以“<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">H</span>&gt;</span></span>:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">M</span>&gt;</span></span>:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">S</span>&gt;</span></span>”的格式所表示的时间，不包括引号。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0:0:0</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5436</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1:30:36</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>略</p>\n<h3 id=\"AC代码-13\"><a href=\"#AC代码-13\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> t;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d:%d:%d\"</span>, t / <span class=\"number\">3600</span> , (t / <span class=\"number\">60</span> % <span class=\"number\">60</span>), t % <span class=\"number\">60</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-15-字符串对比\"><a href=\"#BASIC-15-字符串对比\" class=\"headerlink\" title=\"BASIC 15 字符串对比\"></a>BASIC 15 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T56\" target=\"_blank\" rel=\"noopener\">字符串对比</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　给定两个仅由大写字母或小写字母组成的字符串(长度介于1到10之间)，它们之间的关系是以下4中情况之一：</span><br><span class=\"line\">　　1：两个字符串长度不等。比如 Beijing 和 Hebei</span><br><span class=\"line\">　　2：两个字符串不仅长度相等，而且相应位置上的字符完全一致(区分大小写)，比如 Beijing 和 Beijing</span><br><span class=\"line\">　　3：两个字符串长度相等，相应位置上的字符仅在不区分大小写的前提下才能达到完全一致（也就是说，它并不满足情况2）。比如 beijing 和 BEIjing</span><br><span class=\"line\">　　4：两个字符串长度相等，但是即使是不区分大小写也不能使这两个字符串一致。比如 Beijing 和 Nanjing</span><br><span class=\"line\">　　编程判断输入的两个字符串之间的关系属于这四类中的哪一类，给出所属的类的编号。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">包括两行，每行都是一个字符串</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">仅有一个数字，表明这两个字符串的关系编号</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEIjing</span><br><span class=\"line\">beiJing</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>使用transform 函数使string 整个转大写或小写。</p>\n<h3 id=\"AC代码-14\"><a href=\"#AC代码-14\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str1, str2;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; str1 &gt;&gt; str2;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( str1.size() != str2.size() ) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( str1 == str2 ) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"2\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\ttransform(str1.begin(), str1.end(), str1.begin(), ::<span class=\"built_in\">toupper</span>);</span><br><span class=\"line\">\t\ttransform(str2.begin(), str2.end(), str2.begin(), ::<span class=\"built_in\">toupper</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( str1 == str2 ) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"3\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"4\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-16-分解质因数\"><a href=\"#BASIC-16-分解质因数\" class=\"headerlink\" title=\"BASIC 16 分解质因数 \"></a>BASIC 16 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T57\" target=\"_blank\" rel=\"noopener\">分解质因数 </a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求出区间[a,b]中所有整数的质因数分解。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入两个整数a，b。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每行输出一个数的分解，形如k=a1<span class=\"emphasis\">*a2*</span>a3...(a1<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=a2</span>&lt;=<span class=\"string\">a3...，k也是从小到大的)(具体可看样例)</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 10</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3=3</span><br><span class=\"line\">4=2*2</span><br><span class=\"line\">5=5</span><br><span class=\"line\">6=2*3</span><br><span class=\"line\">7=7</span><br><span class=\"line\">8=2<span class=\"emphasis\">*2*</span>2</span><br><span class=\"line\">9=3*3</span><br><span class=\"line\">10=2*5</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示</strong><br>先筛出所有素数，然后再分解。</p>\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=</span> <span class=\"attr\">n</span> &lt;= <span class=\"string\">1,000,000</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>打出素数表，然后按素数表顺序用 2 3 5 7 9，依次选择。<br>若可以整除，则除以这个素数。</p>\n<p>例如 18 = 2， 3， 3。</p>\n<h3 id=\"AC代码-15\"><a href=\"#AC代码-15\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a, b, k = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> p[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> P[<span class=\"number\">5000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(p, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(p));</span><br><span class=\"line\">\tp[<span class=\"number\">0</span>] = p[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= b; i ++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( !p[i] )&#123;</span><br><span class=\"line\">\t\t\tP[k ++] = i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>; i * j &lt;= b; j ++)</span><br><span class=\"line\">\t\t\t\tp[i * j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = a; i &lt;= b; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = i, h = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d=\"</span>, i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( !p[i] )\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, i);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> ( j &gt; <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> ( j % P[h] == <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>( j == P[h] )</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; P[h];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; P[h] &lt;&lt; <span class=\"string\">\"*\"</span>;</span><br><span class=\"line\">\t\t\t\tj /= P[h];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\th ++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BEGIN-17\"><a href=\"#BEGIN-17\" class=\"headerlink\" title=\"BEGIN 17:\"></a>BEGIN 17:</h2><p><a href=\"http://lx.lanqiao.cn/problem.page?58\" target=\"_blank\" rel=\"noopener\">矩阵乘法</a></p>\n<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个N阶矩阵A，输出A的M次幂（M是非负整数）</span><br><span class=\"line\">例如：</span><br><span class=\"line\">　　A =</span><br><span class=\"line\">　　1 2</span><br><span class=\"line\">　　3 4</span><br><span class=\"line\">　　A的2次幂</span><br><span class=\"line\">　　7 10</span><br><span class=\"line\">　　15 22</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一行是一个正整数N、M（1&lt;=N&lt;=30, 0&lt;=M&lt;=5），表示矩阵A的阶数和要求的幂数</span><br><span class=\"line\">接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 2</span><br><span class=\"line\">1 2</span><br><span class=\"line\">3 4</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7 10</span><br><span class=\"line\">15 22</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>直接对矩阵进行乘法运算，但要注意一点的是，数组开int类型会爆。<br>也可以学习矩阵快速幂。</p>\n<h3 id=\"AC代码-16\"><a href=\"#AC代码-16\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">matnode</span>&#123;</span></span><br><span class=\"line\">\tll a[<span class=\"number\">31</span>][<span class=\"number\">31</span>];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reset</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">\t\t\ta[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j ++)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld \"</span>, a[i][j]);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;mat;</span><br><span class=\"line\"></span><br><span class=\"line\">mat <span class=\"keyword\">operator</span> * ( mat a, mat b )&#123;  <span class=\"comment\">// 重载乘法</span></span><br><span class=\"line\">\tmat ans;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j ++)&#123;</span><br><span class=\"line\">\t\t\tans.a[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k ++)</span><br><span class=\"line\">\t\t\t\tans.a[i][j] += a.a[i][k] * b.a[k][j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">mat <span class=\"title\">qpow</span><span class=\"params\">( mat a, <span class=\"keyword\">int</span> m )</span></span>&#123;   <span class=\"comment\">//快速幂</span></span><br><span class=\"line\">\tmat ans;</span><br><span class=\"line\">\tans.reset();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ( m )&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( m &amp; <span class=\"number\">1</span> )</span><br><span class=\"line\">\t\t\tans = ans * a;</span><br><span class=\"line\">\t\ta = a * a;</span><br><span class=\"line\">\t\tm /= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>  m;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\tmat a;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j ++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span> (<span class=\"string\">\"%lld\"</span>, &amp;a.a[i][j]);</span><br><span class=\"line\">\ta = qpow( a, m );</span><br><span class=\"line\">\ta.print();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://lx.lanqiao.cn/problemset.page?code=BASIC-\" target=\"_blank\" rel=\"noopener\">蓝桥杯基础练习</a></p>\n<h2 id=\"BASIC-1-闰年判断\"><a href=\"#BASIC-1-闰年判断\" class=\"headerlink\" title=\"BASIC 1 闰年判断 \"></a>BASIC 1 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T5\" target=\"_blank\" rel=\"noopener\">闰年判断 </a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个年份，判断这一年是不是闰年。</span><br><span class=\"line\">当以下情况之一满足时，这一年是闰年：</span><br><span class=\"line\">1. 年份是4的倍数而不是100的倍数；</span><br><span class=\"line\">2. 年份是400的倍数。</span><br><span class=\"line\">其他的年份都不是闰年。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入包含一个整数y，表示当前的年份。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出一行，如果给定的年份是闰年，则输出yes，否则输出no。</span><br><span class=\"line\">说明：当试题指定你输出一个字符串作为结果（比如本题的yes或者no，你需要严格按照试题中给定的大小写，写错大小写将不得分。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2013</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">no</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2016</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yes</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1990 &lt;= y &lt;= 2050</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>略</p>\n<h3 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> y;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; y;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( y % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; ( y % <span class=\"number\">400</span> == <span class=\"number\">0</span> || y % <span class=\"number\">100</span> != <span class=\"number\">0</span>) )</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"yes\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"no\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-2-01字串\"><a href=\"#BASIC-2-01字串\" class=\"headerlink\" title=\"BASIC 2 01字串\"></a>BASIC 2 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T6\" target=\"_blank\" rel=\"noopener\">01字串</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于长度为5位的一个01串，每一位都可能是0或1，一共有32种可能。它们的前几个是：</span><br><span class=\"line\">00000</span><br><span class=\"line\">00001</span><br><span class=\"line\">00010</span><br><span class=\"line\">00011</span><br><span class=\"line\">00100</span><br><span class=\"line\">请按从小到大的顺序输出这32种01串。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本试题没有输入。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出32行，按从小到大的顺序每行一个长度为5的01串。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000</span><br><span class=\"line\">00001</span><br><span class=\"line\">00010</span><br><span class=\"line\">00011</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">以下部分省略</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong></p>\n<ol>\n<li>可以循环嵌套实现</li>\n<li>可以模拟二进制直接从低位到高位逢2进位</li>\n<li>也可以直接使用STL的容器bitset</li>\n</ol>\n<h3 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环嵌套</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i1 = <span class=\"number\">0</span>; i1 &lt; <span class=\"number\">2</span>; i1 ++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i2 = <span class=\"number\">0</span>; i2 &lt; <span class=\"number\">2</span>; i2 ++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i3 = <span class=\"number\">0</span>; i3 &lt; <span class=\"number\">2</span>; i3 ++)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i4 = <span class=\"number\">0</span>; i4 &lt; <span class=\"number\">2</span>; i4 ++)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i5 = <span class=\"number\">0</span>; i5 &lt; <span class=\"number\">2</span>; i5 ++)</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; i1&lt;&lt; i2 &lt;&lt; i3 &lt;&lt; i4 &lt;&lt; i5 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟二进制</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> a = <span class=\"string\">\"00000\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span> ; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\ta[<span class=\"number\">4</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">4</span> ; j &gt;= <span class=\"number\">0</span> ; j --)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[j] == <span class=\"string\">'2'</span>)&#123;</span><br><span class=\"line\">\t\t\t\ta[j - <span class=\"number\">1</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\ta[j] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">bitset</span>&lt;5&gt; b(i);   <span class=\"comment\">// 头文件 &lt;bitset&gt;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bitset 容器每个位置存储值只能为0和1</span></span><br><span class=\"line\"><span class=\"comment\">// 用在这里正好合适</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.cplusplus.com/reference/bitset/bitset/\" target=\"_blank\" rel=\"noopener\">bitset文档</a></p>\n<h2 id=\"BASIC-3-字母图形\"><a href=\"#BASIC-3-字母图形\" class=\"headerlink\" title=\"BASIC 3 字母图形\"></a>BASIC 3 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T7\" target=\"_blank\" rel=\"noopener\">字母图形</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">利用字母可以组成一些美丽的图形，下面给出了一个例子：</span><br><span class=\"line\">ABCDEFG</span><br><span class=\"line\">BABCDEF</span><br><span class=\"line\">CBABCDE</span><br><span class=\"line\">DCBABCD</span><br><span class=\"line\">EDCBABC</span><br><span class=\"line\">这是一个5行7列的图形，请找出这个图形的规律，并输出一个n行m列的图形。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入一行，包含两个整数n和m，分别表示你要输出的图形的行数的列数。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出n行，每个m个字符，为你的图形。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 7</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABCDEFG</span><br><span class=\"line\">BABCDEF</span><br><span class=\"line\">CBABCDE</span><br><span class=\"line\">DCBABCD</span><br><span class=\"line\">EDCBABC</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= n, m &lt;= 26</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>可以直接两层循环直接输出ASCII码</p>\n<h3 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j ++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">putchar</span>( <span class=\"built_in\">abs</span>(j - i) + <span class=\"number\">65</span> );  </span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-4-数列特征\"><a href=\"#BASIC-4-数列特征\" class=\"headerlink\" title=\"BASIC 4 数列特征\"></a>BASIC 4 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T8\" target=\"_blank\" rel=\"noopener\">数列特征</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给出n个数，找出这n个数的最大值，最小值，和。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一行为整数n，表示数的个数</span><br><span class=\"line\">第二行有n个数，为给定的n个数，每个数的绝对值都小于10000。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出三行，每行一个整数。第一行表示这些数中的最大值，第二行表示这些数中的最小值，第三行表示这些数的和。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">1  3  -2  4  5</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">-2</span><br><span class=\"line\">11</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= n &lt;= 10000</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>在读入的过程中判断是否是最小和最大值，并加进总和中</p>\n<h3 id=\"AC代码-3\"><a href=\"#AC代码-3\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, x, Min = <span class=\"number\">10000</span>, Max = <span class=\"number\">-10000</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</span><br><span class=\"line\">\t\tMin = min(Min, x);</span><br><span class=\"line\">\t\tMax = max(Max, x);</span><br><span class=\"line\">\t\tsum += x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n%d\\n%d\\n\"</span>, Max, Min, sum);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-5-查找整数\"><a href=\"#BASIC-5-查找整数\" class=\"headerlink\" title=\"BASIC 5 查找整数\"></a>BASIC 5 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T9\" target=\"_blank\" rel=\"noopener\">查找整数</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一行包含一个整数n。</span><br><span class=\"line\">第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。</span><br><span class=\"line\">第三行包含一个整数a，为待查找的数。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\">1 9 4 8 3 9</span><br><span class=\"line\">9</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=</span> <span class=\"attr\">n</span> &lt;= <span class=\"string\">1000</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>读取数组, 然后使用find函数    </p>\n<h3 id=\"AC代码-4\"><a href=\"#AC代码-4\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, x;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">1001</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span> (<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, a + i);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span> (<span class=\"string\">\"%d\"</span>, &amp;x);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans = find(a, a + n, x) - a;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( ans != n ) <span class=\"built_in\">cout</span> &lt;&lt; ans + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　<br>给出n，输出它的前n行。</p>\n<h2 id=\"BASIC-6-杨辉三角形\"><a href=\"#BASIC-6-杨辉三角形\" class=\"headerlink\" title=\"BASIC 6 杨辉三角形\"></a>BASIC 6 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T10\" target=\"_blank\" rel=\"noopener\">杨辉三角形</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。</span><br><span class=\"line\">它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。</span><br><span class=\"line\">下面给出了杨辉三角形的前4行：　</span><br><span class=\"line\">   1</span><br><span class=\"line\">  1 1</span><br><span class=\"line\"> 1 2 1　　</span><br><span class=\"line\">1 3 3 1</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入包含一个数n。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1 1</span><br><span class=\"line\">1 2 1</span><br><span class=\"line\">1 3 3 1</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=</span> <span class=\"attr\">n</span> &lt;= <span class=\"string\">34</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>略</p>\n<h3 id=\"AC代码-5\"><a href=\"#AC代码-5\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">35</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(a));</span><br><span class=\"line\">\ta[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j ++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span> (<span class=\"string\">\"%d \"</span>, a[j]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> temp = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= i + <span class=\"number\">1</span>; j ++)&#123;</span><br><span class=\"line\">\t\t\ttemp = a[j] + temp;</span><br><span class=\"line\">\t\t\tswap(temp, a[j]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-7-特殊的数字\"><a href=\"#BASIC-7-特殊的数字\" class=\"headerlink\" title=\"BASIC 7 特殊的数字\"></a>BASIC 7 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T46\" target=\"_blank\" rel=\"noopener\">特殊的数字</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">153是一个非常特殊的数，它等于它的每位数字的立方和，即153=1<span class=\"emphasis\">*1*</span>1+5<span class=\"emphasis\">*5*</span>5+3<span class=\"emphasis\">*3*</span>3。编程求所有满足这种条件的三位十进制数。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">按从小到大的顺序输出满足条件的三位十进制数，每个数占一行。</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>循环跑一遍，公式都给了，范围是三位数</p>\n<h3 id=\"AC代码-6\"><a href=\"#AC代码-6\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt; </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,a,b,c; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">100</span>; i &lt; <span class=\"number\">1000</span>; i ++)&#123;</span><br><span class=\"line\">\t\ta = i  /<span class=\"number\">100</span>;\t<span class=\"comment\">// 百位\t</span></span><br><span class=\"line\">\t\tb = ( i % <span class=\"number\">100</span> ) / <span class=\"number\">10</span>;\t<span class=\"comment\">// 十位 </span></span><br><span class=\"line\">\t\tc = i % <span class=\"number\">10</span>;\t\t<span class=\"comment\">// 个位 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i == a * a * a + b * b * b + c * c * c)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>; </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-8-回文数\"><a href=\"#BASIC-8-回文数\" class=\"headerlink\" title=\"BASIC 8 回文数\"></a>BASIC 8 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T47\" target=\"_blank\" rel=\"noopener\">回文数</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">按从小到大的顺序输出满足条件的四位十进制数。</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>直接循环找到千位和个位相等，百位和十位相等。</p>\n<h3 id=\"AC代码-7\"><a href=\"#AC代码-7\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1001</span>; i &lt; <span class=\"number\">10000</span>; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( i % <span class=\"number\">10</span> == i / <span class=\"number\">1000</span> &amp;&amp; i % <span class=\"number\">100</span> / <span class=\"number\">10</span> == i / <span class=\"number\">100</span> % <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-9-特殊回文数\"><a href=\"#BASIC-9-特殊回文数\" class=\"headerlink\" title=\"BASIC 9 特殊回文数\"></a>BASIC 9 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T48\" target=\"_blank\" rel=\"noopener\">特殊回文数</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123321是一个非常特殊的数，它从左边读和从右边读是一样的。</span><br><span class=\"line\">输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入一行，包含一个正整数n。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">按从小到大的顺序输出满足条件的整数，每个整数占一行。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">52</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">899998</span><br><span class=\"line\">989989</span><br><span class=\"line\">998899</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=</span> <span class=\"attr\">n</span> &lt;= <span class=\"string\">54</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>六位数是回文数，且六个数总和是n。<br>取高三位，总和为n / 2。因此如果为奇数则一定没有解。</p>\n<h3 id=\"AC代码-8\"><a href=\"#AC代码-8\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( n % <span class=\"number\">2</span> != <span class=\"number\">0</span> )</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i ++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j ++)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10</span>; k ++)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>( i + j + k == n / <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; j &lt;&lt; k &lt;&lt; k &lt;&lt; j &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-10-十进制转十六进制\"><a href=\"#BASIC-10-十进制转十六进制\" class=\"headerlink\" title=\"BASIC 10 十进制转十六进制\"></a>BASIC 10 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T49\" target=\"_blank\" rel=\"noopener\">十进制转十六进制</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。</span><br><span class=\"line\">十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。</span><br><span class=\"line\">给出一个非负整数，将它表示成十六进制的形式。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入包含一个非负整数a，表示要转换的数。0<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=a</span>&lt;=<span class=\"string\">2147483647</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出这个整数的16进制表示</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1E</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>这类问题模仿十进制转二进制的过程即可，使用了STL的string</p>\n<h3 id=\"AC代码-9\"><a href=\"#AC代码-9\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">Turn</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> ans;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( !n ) <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ( n )&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = n % d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( x &lt; <span class=\"number\">10</span> ) ans += x + <span class=\"number\">48</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> ans += <span class=\"number\">55</span> + x;</span><br><span class=\"line\">\t\tn /= d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treverse(ans.begin(), ans.end());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; Turn(n, <span class=\"number\">16</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-11-十六进制转十进制\"><a href=\"#BASIC-11-十六进制转十进制\" class=\"headerlink\" title=\"BASIC 11 十六进制转十进制\"></a>BASIC 11 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T50\" target=\"_blank\" rel=\"noopener\">十六进制转十进制</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。</span><br><span class=\"line\">注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FFFF</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">65535</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>(FFFF)<sub>H</sub> =&gt; (65535)<sub>D</sub><br>也就是 F * 16 <sup>0</sup> + F * 16 <sup>1</sup> + F * 16 <sup>2</sup> + F * 16 <sup>3</sup> = 65535.<br>这里F代表的是数字15<br>需要注意的是不能用int，FFFFFFFF会爆int。</p>\n<h3 id=\"AC代码-10\"><a href=\"#AC代码-10\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">Pow</span><span class=\"params\">(<span class=\"keyword\">int</span> d, <span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> mul = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ( -- p ) mul *= d;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> mul;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">Turn</span><span class=\"params\">(<span class=\"built_in\">string</span> str, <span class=\"keyword\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = str.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i --)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( str[i] &lt; <span class=\"number\">57</span> )</span><br><span class=\"line\">\t\t\tsum += (str[i] - <span class=\"number\">48</span>) * Pow(d, str.size() - i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tsum += (str[i] - <span class=\"number\">55</span>) * Pow(d, str.size() - i);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; Turn(str, <span class=\"number\">16</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-12-十六进制转八进制\"><a href=\"#BASIC-12-十六进制转八进制\" class=\"headerlink\" title=\"BASIC 12 十六进制转八进制\"></a>BASIC 12 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T51\" target=\"_blank\" rel=\"noopener\">十六进制转八进制</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定n个十六进制正整数，输出它们对应的八进制数。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入的第一行为一个正整数n （1&lt;=n&lt;=10）。</span><br><span class=\"line\">接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出n行，每行为输入对应的八进制正整数。</span><br><span class=\"line\">【注意】</span><br><span class=\"line\">输入的十六进制数不会有前导0，比如012A。</span><br><span class=\"line\">输出的八进制数也不能有前导0。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">39</span><br><span class=\"line\">123ABC</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">71</span><br><span class=\"line\">4435274</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示</strong><br>先将十六进制数转换成某进制数，再由某进制数转换成八进制。</p>\n<p><strong>问题分析</strong><br>很多人第一眼看到这题，十六进制转十进制再转八进制即可，思路同上两题。但这题要注意到的是数据范围，每个十六进制数长度不超过100000。<br>我的做法是转成二进制，而不是十进制。<br>这个对上题的代码需要进行改动。<br>但to_string函数编译不通过手写一个To_string。</p>\n<h3 id=\"AC代码-11\"><a href=\"#AC代码-11\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">hexTurnbin</span><span class=\"params\">(<span class=\"built_in\">string</span> str)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> bin;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.size(); i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> hex = str[i] &lt; <span class=\"number\">65</span> ? str[i] - <span class=\"number\">48</span> : str[i] - <span class=\"number\">55</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> t;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>( hex )&#123;</span><br><span class=\"line\">\t\t\tt += hex % <span class=\"number\">2</span> + <span class=\"number\">48</span>;</span><br><span class=\"line\">\t\t\thex /= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treverse(t.begin(), t.end());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = t.size(); i &lt; <span class=\"number\">4</span>; i ++) bin += <span class=\"string\">'0'</span>;  <span class=\"comment\">// 二进制补前置0</span></span><br><span class=\"line\">\t\tbin += t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bin;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">To_string</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( n )</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>( n )&#123;</span><br><span class=\"line\">\t\t\tstr += (n % <span class=\"number\">10</span> + <span class=\"number\">48</span>);</span><br><span class=\"line\">\t\t\tn /= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> str = <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">\treverse(str.begin(), str.end());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">binTurnoct</span><span class=\"params\">(<span class=\"built_in\">string</span> str)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> oct;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> M = <span class=\"number\">1</span>, mul = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = str.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i --)&#123;</span><br><span class=\"line\">\t\tmul += M * (str[i] - <span class=\"number\">48</span>);</span><br><span class=\"line\">\t\tM *= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( M == <span class=\"number\">8</span> )&#123;</span><br><span class=\"line\">\t\t\tM = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\toct += To_string(mul);  <span class=\"comment\">// to_string 用于int 转成 string</span></span><br><span class=\"line\">\t\t\tmul = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( mul ) oct += To_string(mul);</span><br><span class=\"line\">\treverse(oct.begin(), oct.end());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> oct;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ( n -- )&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">\t\tstr = hexTurnbin(str);</span><br><span class=\"line\">\t\tstr = binTurnoct(str);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (; i &lt; str.size(); i ++) <span class=\"keyword\">if</span>( str[i] != <span class=\"number\">48</span> ) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (; i &lt; str.size(); i ++) <span class=\"built_in\">putchar</span>(str[i]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-13-数列排序\"><a href=\"#BASIC-13-数列排序\" class=\"headerlink\" title=\"BASIC 13 数列排序\"></a>BASIC 13 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T52\" target=\"_blank\" rel=\"noopener\">数列排序</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=n</span>&lt;=<span class=\"string\">200</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一行为一个整数n。</span><br><span class=\"line\">第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出一行，按从小到大的顺序输出排序后的数列。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">8 3 6 4 9</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 4 6 8 9</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>直接使用algorithm里面的sort函数即可(有兴趣可以自己了解sort实现的方法)</p>\n<h3 id=\"AC代码-12\"><a href=\"#AC代码-12\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">201</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a[i]);</span><br><span class=\"line\">\tsort(a, a + n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, a[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-14-时间转换\"><a href=\"#BASIC-14-时间转换\" class=\"headerlink\" title=\"BASIC 14 时间转换\"></a>BASIC 14 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T54\" target=\"_blank\" rel=\"noopener\">时间转换</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个以秒为单位的时间t，要求用“<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">H</span>&gt;</span></span>:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">M</span>&gt;</span></span>:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">S</span>&gt;</span></span>”的格式来表示这个时间。<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">H</span>&gt;</span></span>表示时间，<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">M</span>&gt;</span></span>表示分钟，而<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">S</span>&gt;</span></span>表示秒，它们都是整数且没有前导的“0”。例如，若t=0，则应输出是“0:0:0”；若t=3661，则输出“1:1:1”。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入只有一行，是一个整数t（0<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=t</span>&lt;=<span class=\"string\">86399）。</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出只有一行，是以“<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">H</span>&gt;</span></span>:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">M</span>&gt;</span></span>:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">S</span>&gt;</span></span>”的格式所表示的时间，不包括引号。</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0:0:0</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5436</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1:30:36</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>略</p>\n<h3 id=\"AC代码-13\"><a href=\"#AC代码-13\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> t;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; t;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d:%d:%d\"</span>, t / <span class=\"number\">3600</span> , (t / <span class=\"number\">60</span> % <span class=\"number\">60</span>), t % <span class=\"number\">60</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-15-字符串对比\"><a href=\"#BASIC-15-字符串对比\" class=\"headerlink\" title=\"BASIC 15 字符串对比\"></a>BASIC 15 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T56\" target=\"_blank\" rel=\"noopener\">字符串对比</a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　给定两个仅由大写字母或小写字母组成的字符串(长度介于1到10之间)，它们之间的关系是以下4中情况之一：</span><br><span class=\"line\">　　1：两个字符串长度不等。比如 Beijing 和 Hebei</span><br><span class=\"line\">　　2：两个字符串不仅长度相等，而且相应位置上的字符完全一致(区分大小写)，比如 Beijing 和 Beijing</span><br><span class=\"line\">　　3：两个字符串长度相等，相应位置上的字符仅在不区分大小写的前提下才能达到完全一致（也就是说，它并不满足情况2）。比如 beijing 和 BEIjing</span><br><span class=\"line\">　　4：两个字符串长度相等，但是即使是不区分大小写也不能使这两个字符串一致。比如 Beijing 和 Nanjing</span><br><span class=\"line\">　　编程判断输入的两个字符串之间的关系属于这四类中的哪一类，给出所属的类的编号。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">包括两行，每行都是一个字符串</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">仅有一个数字，表明这两个字符串的关系编号</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEIjing</span><br><span class=\"line\">beiJing</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>使用transform 函数使string 整个转大写或小写。</p>\n<h3 id=\"AC代码-14\"><a href=\"#AC代码-14\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str1, str2;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; str1 &gt;&gt; str2;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( str1.size() != str2.size() ) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( str1 == str2 ) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"2\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\ttransform(str1.begin(), str1.end(), str1.begin(), ::<span class=\"built_in\">toupper</span>);</span><br><span class=\"line\">\t\ttransform(str2.begin(), str2.end(), str2.begin(), ::<span class=\"built_in\">toupper</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( str1 == str2 ) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"3\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"4\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BASIC-16-分解质因数\"><a href=\"#BASIC-16-分解质因数\" class=\"headerlink\" title=\"BASIC 16 分解质因数 \"></a>BASIC 16 <a href=\"http://lx.lanqiao.cn/problem.page?gpid=T57\" target=\"_blank\" rel=\"noopener\">分解质因数 </a></h2><p><strong>问题描述</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求出区间[a,b]中所有整数的质因数分解。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入两个整数a，b。</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每行输出一个数的分解，形如k=a1<span class=\"emphasis\">*a2*</span>a3...(a1<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=a2</span>&lt;=<span class=\"string\">a3...，k也是从小到大的)(具体可看样例)</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 10</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3=3</span><br><span class=\"line\">4=2*2</span><br><span class=\"line\">5=5</span><br><span class=\"line\">6=2*3</span><br><span class=\"line\">7=7</span><br><span class=\"line\">8=2<span class=\"emphasis\">*2*</span>2</span><br><span class=\"line\">9=3*3</span><br><span class=\"line\">10=2*5</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示</strong><br>先筛出所有素数，然后再分解。</p>\n<p><strong>数据规模与约定</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=</span> <span class=\"attr\">n</span> &lt;= <span class=\"string\">1,000,000</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>打出素数表，然后按素数表顺序用 2 3 5 7 9，依次选择。<br>若可以整除，则除以这个素数。</p>\n<p>例如 18 = 2， 3， 3。</p>\n<h3 id=\"AC代码-15\"><a href=\"#AC代码-15\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a, b, k = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> p[<span class=\"number\">10001</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> P[<span class=\"number\">5000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(p, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(p));</span><br><span class=\"line\">\tp[<span class=\"number\">0</span>] = p[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= b; i ++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( !p[i] )&#123;</span><br><span class=\"line\">\t\t\tP[k ++] = i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>; i * j &lt;= b; j ++)</span><br><span class=\"line\">\t\t\t\tp[i * j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = a; i &lt;= b; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = i, h = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d=\"</span>, i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( !p[i] )\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, i);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> ( j &gt; <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> ( j % P[h] == <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>( j == P[h] )</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; P[h];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; P[h] &lt;&lt; <span class=\"string\">\"*\"</span>;</span><br><span class=\"line\">\t\t\t\tj /= P[h];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\th ++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BEGIN-17\"><a href=\"#BEGIN-17\" class=\"headerlink\" title=\"BEGIN 17:\"></a>BEGIN 17:</h2><p><a href=\"http://lx.lanqiao.cn/problem.page?58\" target=\"_blank\" rel=\"noopener\">矩阵乘法</a></p>\n<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个N阶矩阵A，输出A的M次幂（M是非负整数）</span><br><span class=\"line\">例如：</span><br><span class=\"line\">　　A =</span><br><span class=\"line\">　　1 2</span><br><span class=\"line\">　　3 4</span><br><span class=\"line\">　　A的2次幂</span><br><span class=\"line\">　　7 10</span><br><span class=\"line\">　　15 22</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一行是一个正整数N、M（1&lt;=N&lt;=30, 0&lt;=M&lt;=5），表示矩阵A的阶数和要求的幂数</span><br><span class=\"line\">接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 2</span><br><span class=\"line\">1 2</span><br><span class=\"line\">3 4</span><br></pre></td></tr></table></figure>\n\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7 10</span><br><span class=\"line\">15 22</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题分析</strong><br>直接对矩阵进行乘法运算，但要注意一点的是，数组开int类型会爆。<br>也可以学习矩阵快速幂。</p>\n<h3 id=\"AC代码-16\"><a href=\"#AC代码-16\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">matnode</span>&#123;</span></span><br><span class=\"line\">\tll a[<span class=\"number\">31</span>][<span class=\"number\">31</span>];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reset</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">\t\t\ta[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j ++)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld \"</span>, a[i][j]);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;mat;</span><br><span class=\"line\"></span><br><span class=\"line\">mat <span class=\"keyword\">operator</span> * ( mat a, mat b )&#123;  <span class=\"comment\">// 重载乘法</span></span><br><span class=\"line\">\tmat ans;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j ++)&#123;</span><br><span class=\"line\">\t\t\tans.a[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k ++)</span><br><span class=\"line\">\t\t\t\tans.a[i][j] += a.a[i][k] * b.a[k][j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">mat <span class=\"title\">qpow</span><span class=\"params\">( mat a, <span class=\"keyword\">int</span> m )</span></span>&#123;   <span class=\"comment\">//快速幂</span></span><br><span class=\"line\">\tmat ans;</span><br><span class=\"line\">\tans.reset();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ( m )&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( m &amp; <span class=\"number\">1</span> )</span><br><span class=\"line\">\t\t\tans = ans * a;</span><br><span class=\"line\">\t\ta = a * a;</span><br><span class=\"line\">\t\tm /= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>  m;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\tmat a;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j ++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span> (<span class=\"string\">\"%lld\"</span>, &amp;a.a[i][j]);</span><br><span class=\"line\">\ta = qpow( a, m );</span><br><span class=\"line\">\ta.print();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"蓝桥杯试题集_算法提高","date":"2019-02-20T07:16:59.000Z","description":null,"_content":"","source":"_posts/蓝桥杯试题集-算法提高.md","raw":"---\ntitle: 蓝桥杯试题集_算法提高\ndate: 2019-02-20 15:16:59\ntags:\ncategories:\ndescription:\n---\n","slug":"蓝桥杯试题集-算法提高","published":1,"updated":"2020-02-06T22:40:22.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9b9005224uwgke6xa61","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"蓝桥杯试题集_算法训练","date":"2019-02-20T07:17:07.000Z","description":null,"_content":"","source":"_posts/蓝桥杯试题集-算法训练.md","raw":"---\ntitle: 蓝桥杯试题集_算法训练\ndate: 2019-02-20 15:17:07\ntags:\ncategories:\ndescription:\n---\n","slug":"蓝桥杯试题集-算法训练","published":1,"updated":"2020-02-06T22:40:22.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9be005524uwcuvo8wvi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"解决写wyh的矩阵出现内存占用超过限制的问题","date":"2018-04-06T08:58:13.000Z","description":"有时候在提交的时候总是会出现内存占用超过限制的问题，很多时候刚上手也不知道为什么会超过内存限制！而这篇文章将用一个例子讲述怎么查看内存使用。","_content":"\n[原题链接](https://www.nowcoder.com/acm/contest/93/B)\n题目如下：\n给你一个n*n矩阵，按照顺序填入1到n*n的数，例如n=5，该矩阵如下\n1  2  3  4  5\n6  7  8  9  10\n11 12 13 14 15\n16 17 18 19 20\n21 22 23 24 25\n现在让你连接相邻两条边的中点，然后只保留他们围成封闭图形区域的数字，那么这个矩阵变为\n      3\n   7  8  9 \n11 12 13 14 15\n   17 18 19 \n      23\n      \n现在你们涵哥让你求变化后的矩阵的所有元素的和为多少\n\n内存超过限制的代码:\n```C++\n#include<bits/stdc++.h>//数字\nusing namespace std;\ntypedef long long ll;\nint a[9000][9000];\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    while(n--){\n        int num=0,m;\n        scanf(\"%d\",&m);\n        for(int i=0;i<m;i++)\n            for(int j=0;j<m;j++)\n                a[i][j]=++num;\n        int l=(m+1)/2-1;\n        ll sum=0;\n        for(int i=0;i<m;i++)\n            for(int j=abs(l-i);j<m-abs(i-l);j++)\n                sum+=a[i][j];\n        printf(\"%lld\\n\",sum);\n    }\n    return 0;\n}\n```\n**占用内存262145K**\n题目对空间的限制是262144K，所以是没跑完的。\n几次修改无果。。放弃了二维数组的做法\nAC代码如下：\n```C++\n#include<bits/stdc++.h>//数字 \nusing namespace std;\ntypedef long long ll;\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\twhile(n--){\n\t\tint num=0,m;\n\t\tscanf(\"%d\",&m);\n\t\tint l=(m+1)/2-1;\n\t\tint h=l+1;\n\t\tll sum=0;\n\t\tfor(int i=0;i<m;i++){\n\t\t\tif(i<=l){\n\t\t\t\tif(i)\th=h+(m-1);\n\t\t\t\tfor(int j=h;j<h+2*(l-abs(i-l))+1;j++)\n\t\t\t\t\tsum+=j;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(i)\th=h+(m+1);\n\t\t\t\tfor(int j=h;j<h+2*(l-abs(i-l))+1;j++)\n\t\t\t\t\tsum+=j;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%lld\\n\",sum);\n//\t\n//\tint availmb;\n//    int totalmb;\n// \n//    MEMORYSTATUS memstatus; \n// \n//    GlobalMemoryStatus(&memstatus);  \n// \n//    availmb = memstatus.dwAvailPhys/1024/1024;      //可用物理内存总量\n//    totalmb = memstatus.dwTotalPhys/1024/1024;      //物理内存总量\n//    printf(\"可用内存为:%d MB，物理内存总量:%d MB\\n\",availmb,totalmb);\n\t}\n\treturn 0;\n}\n```\n**占用内存352K**\n注释中的代码可以查看当前运行使用的内存大小！！！","source":"_posts/解决写wyh的矩阵出现内存占用超过限制的问题.md","raw":"---\ntitle: 解决写wyh的矩阵出现内存占用超过限制的问题\ndate: 2018-04-06 16:58:13\ntags: \n    - C/C++题目\ncategories: C/C++\ndescription: 有时候在提交的时候总是会出现内存占用超过限制的问题，很多时候刚上手也不知道为什么会超过内存限制！而这篇文章将用一个例子讲述怎么查看内存使用。\n---\n\n[原题链接](https://www.nowcoder.com/acm/contest/93/B)\n题目如下：\n给你一个n*n矩阵，按照顺序填入1到n*n的数，例如n=5，该矩阵如下\n1  2  3  4  5\n6  7  8  9  10\n11 12 13 14 15\n16 17 18 19 20\n21 22 23 24 25\n现在让你连接相邻两条边的中点，然后只保留他们围成封闭图形区域的数字，那么这个矩阵变为\n      3\n   7  8  9 \n11 12 13 14 15\n   17 18 19 \n      23\n      \n现在你们涵哥让你求变化后的矩阵的所有元素的和为多少\n\n内存超过限制的代码:\n```C++\n#include<bits/stdc++.h>//数字\nusing namespace std;\ntypedef long long ll;\nint a[9000][9000];\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    while(n--){\n        int num=0,m;\n        scanf(\"%d\",&m);\n        for(int i=0;i<m;i++)\n            for(int j=0;j<m;j++)\n                a[i][j]=++num;\n        int l=(m+1)/2-1;\n        ll sum=0;\n        for(int i=0;i<m;i++)\n            for(int j=abs(l-i);j<m-abs(i-l);j++)\n                sum+=a[i][j];\n        printf(\"%lld\\n\",sum);\n    }\n    return 0;\n}\n```\n**占用内存262145K**\n题目对空间的限制是262144K，所以是没跑完的。\n几次修改无果。。放弃了二维数组的做法\nAC代码如下：\n```C++\n#include<bits/stdc++.h>//数字 \nusing namespace std;\ntypedef long long ll;\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\twhile(n--){\n\t\tint num=0,m;\n\t\tscanf(\"%d\",&m);\n\t\tint l=(m+1)/2-1;\n\t\tint h=l+1;\n\t\tll sum=0;\n\t\tfor(int i=0;i<m;i++){\n\t\t\tif(i<=l){\n\t\t\t\tif(i)\th=h+(m-1);\n\t\t\t\tfor(int j=h;j<h+2*(l-abs(i-l))+1;j++)\n\t\t\t\t\tsum+=j;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(i)\th=h+(m+1);\n\t\t\t\tfor(int j=h;j<h+2*(l-abs(i-l))+1;j++)\n\t\t\t\t\tsum+=j;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%lld\\n\",sum);\n//\t\n//\tint availmb;\n//    int totalmb;\n// \n//    MEMORYSTATUS memstatus; \n// \n//    GlobalMemoryStatus(&memstatus);  \n// \n//    availmb = memstatus.dwAvailPhys/1024/1024;      //可用物理内存总量\n//    totalmb = memstatus.dwTotalPhys/1024/1024;      //物理内存总量\n//    printf(\"可用内存为:%d MB，物理内存总量:%d MB\\n\",availmb,totalmb);\n\t}\n\treturn 0;\n}\n```\n**占用内存352K**\n注释中的代码可以查看当前运行使用的内存大小！！！","slug":"解决写wyh的矩阵出现内存占用超过限制的问题","published":1,"updated":"2020-02-06T22:40:22.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9bh005724uwc6q4qwzb","content":"<p><a href=\"https://www.nowcoder.com/acm/contest/93/B\" target=\"_blank\" rel=\"noopener\">原题链接</a><br>题目如下：<br>给你一个n<em>n矩阵，按照顺序填入1到n</em>n的数，例如n=5，该矩阵如下<br>1  2  3  4  5<br>6  7  8  9  10<br>11 12 13 14 15<br>16 17 18 19 20<br>21 22 23 24 25<br>现在让你连接相邻两条边的中点，然后只保留他们围成封闭图形区域的数字，那么这个矩阵变为<br>      3<br>   7  8  9<br>11 12 13 14 15<br>   17 18 19<br>      23</p>\n<p>现在你们涵哥让你求变化后的矩阵的所有元素的和为多少</p>\n<p>内存超过限制的代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;//数字</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">9000</span>][<span class=\"number\">9000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num=<span class=\"number\">0</span>,m;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)</span><br><span class=\"line\">                a[i][j]=++num;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l=(m+<span class=\"number\">1</span>)/<span class=\"number\">2</span><span class=\"number\">-1</span>;</span><br><span class=\"line\">        ll sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"built_in\">abs</span>(l-i);j&lt;m-<span class=\"built_in\">abs</span>(i-l);j++)</span><br><span class=\"line\">                sum+=a[i][j];</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>占用内存262145K</strong><br>题目对空间的限制是262144K，所以是没跑完的。<br>几次修改无果。。放弃了二维数组的做法<br>AC代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;//数字 </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num=<span class=\"number\">0</span>,m;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> l=(m+<span class=\"number\">1</span>)/<span class=\"number\">2</span><span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> h=l+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tll sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i&lt;=l)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i)\th=h+(m<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=h;j&lt;h+<span class=\"number\">2</span>*(l-<span class=\"built_in\">abs</span>(i-l))+<span class=\"number\">1</span>;j++)</span><br><span class=\"line\">\t\t\t\t\tsum+=j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i)\th=h+(m+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=h;j&lt;h+<span class=\"number\">2</span>*(l-<span class=\"built_in\">abs</span>(i-l))+<span class=\"number\">1</span>;j++)</span><br><span class=\"line\">\t\t\t\t\tsum+=j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,sum);</span><br><span class=\"line\"><span class=\"comment\">//\t</span></span><br><span class=\"line\"><span class=\"comment\">//\tint availmb;</span></span><br><span class=\"line\"><span class=\"comment\">//    int totalmb;</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">//    MEMORYSTATUS memstatus; </span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">//    GlobalMemoryStatus(&amp;memstatus);  </span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">//    availmb = memstatus.dwAvailPhys/1024/1024;      //可用物理内存总量</span></span><br><span class=\"line\"><span class=\"comment\">//    totalmb = memstatus.dwTotalPhys/1024/1024;      //物理内存总量</span></span><br><span class=\"line\"><span class=\"comment\">//    printf(\"可用内存为:%d MB，物理内存总量:%d MB\\n\",availmb,totalmb);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>占用内存352K</strong><br>注释中的代码可以查看当前运行使用的内存大小！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.nowcoder.com/acm/contest/93/B\" target=\"_blank\" rel=\"noopener\">原题链接</a><br>题目如下：<br>给你一个n<em>n矩阵，按照顺序填入1到n</em>n的数，例如n=5，该矩阵如下<br>1  2  3  4  5<br>6  7  8  9  10<br>11 12 13 14 15<br>16 17 18 19 20<br>21 22 23 24 25<br>现在让你连接相邻两条边的中点，然后只保留他们围成封闭图形区域的数字，那么这个矩阵变为<br>      3<br>   7  8  9<br>11 12 13 14 15<br>   17 18 19<br>      23</p>\n<p>现在你们涵哥让你求变化后的矩阵的所有元素的和为多少</p>\n<p>内存超过限制的代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;//数字</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">9000</span>][<span class=\"number\">9000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num=<span class=\"number\">0</span>,m;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)</span><br><span class=\"line\">                a[i][j]=++num;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l=(m+<span class=\"number\">1</span>)/<span class=\"number\">2</span><span class=\"number\">-1</span>;</span><br><span class=\"line\">        ll sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"built_in\">abs</span>(l-i);j&lt;m-<span class=\"built_in\">abs</span>(i-l);j++)</span><br><span class=\"line\">                sum+=a[i][j];</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>占用内存262145K</strong><br>题目对空间的限制是262144K，所以是没跑完的。<br>几次修改无果。。放弃了二维数组的做法<br>AC代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;//数字 </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num=<span class=\"number\">0</span>,m;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> l=(m+<span class=\"number\">1</span>)/<span class=\"number\">2</span><span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> h=l+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tll sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i&lt;=l)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i)\th=h+(m<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=h;j&lt;h+<span class=\"number\">2</span>*(l-<span class=\"built_in\">abs</span>(i-l))+<span class=\"number\">1</span>;j++)</span><br><span class=\"line\">\t\t\t\t\tsum+=j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i)\th=h+(m+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=h;j&lt;h+<span class=\"number\">2</span>*(l-<span class=\"built_in\">abs</span>(i-l))+<span class=\"number\">1</span>;j++)</span><br><span class=\"line\">\t\t\t\t\tsum+=j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,sum);</span><br><span class=\"line\"><span class=\"comment\">//\t</span></span><br><span class=\"line\"><span class=\"comment\">//\tint availmb;</span></span><br><span class=\"line\"><span class=\"comment\">//    int totalmb;</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">//    MEMORYSTATUS memstatus; </span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">//    GlobalMemoryStatus(&amp;memstatus);  </span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">//    availmb = memstatus.dwAvailPhys/1024/1024;      //可用物理内存总量</span></span><br><span class=\"line\"><span class=\"comment\">//    totalmb = memstatus.dwTotalPhys/1024/1024;      //物理内存总量</span></span><br><span class=\"line\"><span class=\"comment\">//    printf(\"可用内存为:%d MB，物理内存总量:%d MB\\n\",availmb,totalmb);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>占用内存352K</strong><br>注释中的代码可以查看当前运行使用的内存大小！！！</p>\n"},{"title":"蓝桥杯试题集","date":"2019-02-20T07:17:12.000Z","description":"目录。","top":true,"_content":"\n[蓝桥杯试题集_入门训练](https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E5%85%A5%E9%97%A8%E8%AE%AD%E7%BB%83/)\n\n[蓝桥杯试题集_基础训练](https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/)\n\n[蓝桥杯试题集_算法训练](https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83/)\n\n[蓝桥杯试题集_算法提高](https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E7%AE%97%E6%B3%95%E6%8F%90%E9%AB%98/)\n\n[蓝桥杯试题集_历届试题](https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E5%8E%86%E5%B1%8A%E8%AF%95%E9%A2%98/)\n\n\n","source":"_posts/蓝桥杯试题集.md","raw":"---\ntitle: 蓝桥杯试题集\ndate: 2019-02-20 15:17:12\ntags: 蓝桥杯\ncategories: C/C++\ndescription: 目录。\ntop: true\n---\n\n[蓝桥杯试题集_入门训练](https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E5%85%A5%E9%97%A8%E8%AE%AD%E7%BB%83/)\n\n[蓝桥杯试题集_基础训练](https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/)\n\n[蓝桥杯试题集_算法训练](https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83/)\n\n[蓝桥杯试题集_算法提高](https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E7%AE%97%E6%B3%95%E6%8F%90%E9%AB%98/)\n\n[蓝桥杯试题集_历届试题](https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E5%8E%86%E5%B1%8A%E8%AF%95%E9%A2%98/)\n\n\n","slug":"蓝桥杯试题集","published":1,"updated":"2020-02-06T22:40:22.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9bk005b24uwl1vs74e8","content":"<p><a href=\"https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E5%85%A5%E9%97%A8%E8%AE%AD%E7%BB%83/\" target=\"_blank\" rel=\"noopener\">蓝桥杯试题集_入门训练</a></p>\n<p><a href=\"https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/\" target=\"_blank\" rel=\"noopener\">蓝桥杯试题集_基础训练</a></p>\n<p><a href=\"https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83/\" target=\"_blank\" rel=\"noopener\">蓝桥杯试题集_算法训练</a></p>\n<p><a href=\"https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E7%AE%97%E6%B3%95%E6%8F%90%E9%AB%98/\" target=\"_blank\" rel=\"noopener\">蓝桥杯试题集_算法提高</a></p>\n<p><a href=\"https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E5%8E%86%E5%B1%8A%E8%AF%95%E9%A2%98/\" target=\"_blank\" rel=\"noopener\">蓝桥杯试题集_历届试题</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E5%85%A5%E9%97%A8%E8%AE%AD%E7%BB%83/\" target=\"_blank\" rel=\"noopener\">蓝桥杯试题集_入门训练</a></p>\n<p><a href=\"https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/\" target=\"_blank\" rel=\"noopener\">蓝桥杯试题集_基础训练</a></p>\n<p><a href=\"https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83/\" target=\"_blank\" rel=\"noopener\">蓝桥杯试题集_算法训练</a></p>\n<p><a href=\"https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E7%AE%97%E6%B3%95%E6%8F%90%E9%AB%98/\" target=\"_blank\" rel=\"noopener\">蓝桥杯试题集_算法提高</a></p>\n<p><a href=\"https://edxuanlen.github.io/2019/02/20/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E9%9B%86-%E5%8E%86%E5%B1%8A%E8%AF%95%E9%A2%98/\" target=\"_blank\" rel=\"noopener\">蓝桥杯试题集_历届试题</a></p>\n"},{"title":"补蓝桥杯国赛","date":"2018-09-03T00:00:57.000Z","description":"第九届蓝桥杯复赛。","_content":"\n时间:2018年5月\n地点：首都经济贸易大学\n事件：第九届蓝桥杯国赛\n\n# 换零钞\nx星球的钞票的面额只有：100元，5元，2元，1元，共4种。\n小明去x星旅游，他手里只有2张100元的x星币，太不方便，恰好路过x星银行就去换零钱。\n小明有点强迫症，他坚持要求200元换出的零钞中2元的张数刚好是1元的张数的10倍，\n剩下的当然都是5元面额的。\n银行的工作人员有点为难，你能帮助算出：在满足小明要求的前提下，最少要换给他多少张钞票吗？\n（5元，2元，1元面额的必须都有，不能是0）\n\n## 分析\n这个题目手算都可以算出来，编程的话  也行， 像我懒得算直接写个循环给他跑一下就行了。\n\n## 题解\n\n```C++\n\n# include <bits/stdc++.h>\nusing namespace std;\nint main(){\n    int $1 , $2 , $5;\n    for ($1 = 5; $1 < 200; $1 = $1 + 5){\n        $2 = 10 * $1;\n        if((200 - $1 - $2 * 2) % 5 == 0){\n            $5 = (200 - $1 - $2 * 2) / 5;\n            break;\n        }\n    }\n    cout << $1 + $2 + $5 << endl;\n    return 0;\n}\n\n```\n\n答案 ：　74\n\n\n# 激光样式\nx星球的盛大节日为增加气氛，用30台机光器一字排开，向太空中打出光柱。\n安装调试的时候才发现，不知什么原因，相邻的两台激光器不能同时打开！\n国王很想知道，在目前这种bug存在的情况下，一共能打出多少种激光效果？\n显然，如果只有3台机器，一共可以成5种样式，即：\n全都关上（sorry, 此时无声胜有声，这也算一种）\n开一台，共3种\n开两台，只1种\n30台就不好算了，国王只好请你帮忙了。\n要求提交一个整数，表示30台激光器能形成的样式种数。\n\n## 分析\n这道题一开始拿上手，好的写个dfs\n完了，怎么写来着　\n写了两次，　不熟啊，　bfs比较熟，但怎么写。。。\n卡了好久，　要不先写后面的吧\n瞅了眼格雷码　。。　题目难度是有个梯度的吧　　\n哇，我不会卡在这么简单的第二题吧\n然后就开始列出数据找规律了(我也不知道我怎么就觉得会有规律)\n估计也是到了绝境\n\n好的，出来了　激动的一匹！\n｀｀｀\n台数　　　开的样式\n 1　　　　　2\n 2　　　　　3\n 3　　　　　5\n 4　　　　　8\n 5　　　　　13\n\n｀｀｀\n这是个什么？　　看着它总觉得特别亲切！　哈哈哈\n\n对的　就是个斐波那契数列。\n\n那就是求fib的第　(30 + 2) 项的值就行了 （因为一台是从第三项开始）\n\n## 题解\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\nint main(){\n    int a = 1, b = 1;\n    for (int i= 0; i < 30 ; i ++)\n        swap(a , b) , a = a + b;\n    cout << a << endl;\n    return 0;\n}\n```\n\n答案 ：2178309\n\n当然  dfs 也是可以的:\n```C++\n#include <iostream>\nusing namespace std;\nint cnt = 0;\nvoid dfs(int t,bool status){\n    if( t == 30){\n        cnt++;\n        return;\n    }\n    if(status==0){\n        dfs( t + 1 , 1);\n        dfs( t + 1 , 0);\n    }\n    else dfs( t + 1 , 0);\n}\nint main(){\n    dfs(0 , 0);\n    cout << cnt;\n    return 0;\n}\n\n```\n\n# 格雷码\n\n格雷码是以n位的二进制来表示数。\n与普通的二进制表示不同的是，它要求相邻两个数字只能有1个数位不同。\n首尾两个数字也要求只有1位之差。\n有很多算法来生成格雷码。以下是较常见的一种：\n从编码全0开始生成。\n当产生第奇数个数时，只把当前数字最末位改变（0变1，1变0）\n当产生第偶数个数时，先找到最右边的一个1，把它左边的数字改变。\n用这个规则产生的4位格雷码序列如下：\n0000\n0001\n0011\n0010\n0110\n0111\n0101\n0100\n1100\n1101\n1111\n1110\n1010\n1011\n1001\n1000\n以下是实现代码，仔细分析其中逻辑，并填写划线部分缺少的代码。\n\n```C++\n#include <stdio.h>  \nvoid show(int a,int n)  \n{  \n    int i;  \n    int msk = 1;  \n    for(i=0; i<n-1; i++) msk = msk << 1;  \n    for(i=0; i<n; i++){  \n        printf((a & msk)? \"1\" : \"0\");  \n        msk = msk >> 1;  \n    }  \n    printf(\"\\n\");  \n}   \n\nvoid f(int n)  \n{  \n    int i;  \n    int num = 1;  \n    for(i=0; i<n; i++) num = num<<1;  \n\n    int a = 0;  \n    for(i=0; i<num; i++){  \n        show(a,n);  \n\n        if(i%2==0){  \n            a = a ^ 1;  \n        }  \n        else{  \n            a = _________________________ ; //填空  \n        }  \n    }  \n}  \n\nint main()  \n{  \n    f(4);  \n    return 0;  \n}  \n```\n\n## 分析\n分析不来啊， 没见过 ， 直接上  ，  一个空 ， 我感觉得几行啊\n想想几行应该怎么合成一行呢 ， 三目运算！\n可是一个也不够用啊 ，  那就用几个呗\n23333  丧心病狂的我  就这样交了上去（还以为是对的，就是想让我们用三目运算符）\n见识短浅啊  后来问郭佬才知道是 lowbit（树状数组）的解法去解\n具体lowbit 是什么 ， 详见百度吧\nhttps://zh.wikipedia.org/wiki/树状数组\n```C++\nint lowbit(int x)\n{\n    return x&(-x);\n}\n```\n\n答案：a^((a&(-a))<<1)\n","source":"_posts/补蓝桥杯国赛.md","raw":"---\ntitle: 补蓝桥杯国赛\ndate: 2018-09-03 08:00:57\ntags:\n    - 经历\n    - C/C++题目\ncategories: C/C++\ndescription: 第九届蓝桥杯复赛。\n---\n\n时间:2018年5月\n地点：首都经济贸易大学\n事件：第九届蓝桥杯国赛\n\n# 换零钞\nx星球的钞票的面额只有：100元，5元，2元，1元，共4种。\n小明去x星旅游，他手里只有2张100元的x星币，太不方便，恰好路过x星银行就去换零钱。\n小明有点强迫症，他坚持要求200元换出的零钞中2元的张数刚好是1元的张数的10倍，\n剩下的当然都是5元面额的。\n银行的工作人员有点为难，你能帮助算出：在满足小明要求的前提下，最少要换给他多少张钞票吗？\n（5元，2元，1元面额的必须都有，不能是0）\n\n## 分析\n这个题目手算都可以算出来，编程的话  也行， 像我懒得算直接写个循环给他跑一下就行了。\n\n## 题解\n\n```C++\n\n# include <bits/stdc++.h>\nusing namespace std;\nint main(){\n    int $1 , $2 , $5;\n    for ($1 = 5; $1 < 200; $1 = $1 + 5){\n        $2 = 10 * $1;\n        if((200 - $1 - $2 * 2) % 5 == 0){\n            $5 = (200 - $1 - $2 * 2) / 5;\n            break;\n        }\n    }\n    cout << $1 + $2 + $5 << endl;\n    return 0;\n}\n\n```\n\n答案 ：　74\n\n\n# 激光样式\nx星球的盛大节日为增加气氛，用30台机光器一字排开，向太空中打出光柱。\n安装调试的时候才发现，不知什么原因，相邻的两台激光器不能同时打开！\n国王很想知道，在目前这种bug存在的情况下，一共能打出多少种激光效果？\n显然，如果只有3台机器，一共可以成5种样式，即：\n全都关上（sorry, 此时无声胜有声，这也算一种）\n开一台，共3种\n开两台，只1种\n30台就不好算了，国王只好请你帮忙了。\n要求提交一个整数，表示30台激光器能形成的样式种数。\n\n## 分析\n这道题一开始拿上手，好的写个dfs\n完了，怎么写来着　\n写了两次，　不熟啊，　bfs比较熟，但怎么写。。。\n卡了好久，　要不先写后面的吧\n瞅了眼格雷码　。。　题目难度是有个梯度的吧　　\n哇，我不会卡在这么简单的第二题吧\n然后就开始列出数据找规律了(我也不知道我怎么就觉得会有规律)\n估计也是到了绝境\n\n好的，出来了　激动的一匹！\n｀｀｀\n台数　　　开的样式\n 1　　　　　2\n 2　　　　　3\n 3　　　　　5\n 4　　　　　8\n 5　　　　　13\n\n｀｀｀\n这是个什么？　　看着它总觉得特别亲切！　哈哈哈\n\n对的　就是个斐波那契数列。\n\n那就是求fib的第　(30 + 2) 项的值就行了 （因为一台是从第三项开始）\n\n## 题解\n\n```C++\n# include <bits/stdc++.h>\nusing namespace std;\nint main(){\n    int a = 1, b = 1;\n    for (int i= 0; i < 30 ; i ++)\n        swap(a , b) , a = a + b;\n    cout << a << endl;\n    return 0;\n}\n```\n\n答案 ：2178309\n\n当然  dfs 也是可以的:\n```C++\n#include <iostream>\nusing namespace std;\nint cnt = 0;\nvoid dfs(int t,bool status){\n    if( t == 30){\n        cnt++;\n        return;\n    }\n    if(status==0){\n        dfs( t + 1 , 1);\n        dfs( t + 1 , 0);\n    }\n    else dfs( t + 1 , 0);\n}\nint main(){\n    dfs(0 , 0);\n    cout << cnt;\n    return 0;\n}\n\n```\n\n# 格雷码\n\n格雷码是以n位的二进制来表示数。\n与普通的二进制表示不同的是，它要求相邻两个数字只能有1个数位不同。\n首尾两个数字也要求只有1位之差。\n有很多算法来生成格雷码。以下是较常见的一种：\n从编码全0开始生成。\n当产生第奇数个数时，只把当前数字最末位改变（0变1，1变0）\n当产生第偶数个数时，先找到最右边的一个1，把它左边的数字改变。\n用这个规则产生的4位格雷码序列如下：\n0000\n0001\n0011\n0010\n0110\n0111\n0101\n0100\n1100\n1101\n1111\n1110\n1010\n1011\n1001\n1000\n以下是实现代码，仔细分析其中逻辑，并填写划线部分缺少的代码。\n\n```C++\n#include <stdio.h>  \nvoid show(int a,int n)  \n{  \n    int i;  \n    int msk = 1;  \n    for(i=0; i<n-1; i++) msk = msk << 1;  \n    for(i=0; i<n; i++){  \n        printf((a & msk)? \"1\" : \"0\");  \n        msk = msk >> 1;  \n    }  \n    printf(\"\\n\");  \n}   \n\nvoid f(int n)  \n{  \n    int i;  \n    int num = 1;  \n    for(i=0; i<n; i++) num = num<<1;  \n\n    int a = 0;  \n    for(i=0; i<num; i++){  \n        show(a,n);  \n\n        if(i%2==0){  \n            a = a ^ 1;  \n        }  \n        else{  \n            a = _________________________ ; //填空  \n        }  \n    }  \n}  \n\nint main()  \n{  \n    f(4);  \n    return 0;  \n}  \n```\n\n## 分析\n分析不来啊， 没见过 ， 直接上  ，  一个空 ， 我感觉得几行啊\n想想几行应该怎么合成一行呢 ， 三目运算！\n可是一个也不够用啊 ，  那就用几个呗\n23333  丧心病狂的我  就这样交了上去（还以为是对的，就是想让我们用三目运算符）\n见识短浅啊  后来问郭佬才知道是 lowbit（树状数组）的解法去解\n具体lowbit 是什么 ， 详见百度吧\nhttps://zh.wikipedia.org/wiki/树状数组\n```C++\nint lowbit(int x)\n{\n    return x&(-x);\n}\n```\n\n答案：a^((a&(-a))<<1)\n","slug":"补蓝桥杯国赛","published":1,"updated":"2020-02-06T22:40:22.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9bp005d24uwuce70hjz","content":"<p>时间:2018年5月<br>地点：首都经济贸易大学<br>事件：第九届蓝桥杯国赛</p>\n<h1 id=\"换零钞\"><a href=\"#换零钞\" class=\"headerlink\" title=\"换零钞\"></a>换零钞</h1><p>x星球的钞票的面额只有：100元，5元，2元，1元，共4种。<br>小明去x星旅游，他手里只有2张100元的x星币，太不方便，恰好路过x星银行就去换零钱。<br>小明有点强迫症，他坚持要求200元换出的零钞中2元的张数刚好是1元的张数的10倍，<br>剩下的当然都是5元面额的。<br>银行的工作人员有点为难，你能帮助算出：在满足小明要求的前提下，最少要换给他多少张钞票吗？<br>（5元，2元，1元面额的必须都有，不能是0）</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这个题目手算都可以算出来，编程的话  也行， 像我懒得算直接写个循环给他跑一下就行了。</p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> $<span class=\"number\">1</span> , $<span class=\"number\">2</span> , $<span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($<span class=\"number\">1</span> = <span class=\"number\">5</span>; $<span class=\"number\">1</span> &lt; <span class=\"number\">200</span>; $<span class=\"number\">1</span> = $<span class=\"number\">1</span> + <span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">        $<span class=\"number\">2</span> = <span class=\"number\">10</span> * $<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((<span class=\"number\">200</span> - $<span class=\"number\">1</span> - $<span class=\"number\">2</span> * <span class=\"number\">2</span>) % <span class=\"number\">5</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            $<span class=\"number\">5</span> = (<span class=\"number\">200</span> - $<span class=\"number\">1</span> - $<span class=\"number\">2</span> * <span class=\"number\">2</span>) / <span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; $<span class=\"number\">1</span> + $<span class=\"number\">2</span> + $<span class=\"number\">5</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案 ：　74</p>\n<h1 id=\"激光样式\"><a href=\"#激光样式\" class=\"headerlink\" title=\"激光样式\"></a>激光样式</h1><p>x星球的盛大节日为增加气氛，用30台机光器一字排开，向太空中打出光柱。<br>安装调试的时候才发现，不知什么原因，相邻的两台激光器不能同时打开！<br>国王很想知道，在目前这种bug存在的情况下，一共能打出多少种激光效果？<br>显然，如果只有3台机器，一共可以成5种样式，即：<br>全都关上（sorry, 此时无声胜有声，这也算一种）<br>开一台，共3种<br>开两台，只1种<br>30台就不好算了，国王只好请你帮忙了。<br>要求提交一个整数，表示30台激光器能形成的样式种数。</p>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题一开始拿上手，好的写个dfs<br>完了，怎么写来着　<br>写了两次，　不熟啊，　bfs比较熟，但怎么写。。。<br>卡了好久，　要不先写后面的吧<br>瞅了眼格雷码　。。　题目难度是有个梯度的吧　　<br>哇，我不会卡在这么简单的第二题吧<br>然后就开始列出数据找规律了(我也不知道我怎么就觉得会有规律)<br>估计也是到了绝境</p>\n<p>好的，出来了　激动的一匹！<br>｀｀｀<br>台数　　　开的样式<br> 1　　　　　2<br> 2　　　　　3<br> 3　　　　　5<br> 4　　　　　8<br> 5　　　　　13</p>\n<p>｀｀｀<br>这是个什么？　　看着它总觉得特别亲切！　哈哈哈</p>\n<p>对的　就是个斐波那契数列。</p>\n<p>那就是求fib的第　(30 + 2) 项的值就行了 （因为一台是从第三项开始）</p>\n<h2 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i= <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span> ; i ++)</span><br><span class=\"line\">        swap(a , b) , a = a + b;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案 ：2178309</p>\n<p>当然  dfs 也是可以的:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> t,<span class=\"keyword\">bool</span> status)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( t == <span class=\"number\">30</span>)&#123;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(status==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        dfs( t + <span class=\"number\">1</span> , <span class=\"number\">1</span>);</span><br><span class=\"line\">        dfs( t + <span class=\"number\">1</span> , <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> dfs( t + <span class=\"number\">1</span> , <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    dfs(<span class=\"number\">0</span> , <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; cnt;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"格雷码\"><a href=\"#格雷码\" class=\"headerlink\" title=\"格雷码\"></a>格雷码</h1><p>格雷码是以n位的二进制来表示数。<br>与普通的二进制表示不同的是，它要求相邻两个数字只能有1个数位不同。<br>首尾两个数字也要求只有1位之差。<br>有很多算法来生成格雷码。以下是较常见的一种：<br>从编码全0开始生成。<br>当产生第奇数个数时，只把当前数字最末位改变（0变1，1变0）<br>当产生第偶数个数时，先找到最右边的一个1，把它左边的数字改变。<br>用这个规则产生的4位格雷码序列如下：<br>0000<br>0001<br>0011<br>0010<br>0110<br>0111<br>0101<br>0100<br>1100<br>1101<br>1111<br>1110<br>1010<br>1011<br>1001<br>1000<br>以下是实现代码，仔细分析其中逻辑，并填写划线部分缺少的代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> n)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> msk = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;n<span class=\"number\">-1</span>; i++) msk = msk &lt;&lt; <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;n; i++)&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>((a &amp; msk)? <span class=\"string\">\"1\"</span> : <span class=\"string\">\"0\"</span>);  </span><br><span class=\"line\">        msk = msk &gt;&gt; <span class=\"number\">1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);  </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;n; i++) num = num&lt;&lt;<span class=\"number\">1</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;num; i++)&#123;  </span><br><span class=\"line\">        show(a,n);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i%<span class=\"number\">2</span>==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            a = a ^ <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            a = _________________________ ; <span class=\"comment\">//填空  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    f(<span class=\"number\">4</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>分析不来啊， 没见过 ， 直接上  ，  一个空 ， 我感觉得几行啊<br>想想几行应该怎么合成一行呢 ， 三目运算！<br>可是一个也不够用啊 ，  那就用几个呗<br>23333  丧心病狂的我  就这样交了上去（还以为是对的，就是想让我们用三目运算符）<br>见识短浅啊  后来问郭佬才知道是 lowbit（树状数组）的解法去解<br>具体lowbit 是什么 ， 详见百度吧<br><a href=\"https://zh.wikipedia.org/wiki/树状数组\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/树状数组</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&amp;(-x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案：a^((a&amp;(-a))&lt;&lt;1)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>时间:2018年5月<br>地点：首都经济贸易大学<br>事件：第九届蓝桥杯国赛</p>\n<h1 id=\"换零钞\"><a href=\"#换零钞\" class=\"headerlink\" title=\"换零钞\"></a>换零钞</h1><p>x星球的钞票的面额只有：100元，5元，2元，1元，共4种。<br>小明去x星旅游，他手里只有2张100元的x星币，太不方便，恰好路过x星银行就去换零钱。<br>小明有点强迫症，他坚持要求200元换出的零钞中2元的张数刚好是1元的张数的10倍，<br>剩下的当然都是5元面额的。<br>银行的工作人员有点为难，你能帮助算出：在满足小明要求的前提下，最少要换给他多少张钞票吗？<br>（5元，2元，1元面额的必须都有，不能是0）</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这个题目手算都可以算出来，编程的话  也行， 像我懒得算直接写个循环给他跑一下就行了。</p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> $<span class=\"number\">1</span> , $<span class=\"number\">2</span> , $<span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($<span class=\"number\">1</span> = <span class=\"number\">5</span>; $<span class=\"number\">1</span> &lt; <span class=\"number\">200</span>; $<span class=\"number\">1</span> = $<span class=\"number\">1</span> + <span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">        $<span class=\"number\">2</span> = <span class=\"number\">10</span> * $<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((<span class=\"number\">200</span> - $<span class=\"number\">1</span> - $<span class=\"number\">2</span> * <span class=\"number\">2</span>) % <span class=\"number\">5</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            $<span class=\"number\">5</span> = (<span class=\"number\">200</span> - $<span class=\"number\">1</span> - $<span class=\"number\">2</span> * <span class=\"number\">2</span>) / <span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; $<span class=\"number\">1</span> + $<span class=\"number\">2</span> + $<span class=\"number\">5</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案 ：　74</p>\n<h1 id=\"激光样式\"><a href=\"#激光样式\" class=\"headerlink\" title=\"激光样式\"></a>激光样式</h1><p>x星球的盛大节日为增加气氛，用30台机光器一字排开，向太空中打出光柱。<br>安装调试的时候才发现，不知什么原因，相邻的两台激光器不能同时打开！<br>国王很想知道，在目前这种bug存在的情况下，一共能打出多少种激光效果？<br>显然，如果只有3台机器，一共可以成5种样式，即：<br>全都关上（sorry, 此时无声胜有声，这也算一种）<br>开一台，共3种<br>开两台，只1种<br>30台就不好算了，国王只好请你帮忙了。<br>要求提交一个整数，表示30台激光器能形成的样式种数。</p>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题一开始拿上手，好的写个dfs<br>完了，怎么写来着　<br>写了两次，　不熟啊，　bfs比较熟，但怎么写。。。<br>卡了好久，　要不先写后面的吧<br>瞅了眼格雷码　。。　题目难度是有个梯度的吧　　<br>哇，我不会卡在这么简单的第二题吧<br>然后就开始列出数据找规律了(我也不知道我怎么就觉得会有规律)<br>估计也是到了绝境</p>\n<p>好的，出来了　激动的一匹！<br>｀｀｀<br>台数　　　开的样式<br> 1　　　　　2<br> 2　　　　　3<br> 3　　　　　5<br> 4　　　　　8<br> 5　　　　　13</p>\n<p>｀｀｀<br>这是个什么？　　看着它总觉得特别亲切！　哈哈哈</p>\n<p>对的　就是个斐波那契数列。</p>\n<p>那就是求fib的第　(30 + 2) 项的值就行了 （因为一台是从第三项开始）</p>\n<h2 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i= <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span> ; i ++)</span><br><span class=\"line\">        swap(a , b) , a = a + b;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案 ：2178309</p>\n<p>当然  dfs 也是可以的:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> t,<span class=\"keyword\">bool</span> status)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( t == <span class=\"number\">30</span>)&#123;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(status==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        dfs( t + <span class=\"number\">1</span> , <span class=\"number\">1</span>);</span><br><span class=\"line\">        dfs( t + <span class=\"number\">1</span> , <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> dfs( t + <span class=\"number\">1</span> , <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    dfs(<span class=\"number\">0</span> , <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; cnt;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"格雷码\"><a href=\"#格雷码\" class=\"headerlink\" title=\"格雷码\"></a>格雷码</h1><p>格雷码是以n位的二进制来表示数。<br>与普通的二进制表示不同的是，它要求相邻两个数字只能有1个数位不同。<br>首尾两个数字也要求只有1位之差。<br>有很多算法来生成格雷码。以下是较常见的一种：<br>从编码全0开始生成。<br>当产生第奇数个数时，只把当前数字最末位改变（0变1，1变0）<br>当产生第偶数个数时，先找到最右边的一个1，把它左边的数字改变。<br>用这个规则产生的4位格雷码序列如下：<br>0000<br>0001<br>0011<br>0010<br>0110<br>0111<br>0101<br>0100<br>1100<br>1101<br>1111<br>1110<br>1010<br>1011<br>1001<br>1000<br>以下是实现代码，仔细分析其中逻辑，并填写划线部分缺少的代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> n)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> msk = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;n<span class=\"number\">-1</span>; i++) msk = msk &lt;&lt; <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;n; i++)&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>((a &amp; msk)? <span class=\"string\">\"1\"</span> : <span class=\"string\">\"0\"</span>);  </span><br><span class=\"line\">        msk = msk &gt;&gt; <span class=\"number\">1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);  </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;n; i++) num = num&lt;&lt;<span class=\"number\">1</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;num; i++)&#123;  </span><br><span class=\"line\">        show(a,n);  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i%<span class=\"number\">2</span>==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            a = a ^ <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            a = _________________________ ; <span class=\"comment\">//填空  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    f(<span class=\"number\">4</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>分析不来啊， 没见过 ， 直接上  ，  一个空 ， 我感觉得几行啊<br>想想几行应该怎么合成一行呢 ， 三目运算！<br>可是一个也不够用啊 ，  那就用几个呗<br>23333  丧心病狂的我  就这样交了上去（还以为是对的，就是想让我们用三目运算符）<br>见识短浅啊  后来问郭佬才知道是 lowbit（树状数组）的解法去解<br>具体lowbit 是什么 ， 详见百度吧<br><a href=\"https://zh.wikipedia.org/wiki/树状数组\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/树状数组</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&amp;(-x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案：a^((a&amp;(-a))&lt;&lt;1)</p>\n"},{"title":"配置apache-tomcat","date":"2018-09-22T01:28:13.000Z","description":null,"_content":"\n\n官网下载\n然后解压\n# 问题1\nCannot find /usr/local/apache-tomcat-6.0.30//bin/setclasspath.sh\nThis file is needed to run this program\n\n\n\n# 问题2\n运行setclasspath.sh报错  找不到jdk\n方法：\n编辑setclasspath.sh  在文件开始添加jdk的位置\n\nCATALINA_HOME=/usr/local/apache-tomcat/\nJAVA_HOME= JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64\n这两个加在文件前面  目录一定要正确\n\n\njava -verbose 可以查看jdk位置\n/usr/lib/jvm/java-11-openjdk-amd64/lib/modules\n","source":"_posts/配置apache-tomcat.md","raw":"---\ntitle: 配置apache-tomcat\ndate: 2018-09-22 09:28:13\ntags:\ncategories:\ndescription:\n---\n\n\n官网下载\n然后解压\n# 问题1\nCannot find /usr/local/apache-tomcat-6.0.30//bin/setclasspath.sh\nThis file is needed to run this program\n\n\n\n# 问题2\n运行setclasspath.sh报错  找不到jdk\n方法：\n编辑setclasspath.sh  在文件开始添加jdk的位置\n\nCATALINA_HOME=/usr/local/apache-tomcat/\nJAVA_HOME= JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64\n这两个加在文件前面  目录一定要正确\n\n\njava -verbose 可以查看jdk位置\n/usr/lib/jvm/java-11-openjdk-amd64/lib/modules\n","slug":"配置apache-tomcat","published":1,"updated":"2020-02-06T22:40:22.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck871n9bt005g24uwwprcxnyk","content":"<p>官网下载<br>然后解压</p>\n<h1 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h1><p>Cannot find /usr/local/apache-tomcat-6.0.30//bin/setclasspath.sh<br>This file is needed to run this program</p>\n<h1 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h1><p>运行setclasspath.sh报错  找不到jdk<br>方法：<br>编辑setclasspath.sh  在文件开始添加jdk的位置</p>\n<p>CATALINA_HOME=/usr/local/apache-tomcat/<br>JAVA_HOME= JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64<br>这两个加在文件前面  目录一定要正确</p>\n<p>java -verbose 可以查看jdk位置<br>/usr/lib/jvm/java-11-openjdk-amd64/lib/modules</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官网下载<br>然后解压</p>\n<h1 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h1><p>Cannot find /usr/local/apache-tomcat-6.0.30//bin/setclasspath.sh<br>This file is needed to run this program</p>\n<h1 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h1><p>运行setclasspath.sh报错  找不到jdk<br>方法：<br>编辑setclasspath.sh  在文件开始添加jdk的位置</p>\n<p>CATALINA_HOME=/usr/local/apache-tomcat/<br>JAVA_HOME= JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64<br>这两个加在文件前面  目录一定要正确</p>\n<p>java -verbose 可以查看jdk位置<br>/usr/lib/jvm/java-11-openjdk-amd64/lib/modules</p>\n"},{"title":"面试专题","author":"edxuanlen","top":true,"cover":false,"toc":true,"mathjax":false,"date":"2020-03-13T06:46:51.000Z","img":null,"coverImg":null,"password":null,"summary":null,"description":"Java面试常见问题","_content":"\n## 操作系统\n\n### 进程和线程\n\n\n#### 进程和线程的区别\n\n进程是操作系统资源分配的最小单位\n线程是程序执行的最小单位\n\n进程有独立的内存空间，线程共享进程的内存空间\n\n#### 线程调度\n\n- 时间片轮转调度\n- 先来先服务调度\n- 高优先权优先调度\n\n#### 线程切换步骤\n\n线程的上下文切换，切换的代价\n\n\n\n#### 线程间通信 -- IPC\n\n- 共享内存\n- UnixSocket\n- MessageQueue\n- Signal\n- Semaphore\n- Pipe\n\n#### 协程\n\n- 协程既不是进程也不是线程，协程仅仅是一个特殊的函数，协程它进程和进程不是一个维度的。\n- 一个进程可以包含多个线程，一个线程可以包含多个协程。\n\n更轻量化，在用户态调用，代价比线程上下文切换低，Java第三方协程框架\n\n\n\n\n## 网络\n\n### OSI七层协议\n\nOSI 并不是一个标准，只是一个概念型框架\n\n![七层](七层.jpg)\n\n- 物理层  \n    + 传输比特流  \n    + 定义了物理设备的标准(网线类型，光纤接口等)\n    + 单位比特\n    + 网卡也在这一层工作\n\n- 数据链路层\n    + 定义了如何格式化数据进行传输，控制物理介质的访问\n    + 错误检测，纠正\n    + 将比特数据组成帧，交换机在这层，对帧解码并发送到正确的接收方\n\n- 网络层\n    + 把网络地址翻译为物理地址\n    + 决定数据如何从发送方路由到接收方\n    + 路由器属于网络层\n    + 数据包\n    + 协议: **IP**\n\n- 传输层\n    + 解决主机间的数据传输\n    + OSI中最主要的一层\n    + 传输协议同时进行流量控制\n    + 将数据包强行分割(分割成数据片并给予序列号)\n    + TCP协议和UDP协议\n\n- 会话层\n    + 自动收发，自动寻址\n    + 建立和管理应用程序之间的通信\n    + 解决不同系统之间的通信语法的问题\n\n- 表示层\n    +  网络协议，需要固定长度，组成的消息头\n    + 更方便接收方了解接收的包\n\n- 应用层\n    + 更方便的应用接收到的数据\n    + HTTP协议\n\n先自上(应用层)而下添加数据头，后自下而上处理数据头部\n\n\n### OSI的标准:TCP/IP\n\n![TCP/IP](TCP_IP.png)  \n\n先自上(应用层)而下添加数据头，后自下而上处理数据头部\n\n![TCP/IP](TCP_IP1.png)  \n\n\n### TCP三次握手\n\n基于字节流，将应用层的数据流分割成报文段并发送给目标节点的TCP层  \n数据包都有序号，对方收到则发送确认ACK确认，未收到则重传。  \n使用校验和来校验的数据在传输过程中是否有误。  \n\n![TCP报文](TCP报文.png)\n\nTCP Flags:\n\n+ URG: 紧急指针标志 urgent\n+ ACK: 确认序号标志 acknowledgment\n+ PSH: push 标志\n+ RST: 重置连接标志 Reset\n+ SYN: 同步序号，用于建立连接过程\n+ FIN: finish标志，释放连接\n\nSYN = 1， ACK = 0 请求链接\n\n#### A => B 通信过程\n\nA 打开 发送SYN = 1, seq = x,进入SYN_SEND状态，等待服务器确认\n\nB 被动打开 发送 SYN = 1, ACK = 1, seq = y, ack = x + 1，此时服务器进入SYN_RECV状态\n\nA 接收后发送 ACK = 1, seq = x + 1, ack = y + 1 ，双方进入ESTABLISHED状态\n\n![三次握手](三次握手.png)\n\n#### 为什么需要三次握手\n\n为了初始化Sequence Number 的初始值\n\n起因:\n> Server接收到Client的SYN，回复SYN-ACK的时候未收到ACK\n> Server不断充实直至超时，Linux默认等待63秒才断开连接\n\n针对SYN Flood的防护措施\n\n### TCP的四次挥手\n\n#### A => B 四次挥手\n\nA: FIN = 1, seq = u, FIN_WAIT_1\nB: ACK = 1, seq = v, ack = u + 1  ,进入CLOSE_WAIT状态(半关闭状态)， 客户端进入 FIN_WAIT_2  \nB: FIN = 1, ACK = 1, seq = w, ack = u + 1, LAST_ACK  \nA: ACK = 1, seq = u + 1m, ack = w + 1, TIMEWAIT (2 * MSL)\n\n![四次挥手](四次挥手.png)\n\n#### 为什么又TIME_WAIT状态\n\n(2MSL) 两倍最大报文段传输时间\n\n原因:\n\n+ 确保有足够的时间让对方收到ACK包  \n+ 避免新旧连接混淆\n\n#### 为什么需要四次握手才能断开连接\n\n因为全双工，发送方和接收方都需要FIN报文和ACK报文\n\n#### 服务器出现大量CLOSE_WAIT状态的原因\n\n对方关闭socket连接，我方忙于读写，没有及时关闭连接\n\n+ 检查代码，特别是释放资源的代码\n+ 检查配置，特别是处理请求的线程配置  \n\n### UDP\n\n#### UDP 特点\n\n+ 面向非连接\n+ 不维护连接状态。支持同时向多个客户端传输相同的消息\n+ 数据包报头只有8字节，额外开销小\n+ 吞吐量只受限于数据生成速率、传输速率以及机器性能\n+ 尽量交付，不需要维护复杂的状态表\n\n#### TCP 和 UDP 的区别\n\n+ 面向链接 vs 无连接\n+ 可靠 vs 不可靠\n+ 有序性 vs 无序性\n+ 速度慢 vs 速度快\n+ 重量级(20) vs 轻量级(8)\n\n#### TCP 滑动窗口\n\n+ RTT: 发送数据包到收到对应ACK\n+ RTO: 重传时间间隔\n\nRTO 由 RTT 计算\n\n滑动窗口: 流量控制和乱序重排\n\n### HTTP\n\n超文本传输协议\n\n- 支持客户/服务器模式 (Client - Server)\n- 简单快速 (get/post)\n- 灵活\n\nHTTP 请求步骤\n\n- 客户端连接到web服务器\n- 发送HTTP请求\n- 服务器接受并返回HTTP响应\n- 释放连接TCP连接\n- 客户端浏览器解析HTML内容\n\n##### 在浏览器地址栏键入一个URL，按下回车之后经历的流程\n\n- 逐层DNS解析\n- TCP连接(3次)\n- 发送HTTP请求\n- 服务器处理请求并返回HTTP报文\n- 浏览器解析渲染\n- 连接结束(4次挥手)\n\n#### HTTP 状态码\n\n五种可能的取值\n\n- 1XX: 指示信息--表示请求已经接收，继续处理\n- 2xx: 成功-- 表示请求已被成功接收、理解、接受\n- 3xx: 重定向--要完成请求必须进行进一步操作\n- 4xx: 客户端错误--请求有语法错误或请求无法实现\n- 5xx: 服务器端错误--服务器未能实现合法的请求\n\n常见状态码\n\n- 200 OK: 正常返回\n- 400 Bad Request:客户端请求有语法错误，无法被服务器理解\n- 401 Unauthorized: 请求未经授权，这个状态代码必须和WWW-Authenticate 报头域一起使用\n- 403 Forbidden: 服务器收到请求，但是拒绝提供服务\n- 404 Not Found: 请求资源不存在 (例如输入了错误的URL)\n- 500 Internal Server Error: 服务器发生了不可预期的错误\n- 503 Server Unavailable: 服务器当前不能处理客户端的请求，一段时间后可能恢复正常。  \n\n#### GET 和 POST 请求的区别\n\n从三个层面来解答\n\n- HTTP报文层面，GET将请求信息放在URL，POST放在报文体中\n- 数据库层次: GET符合幂等性和安全性，POST不符合\n- 其他层面: GET可以被缓存、被存储，而POST不行\n\n#### Cookie 和 Session的区别\n\n##### Cookie\n\n- 是由服务器发给客户端的特殊信息，以文本的形式存放在客户端\n- 客户端再次请求的时候，会把Cookie回发 \n- 服务器接收到后，会解析Cookie生成与客户端相对应的内容\n\n发送过程\n\n- Client => HTTP req Server\n- Client <= HTTP resp + set-Cookie Server\n- Client => HTTP req + Cookie Server\n- Client <= HTTP resp Server\n\n##### Session\n\n- 服务器端的机制，在服务器上保存的信息\n- 解析客户端请求并操作session id ，按需保存状态信息\n\n实现方式\n\n1. Cookie 来实现\n2. URL来回写实现(如果Cookie被禁用)\n\n- Client => req Server\n- Client <= resp + set-Cookie:JSESSIONID=xxx Server\n- Client => req + Cookie:JSESSIONID=xxx Server\n- Client <= resp server\n\n##### 区别\n\n1. Cookie 数据存放在客户的浏览器，Session数据存放在服务器上\n2. Session相对于Cookie 更安全\n3. 若考虑减轻服务器负担，应当使用Cookie\n\n### HTTP 和 HTTPS\n\n\nHTTP TCP IP\nHTTPS SSL/TLS TCP IP\n\n保护交换数据隐私，安全版的HTTP\n\n#### SSL\n\n(security sockets layer, 安全套接层)\n\n- 为网络通信提供安全及数据完整性的一种安全协议\n- 是操作系统对外的API，SSL3.0后更名为TLS\n- 采用身份验证和数据加密保证网络通信的安全和数据的完整性\n\nHTTPS 数据传输流程\n\n- 浏览器将支持的加密算法信息发送给服务器\n- 服务器选择一套浏览器支持的加密算法，以证书的形式发回给浏览器(CA机构，有效期，公钥，所有者)\n- 浏览器验证证书的合法性，并结合证书公钥加密信息发送给服务器\n- 服务器使用私钥解密信息，验证哈希，加密相应信息回发浏览器\n- 浏览器解密响应消息，并对消息进行验证，之后进行加密交互数据\n\n#### HTTP和HTTPS的区别\n\n- HTTPS需要到CA申请证书，HTTP不需要\n- HTTPS密文传输，HTTP明文传输\n- 连接方式不同，HTTPS默认使用443端口，HTTP使用80端口\n- HTTPS= HTTP+加密+认证+完整新保护，比HTTP更安全\n\nHTTP => HTTPS 301跳转也可能被劫持，因此要用HSTS优化\n\n### Socket\n\nSocket是对TOC/IP的抽象，是操作系统对外开放的接口\n\n#### Socket通信流程\n\n![Socket](socket.jpg)\n\n编写一个网络应用程序,有客户端与服务器端,客户端向服务器发送一个字符串,服务器收到该字符串后将其打印到命令行上,\n然后向客户端返回该字符串的长度,最后,客户端输出服务器端返回的该字符串的长度,分别用TCP和UDP两种方式去实现  \n\n## 数据库\n\n### 如何设计一个关系型数据库(RDBMS)\n\n1. 程序实例  \n    - 存储管理\n    - 缓存机制\n    - SQL 解析\n    - 日志管理\n    - 权限划分\n    - 容灾机制\n    - 索引管理\n    - 锁管理\n\n2. 存储(文件系统)\n\n### 索引模块\n\n#### 为什么要使用索引\n\n快速查询数据\n\n#### 什么信息能成为索引\n\n主键，唯一键以及普通键\n\n#### 索引的数据结构\n\n生成索引，建立二叉查找树进行二分查找\n生成索引，建立B-Tree 结构进行查找\n生成索引，建立B+Tree 结构进行查找\n生成索引，建立Hash结构进行查找\n\n![二叉树](二叉树.png)\n\n#### B Tree\n\n定义\n\n- 根节点至少包括两个孩子\n- 书中每个节点最多含有m铬孩子( m>= 2)\n- 除根节点和叶节点外，其他每个节点至少有ceil(m/2)个孩子\n- 所有叶子节点都位于同一层\n- 假设每个非终端节点中包含有n个关键字信息，其中：\n    1. Ki(i=1...n)为关键字，且关键字按顺序升序排序K(i-1) < Ki\n    2. 关键是个数满足: [ceil(m / 2) - 1] <= n <= m - 1\n    3. 非叶子节点的指针:P[1],P[2],... P[M], P[1]指向的关键字小于K[1]的子树，\n        P[M]指向关键字大于P[M -1] 的子树，其他P[i]指向关键字属于(K[i-1], K[i])的子树\n\n#### B+ Tree\n\nB+ 树是B树的变体，其定义基本与B树相同，除了：\n    - 非叶子节点的子树指针与关键字个数相同\n    - 非叶子节点的子树指针P[i],指向关键字值([K[i],K[i+1])\n    - 非叶子节点仅用来索引，数据都保存在叶子节点中\n    - 所有叶子节点均有一个链指针指向下一个叶子节点\n\n#### 结论\n\nB+ Tree更适合用来做存储索引\n    - B+ Tree 的磁盘读写代价更低\n    - B+ Tree 的查询效率更加稳定\n    - B+ Tree 更加有利于对数据库的扫描\n\n#### Hash索引\n\n优点 查询速度O(1)\n缺点:\n\n- 仅仅能够满足'=','IN', 不能使用范围查询\n- 无法被用来避免数据的排序操作\n- 不能利用部分索引键查询\n- 不能避免表扫描\n- 遇到大量Hash值相等的情况后性能并不一定会比B Tree索引高\n\n#### 密集索引和稀疏索引的区别\n\n- 密集索引文件中的每个搜索码值都对应一个索引值\n- 稀疏索引只为某些值建立索引项\n\n##### InnoDB\n\n- 若一个主键被定义，该主键则作为密集索引\n- 若没有主键被定义，该表的第一个唯一非空索引则作为密集索引\n- 若不满足以上条件，innodb内部会生成一个隐藏主键(密集索引)\n- 非主键索引存储相关键位和其对于的主键值，包含两次查找\n\nmyISAM索引和DB是分开的，InnoDB索引和DB是存放在一起的\n\n### 索引问答\n\nQ: 为什么要用索引  \nA: 避免全表扫描数据，提升检索效率\n\nQ: 什么样的信息能成为索引  \nA: 主键、唯一键等有区分性的数据\n\nQ: 索引的数据结构\nA: 主流是B+ Tree，以及hash结构 ， bitMap 等，mysql不支持bitmap，基于innoDB以及myISAM的mysql不显示支持hash\n\n\nQ: 密集索引和稀疏索引的区别\nA: 密集索引文件中的每个搜索码值都对应一个索引值，稀疏索引只为某些值建立索引项\n\n#### mysql\n\n##### 如何定位并优化慢查询sql\n\n- 根据慢日志定位慢查询sql\n\n- 使用explain等工具分析Sql\n    - type\n        - 表示: 找到数据行的方式\n        - index 索引查询 / ALL 证明是全局查找(需要优化)\n    - extra\n        - 出现以下两项意味着MYSQL根本不能使用索引，效率会受到重大影响，应尽可能对此进行优化\n        - Using filesort —— 无法利用索引排序\n        - Using temporary  —— 使用了临时表，order by 或者分组查询 group by\n\n- 修改sql 或者让sql尽量走索引  \n    - 使用有索引的字段代替\n    - 添加索引 alter table tb_name add index idx_name(name);\n\n\n##### 联合索引的最左匹配原则 \n\n\n#### 索引是建的越来越多好吗\n\n- 数据量小的表不需要建立索引，建立会增加额外的索引开销\n- 数据变更需要维护索引，因此更多的索引意味着更大的维护成本\n- 更多的索引意味着需要更多的空间\n\n#### 锁模块\n\n##### MyISAM与InnoDB关于锁方面的区别是什么\n\n- MyISAM 默认使用的是表级锁，不支持行级锁\n- InnoDB 默认用的是行级锁，也支持表级锁\n\n共享锁和排斥锁的兼容性\n\n<!-- Share && exclude\n\n|   | X    | S    |\n|---|------|------|\n| X | 冲突 | 冲突 |\n| S | 冲突 | 兼容 | -->\n\n行级锁不一定比表级锁好，锁的粒度越细，带价越高，需要扫描表到对应的对其上锁，代价是比较大的。  \n\nInnoDB 相比 MyISAM 带来了更大的开销。\n\n##### MyISAM适合的场景\n\n- 频繁执行全表count 语句\n- 对数据进行增删改的频率不高，查询非常频繁\n- 没有事务\n\n##### InnoDB适合的场景\n\n- 数据增删改查都相当频繁\n- 可靠性要求比较高，要求支持事务\n\n##### 数据库锁的分类\n\n- 按锁的粒度划分可以分为：表级锁，行级锁，页级锁\n- 按锁级别划分，可分为共享锁和排他锁\n- 按加锁方式划分，可分为自动锁，显示锁\n- 按操作划分可分为DML锁，DDL锁\n- 按使用方式划分，可分为乐观锁、悲观锁\n\n### 数据库事务的四大特性\n\nACID\n\n> * A:原子性,Atomicity\n> * C:一致性,Consistency\n> * I:隔离性,Isolation\n> * D:持久性,Durability\n\n### 事务鼓励级别以及各级别下的并发访问问题\n\n并发访问引起的问题和如何避免\n\n- 更新丢失-- mysql 所有事务隔离级别在数据库层面上均可避免\n- 脏读-- READ-COMMITTED事务隔离级别以上可避免\n- 不可重复读-- REPEATABLE-READ 事务隔离级别以上可避免\n- 幻读-- SERIABLIZABLE事务隔离级别可避免\n\n#### 脏读、不可重复读、幻象读概念说明\n\n1. 脏读：指当一个事务正字访问数据，并且对数据进行了修改，而这种数据还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据还没有提交那么另外一个事务读取到的这个数据我们称之为脏数据。依据脏数据所做的操作肯能是不正确的。  \n2. 不可重复读：指在一个事务内，多次读同一数据。在这个事务还没有执行结束，另外一个事务也访问该同一数据，那么在第一个事务中的两次读取数据之间，由于第二个事务的修改第一个事务两次读到的数据可能是不一样的，这样就发生了在一个事物内两次连续读到的数据是不一样的，这种情况被称为是不可重复读。\n3. 幻象读：一个事务先后读取一个范围的记录，但两次读取的纪录数不同，我们称之为幻象读（两次执行同一条 select 语句会出现不同的结果，第二次读会增加一数据行，并没有说这两次执行是在同一个事务中）  \n\n#### 如何避免\n\n| 事务隔离级别 | 更新丢失 | 脏读 | 不可重复读 | 幻读 |\n|--------------|----------|------|------------|------|\n| 未提交读     | 避免     | 发生 | 发生       | 发生 |\n| 已提交读     | 避免     | 避免 | 发生       | 发生 |\n| 可重复读     | 避免     | 避免 | 避免       | 发生 |\n| 串行化       | 避免     | 避免 | 避免       | 避免 |\n\n在mysql中的innodb引擎,原子性,一致性,隔离性通过redo和undo实现,redo 就是ib_logfile物理文件,而undo默认在共享表空间ibdata里面,通过设置参数可以独立出来.\n\n#### 数据库操作事务隔离\n\n##### 读取未提交的事务里面的数据(脏读)\n\n设置隔离级别方法\n\n```sql\nset session transaction isolation level read uncommitted;\n```\n\n开始事务\n\n<!-- show variables like '%tx_isolation%'; -->\n\n```sql\nset session transaction isolation level read uncommitted;\n\nbegain\nupdate propagation set count = count + 1 where id = 1\n\nrollback (回滚操作)\n```\n\n另外开一个session 进行查询，可看到并不还没有更改数据。\n\n```sql\nset session transaction isolation level read uncommitted;\n\nselect * from propagation\n\n```\n\nbegain中执行的操作  被第二个进程读到了，导致脏读，一但事务回滚，第二个进程保存的是之前的结果。\n\n#### InnoDB可重复读隔离级别下如何避免幻读\n\n- 表象: 快照读(非阻塞读) -- 伪\n    - 当前读是上了锁的增删改查， update,delete,insert\n    - 快照读: 不加锁的非阻塞读,select \n\n### 语法\n\n关键语法\n\n- Group By\n- Having\n- Count, Sum, Max, Min, Avg\n\n#### Group By\n\n- 满足 \"select 自居的列名必须为分组列或列函数\n- 列函数对于 group by 子句定义的每个组各返回一个结果\n\n```SQL\n# 查询所有同学学号、姓名、选课数、总成绩\nSELECT\n\ts.student_id,\n\tstu.name,\n\tCOUNT( course_id ),\n\tSUM( score ) \nFROM\n\tscore s,\n\tstudent stu\nWHERE\n\ts.student_id = stu.student_id\nGROUP BY\n\tstudent_id\n```\n\n#### Having\n\n- 通常与Group By 子句一起使用\n- WHERE 过滤行，Having过滤组\n- 出现在同一sql的顺序: WHERE > GROUP BY > HAVING\n\n## Redis\n\n### 缓存知识考点\n\n#### 缓存中间件-Memcache 和 Redis 的区别\n\n|                    | Memcache | Redis |\n|:------------------:|:--------:|:-----:|\n|      数据类型      | 类似Hash |  丰富 |\n| 数据磁盘持久化存储 |  不支持  |  支持 |\n|        主从        |  不支持  |  支持 |\n|        分片        |  不支持  |  支持 |\n\n简单key-value可以选择Memcache  \n\n### 为什么Redis能这么快\n\n10w+ QPS(query per second)\n\n- 完全基于内存，绝大部分请求是纯粹的内存操作，执行效率高\n- 数据结构简单，对数据操作也简单\n- 采用单线程，单线程也能处理高并发请求，想多核也可以多实例\n- 多路I/O复用模型，非阻塞IO\n\n#### 多路I/O复用\n\n##### I/O复用模型\n\nRedis 采用的I/O多路复用函数: epoll/kqueue/evport/select\n\n- 因地制宜\n- 优先选择时间复杂度为O(1)的多路服用函数作为底层实现\n- 以时间复杂度为O(n)的select作为保底\n- 基于react设计模式监听I/O事件\n\n#### Redis 数据类型\n\n供用户使用的数据类型\n\n- String : 最基本的数据类型，二进制安全(可以存JPG图片)\n    - get (key)\n    - set (key) (value)\n- Hash: String元素组成的字典，适合用于存储对象\n    - hget (struct) (key)\n    - hmset (struct) (key1) (value1) (key2) (value2) ... \n- List: 列表，按照String元素插入顺序排序(有点像栈)\n    - lrange (list) (min) (max)\n    - lpush (list) (key)\n- Set: Sting 元素组成的无序集合，通过哈希表实现，不允许重复\n    - smembers (set)\n    - sadd (set) (key)\n- Sorted Set: 通过分数来为集合中的成员进行从小到大的排序\n    - zrangebyscore (set) (min) (max)\n    - zadd (set) (score) (key)\n- HyperLogLog 用于计数\n- Geo 存储地理位置\n\n##### 底层数据类型基础\n\n- 简单动态字符串\n- 链表\n- 字典\n- 跳跃表\n- 整数集合\n- 压缩列表\n- 对象\n\n### 从海量key里查询出某一固定前缀的key\n\n\n- KEYS pattern: 查找所有符合给定模式pattern的key\n    - KEYS指令一次性返回所有匹配的KEY\n    - 键的数量过大会使服务卡顿\n\n- SCAN cursor [MATCH pattern] [COUNT count]\n    - 基于游标的迭代器，需要基于上一次的游标延续之前的迭代过程\n    - 以0作为游标开始一次新的迭代，知道命令返回游标0完成一次便利\n    - 并不保证每次执行都返回某个给定数量的元素，支持模糊查询\n    - 一次返回的数量不可控，只能是大概率符合count参数\n\n### Redis实现分布式锁\n\n分布式锁需要解决的问题\n\n- 互斥性\n- 安全性\n- 死锁\n- 容错\n\n#### SET\n\nSET key value [EX seconds] [PX milliseconds] [NX|XX]\n\n- EX second: 设置键的过期时间为 second 秒\n- PX millisecond: 设置键的过期时间为millisecond 毫秒\n- NX: 只在键不存在时，才对键进行设置\n- XX: 只在键已经存在时，才对键进行设置操作\n- SET操作成功完成时，返回OK，否则返回nil\n\n#### 大量的key同时过期的注意事项\n\n集中过期，由于清除大量的key很耗时，会出现断站的卡顿现象\n    - 解决方案: 在设置key 的过期时间时，给每个key加上随机值\n\n### 使用Redis做异步队列\n\n使用List作为队列，RPush生产消息，LPOP消费消息\n\n```redis\nrpush list aaa\nrpush list bbb\nrpush list ccc\nlpop list // aaa\nlpop list // bbb\nlpop list // ccc\n\n```\n\n- 缺点： 没有等待，队列里有值就直接消费\n- 弥补： 可以通过在应用层引入Sleep机制去调用LPOP重试\n\n如果不想用sleep 可以用BLPOP\n\n#### BLPOP\n\nblpop key [key ...] timeout: 阻塞直到队列有消息或者超时\n\n```redis\nsession 1:\n    blpop list 30  // 为空进入等待30s\n\nsession 2:\n    rpush list a\n\nsession 1:\n    1) \"a\"\n\n```\n\n缺点是只能共给一个消费者使用\n\n#### pub/sub\n\n主题订阅者模式\n\n- 发送者(pub)发送消息，订阅者(sub)接收消息\n- 订阅者可以订阅任意数量的频道\n\n```redis\nsubscribe (channel) 接收广播\npublish (channel) (content) 发送广播\n```\n\n缺点： 消息的发布是无状态的，无法保证可达\n\nkafka 和 MQ\n\n### 持久化方法之 RDB\n\nRDB(快照)持久化：保存某个时间点的全量数据快照\n\n手动：\n\n- SAVE: 阻塞Redis的服务器进程，直到RDB文件创建完毕\n- BGSAVE: Fork出一个子进程来创建RDB文件，不阻塞服务器进程\n\n自动：\n\n- 根据redis.conf配置里面的SAVE m n定时触发(用的是BGSAVE)\n- 主从复制时，主节点自动触发\n- 执行Debug Reload\n- 执行Shutdown且没有开启AOF持久化\n \n缺点：\n\n- 内存数据的全量同步，数据量大会由于I/O而严重影响性能\n- 可能会因为Redis 挂掉而丢失从当前至最后一次快照期间的数据\n\n### 持久化之 AOF\n\nAOF (Append-Only-File) 持久化：保存写状态\n\n- 记录下除了查询以外的所有变更数据库状态的指令\n- 以append的形式追加保存到AOF文件中\n\n日志重写解决AOF文件大小不断增大的问题，原理如下\n\n    - 调用fork(), 创建一个子进程\n    - 子进程把新的AOF写道临时文件，不依赖原来的AOF文件\n    - 主进程持续把新的变动同时写到内存和原来的AOF里\n    - 主进程获取子进程重写AOF的完成信号，往新的AOF同步增量变动\n    - 使用新的AOF文件替换掉旧的AOF文件\n\n手动重写指令: BGREWRITEAOF\n\n### RDB和AOF\n\n#### RDB和AOF共存时的恢复流程 \n\n![RDB&AOF](RDB&AOF.png)\n\n#### RDB和AOF的优缺点\n\n|      |               RDB              |                    AOF                   |\n|:----:|:------------------------------:|:----------------------------------------:|\n| 优点 |  全量数据快照，文件小，恢复快  | 可读性高，适合保存增量数据，数据不易丢失 |\n| 缺点 | 无法保存最近一次快照之后的数据 |          文件体积大，恢复时间大          |\n\n### RDB-AOF混合持久化方式\n\ndefault RDB-AOF\n\n- BGSAVE做镜像全量持久化，AOF做增量持久化\n\n### pipeline 的好处\n\n- pipeline 跟linux 的管道类似\n- Redis基于请求/响应模型，单个请求处理需要一一对应\n- pipeline批量执行指令，节省多次IO往返的时间\n- 有顺序依赖的指令建议分批发送\n\n### redis的同步机制\n\n主从同步原理\n\n#### 全同步过程\n\n- Salve 发送sync 命令到Master\n- Master启动一个后台进程，将Redis中的数据快照保存到文件中(BGSAVE)\n- Master将保存数据快照期间接收到的写命令缓存起来\n- Master完成写文件操作后，将该文件发送给Salve\n- 使用新的AOF文件替换掉旧的AOF文件\n- Master将这期间收集的增量写命令发送给Salve端\n\n#### 增量同步过程\n\n- Master接收到用户的操作指令，判断是否需要传播到Slave\n- 将操作记录追加到AOF文件\n- 将操作传播到其他Slave:\n    1. 对齐主从库\n    2. 往响应缓存写入指令\n- 将缓存中的数据发给Slave\n\n\n### Redis Sentinel (哨兵机制)\n\n解决主从同步Master宕机后的主从切换问题：\n\n- 监控： 检查主从服务器是否运行正常\n- 提醒： 通过API向管理员或者其他应用程序发送故障通知\n- 自动故障迁移：主从切换\n\n#### 流言协议Gossip\n\n在杂乱无章中寻求一致\n\n- 每个节点都随机的与对方通信，最终所有节点达成一致的状态\n- 种子节点定期随机向其他节点发送节点列表以及需要传播的信息\n- 不保证信息一定会传递给所有节点，但是最终会趋于一致\n\n### Redis 的集群原理 \n\n如何从海量数据里快速找到所需？\n\n- 分片：按照某种规则去划分数据，分散存储在多个节点上\n- 常规的按照哈希划分无法实现节点的动态增减\n\n一致性哈希算法： 对2^32取模，将哈希值空间组织成虚拟的圆环\n将数据key使用相同的函数hash计算出哈希值\n \n\n数据存储节点如下，若Node C宕机，则会存储到D节点上\n![Node_C宕机](redis_node_c.png)\n \n新增Node X服务器，则在B到X之间的数据(object c)更改存储位置到X的位置上\n\n![Node_X](Node_X.png)\n\n#### Hash环数据倾斜问题\n\n引入虚拟节点解决数据倾斜问题\n\n![vitual_node](vitual_node.png)\n\n## Linux\n\n- 体系结构主要分为用户态和内核态(kernel)\n- 内核: 本质是一段管理计算机硬件设备的程序\n- 系统调用: 内核的访问接口，是一种能够能再简化的操作\n- 公用函数库: 系统调用的组合拳\n- Shell: 命令解释器，可编程\n\n\n\nman 2(系统调用) 3(公共库函数)\n\n```shell\nman 2 syscalls\nman 2 acct\n```\n### find\n\n语法\n\n```sh\nfind path [options] params\n```\n\n指定目录下查找文件\n-iname 可以忽略大小写\n\n### grep\n\n```sh\ngrep [options] pattern file\ngrep -o pattern # 选出满足条件的\ngrep -v pattern # 过滤包含该pattern的\n```\n\n- 全称: Global Regular Expression Print\n- 作用: 查找文件里符合条件的字符串\n\n### 管道 |\n\n- 可将指令连接起来，前一个指令的输出作为后一个指令的输入\n- 只能处理前一个指令的正确输出，无法处理错误\n- 右边的命令必须能够接收标准输入流，否则传递过程中数据会被抛弃\n    - 如sed, awk, grep, cut, head, top, less, more, wc, join, sort, split\n\n### 统计\n\n#### awk \n\n```sh\nawk [options] 'command' file\n```\n\nawk -f 设置分隔符\n \n\n- 一次读取一行文本，按输入分隔符进行切片，切成多个组合部分\n- 将切片直接保存在内建的变量中，$1,$2...$0表示行的全部\n- 支持对单个切片的判断，支持循环判断，默认分隔符为空格\n\n### 替换\n\n#### sed\n\n```sh\nsed [option] 'sed command' file\nsed -i 's/^Str/String/' replace.java\nsed -i 's/\\.$/\\;' replace.java\n```\n\n- 全名 stream editor 流编辑器\n- 适合用于对文本的行内容进行处理\n\n## JVM\n\n### 谈谈你对Java的理解\n\n- 平台无关性\n- GC\n- 语言特性(泛型、反射)\n- 面向对象\n- 库类\n- 异常处理\n\n#### Compile Once, Run Anywhere如何实现\n\n- 编译时\n- 运行时\n\njavac编译，生成字节码\n\n![ 跨平台](JAVA跨平台.png)\n\nJava源码首先被编译为字节码，再由不同平台的JVM进行解析，Java语言在不同平台上运行时不需要进行重新编译，Java虚拟机在执行字节码的时候，把字节码转换成具体平台上的机器指令。\n\n#### 为什么JVM不直接将源码解析成机器码去执行\n\n为什么要先编译成字节码再解析成机器码\n\n- 准备工作: 每次执行都需要各种检查\n- 兼容性: 也可以将别的语言解析成字节码\n\n#### JVM如何加载.class文件\n\n![JVM](JVM.png)\n\n- Class Loader: 依据特定格式，加载class文件到内存 (本地接口)\n- Execution Engine: 对命令进行解析 (解释器)\n- Native Interface: 融合不同开发语言的原生库为Java所用\n- Runtime Data Area: JVM内存空间结构模型\n\n#### 谈谈反射\n\n##### 列举反射的例子\n\n// TODO 添加代码\n\n#### ClassLoader\n\n类从编译到执行的过程\n\n- 将源文件编译为字节码文件\n- ClassLoader将字节码转换为JVM中的Class< xx >对象\n- JVM利用Class< xx > 对象实例化为 xx 对象\n\nClassloader在Java中有着非常重要的作用,它主要工作在 Class 装载的加载阶段,其主要作用是从系统外部获得 ** Class二进制数据流 **。它是Java的核心组件所有的 Class都是由 Classloader进行加载的Classloader负责通过将 Class文件里的二进制数据流装载进系统,然后交给Java虚拟机进行连接、初始化等操作。\n\n##### ClassLoader种类\n\n- BootStrapClassLoader: C++编写，加载核心库java.*\n- ExtClassLoader: java编写，加载扩展库 javax.*\n- AppClassLoader: java编写，加载程序所在目录\n- 自定义ClasLoader: java编写，自定义加载\n    - findClass\n    - defineClass\n    // TODO 代码\n\n|类加载器名称|加载范围|\n|:-------:|:-------:|\n|启动类加载器 Bootstrap ClassLoader | 存放在<JAVA_HOME>\\lib 目录中的，并且是虚拟机识别的类库加载到虚拟机内存中的|\n|扩展类加载器 Extension ClassLoader| 存放在<JAVA_HOME>\\lib\\ext 目录中的所有类库，开发者可以直接使用|\n|应用程序加载器 Application ClassLoader | 加载用户类路径上指定的类库，开发者可以直接使用，一般情况下这个就是程序中默认的类加载器 |\n|自定义加载器 Custom ClassLoader | 加载自定义的类 |\n\n##### 如何组织类加载器\n\n虚拟器引入了双亲委派模型  \n当一个加载器进行类加载的时候，先委派给双亲加载器加载。双亲无法加载的时候再返回自己加载。\n好处: 保证类有合适的优先级的层次关系，保证程序稳定运行。  \n\n![双亲委派](双亲委派.png)\n\n// TODO ClassLoader 源码\n\n[openjdk](http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file)\n\n##### 为什么使用双亲委派机制去加载类\n\n- 避免多份同样字节码的加载\n\n##### 类的加载方式\n\n- 隐式加载: new\n- 显示加载: loadClass, forName等(不支持反射，需要newInstance()获取实例)\n\n###### 类的生命周期\n\n![类的生命周期](类的声明周期.png)\n\n类加载包括 加载 验证 准备 解析 初始化五个阶段  \n\n- 加载: 类加载器(可自己设置)，热部署，加密解密\n- 验证: 字节流包含的信息符不符合虚拟机要求，会不会危害虚拟机  \n- 准备: 为类变量分配内存，设置初始值 。  \n- 解析: 将常量池的一些引用替换为实际值。\n- 初始化: 赋值\n- 使用: 构造过程，构造方法\n\n![类加载](类加载.png)\n\n###### loadClass 和 forNmae 的区别\n\n- Class.forName 得到的class 是已经初始化完成的\n- Classloader.loadClass得到的class是还没有链接的\n\n例如forName用于加载MySQL jdbc Driver，loadclass 不可以\n\nloadclass 一般用于spring ioc，因为 lazy loading 即懒加载的特性，加快加载速度，等要用到的时候再去初始化\n\n#### Java的内存模型\n\n- 地址空间划分\n    - 内核空间  (主要的系统操纵程序和C运行的空间，逻辑和基于C的进程)\n    - 用户空间  (Java实际运行时使用的内存空间)\n\nJVM内存模型--JDK8\n\n![JVM内存模型](JVM内存模型.png)\n\n##### 程序计数器(Program Counter Register)\n\n- 当前线程执行的字节码行号指示器(逻辑计数器)\n- 改变计数器的值来选取下一条需要执行的字节码指令\n- 和线程时一对一的关系即\"线程私有\"\n- 对Java方法计数，如果时Native方法，计数器值为Undefined\n- 不会发生内存泄漏\n\n##### Java虚拟机栈(Stack)\n\n- Java方法执行的内存模型\n- 包含多个栈帧\n\n// TODO javap -verbose \n\n![stack](Stack.png)\n\n###### 递归为什么会引发java.lang.StackOVerflowError异常\n\n- 递归过深，栈帧数超出虚拟栈深度\n- 虚拟机栈过多会引发java.lang.OutOfMemoryError\n\n##### 本地方法栈(Native Stack)\n\n- 与虚拟机栈相似，主要作用于标注了native的方法\n\n##### 元空间(MetaSpace)\n\n元空间(MetaSpace)与永久代(PermGen)的区别\n\n- 元空间使用本地内存，而永久代使用的是jvm的内存\n\nMetaSpace 相比 PermGen的优势\n\n- 字符串常量池存在永久代中，容易出现性能问题和内存溢出\n- 类和方法的信息大小难以确定，给永久代的大小指定带来了困呐\n- 永久代会为GC带来不必要的复杂性\n- 方便HotSpot与其他JVM如Jrockit的继承\n\n##### Java堆(Heap)\n\n- 对象实例的分配区域\n- GC管理的主要区域\n    - 分代清除算法(新生代，老生代)\n\n##### 常考问题\n\n###### JVM 三大性能调优参数-Xms -Xmx -Xss的含义\n\n- -Xss: 规定了每个线程虚拟机栈(堆栈)的大小\n- -Xms: 堆的初始值\n- -Xmx: 堆能达到的最大值\n\n###### Java的内存模型(堆和栈)\n\nJava内存模型中堆和栈的区别-- 内存分配策略\n\n- 静态存储：编译时确定每个数据目标在运行时的存储空间需求\n- 栈式存储：数据区需求在编译时未知，运行时模块入口前确定\n- 堆式存储：编译时或运行时模块入口都无法确定，动态分配\n\nJava内存中堆和栈的区别\n\n- 联系：引用对象、数组时，栈里定义变量保存堆中目标的首地址\n- 管理方式: 栈自动释放，堆需要GC\n- 空间大小：栈比堆小\n- 碎片相关：栈产生的碎片远小于堆\n- 分配方式: 站支持静态和动态分配，而堆仅支持动态分配\n- 效率： 栈的效率比堆高\n\n元空间、堆、线程独占部分间的联系-内存角度\n\n- 元空间：方法\n- 堆： 对象\n- 栈： 执行过程\n\n不同JDK版本置键的intern()方法的区别-JDK6 VS JDK+\n\n```java\nString s = new String (\"a\");\ns.intern();\n```\n\nJDK6:当调用 intern方法时,如果字符串常量池先前已创建出该字符串对象,则返回池中的该字符串的引用。  \n否则,将此字符串对象添加到字符串常量池中,并且返回该字符串对象的引用。\n\nJDK6+:当调用 intern方法时,如果字符串常量池先前已创建出该字符串对象,则返回池中的该字符串的引用。  \n否则,如果该字符串对象已经存在于Java堆中,则将堆中对此对象的引用添加到字符串常量池中,并且返回该引用;  \n如果堆中不存在,则在池中创建该字符串并返回其引用。\n\n## GC\n\n### Java垃圾回收机制\n\n###### 对象被判定为垃圾的标准\n\n- 没有被其他对象引用\n\n#### 判断对象是否为垃圾的算法\n\n##### 引用计数算法\n\n做法\n\n- 通过判断对象的引用数量来决定对象是否可以被回收\n- 每个对象实例都有一个引用计数器，被引用则+1，完成引用则-1\n- 任何引用计数为0 的对象实例可以被当作垃圾收集\n\n- 优点：执行效率高，程序执行受影响较小\n- 缺点: 无法检测出循环引用的情况，导致内存泄露\n\n##### 可达性分析算法\n\n由离散数学的图论引入的  \n\n通过判断对象的引用链是否可达来决定对象是否可以被回收  \n选择一个GC Root对象\n\n- 虚拟机栈中引用的对象(栈帧中的本地变量表)\n- 方法区中的常量引用对象\n- 方法区中的类静态属性引用的对象\n- 本地方法栈中JNI(Native方法)的引用对象\n- 活跃线程的引用对象\n\n#### 垃圾回收算法\n\n##### 标记-清楚算法(Mark and Sweep)\n\n- 标记: 从根集合进行扫描，对存活的对象进行标记\n- 清楚: 对堆内存从头到尾进行线性遍历，回收不可达对象内存\n\n缺点  \n造成碎片化问题\n\n##### 复制算法(Copying)\n\n- 分为对象面和空闲面\n- 对象在对象面上创建\n- 存货的对象被从对象面复制到空闲区\n- 将对象面所有对象内存清楚\n\n优点  \n\n- 解决碎片化问题\n- 顺序分配内存，简单高效\n- 适用于对象存活率低的场景\n\n适用于分代的年轻代\n\n##### 标记-整理算法(Compacting)\n\n使用了标记清除算法的方式，加上了整理步骤\n\n- 避免内存的不连续行\n- 不用设置两块内存互换\n- 适用于存活率高的场景\n\n##### 分代收集算法(Generational Collector)\n\n组合拳  \n\n- jdk6, jdk7 分为年轻代，老年代，永久代\n- jdk8 以后永久代消失\n\n年轻代存活率低，使用复制算法，老年代存活率高，使用标记清除/整理算法  \n\n##### GC 分类\n\n- Minor GC (年轻代)\n- Full GC (老年代)\n\n###### 年轻代(1/3)\n\n- Eden区(伊甸) (大)\n- 两个Survivor区 (from/to) (小)\n\n如何判断进入老年代  \n\n- 经历一定Minor次数依然存活的对象\n- Survivor区中存放不下的对象\n- 新生成的大对象\n\n常用调优参数\n\n- -XX:SurvivorRatio: Eden 和 Survivor的比值，默认8:1\n- -XX:NewRatio: 老年代和年轻代内存大小的比例\n- -XX:MaxTenurinThreshold: 对象从年轻代晋升到老年代经过GC次数的最大阈值\n\n###### 老年代(2/3)\n\n- 标记-清理算法\n- 标记-整理算法\n\n老年代的GC会涉及新生代，Full GC就是全GC\n\n- Full GC 和 Major GC\n- Full GC 比Minor GC 慢(10倍左右)，但执行频率低\n\n触发Full GC的条件\n\n- 老年代空间不足\n- 永久代空间不足 (jdk6, 7)\n- CMS GC时出现promotion failed, concurrent mode failure\n- Minor GC晋级到老年代的平均大小大于老年代的剩余空间\n- 调用System.gc()\n- 使用RMI来进行RPC管理的JDK应用，每效时执行一次Full GC\n\n###### Stop-the-World\n\n- JVM 由于要执行GC而停止了应用程序的执行\n- 任何一种GC算法中都会发生\n- 多数GC优化通过减少Stop-the-world发生的时间来提高程序性能(实现高吞吐)\n\n###### Safepoint\n\n- 分析过程中对象引用关系不会发生变化的点\n- 产生安全点的地方: 方法调用，循环跳转，异常跳转等\n- 安全点数量适中\n\n#### 垃圾收集器\n\nJVM的运行模式\n\n- Server\n- Client\n\n##### 年轻代常见的垃圾收集器\n\n###### Serial收集器(-XX: +UseSerialGC, 复制算法)\n\n- 单线程收集，进行垃圾收集时，必须暂停所有工作线程\n- 简单高效，Client模式下默认的年轻代收集器\n\n###### ParNew收集器(-XX: +UseParNewGC, 复制算法)\n\n- 多线程收集，其他行为同Serial\n- 单核执行效率不如Serial，多核下有优势\n\n###### Parallel Scavenge收集器(-XX: +UseParallelGC，复制算法)\n\n- 吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)\n- 比起关注用户线程停顿时间，更关注系统的吞吐量\n- 在多核下执行才有优势，Server模式下默认的年轻代收集器\n\n##### 老年代垃圾收集器\n\n###### Serial Old收集器(-XX: +UseSerialOldGC, 标记-整理算法)\n\n其他特点同年轻代\n\n###### Paraller Old收集器(-XX: +UseParallelOldGC，标记-清理算法)\n\n- 多线程，吞吐量优先\n\n###### CMS收集器(-XX: +UseConcMarkSweepGC， 标记-清理算法)\n\n- 初始标记: stop-the-world\n- 并发标记: 并发追溯标记，程序不会停顿\n- 并发预清理: 查找执行并发标记阶段从年轻代晋升到老年代的对象\n- 重新标记: 暂停虚拟机，扫面CMS堆中的剩余对象\n- 并发清理: 清理垃圾对象，程序不会停顿\n- 并发重置: 重置CMS收集器的数据结构\n\n##### G1收集器(-XX: +UseG1GC，复制+标记-整理算法)\n\nGarbage First收集器优点\n\n- 并发和并行\n- 分代收集\n- 空间整合\n- 可预测的停顿\n\nG1\n\n- Java堆内存划分为多个大小相等的Region\n- 年轻代和老年代不再物理隔离\n\n#### GC 的面试题\n\n##### Object的finalize()方法的作用是否与C++的析构函数作用相同\n\n- 与C++的析构函数不同，析构函数调用确定，而它是不确定的\n- 将未被引用的对象放置在F-Queue队列\n- 方法执行随时可能会被终止\n- 给予对象最后一次重生的机会\n\n##### G1, ZGC\n\n##### 引用\n\n###### 强引用\n\n- 最普通的引用: Object obj = new Object()\n- 抛出OutOfMemoryError 终止程序也不会回收具有强引用的对象\n- 通过将对象设置为null来弱化引用，使其被回收\n\n###### 软引用\n\n- 对象处在有用但非必须的状态\n- 只有当内存空间不足时，GC会回收该引用的对象的内存\n- 可以用来实现高速缓存\n\n###### 弱引用\n\n- 非必须的对象，比软引用更弱\n- GC时会被回收\n- 被回收的概率不大，因为GC线程优先级比较低\n- 适用于引用偶尔被使用且不影响垃圾收集的对象\n\n###### 虚引用\n\n- 不会决定对象的生命周期\n- 任何时候都可能被垃圾收集器回收\n- 跟踪对象被垃圾收集器回收的活动，起哨兵作用\n- 必须和引用队列ReferenceQueue联合使用 \n\n| 引用类型 | 被垃圾回收时间 |      用途      |      生存时间     |\n|:--------:|:--------------:|:--------------:|:-----------------:|\n|  被强用  |    从来不会    | 对象的一般状态 | JVM停止运行时终止 |\n|  被软用  |  在内存不足时  |    对象缓存    |   内存不足时终止  |\n|  弱引用  |  在垃圾回收时  |    对象缓存    |    gc运行后终止   |\n|  虚引用  |     Unknown    |   标记、哨兵   |      Unknown      |\n\n\n###### 引用队列(reference queue)\n\n- 无实际存储结构，存储逻辑依赖于内部节点之间的关系来表达\n- 存储关联的且被GC的软引用，弱引用以及虚引用\n  \n## Java线程\n\n### 进程和线程的区别\n\n#### 进程和线程的由来\n\n- 串行: 串行执行任务，需要长时间等待用户输入\n- 预处理:预先将用户指令集中成清单，批量串行处理用户指令，任无法并发执行\n- 进程: 进程独占内存空间。保存各自运行状态，相互不干扰且可切换，为并发处理任务提供了可能性\n- 线程: 共享进程的内存资源，相互切换更快速，支持更细粒度的任务控制，使进程内的子任务得以并发执行\n\n#### 区别\n\n进程是资源分配的最小单位，线程是CPU调度的最小单位\n\n- 所有与进程相关的资源都被记录在PCB中(进程控制块)\n- 进程是抢占处理机的调度单位，线程属于某个进程，共享其资源\n- 线程只由堆栈寄存器、程序计数器和TCB组成(线程控制块)\n\n区别:\n\n- 线程不是独立应用。而进程可以看做独立应用\n- 进程又独立的空间，相互不影响，县城只是进程不同的执行路径\n- 线程没有独立的地址空间，多进程的程序比多线程程序健壮\n- 进程的切换比线程的切换开销大\n\n### 进程和线程的关系\n\n- Java堆操作系统提供的功能进行封装，包括进程和线程\n- 运行一个程序会产生一个进程，进程包含至少一个线程\n- 每个进程对应一个JVM实例，多个线程共享JVM里的堆\n- Java采用单线程编程模型，程序会自动创建主线程\n- 主线程可以创建子线程，原则上要晚于子线程结束\n\n### Thread中的start和run方法的区别\n\nThread#start() => JVM_StartThread => thread_entry => Thread#run()\n\n- 调用start()方法会创建一个新的子线程并启动\n- run()方法只是Thread的一个普通方法的调用\n\n### Thread和Runnable是什么关系\n\nThread是类，Runnable是接口\n\n- Thread是实现了Runnable接口的类，使得run支持多线程\n- 因类的单一继承原则，推荐多使用Runnable接口\n\n### 如何给run()方法传参\n\n- 构造函数传参\n- 成员变量传参\n- 回调函数传参\n\n### 如何实现线程的返回值\n\n- 主线程等待\n- Thread类的join方法\n- Callable接口实现: 通过FutureTask or 线程池获取\n\n### 线程的状态\n\n六个状态\n\n- 新建(New): 创建后尚未启动的线程的状态\n- 运行(Runnable):包含Running和Ready\n- 无限期等待(Waiting): 不会被分配CPU执行时间，需要显性被唤醒\n- 限期等待(Timed Waiting): 在一定时间后会由系统自动唤醒\n- 阻塞(Blocked): 等待获取排他锁\n- 结束(terminated): 已终止线程的状态，线程已经结束运行\n\n### sleep和wait\n\n- sleep是Thread类的方法，wait是Object类中定义的方法\n- Sleep()方法可以在任何地方使用\n- wait()只能在synchronized方法或synchronized块中使用\n\n本质区别\n\n- Thread.sleep只会让出CPU，不会导致锁行为改变\n- Object.wait不仅让出CPU，还会释放已经占有的同步资源锁\n\n// TODO wait sleep\n\n### notify和notifyall 的区别\n\n两个概念\n\n- EntryList 锁池\n- WaitSet 等待池\n\n- notifyAll会让所有处于等待池的线程进入锁池中去竞争获取锁的机会\n- notify 只会随机选取一个处于等待池中的线程进入锁池去竞争\n\n### yield\n\nThread.yield()函数时，会给线程调度器一个当前线程愿意让出CPU使用的暗示，但是线程调度器可能会忽略这个暗示\n\n### 如何中断线程\n\n- 通过调用stop()方法停止线程\n- 通过调用suspend(), resume)方法\n\n目前使用\n\n- interrupt(),通知线程应该中断了\n    - 如果线程处于被阻塞状态,那么线程将立即退出被阻塞状态,并抛出一个 Interruptedexception异常。\n    - 如果线程处于正常活动状态,那么会将该线程的中断标志设置为true。被设置中断的线程将继续正常运行,不受影响\n\nInterrupt需要被调用的线程配合中断\n\n### sychronized\n\n// TODO\n\n### ReentrantLock\n\n- synchronized 是mark word ,lock调用unsafe的park方法\n\n### JMM (Java Memory Model) -- Java内存模式\n\n#### JMM 主内存\n\n- 存储Java实例对象\n- 包括有成员变量、类信息、常量、静态变量等\n- 属于数据共享的区域，多线程并发操作时会引发线程安全问题\n\n#### JMM的工作内存\n\n- 存储当前方法的所有本地变量信息，本地变量对其他线程不可见\n- 字节码行号指示器、Native方法信息\n- 属于线程私有的数据区域，不存在线程安全问题\n\n#### JMM与Java内存区域划分是不同的概念层次\n\n- JMM描述的是一组规则，围绕原子性，有序性，可见性展开\n- 相似点: 存在共享区和私有区域\n\n#### 主内存与工作内存的数据存储类型以及操作方式归纳\n\n- 方法里的基本数据类型本地变量将直接存储在工作内存的栈帧结构中\n- 引用类型的本地变量: 引用存储在工作内存中，实例存储在主内存中\n- 成员变量、static变量、类信息均存储在主内存中\n- 主内存共享的方式是线程各拷贝一份数据到工作内存，操作完成后刷新主内存\n\n#### JMM怎么实现可见性\n\n##### 指令重排序需要满足条件\n\n- 单线程环境下不能改变程序运行的结果\n- 存在数据以来关系的不允许重排序\n\n无法通过happens-before原则推导出来的，才能进行指令的重排序\nA操作的结果需要对B操作可见，则A与B存在happens-before关系\n\n##### happens-before八大原则\n\n1. 程序次序规则:一个线程内,按照代码顺序,书写在前面的操作先行发生于肀写在后面的操作;\n2. 锁定规则:一个 unlock操作先行发生于后面对同一个锁的lock操作;\n3. volatile变量规则:对一个变量的写操作先行发生于后面对这个变量的读操作 \n4. 传递规则:如果操作A先行发生于操作B,而操作B又先行发生于操作C,则可以得出操作A先行发生于操作C;\n5. 线程启动规则: Thread对象的 start(方法先行发生于此线程的每一个动作;\n6. 线程中断规则:对线程 Interrupt0方法的调用先行发生于被中断线程的代码检测到中断事件的发生;\n7. 线程终结规则:线程中所有的操作都先行发生于线程的终止检测,我们可以过 Thread join(方法结束、 Thread isalive0的返回值手段检测到线程已经终止执行;\n8. 对象终结规则:一个对象的初始化完成先行发生于他的 Finalize0方法的开始\n\n##### volatile\n\nJVM提供的轻量级同步机制\n\n- 保证被volatile修饰的共享变量对所有线程总是可见的\n- 禁止指令重排序优化\n\n###### volatile 的可见性\n\n如何实现?\n\n- 当写一个 volatile变量时,JMM会把该线程对应的工作内存中的共享变量值刷新到主内存中\n- 当读取个 volatile变量时,JM会把该线程对应的工作内存置为无效\n\n###### 如何禁止重排优化\n\n内存屏障(memory barrier)\n\n1. 保证特定操作的执行顺序\n2. 保证某些变量的内存可见性\n\n通过内存屏障指令禁止在内存屏障前后的指令执行重新排序优化  \n强制刷出各种CPU的缓存数据,因此任何CPU上的线程都能读取到这些数据的最新版本\n\n### CAS\n\nsync是悲观锁，假定会并发冲突\n乐观锁假定并发不冲突 CAS\n\n- 支持原子更新操作，适用于计算器，序列发生器等场景\n- 属于乐观锁机制，号称lock-free\n- CAS操作失败时由开发者决定是继续尝试，还是执行别的操作\n\n#### CAS思想\n\n- 包含三个操作数-- 内存位置(V)、预期原值(A)和新值(B)\n\n\n\n\n\n## Java集合框架\n\n### 数据结构\n\n// TODO\n\n- 数组和链表的区别\n- 链表的操作，如反转，链表环路检测，双向链表，循环链表相关操作\n- 队列，栈的应用\n- 二叉树的遍历方式及其递归和非递归的实现\n- 红黑树的旋转\n\n\n#### Collection\n\n![Collection](Collection.png)\n\n#### HashMap\n\nHashMap(java8之前): 数组+链表\nHashMap(java8之后): 数组+链表+红黑树\n\n##### 扩容\n\n- 多线程环境下，调整大小存在条件竞争，容易造成死锁\n- rehashing 是一个耗时的过程\n\n#### HashTable\n\nsync\n\n#### ConcurrentHashMap\n\n早期通过分段锁Segment\n\n采用了CAS + sync，数组链表红黑树\n\n\n\n\n### 算法\n\n- 内部排序: 如递归排序，交换排序(冒泡排序、快排)、选择排序、插入排序\n- 外部排序: 应掌握如何利用有限的内存配合海量的外部存储来处理超大的数据集，写不出来也要有相关的思路\n\n哪些不稳定(堆，快)，稳定意味着什么\n不同数据集，各种排序最好或最差的情况\n如何优化算法\n\n### Java的IO机制\n\nBIO、NIO、AIO的区别\n\nBlock-IO: InputStream 和 OutputStream, Reader 和 Writer\nNonBlock-IO: 构建多路复用的、同步非阻塞的IO操作\n\n\n\n## Spring\n\n### 你了解Spring IOC吗\n\nIOC(Inversion of Control): 控制反转\n\n- Spring Core最核心的部分\n- 需要先了解依赖注入(DI)\n\n#### 依赖注入\n\nDI: 将底层类作为参数传递给上层类，实现上层对下层的\"控制\"\n\nIOC: DI和DL\n\nDL: 因为需要用户实现API所以被移除\n\n#### 注入的方式\n\n- Setter\n- Interface\n- Constructor\n- Annotation\n\nIOC容器的优势\n\n- 避免在各处使用new来创建类，并且可以做到统一维护\n- 创建实例的时候不需要了解其中的细节\n\n#### Spring IOC支持的功能\n\n- 依赖注入\n- 依赖检查\n- 自动装配\n- 支持集合\n- 指定初始化方法和销毁方法\n- 支持回调方法\n\n#### Spring Bean\n\nBeanDefinition: 主要用来描述Bean的\nBeanDefinitionRegistry: 提供向IOC容器注册BeanDefinition对象的方法\n\n** BeanFactory **: Spring框架最核心的接口\n\n- 提供IOC的配置机制\n- 包含Bean的各种定义，便于实例化Bean\n- 建立Bean之间的依赖关系\n- Bean生命周期的控制\n\n##### BeanFactory与ApplicationContext的比较\n\n- BeanFactory是Spring框架的基础设施\n- ApplicationContext面向Spring开发者\n\n继承多个接口\n\n- BeanFactory: 能够管理、装配Bean\n- ResourcePatternResolver: 能够加载资源文件\n- MessageSource: 能够实现国际化等功能\n- ApplicationEventPublisher: 能够注册监听器，实现监听机制\n\n\n##### Spring Bean 的作用域\n\n作用域\n\n- singleton: Spring默认的作用域，容器里拥有唯一的Bean实例\n- prototype: 针对每个getBean请求，容器都会创建一个bean实例\n- request: 会为每个HTTP请求创建一个Bean\n- session: 会为每个session创建一个Bean\n- globalSession: 会为每个全局Http Session创建一个Bean实例，该作用域仅对Portlet有效\n\n##### Spring Bean 的生命周期\n\n\n### AOP\n\n关注点分离: 不同的问题交给不同的部分去解决\n\n- 面向切面编程AOP正是这种技术的体现\n- 通用化功能代码的实现，对应的就是所谓的切面(Aspect)\n- 业务功能和切面代码分开,架构将变得高内聚低耦合\n- 确保功能的完整性: 切面最终需要合并到业务中(Weave)\n\n#### AOP的三种织入\n\n- 编译时织入: 需要特殊的Java编译器，如AspectJ\n- 类加载时织入: 需要特殊的Java编辑器，如AspectJ,AspectWerkz\n- 运行时织入: Spring采用的方式，通过动态代理的方式，实现简单\n\n\n\n### 七个事务传播属性  \n\n什么是事务传播属性  \n传播两个方法: 两个方法都带事务，但是事务设置不同。\n\n为什么要事务？\n事务是为解决数据安全操作提出的，事务控制实际上就是控制数据的安全访问。\n\n|传播行为|含义|\n|:---:|:---:|\n|propagation_required（xml文件中为required)|表示当前方法必须在一个具有事务的上下文中运行，如有客户端有事务在进行，那么被调用端将在该事务中运行，否则的话重新开启一个事务。（如果被调用端发生异常，那么调用端和被调用端事务都将回滚）|\n|propagation_supports(xml文件中为supports)|表示当前方法不必需要具有一个事务上下文，但是如果有一个事务的话，它也可以在这个事务中运行|\n|propagation_mandatory(xml文件中为mandatory)|表示当前方法必须在一个事务中运行，如果没有事务，将抛出异常|\n|propagation_nested(xml文件中为nested)|表示如果当前方法正有一个事务在运行中，则该方法应该运行在一个嵌套事务中，被嵌套的事务可以独立于被封装的事务中进行提交或者回滚。如果封装事务存在，并且外层事务抛出异常回滚，那么内层事务必须回滚，反之，内层事务并不影响外层事务。如果封装事务不存在，则同propagation_required的一样|\n|propagation_never（xml文件中为never)|表示当方法务不应该在一个事务中运行，如果存在一个事务，则抛出异常|\n|propagation_requires_new(xml文件中为requires_new)|表示当前方法必须运行在它自己的事务中。一个新的事务将启动，而且如果有一个现有的事务在运行的话，则这个方法将在运行期被挂起，直到新的事务提交或者回滚才恢复执行。|\n|propagation_not_supported（xml文件中为not_supported)|表示该方法不应该在一个事务中运行。如果有一个事务正在运行，他将在运行期被挂起，直到这个事务提交或者回滚才恢复执行|\n\n### Spring中的事务隔离级别\n\n|隔离级别|含义|\n|:----:|:----:|\n|isolation_default|使用数据库默认的事务隔离级别|\n|isolation_read_uncommitted|允许读取尚未提交的修改，可能导致脏读、幻读和不可重复读|\n|isolation_read_committed | 允许从已经提交的事务读取，可防止脏读、但幻读，不可重复读仍然有可能发生|\n|isolation_repeatable_read|对相同字段的多次读取的结果是一致的，除非数据被当前事务自生修改。可防止脏读和不可重复读，但幻读仍有可能发生|\n|isolation_serializable |完全服从acid隔离原则，确保不发生脏读、不可重复读、和幻读，但执行效率最低。|\n\n除了default另外四个与JDBC的隔离级别相对应。\n\n### 高并发如何修改同一行数据\n\n#### jvm解决\n\n1. jvm 下用synchronized锁。\n\n\n2. lock 锁\n\ntry lock finally unlock\n\nJVM 解决不了分布式环境多任务对共享资源竞争的协同操作问题\n\n#### 分布式解决\n\n分布式锁 三种实现方式\n\n- 数据库 (性能差)\n- redis (死锁)\n- zookeeper\n    - 基于异常 (临时节点)\n    - 基于相互监听 (性能比较高，占用资源，临时有序节点)\n\n##### Zookeerper 数据结构\n\n- Zookeeper 数据结构类似Linux  \n- 每一个节点都有值  \n\n","source":"_posts/面试专题.md","raw":"---\ntitle: 面试专题\nauthor: edxuanlen\ntop: true\ncover: false\ntoc: true\nmathjax: false\ndate: 2020-03-13 14:46:51\nimg:\ncoverImg:\npassword: \nsummary: \ntags:\n    - Interview\n    - Java\ncategories:\n    - Java\ndescription: Java面试常见问题\n---\n\n## 操作系统\n\n### 进程和线程\n\n\n#### 进程和线程的区别\n\n进程是操作系统资源分配的最小单位\n线程是程序执行的最小单位\n\n进程有独立的内存空间，线程共享进程的内存空间\n\n#### 线程调度\n\n- 时间片轮转调度\n- 先来先服务调度\n- 高优先权优先调度\n\n#### 线程切换步骤\n\n线程的上下文切换，切换的代价\n\n\n\n#### 线程间通信 -- IPC\n\n- 共享内存\n- UnixSocket\n- MessageQueue\n- Signal\n- Semaphore\n- Pipe\n\n#### 协程\n\n- 协程既不是进程也不是线程，协程仅仅是一个特殊的函数，协程它进程和进程不是一个维度的。\n- 一个进程可以包含多个线程，一个线程可以包含多个协程。\n\n更轻量化，在用户态调用，代价比线程上下文切换低，Java第三方协程框架\n\n\n\n\n## 网络\n\n### OSI七层协议\n\nOSI 并不是一个标准，只是一个概念型框架\n\n![七层](七层.jpg)\n\n- 物理层  \n    + 传输比特流  \n    + 定义了物理设备的标准(网线类型，光纤接口等)\n    + 单位比特\n    + 网卡也在这一层工作\n\n- 数据链路层\n    + 定义了如何格式化数据进行传输，控制物理介质的访问\n    + 错误检测，纠正\n    + 将比特数据组成帧，交换机在这层，对帧解码并发送到正确的接收方\n\n- 网络层\n    + 把网络地址翻译为物理地址\n    + 决定数据如何从发送方路由到接收方\n    + 路由器属于网络层\n    + 数据包\n    + 协议: **IP**\n\n- 传输层\n    + 解决主机间的数据传输\n    + OSI中最主要的一层\n    + 传输协议同时进行流量控制\n    + 将数据包强行分割(分割成数据片并给予序列号)\n    + TCP协议和UDP协议\n\n- 会话层\n    + 自动收发，自动寻址\n    + 建立和管理应用程序之间的通信\n    + 解决不同系统之间的通信语法的问题\n\n- 表示层\n    +  网络协议，需要固定长度，组成的消息头\n    + 更方便接收方了解接收的包\n\n- 应用层\n    + 更方便的应用接收到的数据\n    + HTTP协议\n\n先自上(应用层)而下添加数据头，后自下而上处理数据头部\n\n\n### OSI的标准:TCP/IP\n\n![TCP/IP](TCP_IP.png)  \n\n先自上(应用层)而下添加数据头，后自下而上处理数据头部\n\n![TCP/IP](TCP_IP1.png)  \n\n\n### TCP三次握手\n\n基于字节流，将应用层的数据流分割成报文段并发送给目标节点的TCP层  \n数据包都有序号，对方收到则发送确认ACK确认，未收到则重传。  \n使用校验和来校验的数据在传输过程中是否有误。  \n\n![TCP报文](TCP报文.png)\n\nTCP Flags:\n\n+ URG: 紧急指针标志 urgent\n+ ACK: 确认序号标志 acknowledgment\n+ PSH: push 标志\n+ RST: 重置连接标志 Reset\n+ SYN: 同步序号，用于建立连接过程\n+ FIN: finish标志，释放连接\n\nSYN = 1， ACK = 0 请求链接\n\n#### A => B 通信过程\n\nA 打开 发送SYN = 1, seq = x,进入SYN_SEND状态，等待服务器确认\n\nB 被动打开 发送 SYN = 1, ACK = 1, seq = y, ack = x + 1，此时服务器进入SYN_RECV状态\n\nA 接收后发送 ACK = 1, seq = x + 1, ack = y + 1 ，双方进入ESTABLISHED状态\n\n![三次握手](三次握手.png)\n\n#### 为什么需要三次握手\n\n为了初始化Sequence Number 的初始值\n\n起因:\n> Server接收到Client的SYN，回复SYN-ACK的时候未收到ACK\n> Server不断充实直至超时，Linux默认等待63秒才断开连接\n\n针对SYN Flood的防护措施\n\n### TCP的四次挥手\n\n#### A => B 四次挥手\n\nA: FIN = 1, seq = u, FIN_WAIT_1\nB: ACK = 1, seq = v, ack = u + 1  ,进入CLOSE_WAIT状态(半关闭状态)， 客户端进入 FIN_WAIT_2  \nB: FIN = 1, ACK = 1, seq = w, ack = u + 1, LAST_ACK  \nA: ACK = 1, seq = u + 1m, ack = w + 1, TIMEWAIT (2 * MSL)\n\n![四次挥手](四次挥手.png)\n\n#### 为什么又TIME_WAIT状态\n\n(2MSL) 两倍最大报文段传输时间\n\n原因:\n\n+ 确保有足够的时间让对方收到ACK包  \n+ 避免新旧连接混淆\n\n#### 为什么需要四次握手才能断开连接\n\n因为全双工，发送方和接收方都需要FIN报文和ACK报文\n\n#### 服务器出现大量CLOSE_WAIT状态的原因\n\n对方关闭socket连接，我方忙于读写，没有及时关闭连接\n\n+ 检查代码，特别是释放资源的代码\n+ 检查配置，特别是处理请求的线程配置  \n\n### UDP\n\n#### UDP 特点\n\n+ 面向非连接\n+ 不维护连接状态。支持同时向多个客户端传输相同的消息\n+ 数据包报头只有8字节，额外开销小\n+ 吞吐量只受限于数据生成速率、传输速率以及机器性能\n+ 尽量交付，不需要维护复杂的状态表\n\n#### TCP 和 UDP 的区别\n\n+ 面向链接 vs 无连接\n+ 可靠 vs 不可靠\n+ 有序性 vs 无序性\n+ 速度慢 vs 速度快\n+ 重量级(20) vs 轻量级(8)\n\n#### TCP 滑动窗口\n\n+ RTT: 发送数据包到收到对应ACK\n+ RTO: 重传时间间隔\n\nRTO 由 RTT 计算\n\n滑动窗口: 流量控制和乱序重排\n\n### HTTP\n\n超文本传输协议\n\n- 支持客户/服务器模式 (Client - Server)\n- 简单快速 (get/post)\n- 灵活\n\nHTTP 请求步骤\n\n- 客户端连接到web服务器\n- 发送HTTP请求\n- 服务器接受并返回HTTP响应\n- 释放连接TCP连接\n- 客户端浏览器解析HTML内容\n\n##### 在浏览器地址栏键入一个URL，按下回车之后经历的流程\n\n- 逐层DNS解析\n- TCP连接(3次)\n- 发送HTTP请求\n- 服务器处理请求并返回HTTP报文\n- 浏览器解析渲染\n- 连接结束(4次挥手)\n\n#### HTTP 状态码\n\n五种可能的取值\n\n- 1XX: 指示信息--表示请求已经接收，继续处理\n- 2xx: 成功-- 表示请求已被成功接收、理解、接受\n- 3xx: 重定向--要完成请求必须进行进一步操作\n- 4xx: 客户端错误--请求有语法错误或请求无法实现\n- 5xx: 服务器端错误--服务器未能实现合法的请求\n\n常见状态码\n\n- 200 OK: 正常返回\n- 400 Bad Request:客户端请求有语法错误，无法被服务器理解\n- 401 Unauthorized: 请求未经授权，这个状态代码必须和WWW-Authenticate 报头域一起使用\n- 403 Forbidden: 服务器收到请求，但是拒绝提供服务\n- 404 Not Found: 请求资源不存在 (例如输入了错误的URL)\n- 500 Internal Server Error: 服务器发生了不可预期的错误\n- 503 Server Unavailable: 服务器当前不能处理客户端的请求，一段时间后可能恢复正常。  \n\n#### GET 和 POST 请求的区别\n\n从三个层面来解答\n\n- HTTP报文层面，GET将请求信息放在URL，POST放在报文体中\n- 数据库层次: GET符合幂等性和安全性，POST不符合\n- 其他层面: GET可以被缓存、被存储，而POST不行\n\n#### Cookie 和 Session的区别\n\n##### Cookie\n\n- 是由服务器发给客户端的特殊信息，以文本的形式存放在客户端\n- 客户端再次请求的时候，会把Cookie回发 \n- 服务器接收到后，会解析Cookie生成与客户端相对应的内容\n\n发送过程\n\n- Client => HTTP req Server\n- Client <= HTTP resp + set-Cookie Server\n- Client => HTTP req + Cookie Server\n- Client <= HTTP resp Server\n\n##### Session\n\n- 服务器端的机制，在服务器上保存的信息\n- 解析客户端请求并操作session id ，按需保存状态信息\n\n实现方式\n\n1. Cookie 来实现\n2. URL来回写实现(如果Cookie被禁用)\n\n- Client => req Server\n- Client <= resp + set-Cookie:JSESSIONID=xxx Server\n- Client => req + Cookie:JSESSIONID=xxx Server\n- Client <= resp server\n\n##### 区别\n\n1. Cookie 数据存放在客户的浏览器，Session数据存放在服务器上\n2. Session相对于Cookie 更安全\n3. 若考虑减轻服务器负担，应当使用Cookie\n\n### HTTP 和 HTTPS\n\n\nHTTP TCP IP\nHTTPS SSL/TLS TCP IP\n\n保护交换数据隐私，安全版的HTTP\n\n#### SSL\n\n(security sockets layer, 安全套接层)\n\n- 为网络通信提供安全及数据完整性的一种安全协议\n- 是操作系统对外的API，SSL3.0后更名为TLS\n- 采用身份验证和数据加密保证网络通信的安全和数据的完整性\n\nHTTPS 数据传输流程\n\n- 浏览器将支持的加密算法信息发送给服务器\n- 服务器选择一套浏览器支持的加密算法，以证书的形式发回给浏览器(CA机构，有效期，公钥，所有者)\n- 浏览器验证证书的合法性，并结合证书公钥加密信息发送给服务器\n- 服务器使用私钥解密信息，验证哈希，加密相应信息回发浏览器\n- 浏览器解密响应消息，并对消息进行验证，之后进行加密交互数据\n\n#### HTTP和HTTPS的区别\n\n- HTTPS需要到CA申请证书，HTTP不需要\n- HTTPS密文传输，HTTP明文传输\n- 连接方式不同，HTTPS默认使用443端口，HTTP使用80端口\n- HTTPS= HTTP+加密+认证+完整新保护，比HTTP更安全\n\nHTTP => HTTPS 301跳转也可能被劫持，因此要用HSTS优化\n\n### Socket\n\nSocket是对TOC/IP的抽象，是操作系统对外开放的接口\n\n#### Socket通信流程\n\n![Socket](socket.jpg)\n\n编写一个网络应用程序,有客户端与服务器端,客户端向服务器发送一个字符串,服务器收到该字符串后将其打印到命令行上,\n然后向客户端返回该字符串的长度,最后,客户端输出服务器端返回的该字符串的长度,分别用TCP和UDP两种方式去实现  \n\n## 数据库\n\n### 如何设计一个关系型数据库(RDBMS)\n\n1. 程序实例  \n    - 存储管理\n    - 缓存机制\n    - SQL 解析\n    - 日志管理\n    - 权限划分\n    - 容灾机制\n    - 索引管理\n    - 锁管理\n\n2. 存储(文件系统)\n\n### 索引模块\n\n#### 为什么要使用索引\n\n快速查询数据\n\n#### 什么信息能成为索引\n\n主键，唯一键以及普通键\n\n#### 索引的数据结构\n\n生成索引，建立二叉查找树进行二分查找\n生成索引，建立B-Tree 结构进行查找\n生成索引，建立B+Tree 结构进行查找\n生成索引，建立Hash结构进行查找\n\n![二叉树](二叉树.png)\n\n#### B Tree\n\n定义\n\n- 根节点至少包括两个孩子\n- 书中每个节点最多含有m铬孩子( m>= 2)\n- 除根节点和叶节点外，其他每个节点至少有ceil(m/2)个孩子\n- 所有叶子节点都位于同一层\n- 假设每个非终端节点中包含有n个关键字信息，其中：\n    1. Ki(i=1...n)为关键字，且关键字按顺序升序排序K(i-1) < Ki\n    2. 关键是个数满足: [ceil(m / 2) - 1] <= n <= m - 1\n    3. 非叶子节点的指针:P[1],P[2],... P[M], P[1]指向的关键字小于K[1]的子树，\n        P[M]指向关键字大于P[M -1] 的子树，其他P[i]指向关键字属于(K[i-1], K[i])的子树\n\n#### B+ Tree\n\nB+ 树是B树的变体，其定义基本与B树相同，除了：\n    - 非叶子节点的子树指针与关键字个数相同\n    - 非叶子节点的子树指针P[i],指向关键字值([K[i],K[i+1])\n    - 非叶子节点仅用来索引，数据都保存在叶子节点中\n    - 所有叶子节点均有一个链指针指向下一个叶子节点\n\n#### 结论\n\nB+ Tree更适合用来做存储索引\n    - B+ Tree 的磁盘读写代价更低\n    - B+ Tree 的查询效率更加稳定\n    - B+ Tree 更加有利于对数据库的扫描\n\n#### Hash索引\n\n优点 查询速度O(1)\n缺点:\n\n- 仅仅能够满足'=','IN', 不能使用范围查询\n- 无法被用来避免数据的排序操作\n- 不能利用部分索引键查询\n- 不能避免表扫描\n- 遇到大量Hash值相等的情况后性能并不一定会比B Tree索引高\n\n#### 密集索引和稀疏索引的区别\n\n- 密集索引文件中的每个搜索码值都对应一个索引值\n- 稀疏索引只为某些值建立索引项\n\n##### InnoDB\n\n- 若一个主键被定义，该主键则作为密集索引\n- 若没有主键被定义，该表的第一个唯一非空索引则作为密集索引\n- 若不满足以上条件，innodb内部会生成一个隐藏主键(密集索引)\n- 非主键索引存储相关键位和其对于的主键值，包含两次查找\n\nmyISAM索引和DB是分开的，InnoDB索引和DB是存放在一起的\n\n### 索引问答\n\nQ: 为什么要用索引  \nA: 避免全表扫描数据，提升检索效率\n\nQ: 什么样的信息能成为索引  \nA: 主键、唯一键等有区分性的数据\n\nQ: 索引的数据结构\nA: 主流是B+ Tree，以及hash结构 ， bitMap 等，mysql不支持bitmap，基于innoDB以及myISAM的mysql不显示支持hash\n\n\nQ: 密集索引和稀疏索引的区别\nA: 密集索引文件中的每个搜索码值都对应一个索引值，稀疏索引只为某些值建立索引项\n\n#### mysql\n\n##### 如何定位并优化慢查询sql\n\n- 根据慢日志定位慢查询sql\n\n- 使用explain等工具分析Sql\n    - type\n        - 表示: 找到数据行的方式\n        - index 索引查询 / ALL 证明是全局查找(需要优化)\n    - extra\n        - 出现以下两项意味着MYSQL根本不能使用索引，效率会受到重大影响，应尽可能对此进行优化\n        - Using filesort —— 无法利用索引排序\n        - Using temporary  —— 使用了临时表，order by 或者分组查询 group by\n\n- 修改sql 或者让sql尽量走索引  \n    - 使用有索引的字段代替\n    - 添加索引 alter table tb_name add index idx_name(name);\n\n\n##### 联合索引的最左匹配原则 \n\n\n#### 索引是建的越来越多好吗\n\n- 数据量小的表不需要建立索引，建立会增加额外的索引开销\n- 数据变更需要维护索引，因此更多的索引意味着更大的维护成本\n- 更多的索引意味着需要更多的空间\n\n#### 锁模块\n\n##### MyISAM与InnoDB关于锁方面的区别是什么\n\n- MyISAM 默认使用的是表级锁，不支持行级锁\n- InnoDB 默认用的是行级锁，也支持表级锁\n\n共享锁和排斥锁的兼容性\n\n<!-- Share && exclude\n\n|   | X    | S    |\n|---|------|------|\n| X | 冲突 | 冲突 |\n| S | 冲突 | 兼容 | -->\n\n行级锁不一定比表级锁好，锁的粒度越细，带价越高，需要扫描表到对应的对其上锁，代价是比较大的。  \n\nInnoDB 相比 MyISAM 带来了更大的开销。\n\n##### MyISAM适合的场景\n\n- 频繁执行全表count 语句\n- 对数据进行增删改的频率不高，查询非常频繁\n- 没有事务\n\n##### InnoDB适合的场景\n\n- 数据增删改查都相当频繁\n- 可靠性要求比较高，要求支持事务\n\n##### 数据库锁的分类\n\n- 按锁的粒度划分可以分为：表级锁，行级锁，页级锁\n- 按锁级别划分，可分为共享锁和排他锁\n- 按加锁方式划分，可分为自动锁，显示锁\n- 按操作划分可分为DML锁，DDL锁\n- 按使用方式划分，可分为乐观锁、悲观锁\n\n### 数据库事务的四大特性\n\nACID\n\n> * A:原子性,Atomicity\n> * C:一致性,Consistency\n> * I:隔离性,Isolation\n> * D:持久性,Durability\n\n### 事务鼓励级别以及各级别下的并发访问问题\n\n并发访问引起的问题和如何避免\n\n- 更新丢失-- mysql 所有事务隔离级别在数据库层面上均可避免\n- 脏读-- READ-COMMITTED事务隔离级别以上可避免\n- 不可重复读-- REPEATABLE-READ 事务隔离级别以上可避免\n- 幻读-- SERIABLIZABLE事务隔离级别可避免\n\n#### 脏读、不可重复读、幻象读概念说明\n\n1. 脏读：指当一个事务正字访问数据，并且对数据进行了修改，而这种数据还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据还没有提交那么另外一个事务读取到的这个数据我们称之为脏数据。依据脏数据所做的操作肯能是不正确的。  \n2. 不可重复读：指在一个事务内，多次读同一数据。在这个事务还没有执行结束，另外一个事务也访问该同一数据，那么在第一个事务中的两次读取数据之间，由于第二个事务的修改第一个事务两次读到的数据可能是不一样的，这样就发生了在一个事物内两次连续读到的数据是不一样的，这种情况被称为是不可重复读。\n3. 幻象读：一个事务先后读取一个范围的记录，但两次读取的纪录数不同，我们称之为幻象读（两次执行同一条 select 语句会出现不同的结果，第二次读会增加一数据行，并没有说这两次执行是在同一个事务中）  \n\n#### 如何避免\n\n| 事务隔离级别 | 更新丢失 | 脏读 | 不可重复读 | 幻读 |\n|--------------|----------|------|------------|------|\n| 未提交读     | 避免     | 发生 | 发生       | 发生 |\n| 已提交读     | 避免     | 避免 | 发生       | 发生 |\n| 可重复读     | 避免     | 避免 | 避免       | 发生 |\n| 串行化       | 避免     | 避免 | 避免       | 避免 |\n\n在mysql中的innodb引擎,原子性,一致性,隔离性通过redo和undo实现,redo 就是ib_logfile物理文件,而undo默认在共享表空间ibdata里面,通过设置参数可以独立出来.\n\n#### 数据库操作事务隔离\n\n##### 读取未提交的事务里面的数据(脏读)\n\n设置隔离级别方法\n\n```sql\nset session transaction isolation level read uncommitted;\n```\n\n开始事务\n\n<!-- show variables like '%tx_isolation%'; -->\n\n```sql\nset session transaction isolation level read uncommitted;\n\nbegain\nupdate propagation set count = count + 1 where id = 1\n\nrollback (回滚操作)\n```\n\n另外开一个session 进行查询，可看到并不还没有更改数据。\n\n```sql\nset session transaction isolation level read uncommitted;\n\nselect * from propagation\n\n```\n\nbegain中执行的操作  被第二个进程读到了，导致脏读，一但事务回滚，第二个进程保存的是之前的结果。\n\n#### InnoDB可重复读隔离级别下如何避免幻读\n\n- 表象: 快照读(非阻塞读) -- 伪\n    - 当前读是上了锁的增删改查， update,delete,insert\n    - 快照读: 不加锁的非阻塞读,select \n\n### 语法\n\n关键语法\n\n- Group By\n- Having\n- Count, Sum, Max, Min, Avg\n\n#### Group By\n\n- 满足 \"select 自居的列名必须为分组列或列函数\n- 列函数对于 group by 子句定义的每个组各返回一个结果\n\n```SQL\n# 查询所有同学学号、姓名、选课数、总成绩\nSELECT\n\ts.student_id,\n\tstu.name,\n\tCOUNT( course_id ),\n\tSUM( score ) \nFROM\n\tscore s,\n\tstudent stu\nWHERE\n\ts.student_id = stu.student_id\nGROUP BY\n\tstudent_id\n```\n\n#### Having\n\n- 通常与Group By 子句一起使用\n- WHERE 过滤行，Having过滤组\n- 出现在同一sql的顺序: WHERE > GROUP BY > HAVING\n\n## Redis\n\n### 缓存知识考点\n\n#### 缓存中间件-Memcache 和 Redis 的区别\n\n|                    | Memcache | Redis |\n|:------------------:|:--------:|:-----:|\n|      数据类型      | 类似Hash |  丰富 |\n| 数据磁盘持久化存储 |  不支持  |  支持 |\n|        主从        |  不支持  |  支持 |\n|        分片        |  不支持  |  支持 |\n\n简单key-value可以选择Memcache  \n\n### 为什么Redis能这么快\n\n10w+ QPS(query per second)\n\n- 完全基于内存，绝大部分请求是纯粹的内存操作，执行效率高\n- 数据结构简单，对数据操作也简单\n- 采用单线程，单线程也能处理高并发请求，想多核也可以多实例\n- 多路I/O复用模型，非阻塞IO\n\n#### 多路I/O复用\n\n##### I/O复用模型\n\nRedis 采用的I/O多路复用函数: epoll/kqueue/evport/select\n\n- 因地制宜\n- 优先选择时间复杂度为O(1)的多路服用函数作为底层实现\n- 以时间复杂度为O(n)的select作为保底\n- 基于react设计模式监听I/O事件\n\n#### Redis 数据类型\n\n供用户使用的数据类型\n\n- String : 最基本的数据类型，二进制安全(可以存JPG图片)\n    - get (key)\n    - set (key) (value)\n- Hash: String元素组成的字典，适合用于存储对象\n    - hget (struct) (key)\n    - hmset (struct) (key1) (value1) (key2) (value2) ... \n- List: 列表，按照String元素插入顺序排序(有点像栈)\n    - lrange (list) (min) (max)\n    - lpush (list) (key)\n- Set: Sting 元素组成的无序集合，通过哈希表实现，不允许重复\n    - smembers (set)\n    - sadd (set) (key)\n- Sorted Set: 通过分数来为集合中的成员进行从小到大的排序\n    - zrangebyscore (set) (min) (max)\n    - zadd (set) (score) (key)\n- HyperLogLog 用于计数\n- Geo 存储地理位置\n\n##### 底层数据类型基础\n\n- 简单动态字符串\n- 链表\n- 字典\n- 跳跃表\n- 整数集合\n- 压缩列表\n- 对象\n\n### 从海量key里查询出某一固定前缀的key\n\n\n- KEYS pattern: 查找所有符合给定模式pattern的key\n    - KEYS指令一次性返回所有匹配的KEY\n    - 键的数量过大会使服务卡顿\n\n- SCAN cursor [MATCH pattern] [COUNT count]\n    - 基于游标的迭代器，需要基于上一次的游标延续之前的迭代过程\n    - 以0作为游标开始一次新的迭代，知道命令返回游标0完成一次便利\n    - 并不保证每次执行都返回某个给定数量的元素，支持模糊查询\n    - 一次返回的数量不可控，只能是大概率符合count参数\n\n### Redis实现分布式锁\n\n分布式锁需要解决的问题\n\n- 互斥性\n- 安全性\n- 死锁\n- 容错\n\n#### SET\n\nSET key value [EX seconds] [PX milliseconds] [NX|XX]\n\n- EX second: 设置键的过期时间为 second 秒\n- PX millisecond: 设置键的过期时间为millisecond 毫秒\n- NX: 只在键不存在时，才对键进行设置\n- XX: 只在键已经存在时，才对键进行设置操作\n- SET操作成功完成时，返回OK，否则返回nil\n\n#### 大量的key同时过期的注意事项\n\n集中过期，由于清除大量的key很耗时，会出现断站的卡顿现象\n    - 解决方案: 在设置key 的过期时间时，给每个key加上随机值\n\n### 使用Redis做异步队列\n\n使用List作为队列，RPush生产消息，LPOP消费消息\n\n```redis\nrpush list aaa\nrpush list bbb\nrpush list ccc\nlpop list // aaa\nlpop list // bbb\nlpop list // ccc\n\n```\n\n- 缺点： 没有等待，队列里有值就直接消费\n- 弥补： 可以通过在应用层引入Sleep机制去调用LPOP重试\n\n如果不想用sleep 可以用BLPOP\n\n#### BLPOP\n\nblpop key [key ...] timeout: 阻塞直到队列有消息或者超时\n\n```redis\nsession 1:\n    blpop list 30  // 为空进入等待30s\n\nsession 2:\n    rpush list a\n\nsession 1:\n    1) \"a\"\n\n```\n\n缺点是只能共给一个消费者使用\n\n#### pub/sub\n\n主题订阅者模式\n\n- 发送者(pub)发送消息，订阅者(sub)接收消息\n- 订阅者可以订阅任意数量的频道\n\n```redis\nsubscribe (channel) 接收广播\npublish (channel) (content) 发送广播\n```\n\n缺点： 消息的发布是无状态的，无法保证可达\n\nkafka 和 MQ\n\n### 持久化方法之 RDB\n\nRDB(快照)持久化：保存某个时间点的全量数据快照\n\n手动：\n\n- SAVE: 阻塞Redis的服务器进程，直到RDB文件创建完毕\n- BGSAVE: Fork出一个子进程来创建RDB文件，不阻塞服务器进程\n\n自动：\n\n- 根据redis.conf配置里面的SAVE m n定时触发(用的是BGSAVE)\n- 主从复制时，主节点自动触发\n- 执行Debug Reload\n- 执行Shutdown且没有开启AOF持久化\n \n缺点：\n\n- 内存数据的全量同步，数据量大会由于I/O而严重影响性能\n- 可能会因为Redis 挂掉而丢失从当前至最后一次快照期间的数据\n\n### 持久化之 AOF\n\nAOF (Append-Only-File) 持久化：保存写状态\n\n- 记录下除了查询以外的所有变更数据库状态的指令\n- 以append的形式追加保存到AOF文件中\n\n日志重写解决AOF文件大小不断增大的问题，原理如下\n\n    - 调用fork(), 创建一个子进程\n    - 子进程把新的AOF写道临时文件，不依赖原来的AOF文件\n    - 主进程持续把新的变动同时写到内存和原来的AOF里\n    - 主进程获取子进程重写AOF的完成信号，往新的AOF同步增量变动\n    - 使用新的AOF文件替换掉旧的AOF文件\n\n手动重写指令: BGREWRITEAOF\n\n### RDB和AOF\n\n#### RDB和AOF共存时的恢复流程 \n\n![RDB&AOF](RDB&AOF.png)\n\n#### RDB和AOF的优缺点\n\n|      |               RDB              |                    AOF                   |\n|:----:|:------------------------------:|:----------------------------------------:|\n| 优点 |  全量数据快照，文件小，恢复快  | 可读性高，适合保存增量数据，数据不易丢失 |\n| 缺点 | 无法保存最近一次快照之后的数据 |          文件体积大，恢复时间大          |\n\n### RDB-AOF混合持久化方式\n\ndefault RDB-AOF\n\n- BGSAVE做镜像全量持久化，AOF做增量持久化\n\n### pipeline 的好处\n\n- pipeline 跟linux 的管道类似\n- Redis基于请求/响应模型，单个请求处理需要一一对应\n- pipeline批量执行指令，节省多次IO往返的时间\n- 有顺序依赖的指令建议分批发送\n\n### redis的同步机制\n\n主从同步原理\n\n#### 全同步过程\n\n- Salve 发送sync 命令到Master\n- Master启动一个后台进程，将Redis中的数据快照保存到文件中(BGSAVE)\n- Master将保存数据快照期间接收到的写命令缓存起来\n- Master完成写文件操作后，将该文件发送给Salve\n- 使用新的AOF文件替换掉旧的AOF文件\n- Master将这期间收集的增量写命令发送给Salve端\n\n#### 增量同步过程\n\n- Master接收到用户的操作指令，判断是否需要传播到Slave\n- 将操作记录追加到AOF文件\n- 将操作传播到其他Slave:\n    1. 对齐主从库\n    2. 往响应缓存写入指令\n- 将缓存中的数据发给Slave\n\n\n### Redis Sentinel (哨兵机制)\n\n解决主从同步Master宕机后的主从切换问题：\n\n- 监控： 检查主从服务器是否运行正常\n- 提醒： 通过API向管理员或者其他应用程序发送故障通知\n- 自动故障迁移：主从切换\n\n#### 流言协议Gossip\n\n在杂乱无章中寻求一致\n\n- 每个节点都随机的与对方通信，最终所有节点达成一致的状态\n- 种子节点定期随机向其他节点发送节点列表以及需要传播的信息\n- 不保证信息一定会传递给所有节点，但是最终会趋于一致\n\n### Redis 的集群原理 \n\n如何从海量数据里快速找到所需？\n\n- 分片：按照某种规则去划分数据，分散存储在多个节点上\n- 常规的按照哈希划分无法实现节点的动态增减\n\n一致性哈希算法： 对2^32取模，将哈希值空间组织成虚拟的圆环\n将数据key使用相同的函数hash计算出哈希值\n \n\n数据存储节点如下，若Node C宕机，则会存储到D节点上\n![Node_C宕机](redis_node_c.png)\n \n新增Node X服务器，则在B到X之间的数据(object c)更改存储位置到X的位置上\n\n![Node_X](Node_X.png)\n\n#### Hash环数据倾斜问题\n\n引入虚拟节点解决数据倾斜问题\n\n![vitual_node](vitual_node.png)\n\n## Linux\n\n- 体系结构主要分为用户态和内核态(kernel)\n- 内核: 本质是一段管理计算机硬件设备的程序\n- 系统调用: 内核的访问接口，是一种能够能再简化的操作\n- 公用函数库: 系统调用的组合拳\n- Shell: 命令解释器，可编程\n\n\n\nman 2(系统调用) 3(公共库函数)\n\n```shell\nman 2 syscalls\nman 2 acct\n```\n### find\n\n语法\n\n```sh\nfind path [options] params\n```\n\n指定目录下查找文件\n-iname 可以忽略大小写\n\n### grep\n\n```sh\ngrep [options] pattern file\ngrep -o pattern # 选出满足条件的\ngrep -v pattern # 过滤包含该pattern的\n```\n\n- 全称: Global Regular Expression Print\n- 作用: 查找文件里符合条件的字符串\n\n### 管道 |\n\n- 可将指令连接起来，前一个指令的输出作为后一个指令的输入\n- 只能处理前一个指令的正确输出，无法处理错误\n- 右边的命令必须能够接收标准输入流，否则传递过程中数据会被抛弃\n    - 如sed, awk, grep, cut, head, top, less, more, wc, join, sort, split\n\n### 统计\n\n#### awk \n\n```sh\nawk [options] 'command' file\n```\n\nawk -f 设置分隔符\n \n\n- 一次读取一行文本，按输入分隔符进行切片，切成多个组合部分\n- 将切片直接保存在内建的变量中，$1,$2...$0表示行的全部\n- 支持对单个切片的判断，支持循环判断，默认分隔符为空格\n\n### 替换\n\n#### sed\n\n```sh\nsed [option] 'sed command' file\nsed -i 's/^Str/String/' replace.java\nsed -i 's/\\.$/\\;' replace.java\n```\n\n- 全名 stream editor 流编辑器\n- 适合用于对文本的行内容进行处理\n\n## JVM\n\n### 谈谈你对Java的理解\n\n- 平台无关性\n- GC\n- 语言特性(泛型、反射)\n- 面向对象\n- 库类\n- 异常处理\n\n#### Compile Once, Run Anywhere如何实现\n\n- 编译时\n- 运行时\n\njavac编译，生成字节码\n\n![ 跨平台](JAVA跨平台.png)\n\nJava源码首先被编译为字节码，再由不同平台的JVM进行解析，Java语言在不同平台上运行时不需要进行重新编译，Java虚拟机在执行字节码的时候，把字节码转换成具体平台上的机器指令。\n\n#### 为什么JVM不直接将源码解析成机器码去执行\n\n为什么要先编译成字节码再解析成机器码\n\n- 准备工作: 每次执行都需要各种检查\n- 兼容性: 也可以将别的语言解析成字节码\n\n#### JVM如何加载.class文件\n\n![JVM](JVM.png)\n\n- Class Loader: 依据特定格式，加载class文件到内存 (本地接口)\n- Execution Engine: 对命令进行解析 (解释器)\n- Native Interface: 融合不同开发语言的原生库为Java所用\n- Runtime Data Area: JVM内存空间结构模型\n\n#### 谈谈反射\n\n##### 列举反射的例子\n\n// TODO 添加代码\n\n#### ClassLoader\n\n类从编译到执行的过程\n\n- 将源文件编译为字节码文件\n- ClassLoader将字节码转换为JVM中的Class< xx >对象\n- JVM利用Class< xx > 对象实例化为 xx 对象\n\nClassloader在Java中有着非常重要的作用,它主要工作在 Class 装载的加载阶段,其主要作用是从系统外部获得 ** Class二进制数据流 **。它是Java的核心组件所有的 Class都是由 Classloader进行加载的Classloader负责通过将 Class文件里的二进制数据流装载进系统,然后交给Java虚拟机进行连接、初始化等操作。\n\n##### ClassLoader种类\n\n- BootStrapClassLoader: C++编写，加载核心库java.*\n- ExtClassLoader: java编写，加载扩展库 javax.*\n- AppClassLoader: java编写，加载程序所在目录\n- 自定义ClasLoader: java编写，自定义加载\n    - findClass\n    - defineClass\n    // TODO 代码\n\n|类加载器名称|加载范围|\n|:-------:|:-------:|\n|启动类加载器 Bootstrap ClassLoader | 存放在<JAVA_HOME>\\lib 目录中的，并且是虚拟机识别的类库加载到虚拟机内存中的|\n|扩展类加载器 Extension ClassLoader| 存放在<JAVA_HOME>\\lib\\ext 目录中的所有类库，开发者可以直接使用|\n|应用程序加载器 Application ClassLoader | 加载用户类路径上指定的类库，开发者可以直接使用，一般情况下这个就是程序中默认的类加载器 |\n|自定义加载器 Custom ClassLoader | 加载自定义的类 |\n\n##### 如何组织类加载器\n\n虚拟器引入了双亲委派模型  \n当一个加载器进行类加载的时候，先委派给双亲加载器加载。双亲无法加载的时候再返回自己加载。\n好处: 保证类有合适的优先级的层次关系，保证程序稳定运行。  \n\n![双亲委派](双亲委派.png)\n\n// TODO ClassLoader 源码\n\n[openjdk](http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file)\n\n##### 为什么使用双亲委派机制去加载类\n\n- 避免多份同样字节码的加载\n\n##### 类的加载方式\n\n- 隐式加载: new\n- 显示加载: loadClass, forName等(不支持反射，需要newInstance()获取实例)\n\n###### 类的生命周期\n\n![类的生命周期](类的声明周期.png)\n\n类加载包括 加载 验证 准备 解析 初始化五个阶段  \n\n- 加载: 类加载器(可自己设置)，热部署，加密解密\n- 验证: 字节流包含的信息符不符合虚拟机要求，会不会危害虚拟机  \n- 准备: 为类变量分配内存，设置初始值 。  \n- 解析: 将常量池的一些引用替换为实际值。\n- 初始化: 赋值\n- 使用: 构造过程，构造方法\n\n![类加载](类加载.png)\n\n###### loadClass 和 forNmae 的区别\n\n- Class.forName 得到的class 是已经初始化完成的\n- Classloader.loadClass得到的class是还没有链接的\n\n例如forName用于加载MySQL jdbc Driver，loadclass 不可以\n\nloadclass 一般用于spring ioc，因为 lazy loading 即懒加载的特性，加快加载速度，等要用到的时候再去初始化\n\n#### Java的内存模型\n\n- 地址空间划分\n    - 内核空间  (主要的系统操纵程序和C运行的空间，逻辑和基于C的进程)\n    - 用户空间  (Java实际运行时使用的内存空间)\n\nJVM内存模型--JDK8\n\n![JVM内存模型](JVM内存模型.png)\n\n##### 程序计数器(Program Counter Register)\n\n- 当前线程执行的字节码行号指示器(逻辑计数器)\n- 改变计数器的值来选取下一条需要执行的字节码指令\n- 和线程时一对一的关系即\"线程私有\"\n- 对Java方法计数，如果时Native方法，计数器值为Undefined\n- 不会发生内存泄漏\n\n##### Java虚拟机栈(Stack)\n\n- Java方法执行的内存模型\n- 包含多个栈帧\n\n// TODO javap -verbose \n\n![stack](Stack.png)\n\n###### 递归为什么会引发java.lang.StackOVerflowError异常\n\n- 递归过深，栈帧数超出虚拟栈深度\n- 虚拟机栈过多会引发java.lang.OutOfMemoryError\n\n##### 本地方法栈(Native Stack)\n\n- 与虚拟机栈相似，主要作用于标注了native的方法\n\n##### 元空间(MetaSpace)\n\n元空间(MetaSpace)与永久代(PermGen)的区别\n\n- 元空间使用本地内存，而永久代使用的是jvm的内存\n\nMetaSpace 相比 PermGen的优势\n\n- 字符串常量池存在永久代中，容易出现性能问题和内存溢出\n- 类和方法的信息大小难以确定，给永久代的大小指定带来了困呐\n- 永久代会为GC带来不必要的复杂性\n- 方便HotSpot与其他JVM如Jrockit的继承\n\n##### Java堆(Heap)\n\n- 对象实例的分配区域\n- GC管理的主要区域\n    - 分代清除算法(新生代，老生代)\n\n##### 常考问题\n\n###### JVM 三大性能调优参数-Xms -Xmx -Xss的含义\n\n- -Xss: 规定了每个线程虚拟机栈(堆栈)的大小\n- -Xms: 堆的初始值\n- -Xmx: 堆能达到的最大值\n\n###### Java的内存模型(堆和栈)\n\nJava内存模型中堆和栈的区别-- 内存分配策略\n\n- 静态存储：编译时确定每个数据目标在运行时的存储空间需求\n- 栈式存储：数据区需求在编译时未知，运行时模块入口前确定\n- 堆式存储：编译时或运行时模块入口都无法确定，动态分配\n\nJava内存中堆和栈的区别\n\n- 联系：引用对象、数组时，栈里定义变量保存堆中目标的首地址\n- 管理方式: 栈自动释放，堆需要GC\n- 空间大小：栈比堆小\n- 碎片相关：栈产生的碎片远小于堆\n- 分配方式: 站支持静态和动态分配，而堆仅支持动态分配\n- 效率： 栈的效率比堆高\n\n元空间、堆、线程独占部分间的联系-内存角度\n\n- 元空间：方法\n- 堆： 对象\n- 栈： 执行过程\n\n不同JDK版本置键的intern()方法的区别-JDK6 VS JDK+\n\n```java\nString s = new String (\"a\");\ns.intern();\n```\n\nJDK6:当调用 intern方法时,如果字符串常量池先前已创建出该字符串对象,则返回池中的该字符串的引用。  \n否则,将此字符串对象添加到字符串常量池中,并且返回该字符串对象的引用。\n\nJDK6+:当调用 intern方法时,如果字符串常量池先前已创建出该字符串对象,则返回池中的该字符串的引用。  \n否则,如果该字符串对象已经存在于Java堆中,则将堆中对此对象的引用添加到字符串常量池中,并且返回该引用;  \n如果堆中不存在,则在池中创建该字符串并返回其引用。\n\n## GC\n\n### Java垃圾回收机制\n\n###### 对象被判定为垃圾的标准\n\n- 没有被其他对象引用\n\n#### 判断对象是否为垃圾的算法\n\n##### 引用计数算法\n\n做法\n\n- 通过判断对象的引用数量来决定对象是否可以被回收\n- 每个对象实例都有一个引用计数器，被引用则+1，完成引用则-1\n- 任何引用计数为0 的对象实例可以被当作垃圾收集\n\n- 优点：执行效率高，程序执行受影响较小\n- 缺点: 无法检测出循环引用的情况，导致内存泄露\n\n##### 可达性分析算法\n\n由离散数学的图论引入的  \n\n通过判断对象的引用链是否可达来决定对象是否可以被回收  \n选择一个GC Root对象\n\n- 虚拟机栈中引用的对象(栈帧中的本地变量表)\n- 方法区中的常量引用对象\n- 方法区中的类静态属性引用的对象\n- 本地方法栈中JNI(Native方法)的引用对象\n- 活跃线程的引用对象\n\n#### 垃圾回收算法\n\n##### 标记-清楚算法(Mark and Sweep)\n\n- 标记: 从根集合进行扫描，对存活的对象进行标记\n- 清楚: 对堆内存从头到尾进行线性遍历，回收不可达对象内存\n\n缺点  \n造成碎片化问题\n\n##### 复制算法(Copying)\n\n- 分为对象面和空闲面\n- 对象在对象面上创建\n- 存货的对象被从对象面复制到空闲区\n- 将对象面所有对象内存清楚\n\n优点  \n\n- 解决碎片化问题\n- 顺序分配内存，简单高效\n- 适用于对象存活率低的场景\n\n适用于分代的年轻代\n\n##### 标记-整理算法(Compacting)\n\n使用了标记清除算法的方式，加上了整理步骤\n\n- 避免内存的不连续行\n- 不用设置两块内存互换\n- 适用于存活率高的场景\n\n##### 分代收集算法(Generational Collector)\n\n组合拳  \n\n- jdk6, jdk7 分为年轻代，老年代，永久代\n- jdk8 以后永久代消失\n\n年轻代存活率低，使用复制算法，老年代存活率高，使用标记清除/整理算法  \n\n##### GC 分类\n\n- Minor GC (年轻代)\n- Full GC (老年代)\n\n###### 年轻代(1/3)\n\n- Eden区(伊甸) (大)\n- 两个Survivor区 (from/to) (小)\n\n如何判断进入老年代  \n\n- 经历一定Minor次数依然存活的对象\n- Survivor区中存放不下的对象\n- 新生成的大对象\n\n常用调优参数\n\n- -XX:SurvivorRatio: Eden 和 Survivor的比值，默认8:1\n- -XX:NewRatio: 老年代和年轻代内存大小的比例\n- -XX:MaxTenurinThreshold: 对象从年轻代晋升到老年代经过GC次数的最大阈值\n\n###### 老年代(2/3)\n\n- 标记-清理算法\n- 标记-整理算法\n\n老年代的GC会涉及新生代，Full GC就是全GC\n\n- Full GC 和 Major GC\n- Full GC 比Minor GC 慢(10倍左右)，但执行频率低\n\n触发Full GC的条件\n\n- 老年代空间不足\n- 永久代空间不足 (jdk6, 7)\n- CMS GC时出现promotion failed, concurrent mode failure\n- Minor GC晋级到老年代的平均大小大于老年代的剩余空间\n- 调用System.gc()\n- 使用RMI来进行RPC管理的JDK应用，每效时执行一次Full GC\n\n###### Stop-the-World\n\n- JVM 由于要执行GC而停止了应用程序的执行\n- 任何一种GC算法中都会发生\n- 多数GC优化通过减少Stop-the-world发生的时间来提高程序性能(实现高吞吐)\n\n###### Safepoint\n\n- 分析过程中对象引用关系不会发生变化的点\n- 产生安全点的地方: 方法调用，循环跳转，异常跳转等\n- 安全点数量适中\n\n#### 垃圾收集器\n\nJVM的运行模式\n\n- Server\n- Client\n\n##### 年轻代常见的垃圾收集器\n\n###### Serial收集器(-XX: +UseSerialGC, 复制算法)\n\n- 单线程收集，进行垃圾收集时，必须暂停所有工作线程\n- 简单高效，Client模式下默认的年轻代收集器\n\n###### ParNew收集器(-XX: +UseParNewGC, 复制算法)\n\n- 多线程收集，其他行为同Serial\n- 单核执行效率不如Serial，多核下有优势\n\n###### Parallel Scavenge收集器(-XX: +UseParallelGC，复制算法)\n\n- 吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)\n- 比起关注用户线程停顿时间，更关注系统的吞吐量\n- 在多核下执行才有优势，Server模式下默认的年轻代收集器\n\n##### 老年代垃圾收集器\n\n###### Serial Old收集器(-XX: +UseSerialOldGC, 标记-整理算法)\n\n其他特点同年轻代\n\n###### Paraller Old收集器(-XX: +UseParallelOldGC，标记-清理算法)\n\n- 多线程，吞吐量优先\n\n###### CMS收集器(-XX: +UseConcMarkSweepGC， 标记-清理算法)\n\n- 初始标记: stop-the-world\n- 并发标记: 并发追溯标记，程序不会停顿\n- 并发预清理: 查找执行并发标记阶段从年轻代晋升到老年代的对象\n- 重新标记: 暂停虚拟机，扫面CMS堆中的剩余对象\n- 并发清理: 清理垃圾对象，程序不会停顿\n- 并发重置: 重置CMS收集器的数据结构\n\n##### G1收集器(-XX: +UseG1GC，复制+标记-整理算法)\n\nGarbage First收集器优点\n\n- 并发和并行\n- 分代收集\n- 空间整合\n- 可预测的停顿\n\nG1\n\n- Java堆内存划分为多个大小相等的Region\n- 年轻代和老年代不再物理隔离\n\n#### GC 的面试题\n\n##### Object的finalize()方法的作用是否与C++的析构函数作用相同\n\n- 与C++的析构函数不同，析构函数调用确定，而它是不确定的\n- 将未被引用的对象放置在F-Queue队列\n- 方法执行随时可能会被终止\n- 给予对象最后一次重生的机会\n\n##### G1, ZGC\n\n##### 引用\n\n###### 强引用\n\n- 最普通的引用: Object obj = new Object()\n- 抛出OutOfMemoryError 终止程序也不会回收具有强引用的对象\n- 通过将对象设置为null来弱化引用，使其被回收\n\n###### 软引用\n\n- 对象处在有用但非必须的状态\n- 只有当内存空间不足时，GC会回收该引用的对象的内存\n- 可以用来实现高速缓存\n\n###### 弱引用\n\n- 非必须的对象，比软引用更弱\n- GC时会被回收\n- 被回收的概率不大，因为GC线程优先级比较低\n- 适用于引用偶尔被使用且不影响垃圾收集的对象\n\n###### 虚引用\n\n- 不会决定对象的生命周期\n- 任何时候都可能被垃圾收集器回收\n- 跟踪对象被垃圾收集器回收的活动，起哨兵作用\n- 必须和引用队列ReferenceQueue联合使用 \n\n| 引用类型 | 被垃圾回收时间 |      用途      |      生存时间     |\n|:--------:|:--------------:|:--------------:|:-----------------:|\n|  被强用  |    从来不会    | 对象的一般状态 | JVM停止运行时终止 |\n|  被软用  |  在内存不足时  |    对象缓存    |   内存不足时终止  |\n|  弱引用  |  在垃圾回收时  |    对象缓存    |    gc运行后终止   |\n|  虚引用  |     Unknown    |   标记、哨兵   |      Unknown      |\n\n\n###### 引用队列(reference queue)\n\n- 无实际存储结构，存储逻辑依赖于内部节点之间的关系来表达\n- 存储关联的且被GC的软引用，弱引用以及虚引用\n  \n## Java线程\n\n### 进程和线程的区别\n\n#### 进程和线程的由来\n\n- 串行: 串行执行任务，需要长时间等待用户输入\n- 预处理:预先将用户指令集中成清单，批量串行处理用户指令，任无法并发执行\n- 进程: 进程独占内存空间。保存各自运行状态，相互不干扰且可切换，为并发处理任务提供了可能性\n- 线程: 共享进程的内存资源，相互切换更快速，支持更细粒度的任务控制，使进程内的子任务得以并发执行\n\n#### 区别\n\n进程是资源分配的最小单位，线程是CPU调度的最小单位\n\n- 所有与进程相关的资源都被记录在PCB中(进程控制块)\n- 进程是抢占处理机的调度单位，线程属于某个进程，共享其资源\n- 线程只由堆栈寄存器、程序计数器和TCB组成(线程控制块)\n\n区别:\n\n- 线程不是独立应用。而进程可以看做独立应用\n- 进程又独立的空间，相互不影响，县城只是进程不同的执行路径\n- 线程没有独立的地址空间，多进程的程序比多线程程序健壮\n- 进程的切换比线程的切换开销大\n\n### 进程和线程的关系\n\n- Java堆操作系统提供的功能进行封装，包括进程和线程\n- 运行一个程序会产生一个进程，进程包含至少一个线程\n- 每个进程对应一个JVM实例，多个线程共享JVM里的堆\n- Java采用单线程编程模型，程序会自动创建主线程\n- 主线程可以创建子线程，原则上要晚于子线程结束\n\n### Thread中的start和run方法的区别\n\nThread#start() => JVM_StartThread => thread_entry => Thread#run()\n\n- 调用start()方法会创建一个新的子线程并启动\n- run()方法只是Thread的一个普通方法的调用\n\n### Thread和Runnable是什么关系\n\nThread是类，Runnable是接口\n\n- Thread是实现了Runnable接口的类，使得run支持多线程\n- 因类的单一继承原则，推荐多使用Runnable接口\n\n### 如何给run()方法传参\n\n- 构造函数传参\n- 成员变量传参\n- 回调函数传参\n\n### 如何实现线程的返回值\n\n- 主线程等待\n- Thread类的join方法\n- Callable接口实现: 通过FutureTask or 线程池获取\n\n### 线程的状态\n\n六个状态\n\n- 新建(New): 创建后尚未启动的线程的状态\n- 运行(Runnable):包含Running和Ready\n- 无限期等待(Waiting): 不会被分配CPU执行时间，需要显性被唤醒\n- 限期等待(Timed Waiting): 在一定时间后会由系统自动唤醒\n- 阻塞(Blocked): 等待获取排他锁\n- 结束(terminated): 已终止线程的状态，线程已经结束运行\n\n### sleep和wait\n\n- sleep是Thread类的方法，wait是Object类中定义的方法\n- Sleep()方法可以在任何地方使用\n- wait()只能在synchronized方法或synchronized块中使用\n\n本质区别\n\n- Thread.sleep只会让出CPU，不会导致锁行为改变\n- Object.wait不仅让出CPU，还会释放已经占有的同步资源锁\n\n// TODO wait sleep\n\n### notify和notifyall 的区别\n\n两个概念\n\n- EntryList 锁池\n- WaitSet 等待池\n\n- notifyAll会让所有处于等待池的线程进入锁池中去竞争获取锁的机会\n- notify 只会随机选取一个处于等待池中的线程进入锁池去竞争\n\n### yield\n\nThread.yield()函数时，会给线程调度器一个当前线程愿意让出CPU使用的暗示，但是线程调度器可能会忽略这个暗示\n\n### 如何中断线程\n\n- 通过调用stop()方法停止线程\n- 通过调用suspend(), resume)方法\n\n目前使用\n\n- interrupt(),通知线程应该中断了\n    - 如果线程处于被阻塞状态,那么线程将立即退出被阻塞状态,并抛出一个 Interruptedexception异常。\n    - 如果线程处于正常活动状态,那么会将该线程的中断标志设置为true。被设置中断的线程将继续正常运行,不受影响\n\nInterrupt需要被调用的线程配合中断\n\n### sychronized\n\n// TODO\n\n### ReentrantLock\n\n- synchronized 是mark word ,lock调用unsafe的park方法\n\n### JMM (Java Memory Model) -- Java内存模式\n\n#### JMM 主内存\n\n- 存储Java实例对象\n- 包括有成员变量、类信息、常量、静态变量等\n- 属于数据共享的区域，多线程并发操作时会引发线程安全问题\n\n#### JMM的工作内存\n\n- 存储当前方法的所有本地变量信息，本地变量对其他线程不可见\n- 字节码行号指示器、Native方法信息\n- 属于线程私有的数据区域，不存在线程安全问题\n\n#### JMM与Java内存区域划分是不同的概念层次\n\n- JMM描述的是一组规则，围绕原子性，有序性，可见性展开\n- 相似点: 存在共享区和私有区域\n\n#### 主内存与工作内存的数据存储类型以及操作方式归纳\n\n- 方法里的基本数据类型本地变量将直接存储在工作内存的栈帧结构中\n- 引用类型的本地变量: 引用存储在工作内存中，实例存储在主内存中\n- 成员变量、static变量、类信息均存储在主内存中\n- 主内存共享的方式是线程各拷贝一份数据到工作内存，操作完成后刷新主内存\n\n#### JMM怎么实现可见性\n\n##### 指令重排序需要满足条件\n\n- 单线程环境下不能改变程序运行的结果\n- 存在数据以来关系的不允许重排序\n\n无法通过happens-before原则推导出来的，才能进行指令的重排序\nA操作的结果需要对B操作可见，则A与B存在happens-before关系\n\n##### happens-before八大原则\n\n1. 程序次序规则:一个线程内,按照代码顺序,书写在前面的操作先行发生于肀写在后面的操作;\n2. 锁定规则:一个 unlock操作先行发生于后面对同一个锁的lock操作;\n3. volatile变量规则:对一个变量的写操作先行发生于后面对这个变量的读操作 \n4. 传递规则:如果操作A先行发生于操作B,而操作B又先行发生于操作C,则可以得出操作A先行发生于操作C;\n5. 线程启动规则: Thread对象的 start(方法先行发生于此线程的每一个动作;\n6. 线程中断规则:对线程 Interrupt0方法的调用先行发生于被中断线程的代码检测到中断事件的发生;\n7. 线程终结规则:线程中所有的操作都先行发生于线程的终止检测,我们可以过 Thread join(方法结束、 Thread isalive0的返回值手段检测到线程已经终止执行;\n8. 对象终结规则:一个对象的初始化完成先行发生于他的 Finalize0方法的开始\n\n##### volatile\n\nJVM提供的轻量级同步机制\n\n- 保证被volatile修饰的共享变量对所有线程总是可见的\n- 禁止指令重排序优化\n\n###### volatile 的可见性\n\n如何实现?\n\n- 当写一个 volatile变量时,JMM会把该线程对应的工作内存中的共享变量值刷新到主内存中\n- 当读取个 volatile变量时,JM会把该线程对应的工作内存置为无效\n\n###### 如何禁止重排优化\n\n内存屏障(memory barrier)\n\n1. 保证特定操作的执行顺序\n2. 保证某些变量的内存可见性\n\n通过内存屏障指令禁止在内存屏障前后的指令执行重新排序优化  \n强制刷出各种CPU的缓存数据,因此任何CPU上的线程都能读取到这些数据的最新版本\n\n### CAS\n\nsync是悲观锁，假定会并发冲突\n乐观锁假定并发不冲突 CAS\n\n- 支持原子更新操作，适用于计算器，序列发生器等场景\n- 属于乐观锁机制，号称lock-free\n- CAS操作失败时由开发者决定是继续尝试，还是执行别的操作\n\n#### CAS思想\n\n- 包含三个操作数-- 内存位置(V)、预期原值(A)和新值(B)\n\n\n\n\n\n## Java集合框架\n\n### 数据结构\n\n// TODO\n\n- 数组和链表的区别\n- 链表的操作，如反转，链表环路检测，双向链表，循环链表相关操作\n- 队列，栈的应用\n- 二叉树的遍历方式及其递归和非递归的实现\n- 红黑树的旋转\n\n\n#### Collection\n\n![Collection](Collection.png)\n\n#### HashMap\n\nHashMap(java8之前): 数组+链表\nHashMap(java8之后): 数组+链表+红黑树\n\n##### 扩容\n\n- 多线程环境下，调整大小存在条件竞争，容易造成死锁\n- rehashing 是一个耗时的过程\n\n#### HashTable\n\nsync\n\n#### ConcurrentHashMap\n\n早期通过分段锁Segment\n\n采用了CAS + sync，数组链表红黑树\n\n\n\n\n### 算法\n\n- 内部排序: 如递归排序，交换排序(冒泡排序、快排)、选择排序、插入排序\n- 外部排序: 应掌握如何利用有限的内存配合海量的外部存储来处理超大的数据集，写不出来也要有相关的思路\n\n哪些不稳定(堆，快)，稳定意味着什么\n不同数据集，各种排序最好或最差的情况\n如何优化算法\n\n### Java的IO机制\n\nBIO、NIO、AIO的区别\n\nBlock-IO: InputStream 和 OutputStream, Reader 和 Writer\nNonBlock-IO: 构建多路复用的、同步非阻塞的IO操作\n\n\n\n## Spring\n\n### 你了解Spring IOC吗\n\nIOC(Inversion of Control): 控制反转\n\n- Spring Core最核心的部分\n- 需要先了解依赖注入(DI)\n\n#### 依赖注入\n\nDI: 将底层类作为参数传递给上层类，实现上层对下层的\"控制\"\n\nIOC: DI和DL\n\nDL: 因为需要用户实现API所以被移除\n\n#### 注入的方式\n\n- Setter\n- Interface\n- Constructor\n- Annotation\n\nIOC容器的优势\n\n- 避免在各处使用new来创建类，并且可以做到统一维护\n- 创建实例的时候不需要了解其中的细节\n\n#### Spring IOC支持的功能\n\n- 依赖注入\n- 依赖检查\n- 自动装配\n- 支持集合\n- 指定初始化方法和销毁方法\n- 支持回调方法\n\n#### Spring Bean\n\nBeanDefinition: 主要用来描述Bean的\nBeanDefinitionRegistry: 提供向IOC容器注册BeanDefinition对象的方法\n\n** BeanFactory **: Spring框架最核心的接口\n\n- 提供IOC的配置机制\n- 包含Bean的各种定义，便于实例化Bean\n- 建立Bean之间的依赖关系\n- Bean生命周期的控制\n\n##### BeanFactory与ApplicationContext的比较\n\n- BeanFactory是Spring框架的基础设施\n- ApplicationContext面向Spring开发者\n\n继承多个接口\n\n- BeanFactory: 能够管理、装配Bean\n- ResourcePatternResolver: 能够加载资源文件\n- MessageSource: 能够实现国际化等功能\n- ApplicationEventPublisher: 能够注册监听器，实现监听机制\n\n\n##### Spring Bean 的作用域\n\n作用域\n\n- singleton: Spring默认的作用域，容器里拥有唯一的Bean实例\n- prototype: 针对每个getBean请求，容器都会创建一个bean实例\n- request: 会为每个HTTP请求创建一个Bean\n- session: 会为每个session创建一个Bean\n- globalSession: 会为每个全局Http Session创建一个Bean实例，该作用域仅对Portlet有效\n\n##### Spring Bean 的生命周期\n\n\n### AOP\n\n关注点分离: 不同的问题交给不同的部分去解决\n\n- 面向切面编程AOP正是这种技术的体现\n- 通用化功能代码的实现，对应的就是所谓的切面(Aspect)\n- 业务功能和切面代码分开,架构将变得高内聚低耦合\n- 确保功能的完整性: 切面最终需要合并到业务中(Weave)\n\n#### AOP的三种织入\n\n- 编译时织入: 需要特殊的Java编译器，如AspectJ\n- 类加载时织入: 需要特殊的Java编辑器，如AspectJ,AspectWerkz\n- 运行时织入: Spring采用的方式，通过动态代理的方式，实现简单\n\n\n\n### 七个事务传播属性  \n\n什么是事务传播属性  \n传播两个方法: 两个方法都带事务，但是事务设置不同。\n\n为什么要事务？\n事务是为解决数据安全操作提出的，事务控制实际上就是控制数据的安全访问。\n\n|传播行为|含义|\n|:---:|:---:|\n|propagation_required（xml文件中为required)|表示当前方法必须在一个具有事务的上下文中运行，如有客户端有事务在进行，那么被调用端将在该事务中运行，否则的话重新开启一个事务。（如果被调用端发生异常，那么调用端和被调用端事务都将回滚）|\n|propagation_supports(xml文件中为supports)|表示当前方法不必需要具有一个事务上下文，但是如果有一个事务的话，它也可以在这个事务中运行|\n|propagation_mandatory(xml文件中为mandatory)|表示当前方法必须在一个事务中运行，如果没有事务，将抛出异常|\n|propagation_nested(xml文件中为nested)|表示如果当前方法正有一个事务在运行中，则该方法应该运行在一个嵌套事务中，被嵌套的事务可以独立于被封装的事务中进行提交或者回滚。如果封装事务存在，并且外层事务抛出异常回滚，那么内层事务必须回滚，反之，内层事务并不影响外层事务。如果封装事务不存在，则同propagation_required的一样|\n|propagation_never（xml文件中为never)|表示当方法务不应该在一个事务中运行，如果存在一个事务，则抛出异常|\n|propagation_requires_new(xml文件中为requires_new)|表示当前方法必须运行在它自己的事务中。一个新的事务将启动，而且如果有一个现有的事务在运行的话，则这个方法将在运行期被挂起，直到新的事务提交或者回滚才恢复执行。|\n|propagation_not_supported（xml文件中为not_supported)|表示该方法不应该在一个事务中运行。如果有一个事务正在运行，他将在运行期被挂起，直到这个事务提交或者回滚才恢复执行|\n\n### Spring中的事务隔离级别\n\n|隔离级别|含义|\n|:----:|:----:|\n|isolation_default|使用数据库默认的事务隔离级别|\n|isolation_read_uncommitted|允许读取尚未提交的修改，可能导致脏读、幻读和不可重复读|\n|isolation_read_committed | 允许从已经提交的事务读取，可防止脏读、但幻读，不可重复读仍然有可能发生|\n|isolation_repeatable_read|对相同字段的多次读取的结果是一致的，除非数据被当前事务自生修改。可防止脏读和不可重复读，但幻读仍有可能发生|\n|isolation_serializable |完全服从acid隔离原则，确保不发生脏读、不可重复读、和幻读，但执行效率最低。|\n\n除了default另外四个与JDBC的隔离级别相对应。\n\n### 高并发如何修改同一行数据\n\n#### jvm解决\n\n1. jvm 下用synchronized锁。\n\n\n2. lock 锁\n\ntry lock finally unlock\n\nJVM 解决不了分布式环境多任务对共享资源竞争的协同操作问题\n\n#### 分布式解决\n\n分布式锁 三种实现方式\n\n- 数据库 (性能差)\n- redis (死锁)\n- zookeeper\n    - 基于异常 (临时节点)\n    - 基于相互监听 (性能比较高，占用资源，临时有序节点)\n\n##### Zookeerper 数据结构\n\n- Zookeeper 数据结构类似Linux  \n- 每一个节点都有值  \n\n","slug":"面试专题","published":1,"updated":"2020-03-30T09:22:18.990Z","_id":"ck871n9bw005j24uw0hkk65h0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><h4 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h4><p>进程是操作系统资源分配的最小单位<br>线程是程序执行的最小单位</p>\n<p>进程有独立的内存空间，线程共享进程的内存空间</p>\n<h4 id=\"线程调度\"><a href=\"#线程调度\" class=\"headerlink\" title=\"线程调度\"></a>线程调度</h4><ul>\n<li>时间片轮转调度</li>\n<li>先来先服务调度</li>\n<li>高优先权优先调度</li>\n</ul>\n<h4 id=\"线程切换步骤\"><a href=\"#线程切换步骤\" class=\"headerlink\" title=\"线程切换步骤\"></a>线程切换步骤</h4><p>线程的上下文切换，切换的代价</p>\n<h4 id=\"线程间通信-–-IPC\"><a href=\"#线程间通信-–-IPC\" class=\"headerlink\" title=\"线程间通信 – IPC\"></a>线程间通信 – IPC</h4><ul>\n<li>共享内存</li>\n<li>UnixSocket</li>\n<li>MessageQueue</li>\n<li>Signal</li>\n<li>Semaphore</li>\n<li>Pipe</li>\n</ul>\n<h4 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h4><ul>\n<li>协程既不是进程也不是线程，协程仅仅是一个特殊的函数，协程它进程和进程不是一个维度的。</li>\n<li>一个进程可以包含多个线程，一个线程可以包含多个协程。</li>\n</ul>\n<p>更轻量化，在用户态调用，代价比线程上下文切换低，Java第三方协程框架</p>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h3 id=\"OSI七层协议\"><a href=\"#OSI七层协议\" class=\"headerlink\" title=\"OSI七层协议\"></a>OSI七层协议</h3><p>OSI 并不是一个标准，只是一个概念型框架</p>\n<p><img src=\"%E4%B8%83%E5%B1%82.jpg\" alt=\"七层\"></p>\n<ul>\n<li><p>物理层  </p>\n<ul>\n<li>传输比特流  </li>\n<li>定义了物理设备的标准(网线类型，光纤接口等)</li>\n<li>单位比特</li>\n<li>网卡也在这一层工作</li>\n</ul>\n</li>\n<li><p>数据链路层</p>\n<ul>\n<li>定义了如何格式化数据进行传输，控制物理介质的访问</li>\n<li>错误检测，纠正</li>\n<li>将比特数据组成帧，交换机在这层，对帧解码并发送到正确的接收方</li>\n</ul>\n</li>\n<li><p>网络层</p>\n<ul>\n<li>把网络地址翻译为物理地址</li>\n<li>决定数据如何从发送方路由到接收方</li>\n<li>路由器属于网络层</li>\n<li>数据包</li>\n<li>协议: <strong>IP</strong></li>\n</ul>\n</li>\n<li><p>传输层</p>\n<ul>\n<li>解决主机间的数据传输</li>\n<li>OSI中最主要的一层</li>\n<li>传输协议同时进行流量控制</li>\n<li>将数据包强行分割(分割成数据片并给予序列号)</li>\n<li>TCP协议和UDP协议</li>\n</ul>\n</li>\n<li><p>会话层</p>\n<ul>\n<li>自动收发，自动寻址</li>\n<li>建立和管理应用程序之间的通信</li>\n<li>解决不同系统之间的通信语法的问题</li>\n</ul>\n</li>\n<li><p>表示层</p>\n<ul>\n<li>网络协议，需要固定长度，组成的消息头</li>\n<li>更方便接收方了解接收的包</li>\n</ul>\n</li>\n<li><p>应用层</p>\n<ul>\n<li>更方便的应用接收到的数据</li>\n<li>HTTP协议</li>\n</ul>\n</li>\n</ul>\n<p>先自上(应用层)而下添加数据头，后自下而上处理数据头部</p>\n<h3 id=\"OSI的标准-TCP-IP\"><a href=\"#OSI的标准-TCP-IP\" class=\"headerlink\" title=\"OSI的标准:TCP/IP\"></a>OSI的标准:TCP/IP</h3><p><img src=\"TCP_IP.png\" alt=\"TCP/IP\">  </p>\n<p>先自上(应用层)而下添加数据头，后自下而上处理数据头部</p>\n<p><img src=\"TCP_IP1.png\" alt=\"TCP/IP\">  </p>\n<h3 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h3><p>基于字节流，将应用层的数据流分割成报文段并发送给目标节点的TCP层<br>数据包都有序号，对方收到则发送确认ACK确认，未收到则重传。<br>使用校验和来校验的数据在传输过程中是否有误。  </p>\n<p><img src=\"TCP%E6%8A%A5%E6%96%87.png\" alt=\"TCP报文\"></p>\n<p>TCP Flags:</p>\n<ul>\n<li>URG: 紧急指针标志 urgent</li>\n<li>ACK: 确认序号标志 acknowledgment</li>\n<li>PSH: push 标志</li>\n<li>RST: 重置连接标志 Reset</li>\n<li>SYN: 同步序号，用于建立连接过程</li>\n<li>FIN: finish标志，释放连接</li>\n</ul>\n<p>SYN = 1， ACK = 0 请求链接</p>\n<h4 id=\"A-gt-B-通信过程\"><a href=\"#A-gt-B-通信过程\" class=\"headerlink\" title=\"A =&gt; B 通信过程\"></a>A =&gt; B 通信过程</h4><p>A 打开 发送SYN = 1, seq = x,进入SYN_SEND状态，等待服务器确认</p>\n<p>B 被动打开 发送 SYN = 1, ACK = 1, seq = y, ack = x + 1，此时服务器进入SYN_RECV状态</p>\n<p>A 接收后发送 ACK = 1, seq = x + 1, ack = y + 1 ，双方进入ESTABLISHED状态</p>\n<p><img src=\"%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png\" alt=\"三次握手\"></p>\n<h4 id=\"为什么需要三次握手\"><a href=\"#为什么需要三次握手\" class=\"headerlink\" title=\"为什么需要三次握手\"></a>为什么需要三次握手</h4><p>为了初始化Sequence Number 的初始值</p>\n<p>起因:</p>\n<blockquote>\n<p>Server接收到Client的SYN，回复SYN-ACK的时候未收到ACK<br>Server不断充实直至超时，Linux默认等待63秒才断开连接</p>\n</blockquote>\n<p>针对SYN Flood的防护措施</p>\n<h3 id=\"TCP的四次挥手\"><a href=\"#TCP的四次挥手\" class=\"headerlink\" title=\"TCP的四次挥手\"></a>TCP的四次挥手</h3><h4 id=\"A-gt-B-四次挥手\"><a href=\"#A-gt-B-四次挥手\" class=\"headerlink\" title=\"A =&gt; B 四次挥手\"></a>A =&gt; B 四次挥手</h4><p>A: FIN = 1, seq = u, FIN_WAIT_1<br>B: ACK = 1, seq = v, ack = u + 1  ,进入CLOSE_WAIT状态(半关闭状态)， 客户端进入 FIN_WAIT_2<br>B: FIN = 1, ACK = 1, seq = w, ack = u + 1, LAST_ACK<br>A: ACK = 1, seq = u + 1m, ack = w + 1, TIMEWAIT (2 * MSL)</p>\n<p><img src=\"%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"四次挥手\"></p>\n<h4 id=\"为什么又TIME-WAIT状态\"><a href=\"#为什么又TIME-WAIT状态\" class=\"headerlink\" title=\"为什么又TIME_WAIT状态\"></a>为什么又TIME_WAIT状态</h4><p>(2MSL) 两倍最大报文段传输时间</p>\n<p>原因:</p>\n<ul>\n<li>确保有足够的时间让对方收到ACK包  </li>\n<li>避免新旧连接混淆</li>\n</ul>\n<h4 id=\"为什么需要四次握手才能断开连接\"><a href=\"#为什么需要四次握手才能断开连接\" class=\"headerlink\" title=\"为什么需要四次握手才能断开连接\"></a>为什么需要四次握手才能断开连接</h4><p>因为全双工，发送方和接收方都需要FIN报文和ACK报文</p>\n<h4 id=\"服务器出现大量CLOSE-WAIT状态的原因\"><a href=\"#服务器出现大量CLOSE-WAIT状态的原因\" class=\"headerlink\" title=\"服务器出现大量CLOSE_WAIT状态的原因\"></a>服务器出现大量CLOSE_WAIT状态的原因</h4><p>对方关闭socket连接，我方忙于读写，没有及时关闭连接</p>\n<ul>\n<li>检查代码，特别是释放资源的代码</li>\n<li>检查配置，特别是处理请求的线程配置  </li>\n</ul>\n<h3 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h3><h4 id=\"UDP-特点\"><a href=\"#UDP-特点\" class=\"headerlink\" title=\"UDP 特点\"></a>UDP 特点</h4><ul>\n<li>面向非连接</li>\n<li>不维护连接状态。支持同时向多个客户端传输相同的消息</li>\n<li>数据包报头只有8字节，额外开销小</li>\n<li>吞吐量只受限于数据生成速率、传输速率以及机器性能</li>\n<li>尽量交付，不需要维护复杂的状态表</li>\n</ul>\n<h4 id=\"TCP-和-UDP-的区别\"><a href=\"#TCP-和-UDP-的区别\" class=\"headerlink\" title=\"TCP 和 UDP 的区别\"></a>TCP 和 UDP 的区别</h4><ul>\n<li>面向链接 vs 无连接</li>\n<li>可靠 vs 不可靠</li>\n<li>有序性 vs 无序性</li>\n<li>速度慢 vs 速度快</li>\n<li>重量级(20) vs 轻量级(8)</li>\n</ul>\n<h4 id=\"TCP-滑动窗口\"><a href=\"#TCP-滑动窗口\" class=\"headerlink\" title=\"TCP 滑动窗口\"></a>TCP 滑动窗口</h4><ul>\n<li>RTT: 发送数据包到收到对应ACK</li>\n<li>RTO: 重传时间间隔</li>\n</ul>\n<p>RTO 由 RTT 计算</p>\n<p>滑动窗口: 流量控制和乱序重排</p>\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><p>超文本传输协议</p>\n<ul>\n<li>支持客户/服务器模式 (Client - Server)</li>\n<li>简单快速 (get/post)</li>\n<li>灵活</li>\n</ul>\n<p>HTTP 请求步骤</p>\n<ul>\n<li>客户端连接到web服务器</li>\n<li>发送HTTP请求</li>\n<li>服务器接受并返回HTTP响应</li>\n<li>释放连接TCP连接</li>\n<li>客户端浏览器解析HTML内容</li>\n</ul>\n<h5 id=\"在浏览器地址栏键入一个URL，按下回车之后经历的流程\"><a href=\"#在浏览器地址栏键入一个URL，按下回车之后经历的流程\" class=\"headerlink\" title=\"在浏览器地址栏键入一个URL，按下回车之后经历的流程\"></a>在浏览器地址栏键入一个URL，按下回车之后经历的流程</h5><ul>\n<li>逐层DNS解析</li>\n<li>TCP连接(3次)</li>\n<li>发送HTTP请求</li>\n<li>服务器处理请求并返回HTTP报文</li>\n<li>浏览器解析渲染</li>\n<li>连接结束(4次挥手)</li>\n</ul>\n<h4 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h4><p>五种可能的取值</p>\n<ul>\n<li>1XX: 指示信息–表示请求已经接收，继续处理</li>\n<li>2xx: 成功– 表示请求已被成功接收、理解、接受</li>\n<li>3xx: 重定向–要完成请求必须进行进一步操作</li>\n<li>4xx: 客户端错误–请求有语法错误或请求无法实现</li>\n<li>5xx: 服务器端错误–服务器未能实现合法的请求</li>\n</ul>\n<p>常见状态码</p>\n<ul>\n<li>200 OK: 正常返回</li>\n<li>400 Bad Request:客户端请求有语法错误，无法被服务器理解</li>\n<li>401 Unauthorized: 请求未经授权，这个状态代码必须和WWW-Authenticate 报头域一起使用</li>\n<li>403 Forbidden: 服务器收到请求，但是拒绝提供服务</li>\n<li>404 Not Found: 请求资源不存在 (例如输入了错误的URL)</li>\n<li>500 Internal Server Error: 服务器发生了不可预期的错误</li>\n<li>503 Server Unavailable: 服务器当前不能处理客户端的请求，一段时间后可能恢复正常。  </li>\n</ul>\n<h4 id=\"GET-和-POST-请求的区别\"><a href=\"#GET-和-POST-请求的区别\" class=\"headerlink\" title=\"GET 和 POST 请求的区别\"></a>GET 和 POST 请求的区别</h4><p>从三个层面来解答</p>\n<ul>\n<li>HTTP报文层面，GET将请求信息放在URL，POST放在报文体中</li>\n<li>数据库层次: GET符合幂等性和安全性，POST不符合</li>\n<li>其他层面: GET可以被缓存、被存储，而POST不行</li>\n</ul>\n<h4 id=\"Cookie-和-Session的区别\"><a href=\"#Cookie-和-Session的区别\" class=\"headerlink\" title=\"Cookie 和 Session的区别\"></a>Cookie 和 Session的区别</h4><h5 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h5><ul>\n<li>是由服务器发给客户端的特殊信息，以文本的形式存放在客户端</li>\n<li>客户端再次请求的时候，会把Cookie回发 </li>\n<li>服务器接收到后，会解析Cookie生成与客户端相对应的内容</li>\n</ul>\n<p>发送过程</p>\n<ul>\n<li>Client =&gt; HTTP req Server</li>\n<li>Client &lt;= HTTP resp + set-Cookie Server</li>\n<li>Client =&gt; HTTP req + Cookie Server</li>\n<li>Client &lt;= HTTP resp Server</li>\n</ul>\n<h5 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h5><ul>\n<li>服务器端的机制，在服务器上保存的信息</li>\n<li>解析客户端请求并操作session id ，按需保存状态信息</li>\n</ul>\n<p>实现方式</p>\n<ol>\n<li>Cookie 来实现</li>\n<li>URL来回写实现(如果Cookie被禁用)</li>\n</ol>\n<ul>\n<li>Client =&gt; req Server</li>\n<li>Client &lt;= resp + set-Cookie:JSESSIONID=xxx Server</li>\n<li>Client =&gt; req + Cookie:JSESSIONID=xxx Server</li>\n<li>Client &lt;= resp server</li>\n</ul>\n<h5 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h5><ol>\n<li>Cookie 数据存放在客户的浏览器，Session数据存放在服务器上</li>\n<li>Session相对于Cookie 更安全</li>\n<li>若考虑减轻服务器负担，应当使用Cookie</li>\n</ol>\n<h3 id=\"HTTP-和-HTTPS\"><a href=\"#HTTP-和-HTTPS\" class=\"headerlink\" title=\"HTTP 和 HTTPS\"></a>HTTP 和 HTTPS</h3><p>HTTP TCP IP<br>HTTPS SSL/TLS TCP IP</p>\n<p>保护交换数据隐私，安全版的HTTP</p>\n<h4 id=\"SSL\"><a href=\"#SSL\" class=\"headerlink\" title=\"SSL\"></a>SSL</h4><p>(security sockets layer, 安全套接层)</p>\n<ul>\n<li>为网络通信提供安全及数据完整性的一种安全协议</li>\n<li>是操作系统对外的API，SSL3.0后更名为TLS</li>\n<li>采用身份验证和数据加密保证网络通信的安全和数据的完整性</li>\n</ul>\n<p>HTTPS 数据传输流程</p>\n<ul>\n<li>浏览器将支持的加密算法信息发送给服务器</li>\n<li>服务器选择一套浏览器支持的加密算法，以证书的形式发回给浏览器(CA机构，有效期，公钥，所有者)</li>\n<li>浏览器验证证书的合法性，并结合证书公钥加密信息发送给服务器</li>\n<li>服务器使用私钥解密信息，验证哈希，加密相应信息回发浏览器</li>\n<li>浏览器解密响应消息，并对消息进行验证，之后进行加密交互数据</li>\n</ul>\n<h4 id=\"HTTP和HTTPS的区别\"><a href=\"#HTTP和HTTPS的区别\" class=\"headerlink\" title=\"HTTP和HTTPS的区别\"></a>HTTP和HTTPS的区别</h4><ul>\n<li>HTTPS需要到CA申请证书，HTTP不需要</li>\n<li>HTTPS密文传输，HTTP明文传输</li>\n<li>连接方式不同，HTTPS默认使用443端口，HTTP使用80端口</li>\n<li>HTTPS= HTTP+加密+认证+完整新保护，比HTTP更安全</li>\n</ul>\n<p>HTTP =&gt; HTTPS 301跳转也可能被劫持，因此要用HSTS优化</p>\n<h3 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h3><p>Socket是对TOC/IP的抽象，是操作系统对外开放的接口</p>\n<h4 id=\"Socket通信流程\"><a href=\"#Socket通信流程\" class=\"headerlink\" title=\"Socket通信流程\"></a>Socket通信流程</h4><p><img src=\"socket.jpg\" alt=\"Socket\"></p>\n<p>编写一个网络应用程序,有客户端与服务器端,客户端向服务器发送一个字符串,服务器收到该字符串后将其打印到命令行上,<br>然后向客户端返回该字符串的长度,最后,客户端输出服务器端返回的该字符串的长度,分别用TCP和UDP两种方式去实现  </p>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><h3 id=\"如何设计一个关系型数据库-RDBMS\"><a href=\"#如何设计一个关系型数据库-RDBMS\" class=\"headerlink\" title=\"如何设计一个关系型数据库(RDBMS)\"></a>如何设计一个关系型数据库(RDBMS)</h3><ol>\n<li><p>程序实例  </p>\n<ul>\n<li>存储管理</li>\n<li>缓存机制</li>\n<li>SQL 解析</li>\n<li>日志管理</li>\n<li>权限划分</li>\n<li>容灾机制</li>\n<li>索引管理</li>\n<li>锁管理</li>\n</ul>\n</li>\n<li><p>存储(文件系统)</p>\n</li>\n</ol>\n<h3 id=\"索引模块\"><a href=\"#索引模块\" class=\"headerlink\" title=\"索引模块\"></a>索引模块</h3><h4 id=\"为什么要使用索引\"><a href=\"#为什么要使用索引\" class=\"headerlink\" title=\"为什么要使用索引\"></a>为什么要使用索引</h4><p>快速查询数据</p>\n<h4 id=\"什么信息能成为索引\"><a href=\"#什么信息能成为索引\" class=\"headerlink\" title=\"什么信息能成为索引\"></a>什么信息能成为索引</h4><p>主键，唯一键以及普通键</p>\n<h4 id=\"索引的数据结构\"><a href=\"#索引的数据结构\" class=\"headerlink\" title=\"索引的数据结构\"></a>索引的数据结构</h4><p>生成索引，建立二叉查找树进行二分查找<br>生成索引，建立B-Tree 结构进行查找<br>生成索引，建立B+Tree 结构进行查找<br>生成索引，建立Hash结构进行查找</p>\n<p><img src=\"%E4%BA%8C%E5%8F%89%E6%A0%91.png\" alt=\"二叉树\"></p>\n<h4 id=\"B-Tree\"><a href=\"#B-Tree\" class=\"headerlink\" title=\"B Tree\"></a>B Tree</h4><p>定义</p>\n<ul>\n<li>根节点至少包括两个孩子</li>\n<li>书中每个节点最多含有m铬孩子( m&gt;= 2)</li>\n<li>除根节点和叶节点外，其他每个节点至少有ceil(m/2)个孩子</li>\n<li>所有叶子节点都位于同一层</li>\n<li>假设每个非终端节点中包含有n个关键字信息，其中：<ol>\n<li>Ki(i=1…n)为关键字，且关键字按顺序升序排序K(i-1) &lt; Ki</li>\n<li>关键是个数满足: [ceil(m / 2) - 1] &lt;= n &lt;= m - 1</li>\n<li>非叶子节点的指针:P[1],P[2],… P[M], P[1]指向的关键字小于K[1]的子树，<br> P[M]指向关键字大于P[M -1] 的子树，其他P[i]指向关键字属于(K[i-1], K[i])的子树</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"B-Tree-1\"><a href=\"#B-Tree-1\" class=\"headerlink\" title=\"B+ Tree\"></a>B+ Tree</h4><p>B+ 树是B树的变体，其定义基本与B树相同，除了：<br>    - 非叶子节点的子树指针与关键字个数相同<br>    - 非叶子节点的子树指针P[i],指向关键字值([K[i],K[i+1])<br>    - 非叶子节点仅用来索引，数据都保存在叶子节点中<br>    - 所有叶子节点均有一个链指针指向下一个叶子节点</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>B+ Tree更适合用来做存储索引<br>    - B+ Tree 的磁盘读写代价更低<br>    - B+ Tree 的查询效率更加稳定<br>    - B+ Tree 更加有利于对数据库的扫描</p>\n<h4 id=\"Hash索引\"><a href=\"#Hash索引\" class=\"headerlink\" title=\"Hash索引\"></a>Hash索引</h4><p>优点 查询速度O(1)<br>缺点:</p>\n<ul>\n<li>仅仅能够满足’=’,’IN’, 不能使用范围查询</li>\n<li>无法被用来避免数据的排序操作</li>\n<li>不能利用部分索引键查询</li>\n<li>不能避免表扫描</li>\n<li>遇到大量Hash值相等的情况后性能并不一定会比B Tree索引高</li>\n</ul>\n<h4 id=\"密集索引和稀疏索引的区别\"><a href=\"#密集索引和稀疏索引的区别\" class=\"headerlink\" title=\"密集索引和稀疏索引的区别\"></a>密集索引和稀疏索引的区别</h4><ul>\n<li>密集索引文件中的每个搜索码值都对应一个索引值</li>\n<li>稀疏索引只为某些值建立索引项</li>\n</ul>\n<h5 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h5><ul>\n<li>若一个主键被定义，该主键则作为密集索引</li>\n<li>若没有主键被定义，该表的第一个唯一非空索引则作为密集索引</li>\n<li>若不满足以上条件，innodb内部会生成一个隐藏主键(密集索引)</li>\n<li>非主键索引存储相关键位和其对于的主键值，包含两次查找</li>\n</ul>\n<p>myISAM索引和DB是分开的，InnoDB索引和DB是存放在一起的</p>\n<h3 id=\"索引问答\"><a href=\"#索引问答\" class=\"headerlink\" title=\"索引问答\"></a>索引问答</h3><p>Q: 为什么要用索引<br>A: 避免全表扫描数据，提升检索效率</p>\n<p>Q: 什么样的信息能成为索引<br>A: 主键、唯一键等有区分性的数据</p>\n<p>Q: 索引的数据结构<br>A: 主流是B+ Tree，以及hash结构 ， bitMap 等，mysql不支持bitmap，基于innoDB以及myISAM的mysql不显示支持hash</p>\n<p>Q: 密集索引和稀疏索引的区别<br>A: 密集索引文件中的每个搜索码值都对应一个索引值，稀疏索引只为某些值建立索引项</p>\n<h4 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h4><h5 id=\"如何定位并优化慢查询sql\"><a href=\"#如何定位并优化慢查询sql\" class=\"headerlink\" title=\"如何定位并优化慢查询sql\"></a>如何定位并优化慢查询sql</h5><ul>\n<li><p>根据慢日志定位慢查询sql</p>\n</li>\n<li><p>使用explain等工具分析Sql</p>\n<ul>\n<li>type<ul>\n<li>表示: 找到数据行的方式</li>\n<li>index 索引查询 / ALL 证明是全局查找(需要优化)</li>\n</ul>\n</li>\n<li>extra<ul>\n<li>出现以下两项意味着MYSQL根本不能使用索引，效率会受到重大影响，应尽可能对此进行优化</li>\n<li>Using filesort —— 无法利用索引排序</li>\n<li>Using temporary  —— 使用了临时表，order by 或者分组查询 group by</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>修改sql 或者让sql尽量走索引  </p>\n<ul>\n<li>使用有索引的字段代替</li>\n<li>添加索引 alter table tb_name add index idx_name(name);</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"联合索引的最左匹配原则\"><a href=\"#联合索引的最左匹配原则\" class=\"headerlink\" title=\"联合索引的最左匹配原则\"></a>联合索引的最左匹配原则</h5><h4 id=\"索引是建的越来越多好吗\"><a href=\"#索引是建的越来越多好吗\" class=\"headerlink\" title=\"索引是建的越来越多好吗\"></a>索引是建的越来越多好吗</h4><ul>\n<li>数据量小的表不需要建立索引，建立会增加额外的索引开销</li>\n<li>数据变更需要维护索引，因此更多的索引意味着更大的维护成本</li>\n<li>更多的索引意味着需要更多的空间</li>\n</ul>\n<h4 id=\"锁模块\"><a href=\"#锁模块\" class=\"headerlink\" title=\"锁模块\"></a>锁模块</h4><h5 id=\"MyISAM与InnoDB关于锁方面的区别是什么\"><a href=\"#MyISAM与InnoDB关于锁方面的区别是什么\" class=\"headerlink\" title=\"MyISAM与InnoDB关于锁方面的区别是什么\"></a>MyISAM与InnoDB关于锁方面的区别是什么</h5><ul>\n<li>MyISAM 默认使用的是表级锁，不支持行级锁</li>\n<li>InnoDB 默认用的是行级锁，也支持表级锁</li>\n</ul>\n<p>共享锁和排斥锁的兼容性</p>\n<!-- Share && exclude\n\n|   | X    | S    |\n|---|------|------|\n| X | 冲突 | 冲突 |\n| S | 冲突 | 兼容 | -->\n\n<p>行级锁不一定比表级锁好，锁的粒度越细，带价越高，需要扫描表到对应的对其上锁，代价是比较大的。  </p>\n<p>InnoDB 相比 MyISAM 带来了更大的开销。</p>\n<h5 id=\"MyISAM适合的场景\"><a href=\"#MyISAM适合的场景\" class=\"headerlink\" title=\"MyISAM适合的场景\"></a>MyISAM适合的场景</h5><ul>\n<li>频繁执行全表count 语句</li>\n<li>对数据进行增删改的频率不高，查询非常频繁</li>\n<li>没有事务</li>\n</ul>\n<h5 id=\"InnoDB适合的场景\"><a href=\"#InnoDB适合的场景\" class=\"headerlink\" title=\"InnoDB适合的场景\"></a>InnoDB适合的场景</h5><ul>\n<li>数据增删改查都相当频繁</li>\n<li>可靠性要求比较高，要求支持事务</li>\n</ul>\n<h5 id=\"数据库锁的分类\"><a href=\"#数据库锁的分类\" class=\"headerlink\" title=\"数据库锁的分类\"></a>数据库锁的分类</h5><ul>\n<li>按锁的粒度划分可以分为：表级锁，行级锁，页级锁</li>\n<li>按锁级别划分，可分为共享锁和排他锁</li>\n<li>按加锁方式划分，可分为自动锁，显示锁</li>\n<li>按操作划分可分为DML锁，DDL锁</li>\n<li>按使用方式划分，可分为乐观锁、悲观锁</li>\n</ul>\n<h3 id=\"数据库事务的四大特性\"><a href=\"#数据库事务的四大特性\" class=\"headerlink\" title=\"数据库事务的四大特性\"></a>数据库事务的四大特性</h3><p>ACID</p>\n<blockquote>\n<ul>\n<li>A:原子性,Atomicity</li>\n<li>C:一致性,Consistency</li>\n<li>I:隔离性,Isolation</li>\n<li>D:持久性,Durability</li>\n</ul>\n</blockquote>\n<h3 id=\"事务鼓励级别以及各级别下的并发访问问题\"><a href=\"#事务鼓励级别以及各级别下的并发访问问题\" class=\"headerlink\" title=\"事务鼓励级别以及各级别下的并发访问问题\"></a>事务鼓励级别以及各级别下的并发访问问题</h3><p>并发访问引起的问题和如何避免</p>\n<ul>\n<li>更新丢失– mysql 所有事务隔离级别在数据库层面上均可避免</li>\n<li>脏读– READ-COMMITTED事务隔离级别以上可避免</li>\n<li>不可重复读– REPEATABLE-READ 事务隔离级别以上可避免</li>\n<li>幻读– SERIABLIZABLE事务隔离级别可避免</li>\n</ul>\n<h4 id=\"脏读、不可重复读、幻象读概念说明\"><a href=\"#脏读、不可重复读、幻象读概念说明\" class=\"headerlink\" title=\"脏读、不可重复读、幻象读概念说明\"></a>脏读、不可重复读、幻象读概念说明</h4><ol>\n<li>脏读：指当一个事务正字访问数据，并且对数据进行了修改，而这种数据还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据还没有提交那么另外一个事务读取到的这个数据我们称之为脏数据。依据脏数据所做的操作肯能是不正确的。  </li>\n<li>不可重复读：指在一个事务内，多次读同一数据。在这个事务还没有执行结束，另外一个事务也访问该同一数据，那么在第一个事务中的两次读取数据之间，由于第二个事务的修改第一个事务两次读到的数据可能是不一样的，这样就发生了在一个事物内两次连续读到的数据是不一样的，这种情况被称为是不可重复读。</li>\n<li>幻象读：一个事务先后读取一个范围的记录，但两次读取的纪录数不同，我们称之为幻象读（两次执行同一条 select 语句会出现不同的结果，第二次读会增加一数据行，并没有说这两次执行是在同一个事务中）  </li>\n</ol>\n<h4 id=\"如何避免\"><a href=\"#如何避免\" class=\"headerlink\" title=\"如何避免\"></a>如何避免</h4><table>\n<thead>\n<tr>\n<th>事务隔离级别</th>\n<th>更新丢失</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>未提交读</td>\n<td>避免</td>\n<td>发生</td>\n<td>发生</td>\n<td>发生</td>\n</tr>\n<tr>\n<td>已提交读</td>\n<td>避免</td>\n<td>避免</td>\n<td>发生</td>\n<td>发生</td>\n</tr>\n<tr>\n<td>可重复读</td>\n<td>避免</td>\n<td>避免</td>\n<td>避免</td>\n<td>发生</td>\n</tr>\n<tr>\n<td>串行化</td>\n<td>避免</td>\n<td>避免</td>\n<td>避免</td>\n<td>避免</td>\n</tr>\n</tbody></table>\n<p>在mysql中的innodb引擎,原子性,一致性,隔离性通过redo和undo实现,redo 就是ib_logfile物理文件,而undo默认在共享表空间ibdata里面,通过设置参数可以独立出来.</p>\n<h4 id=\"数据库操作事务隔离\"><a href=\"#数据库操作事务隔离\" class=\"headerlink\" title=\"数据库操作事务隔离\"></a>数据库操作事务隔离</h4><h5 id=\"读取未提交的事务里面的数据-脏读\"><a href=\"#读取未提交的事务里面的数据-脏读\" class=\"headerlink\" title=\"读取未提交的事务里面的数据(脏读)\"></a>读取未提交的事务里面的数据(脏读)</h5><p>设置隔离级别方法</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">session</span> <span class=\"keyword\">transaction</span> <span class=\"keyword\">isolation</span> <span class=\"keyword\">level</span> <span class=\"keyword\">read</span> uncommitted;</span><br></pre></td></tr></table></figure>\n\n<p>开始事务</p>\n<!-- show variables like '%tx_isolation%'; -->\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">session</span> <span class=\"keyword\">transaction</span> <span class=\"keyword\">isolation</span> <span class=\"keyword\">level</span> <span class=\"keyword\">read</span> uncommitted;</span><br><span class=\"line\"></span><br><span class=\"line\">begain</span><br><span class=\"line\"><span class=\"keyword\">update</span> propagation <span class=\"keyword\">set</span> <span class=\"keyword\">count</span> = <span class=\"keyword\">count</span> + <span class=\"number\">1</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">rollback</span> (回滚操作)</span><br></pre></td></tr></table></figure>\n\n<p>另外开一个session 进行查询，可看到并不还没有更改数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">session</span> <span class=\"keyword\">transaction</span> <span class=\"keyword\">isolation</span> <span class=\"keyword\">level</span> <span class=\"keyword\">read</span> uncommitted;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> propagation</span><br></pre></td></tr></table></figure>\n\n<p>begain中执行的操作  被第二个进程读到了，导致脏读，一但事务回滚，第二个进程保存的是之前的结果。</p>\n<h4 id=\"InnoDB可重复读隔离级别下如何避免幻读\"><a href=\"#InnoDB可重复读隔离级别下如何避免幻读\" class=\"headerlink\" title=\"InnoDB可重复读隔离级别下如何避免幻读\"></a>InnoDB可重复读隔离级别下如何避免幻读</h4><ul>\n<li>表象: 快照读(非阻塞读) – 伪<ul>\n<li>当前读是上了锁的增删改查， update,delete,insert</li>\n<li>快照读: 不加锁的非阻塞读,select </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>关键语法</p>\n<ul>\n<li>Group By</li>\n<li>Having</li>\n<li>Count, Sum, Max, Min, Avg</li>\n</ul>\n<h4 id=\"Group-By\"><a href=\"#Group-By\" class=\"headerlink\" title=\"Group By\"></a>Group By</h4><ul>\n<li>满足 “select 自居的列名必须为分组列或列函数</li>\n<li>列函数对于 group by 子句定义的每个组各返回一个结果</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询所有同学学号、姓名、选课数、总成绩</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\ts.student_id,</span><br><span class=\"line\">\tstu.name,</span><br><span class=\"line\">\t<span class=\"keyword\">COUNT</span>( course_id ),</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>( score ) </span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tscore s,</span><br><span class=\"line\">\tstudent stu</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">\ts.student_id = stu.student_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">\tstudent_id</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Having\"><a href=\"#Having\" class=\"headerlink\" title=\"Having\"></a>Having</h4><ul>\n<li>通常与Group By 子句一起使用</li>\n<li>WHERE 过滤行，Having过滤组</li>\n<li>出现在同一sql的顺序: WHERE &gt; GROUP BY &gt; HAVING</li>\n</ul>\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><h3 id=\"缓存知识考点\"><a href=\"#缓存知识考点\" class=\"headerlink\" title=\"缓存知识考点\"></a>缓存知识考点</h3><h4 id=\"缓存中间件-Memcache-和-Redis-的区别\"><a href=\"#缓存中间件-Memcache-和-Redis-的区别\" class=\"headerlink\" title=\"缓存中间件-Memcache 和 Redis 的区别\"></a>缓存中间件-Memcache 和 Redis 的区别</h4><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">Memcache</th>\n<th align=\"center\">Redis</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数据类型</td>\n<td align=\"center\">类似Hash</td>\n<td align=\"center\">丰富</td>\n</tr>\n<tr>\n<td align=\"center\">数据磁盘持久化存储</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">主从</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">分片</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n</tbody></table>\n<p>简单key-value可以选择Memcache  </p>\n<h3 id=\"为什么Redis能这么快\"><a href=\"#为什么Redis能这么快\" class=\"headerlink\" title=\"为什么Redis能这么快\"></a>为什么Redis能这么快</h3><p>10w+ QPS(query per second)</p>\n<ul>\n<li>完全基于内存，绝大部分请求是纯粹的内存操作，执行效率高</li>\n<li>数据结构简单，对数据操作也简单</li>\n<li>采用单线程，单线程也能处理高并发请求，想多核也可以多实例</li>\n<li>多路I/O复用模型，非阻塞IO</li>\n</ul>\n<h4 id=\"多路I-O复用\"><a href=\"#多路I-O复用\" class=\"headerlink\" title=\"多路I/O复用\"></a>多路I/O复用</h4><h5 id=\"I-O复用模型\"><a href=\"#I-O复用模型\" class=\"headerlink\" title=\"I/O复用模型\"></a>I/O复用模型</h5><p>Redis 采用的I/O多路复用函数: epoll/kqueue/evport/select</p>\n<ul>\n<li>因地制宜</li>\n<li>优先选择时间复杂度为O(1)的多路服用函数作为底层实现</li>\n<li>以时间复杂度为O(n)的select作为保底</li>\n<li>基于react设计模式监听I/O事件</li>\n</ul>\n<h4 id=\"Redis-数据类型\"><a href=\"#Redis-数据类型\" class=\"headerlink\" title=\"Redis 数据类型\"></a>Redis 数据类型</h4><p>供用户使用的数据类型</p>\n<ul>\n<li>String : 最基本的数据类型，二进制安全(可以存JPG图片)<ul>\n<li>get (key)</li>\n<li>set (key) (value)</li>\n</ul>\n</li>\n<li>Hash: String元素组成的字典，适合用于存储对象<ul>\n<li>hget (struct) (key)</li>\n<li>hmset (struct) (key1) (value1) (key2) (value2) … </li>\n</ul>\n</li>\n<li>List: 列表，按照String元素插入顺序排序(有点像栈)<ul>\n<li>lrange (list) (min) (max)</li>\n<li>lpush (list) (key)</li>\n</ul>\n</li>\n<li>Set: Sting 元素组成的无序集合，通过哈希表实现，不允许重复<ul>\n<li>smembers (set)</li>\n<li>sadd (set) (key)</li>\n</ul>\n</li>\n<li>Sorted Set: 通过分数来为集合中的成员进行从小到大的排序<ul>\n<li>zrangebyscore (set) (min) (max)</li>\n<li>zadd (set) (score) (key)</li>\n</ul>\n</li>\n<li>HyperLogLog 用于计数</li>\n<li>Geo 存储地理位置</li>\n</ul>\n<h5 id=\"底层数据类型基础\"><a href=\"#底层数据类型基础\" class=\"headerlink\" title=\"底层数据类型基础\"></a>底层数据类型基础</h5><ul>\n<li>简单动态字符串</li>\n<li>链表</li>\n<li>字典</li>\n<li>跳跃表</li>\n<li>整数集合</li>\n<li>压缩列表</li>\n<li>对象</li>\n</ul>\n<h3 id=\"从海量key里查询出某一固定前缀的key\"><a href=\"#从海量key里查询出某一固定前缀的key\" class=\"headerlink\" title=\"从海量key里查询出某一固定前缀的key\"></a>从海量key里查询出某一固定前缀的key</h3><ul>\n<li><p>KEYS pattern: 查找所有符合给定模式pattern的key</p>\n<ul>\n<li>KEYS指令一次性返回所有匹配的KEY</li>\n<li>键的数量过大会使服务卡顿</li>\n</ul>\n</li>\n<li><p>SCAN cursor [MATCH pattern] [COUNT count]</p>\n<ul>\n<li>基于游标的迭代器，需要基于上一次的游标延续之前的迭代过程</li>\n<li>以0作为游标开始一次新的迭代，知道命令返回游标0完成一次便利</li>\n<li>并不保证每次执行都返回某个给定数量的元素，支持模糊查询</li>\n<li>一次返回的数量不可控，只能是大概率符合count参数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Redis实现分布式锁\"><a href=\"#Redis实现分布式锁\" class=\"headerlink\" title=\"Redis实现分布式锁\"></a>Redis实现分布式锁</h3><p>分布式锁需要解决的问题</p>\n<ul>\n<li>互斥性</li>\n<li>安全性</li>\n<li>死锁</li>\n<li>容错</li>\n</ul>\n<h4 id=\"SET\"><a href=\"#SET\" class=\"headerlink\" title=\"SET\"></a>SET</h4><p>SET key value [EX seconds] [PX milliseconds] [NX|XX]</p>\n<ul>\n<li>EX second: 设置键的过期时间为 second 秒</li>\n<li>PX millisecond: 设置键的过期时间为millisecond 毫秒</li>\n<li>NX: 只在键不存在时，才对键进行设置</li>\n<li>XX: 只在键已经存在时，才对键进行设置操作</li>\n<li>SET操作成功完成时，返回OK，否则返回nil</li>\n</ul>\n<h4 id=\"大量的key同时过期的注意事项\"><a href=\"#大量的key同时过期的注意事项\" class=\"headerlink\" title=\"大量的key同时过期的注意事项\"></a>大量的key同时过期的注意事项</h4><p>集中过期，由于清除大量的key很耗时，会出现断站的卡顿现象<br>    - 解决方案: 在设置key 的过期时间时，给每个key加上随机值</p>\n<h3 id=\"使用Redis做异步队列\"><a href=\"#使用Redis做异步队列\" class=\"headerlink\" title=\"使用Redis做异步队列\"></a>使用Redis做异步队列</h3><p>使用List作为队列，RPush生产消息，LPOP消费消息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpush list aaa</span><br><span class=\"line\">rpush list bbb</span><br><span class=\"line\">rpush list ccc</span><br><span class=\"line\">lpop list // aaa</span><br><span class=\"line\">lpop list // bbb</span><br><span class=\"line\">lpop list // ccc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>缺点： 没有等待，队列里有值就直接消费</li>\n<li>弥补： 可以通过在应用层引入Sleep机制去调用LPOP重试</li>\n</ul>\n<p>如果不想用sleep 可以用BLPOP</p>\n<h4 id=\"BLPOP\"><a href=\"#BLPOP\" class=\"headerlink\" title=\"BLPOP\"></a>BLPOP</h4><p>blpop key [key …] timeout: 阻塞直到队列有消息或者超时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session 1:</span><br><span class=\"line\">    blpop list 30  // 为空进入等待30s</span><br><span class=\"line\"></span><br><span class=\"line\">session 2:</span><br><span class=\"line\">    rpush list a</span><br><span class=\"line\"></span><br><span class=\"line\">session 1:</span><br><span class=\"line\">    1) &quot;a&quot;</span><br></pre></td></tr></table></figure>\n\n<p>缺点是只能共给一个消费者使用</p>\n<h4 id=\"pub-sub\"><a href=\"#pub-sub\" class=\"headerlink\" title=\"pub/sub\"></a>pub/sub</h4><p>主题订阅者模式</p>\n<ul>\n<li>发送者(pub)发送消息，订阅者(sub)接收消息</li>\n<li>订阅者可以订阅任意数量的频道</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subscribe (channel) 接收广播</span><br><span class=\"line\">publish (channel) (content) 发送广播</span><br></pre></td></tr></table></figure>\n\n<p>缺点： 消息的发布是无状态的，无法保证可达</p>\n<p>kafka 和 MQ</p>\n<h3 id=\"持久化方法之-RDB\"><a href=\"#持久化方法之-RDB\" class=\"headerlink\" title=\"持久化方法之 RDB\"></a>持久化方法之 RDB</h3><p>RDB(快照)持久化：保存某个时间点的全量数据快照</p>\n<p>手动：</p>\n<ul>\n<li>SAVE: 阻塞Redis的服务器进程，直到RDB文件创建完毕</li>\n<li>BGSAVE: Fork出一个子进程来创建RDB文件，不阻塞服务器进程</li>\n</ul>\n<p>自动：</p>\n<ul>\n<li>根据redis.conf配置里面的SAVE m n定时触发(用的是BGSAVE)</li>\n<li>主从复制时，主节点自动触发</li>\n<li>执行Debug Reload</li>\n<li>执行Shutdown且没有开启AOF持久化</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>内存数据的全量同步，数据量大会由于I/O而严重影响性能</li>\n<li>可能会因为Redis 挂掉而丢失从当前至最后一次快照期间的数据</li>\n</ul>\n<h3 id=\"持久化之-AOF\"><a href=\"#持久化之-AOF\" class=\"headerlink\" title=\"持久化之 AOF\"></a>持久化之 AOF</h3><p>AOF (Append-Only-File) 持久化：保存写状态</p>\n<ul>\n<li>记录下除了查询以外的所有变更数据库状态的指令</li>\n<li>以append的形式追加保存到AOF文件中</li>\n</ul>\n<p>日志重写解决AOF文件大小不断增大的问题，原理如下</p>\n<pre><code>- 调用fork(), 创建一个子进程\n- 子进程把新的AOF写道临时文件，不依赖原来的AOF文件\n- 主进程持续把新的变动同时写到内存和原来的AOF里\n- 主进程获取子进程重写AOF的完成信号，往新的AOF同步增量变动\n- 使用新的AOF文件替换掉旧的AOF文件</code></pre><p>手动重写指令: BGREWRITEAOF</p>\n<h3 id=\"RDB和AOF\"><a href=\"#RDB和AOF\" class=\"headerlink\" title=\"RDB和AOF\"></a>RDB和AOF</h3><h4 id=\"RDB和AOF共存时的恢复流程\"><a href=\"#RDB和AOF共存时的恢复流程\" class=\"headerlink\" title=\"RDB和AOF共存时的恢复流程\"></a>RDB和AOF共存时的恢复流程</h4><p><img src=\"RDB&AOF.png\" alt=\"RDB&amp;AOF\"></p>\n<h4 id=\"RDB和AOF的优缺点\"><a href=\"#RDB和AOF的优缺点\" class=\"headerlink\" title=\"RDB和AOF的优缺点\"></a>RDB和AOF的优缺点</h4><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">RDB</th>\n<th align=\"center\">AOF</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">优点</td>\n<td align=\"center\">全量数据快照，文件小，恢复快</td>\n<td align=\"center\">可读性高，适合保存增量数据，数据不易丢失</td>\n</tr>\n<tr>\n<td align=\"center\">缺点</td>\n<td align=\"center\">无法保存最近一次快照之后的数据</td>\n<td align=\"center\">文件体积大，恢复时间大</td>\n</tr>\n</tbody></table>\n<h3 id=\"RDB-AOF混合持久化方式\"><a href=\"#RDB-AOF混合持久化方式\" class=\"headerlink\" title=\"RDB-AOF混合持久化方式\"></a>RDB-AOF混合持久化方式</h3><p>default RDB-AOF</p>\n<ul>\n<li>BGSAVE做镜像全量持久化，AOF做增量持久化</li>\n</ul>\n<h3 id=\"pipeline-的好处\"><a href=\"#pipeline-的好处\" class=\"headerlink\" title=\"pipeline 的好处\"></a>pipeline 的好处</h3><ul>\n<li>pipeline 跟linux 的管道类似</li>\n<li>Redis基于请求/响应模型，单个请求处理需要一一对应</li>\n<li>pipeline批量执行指令，节省多次IO往返的时间</li>\n<li>有顺序依赖的指令建议分批发送</li>\n</ul>\n<h3 id=\"redis的同步机制\"><a href=\"#redis的同步机制\" class=\"headerlink\" title=\"redis的同步机制\"></a>redis的同步机制</h3><p>主从同步原理</p>\n<h4 id=\"全同步过程\"><a href=\"#全同步过程\" class=\"headerlink\" title=\"全同步过程\"></a>全同步过程</h4><ul>\n<li>Salve 发送sync 命令到Master</li>\n<li>Master启动一个后台进程，将Redis中的数据快照保存到文件中(BGSAVE)</li>\n<li>Master将保存数据快照期间接收到的写命令缓存起来</li>\n<li>Master完成写文件操作后，将该文件发送给Salve</li>\n<li>使用新的AOF文件替换掉旧的AOF文件</li>\n<li>Master将这期间收集的增量写命令发送给Salve端</li>\n</ul>\n<h4 id=\"增量同步过程\"><a href=\"#增量同步过程\" class=\"headerlink\" title=\"增量同步过程\"></a>增量同步过程</h4><ul>\n<li>Master接收到用户的操作指令，判断是否需要传播到Slave</li>\n<li>将操作记录追加到AOF文件</li>\n<li>将操作传播到其他Slave:<ol>\n<li>对齐主从库</li>\n<li>往响应缓存写入指令</li>\n</ol>\n</li>\n<li>将缓存中的数据发给Slave</li>\n</ul>\n<h3 id=\"Redis-Sentinel-哨兵机制\"><a href=\"#Redis-Sentinel-哨兵机制\" class=\"headerlink\" title=\"Redis Sentinel (哨兵机制)\"></a>Redis Sentinel (哨兵机制)</h3><p>解决主从同步Master宕机后的主从切换问题：</p>\n<ul>\n<li>监控： 检查主从服务器是否运行正常</li>\n<li>提醒： 通过API向管理员或者其他应用程序发送故障通知</li>\n<li>自动故障迁移：主从切换</li>\n</ul>\n<h4 id=\"流言协议Gossip\"><a href=\"#流言协议Gossip\" class=\"headerlink\" title=\"流言协议Gossip\"></a>流言协议Gossip</h4><p>在杂乱无章中寻求一致</p>\n<ul>\n<li>每个节点都随机的与对方通信，最终所有节点达成一致的状态</li>\n<li>种子节点定期随机向其他节点发送节点列表以及需要传播的信息</li>\n<li>不保证信息一定会传递给所有节点，但是最终会趋于一致</li>\n</ul>\n<h3 id=\"Redis-的集群原理\"><a href=\"#Redis-的集群原理\" class=\"headerlink\" title=\"Redis 的集群原理\"></a>Redis 的集群原理</h3><p>如何从海量数据里快速找到所需？</p>\n<ul>\n<li>分片：按照某种规则去划分数据，分散存储在多个节点上</li>\n<li>常规的按照哈希划分无法实现节点的动态增减</li>\n</ul>\n<p>一致性哈希算法： 对2^32取模，将哈希值空间组织成虚拟的圆环<br>将数据key使用相同的函数hash计算出哈希值</p>\n<p>数据存储节点如下，若Node C宕机，则会存储到D节点上<br><img src=\"redis_node_c.png\" alt=\"Node_C宕机\"></p>\n<p>新增Node X服务器，则在B到X之间的数据(object c)更改存储位置到X的位置上</p>\n<p><img src=\"Node_X.png\" alt=\"Node_X\"></p>\n<h4 id=\"Hash环数据倾斜问题\"><a href=\"#Hash环数据倾斜问题\" class=\"headerlink\" title=\"Hash环数据倾斜问题\"></a>Hash环数据倾斜问题</h4><p>引入虚拟节点解决数据倾斜问题</p>\n<p><img src=\"vitual_node.png\" alt=\"vitual_node\"></p>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><ul>\n<li>体系结构主要分为用户态和内核态(kernel)</li>\n<li>内核: 本质是一段管理计算机硬件设备的程序</li>\n<li>系统调用: 内核的访问接口，是一种能够能再简化的操作</li>\n<li>公用函数库: 系统调用的组合拳</li>\n<li>Shell: 命令解释器，可编程</li>\n</ul>\n<p>man 2(系统调用) 3(公共库函数)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man 2 syscalls</span><br><span class=\"line\">man 2 acct</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><p>语法</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find path [options] params</span><br></pre></td></tr></table></figure>\n\n<p>指定目录下查找文件<br>-iname 可以忽略大小写</p>\n<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [options] pattern file</span><br><span class=\"line\">grep -o pattern <span class=\"comment\"># 选出满足条件的</span></span><br><span class=\"line\">grep -v pattern <span class=\"comment\"># 过滤包含该pattern的</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>全称: Global Regular Expression Print</li>\n<li>作用: 查找文件里符合条件的字符串</li>\n</ul>\n<h3 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道 |\"></a>管道 |</h3><ul>\n<li>可将指令连接起来，前一个指令的输出作为后一个指令的输入</li>\n<li>只能处理前一个指令的正确输出，无法处理错误</li>\n<li>右边的命令必须能够接收标准输入流，否则传递过程中数据会被抛弃<ul>\n<li>如sed, awk, grep, cut, head, top, less, more, wc, join, sort, split</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h3><h4 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk [options] <span class=\"string\">'command'</span> file</span><br></pre></td></tr></table></figure>\n\n<p>awk -f 设置分隔符</p>\n<ul>\n<li>一次读取一行文本，按输入分隔符进行切片，切成多个组合部分</li>\n<li>将切片直接保存在内建的变量中，$1,$2…$0表示行的全部</li>\n<li>支持对单个切片的判断，支持循环判断，默认分隔符为空格</li>\n</ul>\n<h3 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h3><h4 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed [option] <span class=\"string\">'sed command'</span> file</span><br><span class=\"line\">sed -i <span class=\"string\">'s/^Str/String/'</span> replace.java</span><br><span class=\"line\">sed -i <span class=\"string\">'s/\\.$/\\;'</span> replace.java</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>全名 stream editor 流编辑器</li>\n<li>适合用于对文本的行内容进行处理</li>\n</ul>\n<h2 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h2><h3 id=\"谈谈你对Java的理解\"><a href=\"#谈谈你对Java的理解\" class=\"headerlink\" title=\"谈谈你对Java的理解\"></a>谈谈你对Java的理解</h3><ul>\n<li>平台无关性</li>\n<li>GC</li>\n<li>语言特性(泛型、反射)</li>\n<li>面向对象</li>\n<li>库类</li>\n<li>异常处理</li>\n</ul>\n<h4 id=\"Compile-Once-Run-Anywhere如何实现\"><a href=\"#Compile-Once-Run-Anywhere如何实现\" class=\"headerlink\" title=\"Compile Once, Run Anywhere如何实现\"></a>Compile Once, Run Anywhere如何实现</h4><ul>\n<li>编译时</li>\n<li>运行时</li>\n</ul>\n<p>javac编译，生成字节码</p>\n<p><img src=\"JAVA%E8%B7%A8%E5%B9%B3%E5%8F%B0.png\" alt=\" 跨平台\"></p>\n<p>Java源码首先被编译为字节码，再由不同平台的JVM进行解析，Java语言在不同平台上运行时不需要进行重新编译，Java虚拟机在执行字节码的时候，把字节码转换成具体平台上的机器指令。</p>\n<h4 id=\"为什么JVM不直接将源码解析成机器码去执行\"><a href=\"#为什么JVM不直接将源码解析成机器码去执行\" class=\"headerlink\" title=\"为什么JVM不直接将源码解析成机器码去执行\"></a>为什么JVM不直接将源码解析成机器码去执行</h4><p>为什么要先编译成字节码再解析成机器码</p>\n<ul>\n<li>准备工作: 每次执行都需要各种检查</li>\n<li>兼容性: 也可以将别的语言解析成字节码</li>\n</ul>\n<h4 id=\"JVM如何加载-class文件\"><a href=\"#JVM如何加载-class文件\" class=\"headerlink\" title=\"JVM如何加载.class文件\"></a>JVM如何加载.class文件</h4><p><img src=\"JVM.png\" alt=\"JVM\"></p>\n<ul>\n<li>Class Loader: 依据特定格式，加载class文件到内存 (本地接口)</li>\n<li>Execution Engine: 对命令进行解析 (解释器)</li>\n<li>Native Interface: 融合不同开发语言的原生库为Java所用</li>\n<li>Runtime Data Area: JVM内存空间结构模型</li>\n</ul>\n<h4 id=\"谈谈反射\"><a href=\"#谈谈反射\" class=\"headerlink\" title=\"谈谈反射\"></a>谈谈反射</h4><h5 id=\"列举反射的例子\"><a href=\"#列举反射的例子\" class=\"headerlink\" title=\"列举反射的例子\"></a>列举反射的例子</h5><p>// TODO 添加代码</p>\n<h4 id=\"ClassLoader\"><a href=\"#ClassLoader\" class=\"headerlink\" title=\"ClassLoader\"></a>ClassLoader</h4><p>类从编译到执行的过程</p>\n<ul>\n<li>将源文件编译为字节码文件</li>\n<li>ClassLoader将字节码转换为JVM中的Class&lt; xx &gt;对象</li>\n<li>JVM利用Class&lt; xx &gt; 对象实例化为 xx 对象</li>\n</ul>\n<p>Classloader在Java中有着非常重要的作用,它主要工作在 Class 装载的加载阶段,其主要作用是从系统外部获得 ** Class二进制数据流 **。它是Java的核心组件所有的 Class都是由 Classloader进行加载的Classloader负责通过将 Class文件里的二进制数据流装载进系统,然后交给Java虚拟机进行连接、初始化等操作。</p>\n<h5 id=\"ClassLoader种类\"><a href=\"#ClassLoader种类\" class=\"headerlink\" title=\"ClassLoader种类\"></a>ClassLoader种类</h5><ul>\n<li>BootStrapClassLoader: C++编写，加载核心库java.*</li>\n<li>ExtClassLoader: java编写，加载扩展库 javax.*</li>\n<li>AppClassLoader: java编写，加载程序所在目录</li>\n<li>自定义ClasLoader: java编写，自定义加载<ul>\n<li>findClass</li>\n<li>defineClass<br>// TODO 代码</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类加载器名称</th>\n<th align=\"center\">加载范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">启动类加载器 Bootstrap ClassLoader</td>\n<td align=\"center\">存放在<java_home>\\lib 目录中的，并且是虚拟机识别的类库加载到虚拟机内存中的</java_home></td>\n</tr>\n<tr>\n<td align=\"center\">扩展类加载器 Extension ClassLoader</td>\n<td align=\"center\">存放在<java_home>\\lib\\ext 目录中的所有类库，开发者可以直接使用</java_home></td>\n</tr>\n<tr>\n<td align=\"center\">应用程序加载器 Application ClassLoader</td>\n<td align=\"center\">加载用户类路径上指定的类库，开发者可以直接使用，一般情况下这个就是程序中默认的类加载器</td>\n</tr>\n<tr>\n<td align=\"center\">自定义加载器 Custom ClassLoader</td>\n<td align=\"center\">加载自定义的类</td>\n</tr>\n</tbody></table>\n<h5 id=\"如何组织类加载器\"><a href=\"#如何组织类加载器\" class=\"headerlink\" title=\"如何组织类加载器\"></a>如何组织类加载器</h5><p>虚拟器引入了双亲委派模型<br>当一个加载器进行类加载的时候，先委派给双亲加载器加载。双亲无法加载的时候再返回自己加载。<br>好处: 保证类有合适的优先级的层次关系，保证程序稳定运行。  </p>\n<p><img src=\"%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.png\" alt=\"双亲委派\"></p>\n<p>// TODO ClassLoader 源码</p>\n<p><a href=\"http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file\" target=\"_blank\" rel=\"noopener\">openjdk</a></p>\n<h5 id=\"为什么使用双亲委派机制去加载类\"><a href=\"#为什么使用双亲委派机制去加载类\" class=\"headerlink\" title=\"为什么使用双亲委派机制去加载类\"></a>为什么使用双亲委派机制去加载类</h5><ul>\n<li>避免多份同样字节码的加载</li>\n</ul>\n<h5 id=\"类的加载方式\"><a href=\"#类的加载方式\" class=\"headerlink\" title=\"类的加载方式\"></a>类的加载方式</h5><ul>\n<li>隐式加载: new</li>\n<li>显示加载: loadClass, forName等(不支持反射，需要newInstance()获取实例)</li>\n</ul>\n<h6 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h6><p><img src=\"%E7%B1%BB%E7%9A%84%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F.png\" alt=\"类的生命周期\"></p>\n<p>类加载包括 加载 验证 准备 解析 初始化五个阶段  </p>\n<ul>\n<li>加载: 类加载器(可自己设置)，热部署，加密解密</li>\n<li>验证: 字节流包含的信息符不符合虚拟机要求，会不会危害虚拟机  </li>\n<li>准备: 为类变量分配内存，设置初始值 。  </li>\n<li>解析: 将常量池的一些引用替换为实际值。</li>\n<li>初始化: 赋值</li>\n<li>使用: 构造过程，构造方法</li>\n</ul>\n<p><img src=\"%E7%B1%BB%E5%8A%A0%E8%BD%BD.png\" alt=\"类加载\"></p>\n<h6 id=\"loadClass-和-forNmae-的区别\"><a href=\"#loadClass-和-forNmae-的区别\" class=\"headerlink\" title=\"loadClass 和 forNmae 的区别\"></a>loadClass 和 forNmae 的区别</h6><ul>\n<li>Class.forName 得到的class 是已经初始化完成的</li>\n<li>Classloader.loadClass得到的class是还没有链接的</li>\n</ul>\n<p>例如forName用于加载MySQL jdbc Driver，loadclass 不可以</p>\n<p>loadclass 一般用于spring ioc，因为 lazy loading 即懒加载的特性，加快加载速度，等要用到的时候再去初始化</p>\n<h4 id=\"Java的内存模型\"><a href=\"#Java的内存模型\" class=\"headerlink\" title=\"Java的内存模型\"></a>Java的内存模型</h4><ul>\n<li>地址空间划分<ul>\n<li>内核空间  (主要的系统操纵程序和C运行的空间，逻辑和基于C的进程)</li>\n<li>用户空间  (Java实际运行时使用的内存空间)</li>\n</ul>\n</li>\n</ul>\n<p>JVM内存模型–JDK8</p>\n<p><img src=\"JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png\" alt=\"JVM内存模型\"></p>\n<h5 id=\"程序计数器-Program-Counter-Register\"><a href=\"#程序计数器-Program-Counter-Register\" class=\"headerlink\" title=\"程序计数器(Program Counter Register)\"></a>程序计数器(Program Counter Register)</h5><ul>\n<li>当前线程执行的字节码行号指示器(逻辑计数器)</li>\n<li>改变计数器的值来选取下一条需要执行的字节码指令</li>\n<li>和线程时一对一的关系即”线程私有”</li>\n<li>对Java方法计数，如果时Native方法，计数器值为Undefined</li>\n<li>不会发生内存泄漏</li>\n</ul>\n<h5 id=\"Java虚拟机栈-Stack\"><a href=\"#Java虚拟机栈-Stack\" class=\"headerlink\" title=\"Java虚拟机栈(Stack)\"></a>Java虚拟机栈(Stack)</h5><ul>\n<li>Java方法执行的内存模型</li>\n<li>包含多个栈帧</li>\n</ul>\n<p>// TODO javap -verbose </p>\n<p><img src=\"Stack.png\" alt=\"stack\"></p>\n<h6 id=\"递归为什么会引发java-lang-StackOVerflowError异常\"><a href=\"#递归为什么会引发java-lang-StackOVerflowError异常\" class=\"headerlink\" title=\"递归为什么会引发java.lang.StackOVerflowError异常\"></a>递归为什么会引发java.lang.StackOVerflowError异常</h6><ul>\n<li>递归过深，栈帧数超出虚拟栈深度</li>\n<li>虚拟机栈过多会引发java.lang.OutOfMemoryError</li>\n</ul>\n<h5 id=\"本地方法栈-Native-Stack\"><a href=\"#本地方法栈-Native-Stack\" class=\"headerlink\" title=\"本地方法栈(Native Stack)\"></a>本地方法栈(Native Stack)</h5><ul>\n<li>与虚拟机栈相似，主要作用于标注了native的方法</li>\n</ul>\n<h5 id=\"元空间-MetaSpace\"><a href=\"#元空间-MetaSpace\" class=\"headerlink\" title=\"元空间(MetaSpace)\"></a>元空间(MetaSpace)</h5><p>元空间(MetaSpace)与永久代(PermGen)的区别</p>\n<ul>\n<li>元空间使用本地内存，而永久代使用的是jvm的内存</li>\n</ul>\n<p>MetaSpace 相比 PermGen的优势</p>\n<ul>\n<li>字符串常量池存在永久代中，容易出现性能问题和内存溢出</li>\n<li>类和方法的信息大小难以确定，给永久代的大小指定带来了困呐</li>\n<li>永久代会为GC带来不必要的复杂性</li>\n<li>方便HotSpot与其他JVM如Jrockit的继承</li>\n</ul>\n<h5 id=\"Java堆-Heap\"><a href=\"#Java堆-Heap\" class=\"headerlink\" title=\"Java堆(Heap)\"></a>Java堆(Heap)</h5><ul>\n<li>对象实例的分配区域</li>\n<li>GC管理的主要区域<ul>\n<li>分代清除算法(新生代，老生代)</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"常考问题\"><a href=\"#常考问题\" class=\"headerlink\" title=\"常考问题\"></a>常考问题</h5><h6 id=\"JVM-三大性能调优参数-Xms-Xmx-Xss的含义\"><a href=\"#JVM-三大性能调优参数-Xms-Xmx-Xss的含义\" class=\"headerlink\" title=\"JVM 三大性能调优参数-Xms -Xmx -Xss的含义\"></a>JVM 三大性能调优参数-Xms -Xmx -Xss的含义</h6><ul>\n<li>-Xss: 规定了每个线程虚拟机栈(堆栈)的大小</li>\n<li>-Xms: 堆的初始值</li>\n<li>-Xmx: 堆能达到的最大值</li>\n</ul>\n<h6 id=\"Java的内存模型-堆和栈\"><a href=\"#Java的内存模型-堆和栈\" class=\"headerlink\" title=\"Java的内存模型(堆和栈)\"></a>Java的内存模型(堆和栈)</h6><p>Java内存模型中堆和栈的区别– 内存分配策略</p>\n<ul>\n<li>静态存储：编译时确定每个数据目标在运行时的存储空间需求</li>\n<li>栈式存储：数据区需求在编译时未知，运行时模块入口前确定</li>\n<li>堆式存储：编译时或运行时模块入口都无法确定，动态分配</li>\n</ul>\n<p>Java内存中堆和栈的区别</p>\n<ul>\n<li>联系：引用对象、数组时，栈里定义变量保存堆中目标的首地址</li>\n<li>管理方式: 栈自动释放，堆需要GC</li>\n<li>空间大小：栈比堆小</li>\n<li>碎片相关：栈产生的碎片远小于堆</li>\n<li>分配方式: 站支持静态和动态分配，而堆仅支持动态分配</li>\n<li>效率： 栈的效率比堆高</li>\n</ul>\n<p>元空间、堆、线程独占部分间的联系-内存角度</p>\n<ul>\n<li>元空间：方法</li>\n<li>堆： 对象</li>\n<li>栈： 执行过程</li>\n</ul>\n<p>不同JDK版本置键的intern()方法的区别-JDK6 VS JDK+</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"keyword\">new</span> String (<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">s.intern();</span><br></pre></td></tr></table></figure>\n\n<p>JDK6:当调用 intern方法时,如果字符串常量池先前已创建出该字符串对象,则返回池中的该字符串的引用。<br>否则,将此字符串对象添加到字符串常量池中,并且返回该字符串对象的引用。</p>\n<p>JDK6+:当调用 intern方法时,如果字符串常量池先前已创建出该字符串对象,则返回池中的该字符串的引用。<br>否则,如果该字符串对象已经存在于Java堆中,则将堆中对此对象的引用添加到字符串常量池中,并且返回该引用;<br>如果堆中不存在,则在池中创建该字符串并返回其引用。</p>\n<h2 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h2><h3 id=\"Java垃圾回收机制\"><a href=\"#Java垃圾回收机制\" class=\"headerlink\" title=\"Java垃圾回收机制\"></a>Java垃圾回收机制</h3><h6 id=\"对象被判定为垃圾的标准\"><a href=\"#对象被判定为垃圾的标准\" class=\"headerlink\" title=\"对象被判定为垃圾的标准\"></a>对象被判定为垃圾的标准</h6><ul>\n<li>没有被其他对象引用</li>\n</ul>\n<h4 id=\"判断对象是否为垃圾的算法\"><a href=\"#判断对象是否为垃圾的算法\" class=\"headerlink\" title=\"判断对象是否为垃圾的算法\"></a>判断对象是否为垃圾的算法</h4><h5 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h5><p>做法</p>\n<ul>\n<li><p>通过判断对象的引用数量来决定对象是否可以被回收</p>\n</li>\n<li><p>每个对象实例都有一个引用计数器，被引用则+1，完成引用则-1</p>\n</li>\n<li><p>任何引用计数为0 的对象实例可以被当作垃圾收集</p>\n</li>\n<li><p>优点：执行效率高，程序执行受影响较小</p>\n</li>\n<li><p>缺点: 无法检测出循环引用的情况，导致内存泄露</p>\n</li>\n</ul>\n<h5 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h5><p>由离散数学的图论引入的  </p>\n<p>通过判断对象的引用链是否可达来决定对象是否可以被回收<br>选择一个GC Root对象</p>\n<ul>\n<li>虚拟机栈中引用的对象(栈帧中的本地变量表)</li>\n<li>方法区中的常量引用对象</li>\n<li>方法区中的类静态属性引用的对象</li>\n<li>本地方法栈中JNI(Native方法)的引用对象</li>\n<li>活跃线程的引用对象</li>\n</ul>\n<h4 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h4><h5 id=\"标记-清楚算法-Mark-and-Sweep\"><a href=\"#标记-清楚算法-Mark-and-Sweep\" class=\"headerlink\" title=\"标记-清楚算法(Mark and Sweep)\"></a>标记-清楚算法(Mark and Sweep)</h5><ul>\n<li>标记: 从根集合进行扫描，对存活的对象进行标记</li>\n<li>清楚: 对堆内存从头到尾进行线性遍历，回收不可达对象内存</li>\n</ul>\n<p>缺点<br>造成碎片化问题</p>\n<h5 id=\"复制算法-Copying\"><a href=\"#复制算法-Copying\" class=\"headerlink\" title=\"复制算法(Copying)\"></a>复制算法(Copying)</h5><ul>\n<li>分为对象面和空闲面</li>\n<li>对象在对象面上创建</li>\n<li>存货的对象被从对象面复制到空闲区</li>\n<li>将对象面所有对象内存清楚</li>\n</ul>\n<p>优点  </p>\n<ul>\n<li>解决碎片化问题</li>\n<li>顺序分配内存，简单高效</li>\n<li>适用于对象存活率低的场景</li>\n</ul>\n<p>适用于分代的年轻代</p>\n<h5 id=\"标记-整理算法-Compacting\"><a href=\"#标记-整理算法-Compacting\" class=\"headerlink\" title=\"标记-整理算法(Compacting)\"></a>标记-整理算法(Compacting)</h5><p>使用了标记清除算法的方式，加上了整理步骤</p>\n<ul>\n<li>避免内存的不连续行</li>\n<li>不用设置两块内存互换</li>\n<li>适用于存活率高的场景</li>\n</ul>\n<h5 id=\"分代收集算法-Generational-Collector\"><a href=\"#分代收集算法-Generational-Collector\" class=\"headerlink\" title=\"分代收集算法(Generational Collector)\"></a>分代收集算法(Generational Collector)</h5><p>组合拳  </p>\n<ul>\n<li>jdk6, jdk7 分为年轻代，老年代，永久代</li>\n<li>jdk8 以后永久代消失</li>\n</ul>\n<p>年轻代存活率低，使用复制算法，老年代存活率高，使用标记清除/整理算法  </p>\n<h5 id=\"GC-分类\"><a href=\"#GC-分类\" class=\"headerlink\" title=\"GC 分类\"></a>GC 分类</h5><ul>\n<li>Minor GC (年轻代)</li>\n<li>Full GC (老年代)</li>\n</ul>\n<h6 id=\"年轻代-1-3\"><a href=\"#年轻代-1-3\" class=\"headerlink\" title=\"年轻代(1/3)\"></a>年轻代(1/3)</h6><ul>\n<li>Eden区(伊甸) (大)</li>\n<li>两个Survivor区 (from/to) (小)</li>\n</ul>\n<p>如何判断进入老年代  </p>\n<ul>\n<li>经历一定Minor次数依然存活的对象</li>\n<li>Survivor区中存放不下的对象</li>\n<li>新生成的大对象</li>\n</ul>\n<p>常用调优参数</p>\n<ul>\n<li>-XX:SurvivorRatio: Eden 和 Survivor的比值，默认8:1</li>\n<li>-XX:NewRatio: 老年代和年轻代内存大小的比例</li>\n<li>-XX:MaxTenurinThreshold: 对象从年轻代晋升到老年代经过GC次数的最大阈值</li>\n</ul>\n<h6 id=\"老年代-2-3\"><a href=\"#老年代-2-3\" class=\"headerlink\" title=\"老年代(2/3)\"></a>老年代(2/3)</h6><ul>\n<li>标记-清理算法</li>\n<li>标记-整理算法</li>\n</ul>\n<p>老年代的GC会涉及新生代，Full GC就是全GC</p>\n<ul>\n<li>Full GC 和 Major GC</li>\n<li>Full GC 比Minor GC 慢(10倍左右)，但执行频率低</li>\n</ul>\n<p>触发Full GC的条件</p>\n<ul>\n<li>老年代空间不足</li>\n<li>永久代空间不足 (jdk6, 7)</li>\n<li>CMS GC时出现promotion failed, concurrent mode failure</li>\n<li>Minor GC晋级到老年代的平均大小大于老年代的剩余空间</li>\n<li>调用System.gc()</li>\n<li>使用RMI来进行RPC管理的JDK应用，每效时执行一次Full GC</li>\n</ul>\n<h6 id=\"Stop-the-World\"><a href=\"#Stop-the-World\" class=\"headerlink\" title=\"Stop-the-World\"></a>Stop-the-World</h6><ul>\n<li>JVM 由于要执行GC而停止了应用程序的执行</li>\n<li>任何一种GC算法中都会发生</li>\n<li>多数GC优化通过减少Stop-the-world发生的时间来提高程序性能(实现高吞吐)</li>\n</ul>\n<h6 id=\"Safepoint\"><a href=\"#Safepoint\" class=\"headerlink\" title=\"Safepoint\"></a>Safepoint</h6><ul>\n<li>分析过程中对象引用关系不会发生变化的点</li>\n<li>产生安全点的地方: 方法调用，循环跳转，异常跳转等</li>\n<li>安全点数量适中</li>\n</ul>\n<h4 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h4><p>JVM的运行模式</p>\n<ul>\n<li>Server</li>\n<li>Client</li>\n</ul>\n<h5 id=\"年轻代常见的垃圾收集器\"><a href=\"#年轻代常见的垃圾收集器\" class=\"headerlink\" title=\"年轻代常见的垃圾收集器\"></a>年轻代常见的垃圾收集器</h5><h6 id=\"Serial收集器-XX-UseSerialGC-复制算法\"><a href=\"#Serial收集器-XX-UseSerialGC-复制算法\" class=\"headerlink\" title=\"Serial收集器(-XX: +UseSerialGC, 复制算法)\"></a>Serial收集器(-XX: +UseSerialGC, 复制算法)</h6><ul>\n<li>单线程收集，进行垃圾收集时，必须暂停所有工作线程</li>\n<li>简单高效，Client模式下默认的年轻代收集器</li>\n</ul>\n<h6 id=\"ParNew收集器-XX-UseParNewGC-复制算法\"><a href=\"#ParNew收集器-XX-UseParNewGC-复制算法\" class=\"headerlink\" title=\"ParNew收集器(-XX: +UseParNewGC, 复制算法)\"></a>ParNew收集器(-XX: +UseParNewGC, 复制算法)</h6><ul>\n<li>多线程收集，其他行为同Serial</li>\n<li>单核执行效率不如Serial，多核下有优势</li>\n</ul>\n<h6 id=\"Parallel-Scavenge收集器-XX-UseParallelGC，复制算法\"><a href=\"#Parallel-Scavenge收集器-XX-UseParallelGC，复制算法\" class=\"headerlink\" title=\"Parallel Scavenge收集器(-XX: +UseParallelGC，复制算法)\"></a>Parallel Scavenge收集器(-XX: +UseParallelGC，复制算法)</h6><ul>\n<li>吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)</li>\n<li>比起关注用户线程停顿时间，更关注系统的吞吐量</li>\n<li>在多核下执行才有优势，Server模式下默认的年轻代收集器</li>\n</ul>\n<h5 id=\"老年代垃圾收集器\"><a href=\"#老年代垃圾收集器\" class=\"headerlink\" title=\"老年代垃圾收集器\"></a>老年代垃圾收集器</h5><h6 id=\"Serial-Old收集器-XX-UseSerialOldGC-标记-整理算法\"><a href=\"#Serial-Old收集器-XX-UseSerialOldGC-标记-整理算法\" class=\"headerlink\" title=\"Serial Old收集器(-XX: +UseSerialOldGC, 标记-整理算法)\"></a>Serial Old收集器(-XX: +UseSerialOldGC, 标记-整理算法)</h6><p>其他特点同年轻代</p>\n<h6 id=\"Paraller-Old收集器-XX-UseParallelOldGC，标记-清理算法\"><a href=\"#Paraller-Old收集器-XX-UseParallelOldGC，标记-清理算法\" class=\"headerlink\" title=\"Paraller Old收集器(-XX: +UseParallelOldGC，标记-清理算法)\"></a>Paraller Old收集器(-XX: +UseParallelOldGC，标记-清理算法)</h6><ul>\n<li>多线程，吞吐量优先</li>\n</ul>\n<h6 id=\"CMS收集器-XX-UseConcMarkSweepGC，-标记-清理算法\"><a href=\"#CMS收集器-XX-UseConcMarkSweepGC，-标记-清理算法\" class=\"headerlink\" title=\"CMS收集器(-XX: +UseConcMarkSweepGC， 标记-清理算法)\"></a>CMS收集器(-XX: +UseConcMarkSweepGC， 标记-清理算法)</h6><ul>\n<li>初始标记: stop-the-world</li>\n<li>并发标记: 并发追溯标记，程序不会停顿</li>\n<li>并发预清理: 查找执行并发标记阶段从年轻代晋升到老年代的对象</li>\n<li>重新标记: 暂停虚拟机，扫面CMS堆中的剩余对象</li>\n<li>并发清理: 清理垃圾对象，程序不会停顿</li>\n<li>并发重置: 重置CMS收集器的数据结构</li>\n</ul>\n<h5 id=\"G1收集器-XX-UseG1GC，复制-标记-整理算法\"><a href=\"#G1收集器-XX-UseG1GC，复制-标记-整理算法\" class=\"headerlink\" title=\"G1收集器(-XX: +UseG1GC，复制+标记-整理算法)\"></a>G1收集器(-XX: +UseG1GC，复制+标记-整理算法)</h5><p>Garbage First收集器优点</p>\n<ul>\n<li>并发和并行</li>\n<li>分代收集</li>\n<li>空间整合</li>\n<li>可预测的停顿</li>\n</ul>\n<p>G1</p>\n<ul>\n<li>Java堆内存划分为多个大小相等的Region</li>\n<li>年轻代和老年代不再物理隔离</li>\n</ul>\n<h4 id=\"GC-的面试题\"><a href=\"#GC-的面试题\" class=\"headerlink\" title=\"GC 的面试题\"></a>GC 的面试题</h4><h5 id=\"Object的finalize-方法的作用是否与C-的析构函数作用相同\"><a href=\"#Object的finalize-方法的作用是否与C-的析构函数作用相同\" class=\"headerlink\" title=\"Object的finalize()方法的作用是否与C++的析构函数作用相同\"></a>Object的finalize()方法的作用是否与C++的析构函数作用相同</h5><ul>\n<li>与C++的析构函数不同，析构函数调用确定，而它是不确定的</li>\n<li>将未被引用的对象放置在F-Queue队列</li>\n<li>方法执行随时可能会被终止</li>\n<li>给予对象最后一次重生的机会</li>\n</ul>\n<h5 id=\"G1-ZGC\"><a href=\"#G1-ZGC\" class=\"headerlink\" title=\"G1, ZGC\"></a>G1, ZGC</h5><h5 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h5><h6 id=\"强引用\"><a href=\"#强引用\" class=\"headerlink\" title=\"强引用\"></a>强引用</h6><ul>\n<li>最普通的引用: Object obj = new Object()</li>\n<li>抛出OutOfMemoryError 终止程序也不会回收具有强引用的对象</li>\n<li>通过将对象设置为null来弱化引用，使其被回收</li>\n</ul>\n<h6 id=\"软引用\"><a href=\"#软引用\" class=\"headerlink\" title=\"软引用\"></a>软引用</h6><ul>\n<li>对象处在有用但非必须的状态</li>\n<li>只有当内存空间不足时，GC会回收该引用的对象的内存</li>\n<li>可以用来实现高速缓存</li>\n</ul>\n<h6 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h6><ul>\n<li>非必须的对象，比软引用更弱</li>\n<li>GC时会被回收</li>\n<li>被回收的概率不大，因为GC线程优先级比较低</li>\n<li>适用于引用偶尔被使用且不影响垃圾收集的对象</li>\n</ul>\n<h6 id=\"虚引用\"><a href=\"#虚引用\" class=\"headerlink\" title=\"虚引用\"></a>虚引用</h6><ul>\n<li>不会决定对象的生命周期</li>\n<li>任何时候都可能被垃圾收集器回收</li>\n<li>跟踪对象被垃圾收集器回收的活动，起哨兵作用</li>\n<li>必须和引用队列ReferenceQueue联合使用 </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">引用类型</th>\n<th align=\"center\">被垃圾回收时间</th>\n<th align=\"center\">用途</th>\n<th align=\"center\">生存时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">被强用</td>\n<td align=\"center\">从来不会</td>\n<td align=\"center\">对象的一般状态</td>\n<td align=\"center\">JVM停止运行时终止</td>\n</tr>\n<tr>\n<td align=\"center\">被软用</td>\n<td align=\"center\">在内存不足时</td>\n<td align=\"center\">对象缓存</td>\n<td align=\"center\">内存不足时终止</td>\n</tr>\n<tr>\n<td align=\"center\">弱引用</td>\n<td align=\"center\">在垃圾回收时</td>\n<td align=\"center\">对象缓存</td>\n<td align=\"center\">gc运行后终止</td>\n</tr>\n<tr>\n<td align=\"center\">虚引用</td>\n<td align=\"center\">Unknown</td>\n<td align=\"center\">标记、哨兵</td>\n<td align=\"center\">Unknown</td>\n</tr>\n</tbody></table>\n<h6 id=\"引用队列-reference-queue\"><a href=\"#引用队列-reference-queue\" class=\"headerlink\" title=\"引用队列(reference queue)\"></a>引用队列(reference queue)</h6><ul>\n<li>无实际存储结构，存储逻辑依赖于内部节点之间的关系来表达</li>\n<li>存储关联的且被GC的软引用，弱引用以及虚引用</li>\n</ul>\n<h2 id=\"Java线程\"><a href=\"#Java线程\" class=\"headerlink\" title=\"Java线程\"></a>Java线程</h2><h3 id=\"进程和线程的区别-1\"><a href=\"#进程和线程的区别-1\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h3><h4 id=\"进程和线程的由来\"><a href=\"#进程和线程的由来\" class=\"headerlink\" title=\"进程和线程的由来\"></a>进程和线程的由来</h4><ul>\n<li>串行: 串行执行任务，需要长时间等待用户输入</li>\n<li>预处理:预先将用户指令集中成清单，批量串行处理用户指令，任无法并发执行</li>\n<li>进程: 进程独占内存空间。保存各自运行状态，相互不干扰且可切换，为并发处理任务提供了可能性</li>\n<li>线程: 共享进程的内存资源，相互切换更快速，支持更细粒度的任务控制，使进程内的子任务得以并发执行</li>\n</ul>\n<h4 id=\"区别-1\"><a href=\"#区别-1\" class=\"headerlink\" title=\"区别\"></a>区别</h4><p>进程是资源分配的最小单位，线程是CPU调度的最小单位</p>\n<ul>\n<li>所有与进程相关的资源都被记录在PCB中(进程控制块)</li>\n<li>进程是抢占处理机的调度单位，线程属于某个进程，共享其资源</li>\n<li>线程只由堆栈寄存器、程序计数器和TCB组成(线程控制块)</li>\n</ul>\n<p>区别:</p>\n<ul>\n<li>线程不是独立应用。而进程可以看做独立应用</li>\n<li>进程又独立的空间，相互不影响，县城只是进程不同的执行路径</li>\n<li>线程没有独立的地址空间，多进程的程序比多线程程序健壮</li>\n<li>进程的切换比线程的切换开销大</li>\n</ul>\n<h3 id=\"进程和线程的关系\"><a href=\"#进程和线程的关系\" class=\"headerlink\" title=\"进程和线程的关系\"></a>进程和线程的关系</h3><ul>\n<li>Java堆操作系统提供的功能进行封装，包括进程和线程</li>\n<li>运行一个程序会产生一个进程，进程包含至少一个线程</li>\n<li>每个进程对应一个JVM实例，多个线程共享JVM里的堆</li>\n<li>Java采用单线程编程模型，程序会自动创建主线程</li>\n<li>主线程可以创建子线程，原则上要晚于子线程结束</li>\n</ul>\n<h3 id=\"Thread中的start和run方法的区别\"><a href=\"#Thread中的start和run方法的区别\" class=\"headerlink\" title=\"Thread中的start和run方法的区别\"></a>Thread中的start和run方法的区别</h3><p>Thread#start() =&gt; JVM_StartThread =&gt; thread_entry =&gt; Thread#run()</p>\n<ul>\n<li>调用start()方法会创建一个新的子线程并启动</li>\n<li>run()方法只是Thread的一个普通方法的调用</li>\n</ul>\n<h3 id=\"Thread和Runnable是什么关系\"><a href=\"#Thread和Runnable是什么关系\" class=\"headerlink\" title=\"Thread和Runnable是什么关系\"></a>Thread和Runnable是什么关系</h3><p>Thread是类，Runnable是接口</p>\n<ul>\n<li>Thread是实现了Runnable接口的类，使得run支持多线程</li>\n<li>因类的单一继承原则，推荐多使用Runnable接口</li>\n</ul>\n<h3 id=\"如何给run-方法传参\"><a href=\"#如何给run-方法传参\" class=\"headerlink\" title=\"如何给run()方法传参\"></a>如何给run()方法传参</h3><ul>\n<li>构造函数传参</li>\n<li>成员变量传参</li>\n<li>回调函数传参</li>\n</ul>\n<h3 id=\"如何实现线程的返回值\"><a href=\"#如何实现线程的返回值\" class=\"headerlink\" title=\"如何实现线程的返回值\"></a>如何实现线程的返回值</h3><ul>\n<li>主线程等待</li>\n<li>Thread类的join方法</li>\n<li>Callable接口实现: 通过FutureTask or 线程池获取</li>\n</ul>\n<h3 id=\"线程的状态\"><a href=\"#线程的状态\" class=\"headerlink\" title=\"线程的状态\"></a>线程的状态</h3><p>六个状态</p>\n<ul>\n<li>新建(New): 创建后尚未启动的线程的状态</li>\n<li>运行(Runnable):包含Running和Ready</li>\n<li>无限期等待(Waiting): 不会被分配CPU执行时间，需要显性被唤醒</li>\n<li>限期等待(Timed Waiting): 在一定时间后会由系统自动唤醒</li>\n<li>阻塞(Blocked): 等待获取排他锁</li>\n<li>结束(terminated): 已终止线程的状态，线程已经结束运行</li>\n</ul>\n<h3 id=\"sleep和wait\"><a href=\"#sleep和wait\" class=\"headerlink\" title=\"sleep和wait\"></a>sleep和wait</h3><ul>\n<li>sleep是Thread类的方法，wait是Object类中定义的方法</li>\n<li>Sleep()方法可以在任何地方使用</li>\n<li>wait()只能在synchronized方法或synchronized块中使用</li>\n</ul>\n<p>本质区别</p>\n<ul>\n<li>Thread.sleep只会让出CPU，不会导致锁行为改变</li>\n<li>Object.wait不仅让出CPU，还会释放已经占有的同步资源锁</li>\n</ul>\n<p>// TODO wait sleep</p>\n<h3 id=\"notify和notifyall-的区别\"><a href=\"#notify和notifyall-的区别\" class=\"headerlink\" title=\"notify和notifyall 的区别\"></a>notify和notifyall 的区别</h3><p>两个概念</p>\n<ul>\n<li><p>EntryList 锁池</p>\n</li>\n<li><p>WaitSet 等待池</p>\n</li>\n<li><p>notifyAll会让所有处于等待池的线程进入锁池中去竞争获取锁的机会</p>\n</li>\n<li><p>notify 只会随机选取一个处于等待池中的线程进入锁池去竞争</p>\n</li>\n</ul>\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h3><p>Thread.yield()函数时，会给线程调度器一个当前线程愿意让出CPU使用的暗示，但是线程调度器可能会忽略这个暗示</p>\n<h3 id=\"如何中断线程\"><a href=\"#如何中断线程\" class=\"headerlink\" title=\"如何中断线程\"></a>如何中断线程</h3><ul>\n<li>通过调用stop()方法停止线程</li>\n<li>通过调用suspend(), resume)方法</li>\n</ul>\n<p>目前使用</p>\n<ul>\n<li>interrupt(),通知线程应该中断了<ul>\n<li>如果线程处于被阻塞状态,那么线程将立即退出被阻塞状态,并抛出一个 Interruptedexception异常。</li>\n<li>如果线程处于正常活动状态,那么会将该线程的中断标志设置为true。被设置中断的线程将继续正常运行,不受影响</li>\n</ul>\n</li>\n</ul>\n<p>Interrupt需要被调用的线程配合中断</p>\n<h3 id=\"sychronized\"><a href=\"#sychronized\" class=\"headerlink\" title=\"sychronized\"></a>sychronized</h3><p>// TODO</p>\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><ul>\n<li>synchronized 是mark word ,lock调用unsafe的park方法</li>\n</ul>\n<h3 id=\"JMM-Java-Memory-Model-–-Java内存模式\"><a href=\"#JMM-Java-Memory-Model-–-Java内存模式\" class=\"headerlink\" title=\"JMM (Java Memory Model) – Java内存模式\"></a>JMM (Java Memory Model) – Java内存模式</h3><h4 id=\"JMM-主内存\"><a href=\"#JMM-主内存\" class=\"headerlink\" title=\"JMM 主内存\"></a>JMM 主内存</h4><ul>\n<li>存储Java实例对象</li>\n<li>包括有成员变量、类信息、常量、静态变量等</li>\n<li>属于数据共享的区域，多线程并发操作时会引发线程安全问题</li>\n</ul>\n<h4 id=\"JMM的工作内存\"><a href=\"#JMM的工作内存\" class=\"headerlink\" title=\"JMM的工作内存\"></a>JMM的工作内存</h4><ul>\n<li>存储当前方法的所有本地变量信息，本地变量对其他线程不可见</li>\n<li>字节码行号指示器、Native方法信息</li>\n<li>属于线程私有的数据区域，不存在线程安全问题</li>\n</ul>\n<h4 id=\"JMM与Java内存区域划分是不同的概念层次\"><a href=\"#JMM与Java内存区域划分是不同的概念层次\" class=\"headerlink\" title=\"JMM与Java内存区域划分是不同的概念层次\"></a>JMM与Java内存区域划分是不同的概念层次</h4><ul>\n<li>JMM描述的是一组规则，围绕原子性，有序性，可见性展开</li>\n<li>相似点: 存在共享区和私有区域</li>\n</ul>\n<h4 id=\"主内存与工作内存的数据存储类型以及操作方式归纳\"><a href=\"#主内存与工作内存的数据存储类型以及操作方式归纳\" class=\"headerlink\" title=\"主内存与工作内存的数据存储类型以及操作方式归纳\"></a>主内存与工作内存的数据存储类型以及操作方式归纳</h4><ul>\n<li>方法里的基本数据类型本地变量将直接存储在工作内存的栈帧结构中</li>\n<li>引用类型的本地变量: 引用存储在工作内存中，实例存储在主内存中</li>\n<li>成员变量、static变量、类信息均存储在主内存中</li>\n<li>主内存共享的方式是线程各拷贝一份数据到工作内存，操作完成后刷新主内存</li>\n</ul>\n<h4 id=\"JMM怎么实现可见性\"><a href=\"#JMM怎么实现可见性\" class=\"headerlink\" title=\"JMM怎么实现可见性\"></a>JMM怎么实现可见性</h4><h5 id=\"指令重排序需要满足条件\"><a href=\"#指令重排序需要满足条件\" class=\"headerlink\" title=\"指令重排序需要满足条件\"></a>指令重排序需要满足条件</h5><ul>\n<li>单线程环境下不能改变程序运行的结果</li>\n<li>存在数据以来关系的不允许重排序</li>\n</ul>\n<p>无法通过happens-before原则推导出来的，才能进行指令的重排序<br>A操作的结果需要对B操作可见，则A与B存在happens-before关系</p>\n<h5 id=\"happens-before八大原则\"><a href=\"#happens-before八大原则\" class=\"headerlink\" title=\"happens-before八大原则\"></a>happens-before八大原则</h5><ol>\n<li>程序次序规则:一个线程内,按照代码顺序,书写在前面的操作先行发生于肀写在后面的操作;</li>\n<li>锁定规则:一个 unlock操作先行发生于后面对同一个锁的lock操作;</li>\n<li>volatile变量规则:对一个变量的写操作先行发生于后面对这个变量的读操作 </li>\n<li>传递规则:如果操作A先行发生于操作B,而操作B又先行发生于操作C,则可以得出操作A先行发生于操作C;</li>\n<li>线程启动规则: Thread对象的 start(方法先行发生于此线程的每一个动作;</li>\n<li>线程中断规则:对线程 Interrupt0方法的调用先行发生于被中断线程的代码检测到中断事件的发生;</li>\n<li>线程终结规则:线程中所有的操作都先行发生于线程的终止检测,我们可以过 Thread join(方法结束、 Thread isalive0的返回值手段检测到线程已经终止执行;</li>\n<li>对象终结规则:一个对象的初始化完成先行发生于他的 Finalize0方法的开始</li>\n</ol>\n<h5 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h5><p>JVM提供的轻量级同步机制</p>\n<ul>\n<li>保证被volatile修饰的共享变量对所有线程总是可见的</li>\n<li>禁止指令重排序优化</li>\n</ul>\n<h6 id=\"volatile-的可见性\"><a href=\"#volatile-的可见性\" class=\"headerlink\" title=\"volatile 的可见性\"></a>volatile 的可见性</h6><p>如何实现?</p>\n<ul>\n<li>当写一个 volatile变量时,JMM会把该线程对应的工作内存中的共享变量值刷新到主内存中</li>\n<li>当读取个 volatile变量时,JM会把该线程对应的工作内存置为无效</li>\n</ul>\n<h6 id=\"如何禁止重排优化\"><a href=\"#如何禁止重排优化\" class=\"headerlink\" title=\"如何禁止重排优化\"></a>如何禁止重排优化</h6><p>内存屏障(memory barrier)</p>\n<ol>\n<li>保证特定操作的执行顺序</li>\n<li>保证某些变量的内存可见性</li>\n</ol>\n<p>通过内存屏障指令禁止在内存屏障前后的指令执行重新排序优化<br>强制刷出各种CPU的缓存数据,因此任何CPU上的线程都能读取到这些数据的最新版本</p>\n<h3 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h3><p>sync是悲观锁，假定会并发冲突<br>乐观锁假定并发不冲突 CAS</p>\n<ul>\n<li>支持原子更新操作，适用于计算器，序列发生器等场景</li>\n<li>属于乐观锁机制，号称lock-free</li>\n<li>CAS操作失败时由开发者决定是继续尝试，还是执行别的操作</li>\n</ul>\n<h4 id=\"CAS思想\"><a href=\"#CAS思想\" class=\"headerlink\" title=\"CAS思想\"></a>CAS思想</h4><ul>\n<li>包含三个操作数– 内存位置(V)、预期原值(A)和新值(B)</li>\n</ul>\n<h2 id=\"Java集合框架\"><a href=\"#Java集合框架\" class=\"headerlink\" title=\"Java集合框架\"></a>Java集合框架</h2><h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>// TODO</p>\n<ul>\n<li>数组和链表的区别</li>\n<li>链表的操作，如反转，链表环路检测，双向链表，循环链表相关操作</li>\n<li>队列，栈的应用</li>\n<li>二叉树的遍历方式及其递归和非递归的实现</li>\n<li>红黑树的旋转</li>\n</ul>\n<h4 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h4><p><img src=\"Collection.png\" alt=\"Collection\"></p>\n<h4 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h4><p>HashMap(java8之前): 数组+链表<br>HashMap(java8之后): 数组+链表+红黑树</p>\n<h5 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h5><ul>\n<li>多线程环境下，调整大小存在条件竞争，容易造成死锁</li>\n<li>rehashing 是一个耗时的过程</li>\n</ul>\n<h4 id=\"HashTable\"><a href=\"#HashTable\" class=\"headerlink\" title=\"HashTable\"></a>HashTable</h4><p>sync</p>\n<h4 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h4><p>早期通过分段锁Segment</p>\n<p>采用了CAS + sync，数组链表红黑树</p>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><ul>\n<li>内部排序: 如递归排序，交换排序(冒泡排序、快排)、选择排序、插入排序</li>\n<li>外部排序: 应掌握如何利用有限的内存配合海量的外部存储来处理超大的数据集，写不出来也要有相关的思路</li>\n</ul>\n<p>哪些不稳定(堆，快)，稳定意味着什么<br>不同数据集，各种排序最好或最差的情况<br>如何优化算法</p>\n<h3 id=\"Java的IO机制\"><a href=\"#Java的IO机制\" class=\"headerlink\" title=\"Java的IO机制\"></a>Java的IO机制</h3><p>BIO、NIO、AIO的区别</p>\n<p>Block-IO: InputStream 和 OutputStream, Reader 和 Writer<br>NonBlock-IO: 构建多路复用的、同步非阻塞的IO操作</p>\n<h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><h3 id=\"你了解Spring-IOC吗\"><a href=\"#你了解Spring-IOC吗\" class=\"headerlink\" title=\"你了解Spring IOC吗\"></a>你了解Spring IOC吗</h3><p>IOC(Inversion of Control): 控制反转</p>\n<ul>\n<li>Spring Core最核心的部分</li>\n<li>需要先了解依赖注入(DI)</li>\n</ul>\n<h4 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h4><p>DI: 将底层类作为参数传递给上层类，实现上层对下层的”控制”</p>\n<p>IOC: DI和DL</p>\n<p>DL: 因为需要用户实现API所以被移除</p>\n<h4 id=\"注入的方式\"><a href=\"#注入的方式\" class=\"headerlink\" title=\"注入的方式\"></a>注入的方式</h4><ul>\n<li>Setter</li>\n<li>Interface</li>\n<li>Constructor</li>\n<li>Annotation</li>\n</ul>\n<p>IOC容器的优势</p>\n<ul>\n<li>避免在各处使用new来创建类，并且可以做到统一维护</li>\n<li>创建实例的时候不需要了解其中的细节</li>\n</ul>\n<h4 id=\"Spring-IOC支持的功能\"><a href=\"#Spring-IOC支持的功能\" class=\"headerlink\" title=\"Spring IOC支持的功能\"></a>Spring IOC支持的功能</h4><ul>\n<li>依赖注入</li>\n<li>依赖检查</li>\n<li>自动装配</li>\n<li>支持集合</li>\n<li>指定初始化方法和销毁方法</li>\n<li>支持回调方法</li>\n</ul>\n<h4 id=\"Spring-Bean\"><a href=\"#Spring-Bean\" class=\"headerlink\" title=\"Spring Bean\"></a>Spring Bean</h4><p>BeanDefinition: 主要用来描述Bean的<br>BeanDefinitionRegistry: 提供向IOC容器注册BeanDefinition对象的方法</p>\n<p>** BeanFactory **: Spring框架最核心的接口</p>\n<ul>\n<li>提供IOC的配置机制</li>\n<li>包含Bean的各种定义，便于实例化Bean</li>\n<li>建立Bean之间的依赖关系</li>\n<li>Bean生命周期的控制</li>\n</ul>\n<h5 id=\"BeanFactory与ApplicationContext的比较\"><a href=\"#BeanFactory与ApplicationContext的比较\" class=\"headerlink\" title=\"BeanFactory与ApplicationContext的比较\"></a>BeanFactory与ApplicationContext的比较</h5><ul>\n<li>BeanFactory是Spring框架的基础设施</li>\n<li>ApplicationContext面向Spring开发者</li>\n</ul>\n<p>继承多个接口</p>\n<ul>\n<li>BeanFactory: 能够管理、装配Bean</li>\n<li>ResourcePatternResolver: 能够加载资源文件</li>\n<li>MessageSource: 能够实现国际化等功能</li>\n<li>ApplicationEventPublisher: 能够注册监听器，实现监听机制</li>\n</ul>\n<h5 id=\"Spring-Bean-的作用域\"><a href=\"#Spring-Bean-的作用域\" class=\"headerlink\" title=\"Spring Bean 的作用域\"></a>Spring Bean 的作用域</h5><p>作用域</p>\n<ul>\n<li>singleton: Spring默认的作用域，容器里拥有唯一的Bean实例</li>\n<li>prototype: 针对每个getBean请求，容器都会创建一个bean实例</li>\n<li>request: 会为每个HTTP请求创建一个Bean</li>\n<li>session: 会为每个session创建一个Bean</li>\n<li>globalSession: 会为每个全局Http Session创建一个Bean实例，该作用域仅对Portlet有效</li>\n</ul>\n<h5 id=\"Spring-Bean-的生命周期\"><a href=\"#Spring-Bean-的生命周期\" class=\"headerlink\" title=\"Spring Bean 的生命周期\"></a>Spring Bean 的生命周期</h5><h3 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h3><p>关注点分离: 不同的问题交给不同的部分去解决</p>\n<ul>\n<li>面向切面编程AOP正是这种技术的体现</li>\n<li>通用化功能代码的实现，对应的就是所谓的切面(Aspect)</li>\n<li>业务功能和切面代码分开,架构将变得高内聚低耦合</li>\n<li>确保功能的完整性: 切面最终需要合并到业务中(Weave)</li>\n</ul>\n<h4 id=\"AOP的三种织入\"><a href=\"#AOP的三种织入\" class=\"headerlink\" title=\"AOP的三种织入\"></a>AOP的三种织入</h4><ul>\n<li>编译时织入: 需要特殊的Java编译器，如AspectJ</li>\n<li>类加载时织入: 需要特殊的Java编辑器，如AspectJ,AspectWerkz</li>\n<li>运行时织入: Spring采用的方式，通过动态代理的方式，实现简单</li>\n</ul>\n<h3 id=\"七个事务传播属性\"><a href=\"#七个事务传播属性\" class=\"headerlink\" title=\"七个事务传播属性\"></a>七个事务传播属性</h3><p>什么是事务传播属性<br>传播两个方法: 两个方法都带事务，但是事务设置不同。</p>\n<p>为什么要事务？<br>事务是为解决数据安全操作提出的，事务控制实际上就是控制数据的安全访问。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">传播行为</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">propagation_required（xml文件中为required)</td>\n<td align=\"center\">表示当前方法必须在一个具有事务的上下文中运行，如有客户端有事务在进行，那么被调用端将在该事务中运行，否则的话重新开启一个事务。（如果被调用端发生异常，那么调用端和被调用端事务都将回滚）</td>\n</tr>\n<tr>\n<td align=\"center\">propagation_supports(xml文件中为supports)</td>\n<td align=\"center\">表示当前方法不必需要具有一个事务上下文，但是如果有一个事务的话，它也可以在这个事务中运行</td>\n</tr>\n<tr>\n<td align=\"center\">propagation_mandatory(xml文件中为mandatory)</td>\n<td align=\"center\">表示当前方法必须在一个事务中运行，如果没有事务，将抛出异常</td>\n</tr>\n<tr>\n<td align=\"center\">propagation_nested(xml文件中为nested)</td>\n<td align=\"center\">表示如果当前方法正有一个事务在运行中，则该方法应该运行在一个嵌套事务中，被嵌套的事务可以独立于被封装的事务中进行提交或者回滚。如果封装事务存在，并且外层事务抛出异常回滚，那么内层事务必须回滚，反之，内层事务并不影响外层事务。如果封装事务不存在，则同propagation_required的一样</td>\n</tr>\n<tr>\n<td align=\"center\">propagation_never（xml文件中为never)</td>\n<td align=\"center\">表示当方法务不应该在一个事务中运行，如果存在一个事务，则抛出异常</td>\n</tr>\n<tr>\n<td align=\"center\">propagation_requires_new(xml文件中为requires_new)</td>\n<td align=\"center\">表示当前方法必须运行在它自己的事务中。一个新的事务将启动，而且如果有一个现有的事务在运行的话，则这个方法将在运行期被挂起，直到新的事务提交或者回滚才恢复执行。</td>\n</tr>\n<tr>\n<td align=\"center\">propagation_not_supported（xml文件中为not_supported)</td>\n<td align=\"center\">表示该方法不应该在一个事务中运行。如果有一个事务正在运行，他将在运行期被挂起，直到这个事务提交或者回滚才恢复执行</td>\n</tr>\n</tbody></table>\n<h3 id=\"Spring中的事务隔离级别\"><a href=\"#Spring中的事务隔离级别\" class=\"headerlink\" title=\"Spring中的事务隔离级别\"></a>Spring中的事务隔离级别</h3><table>\n<thead>\n<tr>\n<th align=\"center\">隔离级别</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">isolation_default</td>\n<td align=\"center\">使用数据库默认的事务隔离级别</td>\n</tr>\n<tr>\n<td align=\"center\">isolation_read_uncommitted</td>\n<td align=\"center\">允许读取尚未提交的修改，可能导致脏读、幻读和不可重复读</td>\n</tr>\n<tr>\n<td align=\"center\">isolation_read_committed</td>\n<td align=\"center\">允许从已经提交的事务读取，可防止脏读、但幻读，不可重复读仍然有可能发生</td>\n</tr>\n<tr>\n<td align=\"center\">isolation_repeatable_read</td>\n<td align=\"center\">对相同字段的多次读取的结果是一致的，除非数据被当前事务自生修改。可防止脏读和不可重复读，但幻读仍有可能发生</td>\n</tr>\n<tr>\n<td align=\"center\">isolation_serializable</td>\n<td align=\"center\">完全服从acid隔离原则，确保不发生脏读、不可重复读、和幻读，但执行效率最低。</td>\n</tr>\n</tbody></table>\n<p>除了default另外四个与JDBC的隔离级别相对应。</p>\n<h3 id=\"高并发如何修改同一行数据\"><a href=\"#高并发如何修改同一行数据\" class=\"headerlink\" title=\"高并发如何修改同一行数据\"></a>高并发如何修改同一行数据</h3><h4 id=\"jvm解决\"><a href=\"#jvm解决\" class=\"headerlink\" title=\"jvm解决\"></a>jvm解决</h4><ol>\n<li>jvm 下用synchronized锁。</li>\n</ol>\n<ol start=\"2\">\n<li>lock 锁</li>\n</ol>\n<p>try lock finally unlock</p>\n<p>JVM 解决不了分布式环境多任务对共享资源竞争的协同操作问题</p>\n<h4 id=\"分布式解决\"><a href=\"#分布式解决\" class=\"headerlink\" title=\"分布式解决\"></a>分布式解决</h4><p>分布式锁 三种实现方式</p>\n<ul>\n<li>数据库 (性能差)</li>\n<li>redis (死锁)</li>\n<li>zookeeper<ul>\n<li>基于异常 (临时节点)</li>\n<li>基于相互监听 (性能比较高，占用资源，临时有序节点)</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Zookeerper-数据结构\"><a href=\"#Zookeerper-数据结构\" class=\"headerlink\" title=\"Zookeerper 数据结构\"></a>Zookeerper 数据结构</h5><ul>\n<li>Zookeeper 数据结构类似Linux  </li>\n<li>每一个节点都有值  </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><h4 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h4><p>进程是操作系统资源分配的最小单位<br>线程是程序执行的最小单位</p>\n<p>进程有独立的内存空间，线程共享进程的内存空间</p>\n<h4 id=\"线程调度\"><a href=\"#线程调度\" class=\"headerlink\" title=\"线程调度\"></a>线程调度</h4><ul>\n<li>时间片轮转调度</li>\n<li>先来先服务调度</li>\n<li>高优先权优先调度</li>\n</ul>\n<h4 id=\"线程切换步骤\"><a href=\"#线程切换步骤\" class=\"headerlink\" title=\"线程切换步骤\"></a>线程切换步骤</h4><p>线程的上下文切换，切换的代价</p>\n<h4 id=\"线程间通信-–-IPC\"><a href=\"#线程间通信-–-IPC\" class=\"headerlink\" title=\"线程间通信 – IPC\"></a>线程间通信 – IPC</h4><ul>\n<li>共享内存</li>\n<li>UnixSocket</li>\n<li>MessageQueue</li>\n<li>Signal</li>\n<li>Semaphore</li>\n<li>Pipe</li>\n</ul>\n<h4 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h4><ul>\n<li>协程既不是进程也不是线程，协程仅仅是一个特殊的函数，协程它进程和进程不是一个维度的。</li>\n<li>一个进程可以包含多个线程，一个线程可以包含多个协程。</li>\n</ul>\n<p>更轻量化，在用户态调用，代价比线程上下文切换低，Java第三方协程框架</p>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h3 id=\"OSI七层协议\"><a href=\"#OSI七层协议\" class=\"headerlink\" title=\"OSI七层协议\"></a>OSI七层协议</h3><p>OSI 并不是一个标准，只是一个概念型框架</p>\n<p><img src=\"%E4%B8%83%E5%B1%82.jpg\" alt=\"七层\"></p>\n<ul>\n<li><p>物理层  </p>\n<ul>\n<li>传输比特流  </li>\n<li>定义了物理设备的标准(网线类型，光纤接口等)</li>\n<li>单位比特</li>\n<li>网卡也在这一层工作</li>\n</ul>\n</li>\n<li><p>数据链路层</p>\n<ul>\n<li>定义了如何格式化数据进行传输，控制物理介质的访问</li>\n<li>错误检测，纠正</li>\n<li>将比特数据组成帧，交换机在这层，对帧解码并发送到正确的接收方</li>\n</ul>\n</li>\n<li><p>网络层</p>\n<ul>\n<li>把网络地址翻译为物理地址</li>\n<li>决定数据如何从发送方路由到接收方</li>\n<li>路由器属于网络层</li>\n<li>数据包</li>\n<li>协议: <strong>IP</strong></li>\n</ul>\n</li>\n<li><p>传输层</p>\n<ul>\n<li>解决主机间的数据传输</li>\n<li>OSI中最主要的一层</li>\n<li>传输协议同时进行流量控制</li>\n<li>将数据包强行分割(分割成数据片并给予序列号)</li>\n<li>TCP协议和UDP协议</li>\n</ul>\n</li>\n<li><p>会话层</p>\n<ul>\n<li>自动收发，自动寻址</li>\n<li>建立和管理应用程序之间的通信</li>\n<li>解决不同系统之间的通信语法的问题</li>\n</ul>\n</li>\n<li><p>表示层</p>\n<ul>\n<li>网络协议，需要固定长度，组成的消息头</li>\n<li>更方便接收方了解接收的包</li>\n</ul>\n</li>\n<li><p>应用层</p>\n<ul>\n<li>更方便的应用接收到的数据</li>\n<li>HTTP协议</li>\n</ul>\n</li>\n</ul>\n<p>先自上(应用层)而下添加数据头，后自下而上处理数据头部</p>\n<h3 id=\"OSI的标准-TCP-IP\"><a href=\"#OSI的标准-TCP-IP\" class=\"headerlink\" title=\"OSI的标准:TCP/IP\"></a>OSI的标准:TCP/IP</h3><p><img src=\"TCP_IP.png\" alt=\"TCP/IP\">  </p>\n<p>先自上(应用层)而下添加数据头，后自下而上处理数据头部</p>\n<p><img src=\"TCP_IP1.png\" alt=\"TCP/IP\">  </p>\n<h3 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h3><p>基于字节流，将应用层的数据流分割成报文段并发送给目标节点的TCP层<br>数据包都有序号，对方收到则发送确认ACK确认，未收到则重传。<br>使用校验和来校验的数据在传输过程中是否有误。  </p>\n<p><img src=\"TCP%E6%8A%A5%E6%96%87.png\" alt=\"TCP报文\"></p>\n<p>TCP Flags:</p>\n<ul>\n<li>URG: 紧急指针标志 urgent</li>\n<li>ACK: 确认序号标志 acknowledgment</li>\n<li>PSH: push 标志</li>\n<li>RST: 重置连接标志 Reset</li>\n<li>SYN: 同步序号，用于建立连接过程</li>\n<li>FIN: finish标志，释放连接</li>\n</ul>\n<p>SYN = 1， ACK = 0 请求链接</p>\n<h4 id=\"A-gt-B-通信过程\"><a href=\"#A-gt-B-通信过程\" class=\"headerlink\" title=\"A =&gt; B 通信过程\"></a>A =&gt; B 通信过程</h4><p>A 打开 发送SYN = 1, seq = x,进入SYN_SEND状态，等待服务器确认</p>\n<p>B 被动打开 发送 SYN = 1, ACK = 1, seq = y, ack = x + 1，此时服务器进入SYN_RECV状态</p>\n<p>A 接收后发送 ACK = 1, seq = x + 1, ack = y + 1 ，双方进入ESTABLISHED状态</p>\n<p><img src=\"%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png\" alt=\"三次握手\"></p>\n<h4 id=\"为什么需要三次握手\"><a href=\"#为什么需要三次握手\" class=\"headerlink\" title=\"为什么需要三次握手\"></a>为什么需要三次握手</h4><p>为了初始化Sequence Number 的初始值</p>\n<p>起因:</p>\n<blockquote>\n<p>Server接收到Client的SYN，回复SYN-ACK的时候未收到ACK<br>Server不断充实直至超时，Linux默认等待63秒才断开连接</p>\n</blockquote>\n<p>针对SYN Flood的防护措施</p>\n<h3 id=\"TCP的四次挥手\"><a href=\"#TCP的四次挥手\" class=\"headerlink\" title=\"TCP的四次挥手\"></a>TCP的四次挥手</h3><h4 id=\"A-gt-B-四次挥手\"><a href=\"#A-gt-B-四次挥手\" class=\"headerlink\" title=\"A =&gt; B 四次挥手\"></a>A =&gt; B 四次挥手</h4><p>A: FIN = 1, seq = u, FIN_WAIT_1<br>B: ACK = 1, seq = v, ack = u + 1  ,进入CLOSE_WAIT状态(半关闭状态)， 客户端进入 FIN_WAIT_2<br>B: FIN = 1, ACK = 1, seq = w, ack = u + 1, LAST_ACK<br>A: ACK = 1, seq = u + 1m, ack = w + 1, TIMEWAIT (2 * MSL)</p>\n<p><img src=\"%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"四次挥手\"></p>\n<h4 id=\"为什么又TIME-WAIT状态\"><a href=\"#为什么又TIME-WAIT状态\" class=\"headerlink\" title=\"为什么又TIME_WAIT状态\"></a>为什么又TIME_WAIT状态</h4><p>(2MSL) 两倍最大报文段传输时间</p>\n<p>原因:</p>\n<ul>\n<li>确保有足够的时间让对方收到ACK包  </li>\n<li>避免新旧连接混淆</li>\n</ul>\n<h4 id=\"为什么需要四次握手才能断开连接\"><a href=\"#为什么需要四次握手才能断开连接\" class=\"headerlink\" title=\"为什么需要四次握手才能断开连接\"></a>为什么需要四次握手才能断开连接</h4><p>因为全双工，发送方和接收方都需要FIN报文和ACK报文</p>\n<h4 id=\"服务器出现大量CLOSE-WAIT状态的原因\"><a href=\"#服务器出现大量CLOSE-WAIT状态的原因\" class=\"headerlink\" title=\"服务器出现大量CLOSE_WAIT状态的原因\"></a>服务器出现大量CLOSE_WAIT状态的原因</h4><p>对方关闭socket连接，我方忙于读写，没有及时关闭连接</p>\n<ul>\n<li>检查代码，特别是释放资源的代码</li>\n<li>检查配置，特别是处理请求的线程配置  </li>\n</ul>\n<h3 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h3><h4 id=\"UDP-特点\"><a href=\"#UDP-特点\" class=\"headerlink\" title=\"UDP 特点\"></a>UDP 特点</h4><ul>\n<li>面向非连接</li>\n<li>不维护连接状态。支持同时向多个客户端传输相同的消息</li>\n<li>数据包报头只有8字节，额外开销小</li>\n<li>吞吐量只受限于数据生成速率、传输速率以及机器性能</li>\n<li>尽量交付，不需要维护复杂的状态表</li>\n</ul>\n<h4 id=\"TCP-和-UDP-的区别\"><a href=\"#TCP-和-UDP-的区别\" class=\"headerlink\" title=\"TCP 和 UDP 的区别\"></a>TCP 和 UDP 的区别</h4><ul>\n<li>面向链接 vs 无连接</li>\n<li>可靠 vs 不可靠</li>\n<li>有序性 vs 无序性</li>\n<li>速度慢 vs 速度快</li>\n<li>重量级(20) vs 轻量级(8)</li>\n</ul>\n<h4 id=\"TCP-滑动窗口\"><a href=\"#TCP-滑动窗口\" class=\"headerlink\" title=\"TCP 滑动窗口\"></a>TCP 滑动窗口</h4><ul>\n<li>RTT: 发送数据包到收到对应ACK</li>\n<li>RTO: 重传时间间隔</li>\n</ul>\n<p>RTO 由 RTT 计算</p>\n<p>滑动窗口: 流量控制和乱序重排</p>\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><p>超文本传输协议</p>\n<ul>\n<li>支持客户/服务器模式 (Client - Server)</li>\n<li>简单快速 (get/post)</li>\n<li>灵活</li>\n</ul>\n<p>HTTP 请求步骤</p>\n<ul>\n<li>客户端连接到web服务器</li>\n<li>发送HTTP请求</li>\n<li>服务器接受并返回HTTP响应</li>\n<li>释放连接TCP连接</li>\n<li>客户端浏览器解析HTML内容</li>\n</ul>\n<h5 id=\"在浏览器地址栏键入一个URL，按下回车之后经历的流程\"><a href=\"#在浏览器地址栏键入一个URL，按下回车之后经历的流程\" class=\"headerlink\" title=\"在浏览器地址栏键入一个URL，按下回车之后经历的流程\"></a>在浏览器地址栏键入一个URL，按下回车之后经历的流程</h5><ul>\n<li>逐层DNS解析</li>\n<li>TCP连接(3次)</li>\n<li>发送HTTP请求</li>\n<li>服务器处理请求并返回HTTP报文</li>\n<li>浏览器解析渲染</li>\n<li>连接结束(4次挥手)</li>\n</ul>\n<h4 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h4><p>五种可能的取值</p>\n<ul>\n<li>1XX: 指示信息–表示请求已经接收，继续处理</li>\n<li>2xx: 成功– 表示请求已被成功接收、理解、接受</li>\n<li>3xx: 重定向–要完成请求必须进行进一步操作</li>\n<li>4xx: 客户端错误–请求有语法错误或请求无法实现</li>\n<li>5xx: 服务器端错误–服务器未能实现合法的请求</li>\n</ul>\n<p>常见状态码</p>\n<ul>\n<li>200 OK: 正常返回</li>\n<li>400 Bad Request:客户端请求有语法错误，无法被服务器理解</li>\n<li>401 Unauthorized: 请求未经授权，这个状态代码必须和WWW-Authenticate 报头域一起使用</li>\n<li>403 Forbidden: 服务器收到请求，但是拒绝提供服务</li>\n<li>404 Not Found: 请求资源不存在 (例如输入了错误的URL)</li>\n<li>500 Internal Server Error: 服务器发生了不可预期的错误</li>\n<li>503 Server Unavailable: 服务器当前不能处理客户端的请求，一段时间后可能恢复正常。  </li>\n</ul>\n<h4 id=\"GET-和-POST-请求的区别\"><a href=\"#GET-和-POST-请求的区别\" class=\"headerlink\" title=\"GET 和 POST 请求的区别\"></a>GET 和 POST 请求的区别</h4><p>从三个层面来解答</p>\n<ul>\n<li>HTTP报文层面，GET将请求信息放在URL，POST放在报文体中</li>\n<li>数据库层次: GET符合幂等性和安全性，POST不符合</li>\n<li>其他层面: GET可以被缓存、被存储，而POST不行</li>\n</ul>\n<h4 id=\"Cookie-和-Session的区别\"><a href=\"#Cookie-和-Session的区别\" class=\"headerlink\" title=\"Cookie 和 Session的区别\"></a>Cookie 和 Session的区别</h4><h5 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h5><ul>\n<li>是由服务器发给客户端的特殊信息，以文本的形式存放在客户端</li>\n<li>客户端再次请求的时候，会把Cookie回发 </li>\n<li>服务器接收到后，会解析Cookie生成与客户端相对应的内容</li>\n</ul>\n<p>发送过程</p>\n<ul>\n<li>Client =&gt; HTTP req Server</li>\n<li>Client &lt;= HTTP resp + set-Cookie Server</li>\n<li>Client =&gt; HTTP req + Cookie Server</li>\n<li>Client &lt;= HTTP resp Server</li>\n</ul>\n<h5 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h5><ul>\n<li>服务器端的机制，在服务器上保存的信息</li>\n<li>解析客户端请求并操作session id ，按需保存状态信息</li>\n</ul>\n<p>实现方式</p>\n<ol>\n<li>Cookie 来实现</li>\n<li>URL来回写实现(如果Cookie被禁用)</li>\n</ol>\n<ul>\n<li>Client =&gt; req Server</li>\n<li>Client &lt;= resp + set-Cookie:JSESSIONID=xxx Server</li>\n<li>Client =&gt; req + Cookie:JSESSIONID=xxx Server</li>\n<li>Client &lt;= resp server</li>\n</ul>\n<h5 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h5><ol>\n<li>Cookie 数据存放在客户的浏览器，Session数据存放在服务器上</li>\n<li>Session相对于Cookie 更安全</li>\n<li>若考虑减轻服务器负担，应当使用Cookie</li>\n</ol>\n<h3 id=\"HTTP-和-HTTPS\"><a href=\"#HTTP-和-HTTPS\" class=\"headerlink\" title=\"HTTP 和 HTTPS\"></a>HTTP 和 HTTPS</h3><p>HTTP TCP IP<br>HTTPS SSL/TLS TCP IP</p>\n<p>保护交换数据隐私，安全版的HTTP</p>\n<h4 id=\"SSL\"><a href=\"#SSL\" class=\"headerlink\" title=\"SSL\"></a>SSL</h4><p>(security sockets layer, 安全套接层)</p>\n<ul>\n<li>为网络通信提供安全及数据完整性的一种安全协议</li>\n<li>是操作系统对外的API，SSL3.0后更名为TLS</li>\n<li>采用身份验证和数据加密保证网络通信的安全和数据的完整性</li>\n</ul>\n<p>HTTPS 数据传输流程</p>\n<ul>\n<li>浏览器将支持的加密算法信息发送给服务器</li>\n<li>服务器选择一套浏览器支持的加密算法，以证书的形式发回给浏览器(CA机构，有效期，公钥，所有者)</li>\n<li>浏览器验证证书的合法性，并结合证书公钥加密信息发送给服务器</li>\n<li>服务器使用私钥解密信息，验证哈希，加密相应信息回发浏览器</li>\n<li>浏览器解密响应消息，并对消息进行验证，之后进行加密交互数据</li>\n</ul>\n<h4 id=\"HTTP和HTTPS的区别\"><a href=\"#HTTP和HTTPS的区别\" class=\"headerlink\" title=\"HTTP和HTTPS的区别\"></a>HTTP和HTTPS的区别</h4><ul>\n<li>HTTPS需要到CA申请证书，HTTP不需要</li>\n<li>HTTPS密文传输，HTTP明文传输</li>\n<li>连接方式不同，HTTPS默认使用443端口，HTTP使用80端口</li>\n<li>HTTPS= HTTP+加密+认证+完整新保护，比HTTP更安全</li>\n</ul>\n<p>HTTP =&gt; HTTPS 301跳转也可能被劫持，因此要用HSTS优化</p>\n<h3 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h3><p>Socket是对TOC/IP的抽象，是操作系统对外开放的接口</p>\n<h4 id=\"Socket通信流程\"><a href=\"#Socket通信流程\" class=\"headerlink\" title=\"Socket通信流程\"></a>Socket通信流程</h4><p><img src=\"socket.jpg\" alt=\"Socket\"></p>\n<p>编写一个网络应用程序,有客户端与服务器端,客户端向服务器发送一个字符串,服务器收到该字符串后将其打印到命令行上,<br>然后向客户端返回该字符串的长度,最后,客户端输出服务器端返回的该字符串的长度,分别用TCP和UDP两种方式去实现  </p>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><h3 id=\"如何设计一个关系型数据库-RDBMS\"><a href=\"#如何设计一个关系型数据库-RDBMS\" class=\"headerlink\" title=\"如何设计一个关系型数据库(RDBMS)\"></a>如何设计一个关系型数据库(RDBMS)</h3><ol>\n<li><p>程序实例  </p>\n<ul>\n<li>存储管理</li>\n<li>缓存机制</li>\n<li>SQL 解析</li>\n<li>日志管理</li>\n<li>权限划分</li>\n<li>容灾机制</li>\n<li>索引管理</li>\n<li>锁管理</li>\n</ul>\n</li>\n<li><p>存储(文件系统)</p>\n</li>\n</ol>\n<h3 id=\"索引模块\"><a href=\"#索引模块\" class=\"headerlink\" title=\"索引模块\"></a>索引模块</h3><h4 id=\"为什么要使用索引\"><a href=\"#为什么要使用索引\" class=\"headerlink\" title=\"为什么要使用索引\"></a>为什么要使用索引</h4><p>快速查询数据</p>\n<h4 id=\"什么信息能成为索引\"><a href=\"#什么信息能成为索引\" class=\"headerlink\" title=\"什么信息能成为索引\"></a>什么信息能成为索引</h4><p>主键，唯一键以及普通键</p>\n<h4 id=\"索引的数据结构\"><a href=\"#索引的数据结构\" class=\"headerlink\" title=\"索引的数据结构\"></a>索引的数据结构</h4><p>生成索引，建立二叉查找树进行二分查找<br>生成索引，建立B-Tree 结构进行查找<br>生成索引，建立B+Tree 结构进行查找<br>生成索引，建立Hash结构进行查找</p>\n<p><img src=\"%E4%BA%8C%E5%8F%89%E6%A0%91.png\" alt=\"二叉树\"></p>\n<h4 id=\"B-Tree\"><a href=\"#B-Tree\" class=\"headerlink\" title=\"B Tree\"></a>B Tree</h4><p>定义</p>\n<ul>\n<li>根节点至少包括两个孩子</li>\n<li>书中每个节点最多含有m铬孩子( m&gt;= 2)</li>\n<li>除根节点和叶节点外，其他每个节点至少有ceil(m/2)个孩子</li>\n<li>所有叶子节点都位于同一层</li>\n<li>假设每个非终端节点中包含有n个关键字信息，其中：<ol>\n<li>Ki(i=1…n)为关键字，且关键字按顺序升序排序K(i-1) &lt; Ki</li>\n<li>关键是个数满足: [ceil(m / 2) - 1] &lt;= n &lt;= m - 1</li>\n<li>非叶子节点的指针:P[1],P[2],… P[M], P[1]指向的关键字小于K[1]的子树，<br> P[M]指向关键字大于P[M -1] 的子树，其他P[i]指向关键字属于(K[i-1], K[i])的子树</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"B-Tree-1\"><a href=\"#B-Tree-1\" class=\"headerlink\" title=\"B+ Tree\"></a>B+ Tree</h4><p>B+ 树是B树的变体，其定义基本与B树相同，除了：<br>    - 非叶子节点的子树指针与关键字个数相同<br>    - 非叶子节点的子树指针P[i],指向关键字值([K[i],K[i+1])<br>    - 非叶子节点仅用来索引，数据都保存在叶子节点中<br>    - 所有叶子节点均有一个链指针指向下一个叶子节点</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>B+ Tree更适合用来做存储索引<br>    - B+ Tree 的磁盘读写代价更低<br>    - B+ Tree 的查询效率更加稳定<br>    - B+ Tree 更加有利于对数据库的扫描</p>\n<h4 id=\"Hash索引\"><a href=\"#Hash索引\" class=\"headerlink\" title=\"Hash索引\"></a>Hash索引</h4><p>优点 查询速度O(1)<br>缺点:</p>\n<ul>\n<li>仅仅能够满足’=’,’IN’, 不能使用范围查询</li>\n<li>无法被用来避免数据的排序操作</li>\n<li>不能利用部分索引键查询</li>\n<li>不能避免表扫描</li>\n<li>遇到大量Hash值相等的情况后性能并不一定会比B Tree索引高</li>\n</ul>\n<h4 id=\"密集索引和稀疏索引的区别\"><a href=\"#密集索引和稀疏索引的区别\" class=\"headerlink\" title=\"密集索引和稀疏索引的区别\"></a>密集索引和稀疏索引的区别</h4><ul>\n<li>密集索引文件中的每个搜索码值都对应一个索引值</li>\n<li>稀疏索引只为某些值建立索引项</li>\n</ul>\n<h5 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h5><ul>\n<li>若一个主键被定义，该主键则作为密集索引</li>\n<li>若没有主键被定义，该表的第一个唯一非空索引则作为密集索引</li>\n<li>若不满足以上条件，innodb内部会生成一个隐藏主键(密集索引)</li>\n<li>非主键索引存储相关键位和其对于的主键值，包含两次查找</li>\n</ul>\n<p>myISAM索引和DB是分开的，InnoDB索引和DB是存放在一起的</p>\n<h3 id=\"索引问答\"><a href=\"#索引问答\" class=\"headerlink\" title=\"索引问答\"></a>索引问答</h3><p>Q: 为什么要用索引<br>A: 避免全表扫描数据，提升检索效率</p>\n<p>Q: 什么样的信息能成为索引<br>A: 主键、唯一键等有区分性的数据</p>\n<p>Q: 索引的数据结构<br>A: 主流是B+ Tree，以及hash结构 ， bitMap 等，mysql不支持bitmap，基于innoDB以及myISAM的mysql不显示支持hash</p>\n<p>Q: 密集索引和稀疏索引的区别<br>A: 密集索引文件中的每个搜索码值都对应一个索引值，稀疏索引只为某些值建立索引项</p>\n<h4 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h4><h5 id=\"如何定位并优化慢查询sql\"><a href=\"#如何定位并优化慢查询sql\" class=\"headerlink\" title=\"如何定位并优化慢查询sql\"></a>如何定位并优化慢查询sql</h5><ul>\n<li><p>根据慢日志定位慢查询sql</p>\n</li>\n<li><p>使用explain等工具分析Sql</p>\n<ul>\n<li>type<ul>\n<li>表示: 找到数据行的方式</li>\n<li>index 索引查询 / ALL 证明是全局查找(需要优化)</li>\n</ul>\n</li>\n<li>extra<ul>\n<li>出现以下两项意味着MYSQL根本不能使用索引，效率会受到重大影响，应尽可能对此进行优化</li>\n<li>Using filesort —— 无法利用索引排序</li>\n<li>Using temporary  —— 使用了临时表，order by 或者分组查询 group by</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>修改sql 或者让sql尽量走索引  </p>\n<ul>\n<li>使用有索引的字段代替</li>\n<li>添加索引 alter table tb_name add index idx_name(name);</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"联合索引的最左匹配原则\"><a href=\"#联合索引的最左匹配原则\" class=\"headerlink\" title=\"联合索引的最左匹配原则\"></a>联合索引的最左匹配原则</h5><h4 id=\"索引是建的越来越多好吗\"><a href=\"#索引是建的越来越多好吗\" class=\"headerlink\" title=\"索引是建的越来越多好吗\"></a>索引是建的越来越多好吗</h4><ul>\n<li>数据量小的表不需要建立索引，建立会增加额外的索引开销</li>\n<li>数据变更需要维护索引，因此更多的索引意味着更大的维护成本</li>\n<li>更多的索引意味着需要更多的空间</li>\n</ul>\n<h4 id=\"锁模块\"><a href=\"#锁模块\" class=\"headerlink\" title=\"锁模块\"></a>锁模块</h4><h5 id=\"MyISAM与InnoDB关于锁方面的区别是什么\"><a href=\"#MyISAM与InnoDB关于锁方面的区别是什么\" class=\"headerlink\" title=\"MyISAM与InnoDB关于锁方面的区别是什么\"></a>MyISAM与InnoDB关于锁方面的区别是什么</h5><ul>\n<li>MyISAM 默认使用的是表级锁，不支持行级锁</li>\n<li>InnoDB 默认用的是行级锁，也支持表级锁</li>\n</ul>\n<p>共享锁和排斥锁的兼容性</p>\n<!-- Share && exclude\n\n|   | X    | S    |\n|---|------|------|\n| X | 冲突 | 冲突 |\n| S | 冲突 | 兼容 | -->\n\n<p>行级锁不一定比表级锁好，锁的粒度越细，带价越高，需要扫描表到对应的对其上锁，代价是比较大的。  </p>\n<p>InnoDB 相比 MyISAM 带来了更大的开销。</p>\n<h5 id=\"MyISAM适合的场景\"><a href=\"#MyISAM适合的场景\" class=\"headerlink\" title=\"MyISAM适合的场景\"></a>MyISAM适合的场景</h5><ul>\n<li>频繁执行全表count 语句</li>\n<li>对数据进行增删改的频率不高，查询非常频繁</li>\n<li>没有事务</li>\n</ul>\n<h5 id=\"InnoDB适合的场景\"><a href=\"#InnoDB适合的场景\" class=\"headerlink\" title=\"InnoDB适合的场景\"></a>InnoDB适合的场景</h5><ul>\n<li>数据增删改查都相当频繁</li>\n<li>可靠性要求比较高，要求支持事务</li>\n</ul>\n<h5 id=\"数据库锁的分类\"><a href=\"#数据库锁的分类\" class=\"headerlink\" title=\"数据库锁的分类\"></a>数据库锁的分类</h5><ul>\n<li>按锁的粒度划分可以分为：表级锁，行级锁，页级锁</li>\n<li>按锁级别划分，可分为共享锁和排他锁</li>\n<li>按加锁方式划分，可分为自动锁，显示锁</li>\n<li>按操作划分可分为DML锁，DDL锁</li>\n<li>按使用方式划分，可分为乐观锁、悲观锁</li>\n</ul>\n<h3 id=\"数据库事务的四大特性\"><a href=\"#数据库事务的四大特性\" class=\"headerlink\" title=\"数据库事务的四大特性\"></a>数据库事务的四大特性</h3><p>ACID</p>\n<blockquote>\n<ul>\n<li>A:原子性,Atomicity</li>\n<li>C:一致性,Consistency</li>\n<li>I:隔离性,Isolation</li>\n<li>D:持久性,Durability</li>\n</ul>\n</blockquote>\n<h3 id=\"事务鼓励级别以及各级别下的并发访问问题\"><a href=\"#事务鼓励级别以及各级别下的并发访问问题\" class=\"headerlink\" title=\"事务鼓励级别以及各级别下的并发访问问题\"></a>事务鼓励级别以及各级别下的并发访问问题</h3><p>并发访问引起的问题和如何避免</p>\n<ul>\n<li>更新丢失– mysql 所有事务隔离级别在数据库层面上均可避免</li>\n<li>脏读– READ-COMMITTED事务隔离级别以上可避免</li>\n<li>不可重复读– REPEATABLE-READ 事务隔离级别以上可避免</li>\n<li>幻读– SERIABLIZABLE事务隔离级别可避免</li>\n</ul>\n<h4 id=\"脏读、不可重复读、幻象读概念说明\"><a href=\"#脏读、不可重复读、幻象读概念说明\" class=\"headerlink\" title=\"脏读、不可重复读、幻象读概念说明\"></a>脏读、不可重复读、幻象读概念说明</h4><ol>\n<li>脏读：指当一个事务正字访问数据，并且对数据进行了修改，而这种数据还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据还没有提交那么另外一个事务读取到的这个数据我们称之为脏数据。依据脏数据所做的操作肯能是不正确的。  </li>\n<li>不可重复读：指在一个事务内，多次读同一数据。在这个事务还没有执行结束，另外一个事务也访问该同一数据，那么在第一个事务中的两次读取数据之间，由于第二个事务的修改第一个事务两次读到的数据可能是不一样的，这样就发生了在一个事物内两次连续读到的数据是不一样的，这种情况被称为是不可重复读。</li>\n<li>幻象读：一个事务先后读取一个范围的记录，但两次读取的纪录数不同，我们称之为幻象读（两次执行同一条 select 语句会出现不同的结果，第二次读会增加一数据行，并没有说这两次执行是在同一个事务中）  </li>\n</ol>\n<h4 id=\"如何避免\"><a href=\"#如何避免\" class=\"headerlink\" title=\"如何避免\"></a>如何避免</h4><table>\n<thead>\n<tr>\n<th>事务隔离级别</th>\n<th>更新丢失</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>未提交读</td>\n<td>避免</td>\n<td>发生</td>\n<td>发生</td>\n<td>发生</td>\n</tr>\n<tr>\n<td>已提交读</td>\n<td>避免</td>\n<td>避免</td>\n<td>发生</td>\n<td>发生</td>\n</tr>\n<tr>\n<td>可重复读</td>\n<td>避免</td>\n<td>避免</td>\n<td>避免</td>\n<td>发生</td>\n</tr>\n<tr>\n<td>串行化</td>\n<td>避免</td>\n<td>避免</td>\n<td>避免</td>\n<td>避免</td>\n</tr>\n</tbody></table>\n<p>在mysql中的innodb引擎,原子性,一致性,隔离性通过redo和undo实现,redo 就是ib_logfile物理文件,而undo默认在共享表空间ibdata里面,通过设置参数可以独立出来.</p>\n<h4 id=\"数据库操作事务隔离\"><a href=\"#数据库操作事务隔离\" class=\"headerlink\" title=\"数据库操作事务隔离\"></a>数据库操作事务隔离</h4><h5 id=\"读取未提交的事务里面的数据-脏读\"><a href=\"#读取未提交的事务里面的数据-脏读\" class=\"headerlink\" title=\"读取未提交的事务里面的数据(脏读)\"></a>读取未提交的事务里面的数据(脏读)</h5><p>设置隔离级别方法</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">session</span> <span class=\"keyword\">transaction</span> <span class=\"keyword\">isolation</span> <span class=\"keyword\">level</span> <span class=\"keyword\">read</span> uncommitted;</span><br></pre></td></tr></table></figure>\n\n<p>开始事务</p>\n<!-- show variables like '%tx_isolation%'; -->\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">session</span> <span class=\"keyword\">transaction</span> <span class=\"keyword\">isolation</span> <span class=\"keyword\">level</span> <span class=\"keyword\">read</span> uncommitted;</span><br><span class=\"line\"></span><br><span class=\"line\">begain</span><br><span class=\"line\"><span class=\"keyword\">update</span> propagation <span class=\"keyword\">set</span> <span class=\"keyword\">count</span> = <span class=\"keyword\">count</span> + <span class=\"number\">1</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">rollback</span> (回滚操作)</span><br></pre></td></tr></table></figure>\n\n<p>另外开一个session 进行查询，可看到并不还没有更改数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">session</span> <span class=\"keyword\">transaction</span> <span class=\"keyword\">isolation</span> <span class=\"keyword\">level</span> <span class=\"keyword\">read</span> uncommitted;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> propagation</span><br></pre></td></tr></table></figure>\n\n<p>begain中执行的操作  被第二个进程读到了，导致脏读，一但事务回滚，第二个进程保存的是之前的结果。</p>\n<h4 id=\"InnoDB可重复读隔离级别下如何避免幻读\"><a href=\"#InnoDB可重复读隔离级别下如何避免幻读\" class=\"headerlink\" title=\"InnoDB可重复读隔离级别下如何避免幻读\"></a>InnoDB可重复读隔离级别下如何避免幻读</h4><ul>\n<li>表象: 快照读(非阻塞读) – 伪<ul>\n<li>当前读是上了锁的增删改查， update,delete,insert</li>\n<li>快照读: 不加锁的非阻塞读,select </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>关键语法</p>\n<ul>\n<li>Group By</li>\n<li>Having</li>\n<li>Count, Sum, Max, Min, Avg</li>\n</ul>\n<h4 id=\"Group-By\"><a href=\"#Group-By\" class=\"headerlink\" title=\"Group By\"></a>Group By</h4><ul>\n<li>满足 “select 自居的列名必须为分组列或列函数</li>\n<li>列函数对于 group by 子句定义的每个组各返回一个结果</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询所有同学学号、姓名、选课数、总成绩</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\ts.student_id,</span><br><span class=\"line\">\tstu.name,</span><br><span class=\"line\">\t<span class=\"keyword\">COUNT</span>( course_id ),</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>( score ) </span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tscore s,</span><br><span class=\"line\">\tstudent stu</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">\ts.student_id = stu.student_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">\tstudent_id</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Having\"><a href=\"#Having\" class=\"headerlink\" title=\"Having\"></a>Having</h4><ul>\n<li>通常与Group By 子句一起使用</li>\n<li>WHERE 过滤行，Having过滤组</li>\n<li>出现在同一sql的顺序: WHERE &gt; GROUP BY &gt; HAVING</li>\n</ul>\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><h3 id=\"缓存知识考点\"><a href=\"#缓存知识考点\" class=\"headerlink\" title=\"缓存知识考点\"></a>缓存知识考点</h3><h4 id=\"缓存中间件-Memcache-和-Redis-的区别\"><a href=\"#缓存中间件-Memcache-和-Redis-的区别\" class=\"headerlink\" title=\"缓存中间件-Memcache 和 Redis 的区别\"></a>缓存中间件-Memcache 和 Redis 的区别</h4><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">Memcache</th>\n<th align=\"center\">Redis</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数据类型</td>\n<td align=\"center\">类似Hash</td>\n<td align=\"center\">丰富</td>\n</tr>\n<tr>\n<td align=\"center\">数据磁盘持久化存储</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">主从</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">分片</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n</tbody></table>\n<p>简单key-value可以选择Memcache  </p>\n<h3 id=\"为什么Redis能这么快\"><a href=\"#为什么Redis能这么快\" class=\"headerlink\" title=\"为什么Redis能这么快\"></a>为什么Redis能这么快</h3><p>10w+ QPS(query per second)</p>\n<ul>\n<li>完全基于内存，绝大部分请求是纯粹的内存操作，执行效率高</li>\n<li>数据结构简单，对数据操作也简单</li>\n<li>采用单线程，单线程也能处理高并发请求，想多核也可以多实例</li>\n<li>多路I/O复用模型，非阻塞IO</li>\n</ul>\n<h4 id=\"多路I-O复用\"><a href=\"#多路I-O复用\" class=\"headerlink\" title=\"多路I/O复用\"></a>多路I/O复用</h4><h5 id=\"I-O复用模型\"><a href=\"#I-O复用模型\" class=\"headerlink\" title=\"I/O复用模型\"></a>I/O复用模型</h5><p>Redis 采用的I/O多路复用函数: epoll/kqueue/evport/select</p>\n<ul>\n<li>因地制宜</li>\n<li>优先选择时间复杂度为O(1)的多路服用函数作为底层实现</li>\n<li>以时间复杂度为O(n)的select作为保底</li>\n<li>基于react设计模式监听I/O事件</li>\n</ul>\n<h4 id=\"Redis-数据类型\"><a href=\"#Redis-数据类型\" class=\"headerlink\" title=\"Redis 数据类型\"></a>Redis 数据类型</h4><p>供用户使用的数据类型</p>\n<ul>\n<li>String : 最基本的数据类型，二进制安全(可以存JPG图片)<ul>\n<li>get (key)</li>\n<li>set (key) (value)</li>\n</ul>\n</li>\n<li>Hash: String元素组成的字典，适合用于存储对象<ul>\n<li>hget (struct) (key)</li>\n<li>hmset (struct) (key1) (value1) (key2) (value2) … </li>\n</ul>\n</li>\n<li>List: 列表，按照String元素插入顺序排序(有点像栈)<ul>\n<li>lrange (list) (min) (max)</li>\n<li>lpush (list) (key)</li>\n</ul>\n</li>\n<li>Set: Sting 元素组成的无序集合，通过哈希表实现，不允许重复<ul>\n<li>smembers (set)</li>\n<li>sadd (set) (key)</li>\n</ul>\n</li>\n<li>Sorted Set: 通过分数来为集合中的成员进行从小到大的排序<ul>\n<li>zrangebyscore (set) (min) (max)</li>\n<li>zadd (set) (score) (key)</li>\n</ul>\n</li>\n<li>HyperLogLog 用于计数</li>\n<li>Geo 存储地理位置</li>\n</ul>\n<h5 id=\"底层数据类型基础\"><a href=\"#底层数据类型基础\" class=\"headerlink\" title=\"底层数据类型基础\"></a>底层数据类型基础</h5><ul>\n<li>简单动态字符串</li>\n<li>链表</li>\n<li>字典</li>\n<li>跳跃表</li>\n<li>整数集合</li>\n<li>压缩列表</li>\n<li>对象</li>\n</ul>\n<h3 id=\"从海量key里查询出某一固定前缀的key\"><a href=\"#从海量key里查询出某一固定前缀的key\" class=\"headerlink\" title=\"从海量key里查询出某一固定前缀的key\"></a>从海量key里查询出某一固定前缀的key</h3><ul>\n<li><p>KEYS pattern: 查找所有符合给定模式pattern的key</p>\n<ul>\n<li>KEYS指令一次性返回所有匹配的KEY</li>\n<li>键的数量过大会使服务卡顿</li>\n</ul>\n</li>\n<li><p>SCAN cursor [MATCH pattern] [COUNT count]</p>\n<ul>\n<li>基于游标的迭代器，需要基于上一次的游标延续之前的迭代过程</li>\n<li>以0作为游标开始一次新的迭代，知道命令返回游标0完成一次便利</li>\n<li>并不保证每次执行都返回某个给定数量的元素，支持模糊查询</li>\n<li>一次返回的数量不可控，只能是大概率符合count参数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Redis实现分布式锁\"><a href=\"#Redis实现分布式锁\" class=\"headerlink\" title=\"Redis实现分布式锁\"></a>Redis实现分布式锁</h3><p>分布式锁需要解决的问题</p>\n<ul>\n<li>互斥性</li>\n<li>安全性</li>\n<li>死锁</li>\n<li>容错</li>\n</ul>\n<h4 id=\"SET\"><a href=\"#SET\" class=\"headerlink\" title=\"SET\"></a>SET</h4><p>SET key value [EX seconds] [PX milliseconds] [NX|XX]</p>\n<ul>\n<li>EX second: 设置键的过期时间为 second 秒</li>\n<li>PX millisecond: 设置键的过期时间为millisecond 毫秒</li>\n<li>NX: 只在键不存在时，才对键进行设置</li>\n<li>XX: 只在键已经存在时，才对键进行设置操作</li>\n<li>SET操作成功完成时，返回OK，否则返回nil</li>\n</ul>\n<h4 id=\"大量的key同时过期的注意事项\"><a href=\"#大量的key同时过期的注意事项\" class=\"headerlink\" title=\"大量的key同时过期的注意事项\"></a>大量的key同时过期的注意事项</h4><p>集中过期，由于清除大量的key很耗时，会出现断站的卡顿现象<br>    - 解决方案: 在设置key 的过期时间时，给每个key加上随机值</p>\n<h3 id=\"使用Redis做异步队列\"><a href=\"#使用Redis做异步队列\" class=\"headerlink\" title=\"使用Redis做异步队列\"></a>使用Redis做异步队列</h3><p>使用List作为队列，RPush生产消息，LPOP消费消息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpush list aaa</span><br><span class=\"line\">rpush list bbb</span><br><span class=\"line\">rpush list ccc</span><br><span class=\"line\">lpop list // aaa</span><br><span class=\"line\">lpop list // bbb</span><br><span class=\"line\">lpop list // ccc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>缺点： 没有等待，队列里有值就直接消费</li>\n<li>弥补： 可以通过在应用层引入Sleep机制去调用LPOP重试</li>\n</ul>\n<p>如果不想用sleep 可以用BLPOP</p>\n<h4 id=\"BLPOP\"><a href=\"#BLPOP\" class=\"headerlink\" title=\"BLPOP\"></a>BLPOP</h4><p>blpop key [key …] timeout: 阻塞直到队列有消息或者超时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session 1:</span><br><span class=\"line\">    blpop list 30  // 为空进入等待30s</span><br><span class=\"line\"></span><br><span class=\"line\">session 2:</span><br><span class=\"line\">    rpush list a</span><br><span class=\"line\"></span><br><span class=\"line\">session 1:</span><br><span class=\"line\">    1) &quot;a&quot;</span><br></pre></td></tr></table></figure>\n\n<p>缺点是只能共给一个消费者使用</p>\n<h4 id=\"pub-sub\"><a href=\"#pub-sub\" class=\"headerlink\" title=\"pub/sub\"></a>pub/sub</h4><p>主题订阅者模式</p>\n<ul>\n<li>发送者(pub)发送消息，订阅者(sub)接收消息</li>\n<li>订阅者可以订阅任意数量的频道</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subscribe (channel) 接收广播</span><br><span class=\"line\">publish (channel) (content) 发送广播</span><br></pre></td></tr></table></figure>\n\n<p>缺点： 消息的发布是无状态的，无法保证可达</p>\n<p>kafka 和 MQ</p>\n<h3 id=\"持久化方法之-RDB\"><a href=\"#持久化方法之-RDB\" class=\"headerlink\" title=\"持久化方法之 RDB\"></a>持久化方法之 RDB</h3><p>RDB(快照)持久化：保存某个时间点的全量数据快照</p>\n<p>手动：</p>\n<ul>\n<li>SAVE: 阻塞Redis的服务器进程，直到RDB文件创建完毕</li>\n<li>BGSAVE: Fork出一个子进程来创建RDB文件，不阻塞服务器进程</li>\n</ul>\n<p>自动：</p>\n<ul>\n<li>根据redis.conf配置里面的SAVE m n定时触发(用的是BGSAVE)</li>\n<li>主从复制时，主节点自动触发</li>\n<li>执行Debug Reload</li>\n<li>执行Shutdown且没有开启AOF持久化</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>内存数据的全量同步，数据量大会由于I/O而严重影响性能</li>\n<li>可能会因为Redis 挂掉而丢失从当前至最后一次快照期间的数据</li>\n</ul>\n<h3 id=\"持久化之-AOF\"><a href=\"#持久化之-AOF\" class=\"headerlink\" title=\"持久化之 AOF\"></a>持久化之 AOF</h3><p>AOF (Append-Only-File) 持久化：保存写状态</p>\n<ul>\n<li>记录下除了查询以外的所有变更数据库状态的指令</li>\n<li>以append的形式追加保存到AOF文件中</li>\n</ul>\n<p>日志重写解决AOF文件大小不断增大的问题，原理如下</p>\n<pre><code>- 调用fork(), 创建一个子进程\n- 子进程把新的AOF写道临时文件，不依赖原来的AOF文件\n- 主进程持续把新的变动同时写到内存和原来的AOF里\n- 主进程获取子进程重写AOF的完成信号，往新的AOF同步增量变动\n- 使用新的AOF文件替换掉旧的AOF文件</code></pre><p>手动重写指令: BGREWRITEAOF</p>\n<h3 id=\"RDB和AOF\"><a href=\"#RDB和AOF\" class=\"headerlink\" title=\"RDB和AOF\"></a>RDB和AOF</h3><h4 id=\"RDB和AOF共存时的恢复流程\"><a href=\"#RDB和AOF共存时的恢复流程\" class=\"headerlink\" title=\"RDB和AOF共存时的恢复流程\"></a>RDB和AOF共存时的恢复流程</h4><p><img src=\"RDB&AOF.png\" alt=\"RDB&amp;AOF\"></p>\n<h4 id=\"RDB和AOF的优缺点\"><a href=\"#RDB和AOF的优缺点\" class=\"headerlink\" title=\"RDB和AOF的优缺点\"></a>RDB和AOF的优缺点</h4><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">RDB</th>\n<th align=\"center\">AOF</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">优点</td>\n<td align=\"center\">全量数据快照，文件小，恢复快</td>\n<td align=\"center\">可读性高，适合保存增量数据，数据不易丢失</td>\n</tr>\n<tr>\n<td align=\"center\">缺点</td>\n<td align=\"center\">无法保存最近一次快照之后的数据</td>\n<td align=\"center\">文件体积大，恢复时间大</td>\n</tr>\n</tbody></table>\n<h3 id=\"RDB-AOF混合持久化方式\"><a href=\"#RDB-AOF混合持久化方式\" class=\"headerlink\" title=\"RDB-AOF混合持久化方式\"></a>RDB-AOF混合持久化方式</h3><p>default RDB-AOF</p>\n<ul>\n<li>BGSAVE做镜像全量持久化，AOF做增量持久化</li>\n</ul>\n<h3 id=\"pipeline-的好处\"><a href=\"#pipeline-的好处\" class=\"headerlink\" title=\"pipeline 的好处\"></a>pipeline 的好处</h3><ul>\n<li>pipeline 跟linux 的管道类似</li>\n<li>Redis基于请求/响应模型，单个请求处理需要一一对应</li>\n<li>pipeline批量执行指令，节省多次IO往返的时间</li>\n<li>有顺序依赖的指令建议分批发送</li>\n</ul>\n<h3 id=\"redis的同步机制\"><a href=\"#redis的同步机制\" class=\"headerlink\" title=\"redis的同步机制\"></a>redis的同步机制</h3><p>主从同步原理</p>\n<h4 id=\"全同步过程\"><a href=\"#全同步过程\" class=\"headerlink\" title=\"全同步过程\"></a>全同步过程</h4><ul>\n<li>Salve 发送sync 命令到Master</li>\n<li>Master启动一个后台进程，将Redis中的数据快照保存到文件中(BGSAVE)</li>\n<li>Master将保存数据快照期间接收到的写命令缓存起来</li>\n<li>Master完成写文件操作后，将该文件发送给Salve</li>\n<li>使用新的AOF文件替换掉旧的AOF文件</li>\n<li>Master将这期间收集的增量写命令发送给Salve端</li>\n</ul>\n<h4 id=\"增量同步过程\"><a href=\"#增量同步过程\" class=\"headerlink\" title=\"增量同步过程\"></a>增量同步过程</h4><ul>\n<li>Master接收到用户的操作指令，判断是否需要传播到Slave</li>\n<li>将操作记录追加到AOF文件</li>\n<li>将操作传播到其他Slave:<ol>\n<li>对齐主从库</li>\n<li>往响应缓存写入指令</li>\n</ol>\n</li>\n<li>将缓存中的数据发给Slave</li>\n</ul>\n<h3 id=\"Redis-Sentinel-哨兵机制\"><a href=\"#Redis-Sentinel-哨兵机制\" class=\"headerlink\" title=\"Redis Sentinel (哨兵机制)\"></a>Redis Sentinel (哨兵机制)</h3><p>解决主从同步Master宕机后的主从切换问题：</p>\n<ul>\n<li>监控： 检查主从服务器是否运行正常</li>\n<li>提醒： 通过API向管理员或者其他应用程序发送故障通知</li>\n<li>自动故障迁移：主从切换</li>\n</ul>\n<h4 id=\"流言协议Gossip\"><a href=\"#流言协议Gossip\" class=\"headerlink\" title=\"流言协议Gossip\"></a>流言协议Gossip</h4><p>在杂乱无章中寻求一致</p>\n<ul>\n<li>每个节点都随机的与对方通信，最终所有节点达成一致的状态</li>\n<li>种子节点定期随机向其他节点发送节点列表以及需要传播的信息</li>\n<li>不保证信息一定会传递给所有节点，但是最终会趋于一致</li>\n</ul>\n<h3 id=\"Redis-的集群原理\"><a href=\"#Redis-的集群原理\" class=\"headerlink\" title=\"Redis 的集群原理\"></a>Redis 的集群原理</h3><p>如何从海量数据里快速找到所需？</p>\n<ul>\n<li>分片：按照某种规则去划分数据，分散存储在多个节点上</li>\n<li>常规的按照哈希划分无法实现节点的动态增减</li>\n</ul>\n<p>一致性哈希算法： 对2^32取模，将哈希值空间组织成虚拟的圆环<br>将数据key使用相同的函数hash计算出哈希值</p>\n<p>数据存储节点如下，若Node C宕机，则会存储到D节点上<br><img src=\"redis_node_c.png\" alt=\"Node_C宕机\"></p>\n<p>新增Node X服务器，则在B到X之间的数据(object c)更改存储位置到X的位置上</p>\n<p><img src=\"Node_X.png\" alt=\"Node_X\"></p>\n<h4 id=\"Hash环数据倾斜问题\"><a href=\"#Hash环数据倾斜问题\" class=\"headerlink\" title=\"Hash环数据倾斜问题\"></a>Hash环数据倾斜问题</h4><p>引入虚拟节点解决数据倾斜问题</p>\n<p><img src=\"vitual_node.png\" alt=\"vitual_node\"></p>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><ul>\n<li>体系结构主要分为用户态和内核态(kernel)</li>\n<li>内核: 本质是一段管理计算机硬件设备的程序</li>\n<li>系统调用: 内核的访问接口，是一种能够能再简化的操作</li>\n<li>公用函数库: 系统调用的组合拳</li>\n<li>Shell: 命令解释器，可编程</li>\n</ul>\n<p>man 2(系统调用) 3(公共库函数)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man 2 syscalls</span><br><span class=\"line\">man 2 acct</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><p>语法</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find path [options] params</span><br></pre></td></tr></table></figure>\n\n<p>指定目录下查找文件<br>-iname 可以忽略大小写</p>\n<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [options] pattern file</span><br><span class=\"line\">grep -o pattern <span class=\"comment\"># 选出满足条件的</span></span><br><span class=\"line\">grep -v pattern <span class=\"comment\"># 过滤包含该pattern的</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>全称: Global Regular Expression Print</li>\n<li>作用: 查找文件里符合条件的字符串</li>\n</ul>\n<h3 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道 |\"></a>管道 |</h3><ul>\n<li>可将指令连接起来，前一个指令的输出作为后一个指令的输入</li>\n<li>只能处理前一个指令的正确输出，无法处理错误</li>\n<li>右边的命令必须能够接收标准输入流，否则传递过程中数据会被抛弃<ul>\n<li>如sed, awk, grep, cut, head, top, less, more, wc, join, sort, split</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h3><h4 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk [options] <span class=\"string\">'command'</span> file</span><br></pre></td></tr></table></figure>\n\n<p>awk -f 设置分隔符</p>\n<ul>\n<li>一次读取一行文本，按输入分隔符进行切片，切成多个组合部分</li>\n<li>将切片直接保存在内建的变量中，$1,$2…$0表示行的全部</li>\n<li>支持对单个切片的判断，支持循环判断，默认分隔符为空格</li>\n</ul>\n<h3 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h3><h4 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed [option] <span class=\"string\">'sed command'</span> file</span><br><span class=\"line\">sed -i <span class=\"string\">'s/^Str/String/'</span> replace.java</span><br><span class=\"line\">sed -i <span class=\"string\">'s/\\.$/\\;'</span> replace.java</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>全名 stream editor 流编辑器</li>\n<li>适合用于对文本的行内容进行处理</li>\n</ul>\n<h2 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h2><h3 id=\"谈谈你对Java的理解\"><a href=\"#谈谈你对Java的理解\" class=\"headerlink\" title=\"谈谈你对Java的理解\"></a>谈谈你对Java的理解</h3><ul>\n<li>平台无关性</li>\n<li>GC</li>\n<li>语言特性(泛型、反射)</li>\n<li>面向对象</li>\n<li>库类</li>\n<li>异常处理</li>\n</ul>\n<h4 id=\"Compile-Once-Run-Anywhere如何实现\"><a href=\"#Compile-Once-Run-Anywhere如何实现\" class=\"headerlink\" title=\"Compile Once, Run Anywhere如何实现\"></a>Compile Once, Run Anywhere如何实现</h4><ul>\n<li>编译时</li>\n<li>运行时</li>\n</ul>\n<p>javac编译，生成字节码</p>\n<p><img src=\"JAVA%E8%B7%A8%E5%B9%B3%E5%8F%B0.png\" alt=\" 跨平台\"></p>\n<p>Java源码首先被编译为字节码，再由不同平台的JVM进行解析，Java语言在不同平台上运行时不需要进行重新编译，Java虚拟机在执行字节码的时候，把字节码转换成具体平台上的机器指令。</p>\n<h4 id=\"为什么JVM不直接将源码解析成机器码去执行\"><a href=\"#为什么JVM不直接将源码解析成机器码去执行\" class=\"headerlink\" title=\"为什么JVM不直接将源码解析成机器码去执行\"></a>为什么JVM不直接将源码解析成机器码去执行</h4><p>为什么要先编译成字节码再解析成机器码</p>\n<ul>\n<li>准备工作: 每次执行都需要各种检查</li>\n<li>兼容性: 也可以将别的语言解析成字节码</li>\n</ul>\n<h4 id=\"JVM如何加载-class文件\"><a href=\"#JVM如何加载-class文件\" class=\"headerlink\" title=\"JVM如何加载.class文件\"></a>JVM如何加载.class文件</h4><p><img src=\"JVM.png\" alt=\"JVM\"></p>\n<ul>\n<li>Class Loader: 依据特定格式，加载class文件到内存 (本地接口)</li>\n<li>Execution Engine: 对命令进行解析 (解释器)</li>\n<li>Native Interface: 融合不同开发语言的原生库为Java所用</li>\n<li>Runtime Data Area: JVM内存空间结构模型</li>\n</ul>\n<h4 id=\"谈谈反射\"><a href=\"#谈谈反射\" class=\"headerlink\" title=\"谈谈反射\"></a>谈谈反射</h4><h5 id=\"列举反射的例子\"><a href=\"#列举反射的例子\" class=\"headerlink\" title=\"列举反射的例子\"></a>列举反射的例子</h5><p>// TODO 添加代码</p>\n<h4 id=\"ClassLoader\"><a href=\"#ClassLoader\" class=\"headerlink\" title=\"ClassLoader\"></a>ClassLoader</h4><p>类从编译到执行的过程</p>\n<ul>\n<li>将源文件编译为字节码文件</li>\n<li>ClassLoader将字节码转换为JVM中的Class&lt; xx &gt;对象</li>\n<li>JVM利用Class&lt; xx &gt; 对象实例化为 xx 对象</li>\n</ul>\n<p>Classloader在Java中有着非常重要的作用,它主要工作在 Class 装载的加载阶段,其主要作用是从系统外部获得 ** Class二进制数据流 **。它是Java的核心组件所有的 Class都是由 Classloader进行加载的Classloader负责通过将 Class文件里的二进制数据流装载进系统,然后交给Java虚拟机进行连接、初始化等操作。</p>\n<h5 id=\"ClassLoader种类\"><a href=\"#ClassLoader种类\" class=\"headerlink\" title=\"ClassLoader种类\"></a>ClassLoader种类</h5><ul>\n<li>BootStrapClassLoader: C++编写，加载核心库java.*</li>\n<li>ExtClassLoader: java编写，加载扩展库 javax.*</li>\n<li>AppClassLoader: java编写，加载程序所在目录</li>\n<li>自定义ClasLoader: java编写，自定义加载<ul>\n<li>findClass</li>\n<li>defineClass<br>// TODO 代码</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类加载器名称</th>\n<th align=\"center\">加载范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">启动类加载器 Bootstrap ClassLoader</td>\n<td align=\"center\">存放在<java_home>\\lib 目录中的，并且是虚拟机识别的类库加载到虚拟机内存中的</java_home></td>\n</tr>\n<tr>\n<td align=\"center\">扩展类加载器 Extension ClassLoader</td>\n<td align=\"center\">存放在<java_home>\\lib\\ext 目录中的所有类库，开发者可以直接使用</java_home></td>\n</tr>\n<tr>\n<td align=\"center\">应用程序加载器 Application ClassLoader</td>\n<td align=\"center\">加载用户类路径上指定的类库，开发者可以直接使用，一般情况下这个就是程序中默认的类加载器</td>\n</tr>\n<tr>\n<td align=\"center\">自定义加载器 Custom ClassLoader</td>\n<td align=\"center\">加载自定义的类</td>\n</tr>\n</tbody></table>\n<h5 id=\"如何组织类加载器\"><a href=\"#如何组织类加载器\" class=\"headerlink\" title=\"如何组织类加载器\"></a>如何组织类加载器</h5><p>虚拟器引入了双亲委派模型<br>当一个加载器进行类加载的时候，先委派给双亲加载器加载。双亲无法加载的时候再返回自己加载。<br>好处: 保证类有合适的优先级的层次关系，保证程序稳定运行。  </p>\n<p><img src=\"%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.png\" alt=\"双亲委派\"></p>\n<p>// TODO ClassLoader 源码</p>\n<p><a href=\"http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file\" target=\"_blank\" rel=\"noopener\">openjdk</a></p>\n<h5 id=\"为什么使用双亲委派机制去加载类\"><a href=\"#为什么使用双亲委派机制去加载类\" class=\"headerlink\" title=\"为什么使用双亲委派机制去加载类\"></a>为什么使用双亲委派机制去加载类</h5><ul>\n<li>避免多份同样字节码的加载</li>\n</ul>\n<h5 id=\"类的加载方式\"><a href=\"#类的加载方式\" class=\"headerlink\" title=\"类的加载方式\"></a>类的加载方式</h5><ul>\n<li>隐式加载: new</li>\n<li>显示加载: loadClass, forName等(不支持反射，需要newInstance()获取实例)</li>\n</ul>\n<h6 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h6><p><img src=\"%E7%B1%BB%E7%9A%84%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F.png\" alt=\"类的生命周期\"></p>\n<p>类加载包括 加载 验证 准备 解析 初始化五个阶段  </p>\n<ul>\n<li>加载: 类加载器(可自己设置)，热部署，加密解密</li>\n<li>验证: 字节流包含的信息符不符合虚拟机要求，会不会危害虚拟机  </li>\n<li>准备: 为类变量分配内存，设置初始值 。  </li>\n<li>解析: 将常量池的一些引用替换为实际值。</li>\n<li>初始化: 赋值</li>\n<li>使用: 构造过程，构造方法</li>\n</ul>\n<p><img src=\"%E7%B1%BB%E5%8A%A0%E8%BD%BD.png\" alt=\"类加载\"></p>\n<h6 id=\"loadClass-和-forNmae-的区别\"><a href=\"#loadClass-和-forNmae-的区别\" class=\"headerlink\" title=\"loadClass 和 forNmae 的区别\"></a>loadClass 和 forNmae 的区别</h6><ul>\n<li>Class.forName 得到的class 是已经初始化完成的</li>\n<li>Classloader.loadClass得到的class是还没有链接的</li>\n</ul>\n<p>例如forName用于加载MySQL jdbc Driver，loadclass 不可以</p>\n<p>loadclass 一般用于spring ioc，因为 lazy loading 即懒加载的特性，加快加载速度，等要用到的时候再去初始化</p>\n<h4 id=\"Java的内存模型\"><a href=\"#Java的内存模型\" class=\"headerlink\" title=\"Java的内存模型\"></a>Java的内存模型</h4><ul>\n<li>地址空间划分<ul>\n<li>内核空间  (主要的系统操纵程序和C运行的空间，逻辑和基于C的进程)</li>\n<li>用户空间  (Java实际运行时使用的内存空间)</li>\n</ul>\n</li>\n</ul>\n<p>JVM内存模型–JDK8</p>\n<p><img src=\"JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png\" alt=\"JVM内存模型\"></p>\n<h5 id=\"程序计数器-Program-Counter-Register\"><a href=\"#程序计数器-Program-Counter-Register\" class=\"headerlink\" title=\"程序计数器(Program Counter Register)\"></a>程序计数器(Program Counter Register)</h5><ul>\n<li>当前线程执行的字节码行号指示器(逻辑计数器)</li>\n<li>改变计数器的值来选取下一条需要执行的字节码指令</li>\n<li>和线程时一对一的关系即”线程私有”</li>\n<li>对Java方法计数，如果时Native方法，计数器值为Undefined</li>\n<li>不会发生内存泄漏</li>\n</ul>\n<h5 id=\"Java虚拟机栈-Stack\"><a href=\"#Java虚拟机栈-Stack\" class=\"headerlink\" title=\"Java虚拟机栈(Stack)\"></a>Java虚拟机栈(Stack)</h5><ul>\n<li>Java方法执行的内存模型</li>\n<li>包含多个栈帧</li>\n</ul>\n<p>// TODO javap -verbose </p>\n<p><img src=\"Stack.png\" alt=\"stack\"></p>\n<h6 id=\"递归为什么会引发java-lang-StackOVerflowError异常\"><a href=\"#递归为什么会引发java-lang-StackOVerflowError异常\" class=\"headerlink\" title=\"递归为什么会引发java.lang.StackOVerflowError异常\"></a>递归为什么会引发java.lang.StackOVerflowError异常</h6><ul>\n<li>递归过深，栈帧数超出虚拟栈深度</li>\n<li>虚拟机栈过多会引发java.lang.OutOfMemoryError</li>\n</ul>\n<h5 id=\"本地方法栈-Native-Stack\"><a href=\"#本地方法栈-Native-Stack\" class=\"headerlink\" title=\"本地方法栈(Native Stack)\"></a>本地方法栈(Native Stack)</h5><ul>\n<li>与虚拟机栈相似，主要作用于标注了native的方法</li>\n</ul>\n<h5 id=\"元空间-MetaSpace\"><a href=\"#元空间-MetaSpace\" class=\"headerlink\" title=\"元空间(MetaSpace)\"></a>元空间(MetaSpace)</h5><p>元空间(MetaSpace)与永久代(PermGen)的区别</p>\n<ul>\n<li>元空间使用本地内存，而永久代使用的是jvm的内存</li>\n</ul>\n<p>MetaSpace 相比 PermGen的优势</p>\n<ul>\n<li>字符串常量池存在永久代中，容易出现性能问题和内存溢出</li>\n<li>类和方法的信息大小难以确定，给永久代的大小指定带来了困呐</li>\n<li>永久代会为GC带来不必要的复杂性</li>\n<li>方便HotSpot与其他JVM如Jrockit的继承</li>\n</ul>\n<h5 id=\"Java堆-Heap\"><a href=\"#Java堆-Heap\" class=\"headerlink\" title=\"Java堆(Heap)\"></a>Java堆(Heap)</h5><ul>\n<li>对象实例的分配区域</li>\n<li>GC管理的主要区域<ul>\n<li>分代清除算法(新生代，老生代)</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"常考问题\"><a href=\"#常考问题\" class=\"headerlink\" title=\"常考问题\"></a>常考问题</h5><h6 id=\"JVM-三大性能调优参数-Xms-Xmx-Xss的含义\"><a href=\"#JVM-三大性能调优参数-Xms-Xmx-Xss的含义\" class=\"headerlink\" title=\"JVM 三大性能调优参数-Xms -Xmx -Xss的含义\"></a>JVM 三大性能调优参数-Xms -Xmx -Xss的含义</h6><ul>\n<li>-Xss: 规定了每个线程虚拟机栈(堆栈)的大小</li>\n<li>-Xms: 堆的初始值</li>\n<li>-Xmx: 堆能达到的最大值</li>\n</ul>\n<h6 id=\"Java的内存模型-堆和栈\"><a href=\"#Java的内存模型-堆和栈\" class=\"headerlink\" title=\"Java的内存模型(堆和栈)\"></a>Java的内存模型(堆和栈)</h6><p>Java内存模型中堆和栈的区别– 内存分配策略</p>\n<ul>\n<li>静态存储：编译时确定每个数据目标在运行时的存储空间需求</li>\n<li>栈式存储：数据区需求在编译时未知，运行时模块入口前确定</li>\n<li>堆式存储：编译时或运行时模块入口都无法确定，动态分配</li>\n</ul>\n<p>Java内存中堆和栈的区别</p>\n<ul>\n<li>联系：引用对象、数组时，栈里定义变量保存堆中目标的首地址</li>\n<li>管理方式: 栈自动释放，堆需要GC</li>\n<li>空间大小：栈比堆小</li>\n<li>碎片相关：栈产生的碎片远小于堆</li>\n<li>分配方式: 站支持静态和动态分配，而堆仅支持动态分配</li>\n<li>效率： 栈的效率比堆高</li>\n</ul>\n<p>元空间、堆、线程独占部分间的联系-内存角度</p>\n<ul>\n<li>元空间：方法</li>\n<li>堆： 对象</li>\n<li>栈： 执行过程</li>\n</ul>\n<p>不同JDK版本置键的intern()方法的区别-JDK6 VS JDK+</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"keyword\">new</span> String (<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">s.intern();</span><br></pre></td></tr></table></figure>\n\n<p>JDK6:当调用 intern方法时,如果字符串常量池先前已创建出该字符串对象,则返回池中的该字符串的引用。<br>否则,将此字符串对象添加到字符串常量池中,并且返回该字符串对象的引用。</p>\n<p>JDK6+:当调用 intern方法时,如果字符串常量池先前已创建出该字符串对象,则返回池中的该字符串的引用。<br>否则,如果该字符串对象已经存在于Java堆中,则将堆中对此对象的引用添加到字符串常量池中,并且返回该引用;<br>如果堆中不存在,则在池中创建该字符串并返回其引用。</p>\n<h2 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h2><h3 id=\"Java垃圾回收机制\"><a href=\"#Java垃圾回收机制\" class=\"headerlink\" title=\"Java垃圾回收机制\"></a>Java垃圾回收机制</h3><h6 id=\"对象被判定为垃圾的标准\"><a href=\"#对象被判定为垃圾的标准\" class=\"headerlink\" title=\"对象被判定为垃圾的标准\"></a>对象被判定为垃圾的标准</h6><ul>\n<li>没有被其他对象引用</li>\n</ul>\n<h4 id=\"判断对象是否为垃圾的算法\"><a href=\"#判断对象是否为垃圾的算法\" class=\"headerlink\" title=\"判断对象是否为垃圾的算法\"></a>判断对象是否为垃圾的算法</h4><h5 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h5><p>做法</p>\n<ul>\n<li><p>通过判断对象的引用数量来决定对象是否可以被回收</p>\n</li>\n<li><p>每个对象实例都有一个引用计数器，被引用则+1，完成引用则-1</p>\n</li>\n<li><p>任何引用计数为0 的对象实例可以被当作垃圾收集</p>\n</li>\n<li><p>优点：执行效率高，程序执行受影响较小</p>\n</li>\n<li><p>缺点: 无法检测出循环引用的情况，导致内存泄露</p>\n</li>\n</ul>\n<h5 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h5><p>由离散数学的图论引入的  </p>\n<p>通过判断对象的引用链是否可达来决定对象是否可以被回收<br>选择一个GC Root对象</p>\n<ul>\n<li>虚拟机栈中引用的对象(栈帧中的本地变量表)</li>\n<li>方法区中的常量引用对象</li>\n<li>方法区中的类静态属性引用的对象</li>\n<li>本地方法栈中JNI(Native方法)的引用对象</li>\n<li>活跃线程的引用对象</li>\n</ul>\n<h4 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h4><h5 id=\"标记-清楚算法-Mark-and-Sweep\"><a href=\"#标记-清楚算法-Mark-and-Sweep\" class=\"headerlink\" title=\"标记-清楚算法(Mark and Sweep)\"></a>标记-清楚算法(Mark and Sweep)</h5><ul>\n<li>标记: 从根集合进行扫描，对存活的对象进行标记</li>\n<li>清楚: 对堆内存从头到尾进行线性遍历，回收不可达对象内存</li>\n</ul>\n<p>缺点<br>造成碎片化问题</p>\n<h5 id=\"复制算法-Copying\"><a href=\"#复制算法-Copying\" class=\"headerlink\" title=\"复制算法(Copying)\"></a>复制算法(Copying)</h5><ul>\n<li>分为对象面和空闲面</li>\n<li>对象在对象面上创建</li>\n<li>存货的对象被从对象面复制到空闲区</li>\n<li>将对象面所有对象内存清楚</li>\n</ul>\n<p>优点  </p>\n<ul>\n<li>解决碎片化问题</li>\n<li>顺序分配内存，简单高效</li>\n<li>适用于对象存活率低的场景</li>\n</ul>\n<p>适用于分代的年轻代</p>\n<h5 id=\"标记-整理算法-Compacting\"><a href=\"#标记-整理算法-Compacting\" class=\"headerlink\" title=\"标记-整理算法(Compacting)\"></a>标记-整理算法(Compacting)</h5><p>使用了标记清除算法的方式，加上了整理步骤</p>\n<ul>\n<li>避免内存的不连续行</li>\n<li>不用设置两块内存互换</li>\n<li>适用于存活率高的场景</li>\n</ul>\n<h5 id=\"分代收集算法-Generational-Collector\"><a href=\"#分代收集算法-Generational-Collector\" class=\"headerlink\" title=\"分代收集算法(Generational Collector)\"></a>分代收集算法(Generational Collector)</h5><p>组合拳  </p>\n<ul>\n<li>jdk6, jdk7 分为年轻代，老年代，永久代</li>\n<li>jdk8 以后永久代消失</li>\n</ul>\n<p>年轻代存活率低，使用复制算法，老年代存活率高，使用标记清除/整理算法  </p>\n<h5 id=\"GC-分类\"><a href=\"#GC-分类\" class=\"headerlink\" title=\"GC 分类\"></a>GC 分类</h5><ul>\n<li>Minor GC (年轻代)</li>\n<li>Full GC (老年代)</li>\n</ul>\n<h6 id=\"年轻代-1-3\"><a href=\"#年轻代-1-3\" class=\"headerlink\" title=\"年轻代(1/3)\"></a>年轻代(1/3)</h6><ul>\n<li>Eden区(伊甸) (大)</li>\n<li>两个Survivor区 (from/to) (小)</li>\n</ul>\n<p>如何判断进入老年代  </p>\n<ul>\n<li>经历一定Minor次数依然存活的对象</li>\n<li>Survivor区中存放不下的对象</li>\n<li>新生成的大对象</li>\n</ul>\n<p>常用调优参数</p>\n<ul>\n<li>-XX:SurvivorRatio: Eden 和 Survivor的比值，默认8:1</li>\n<li>-XX:NewRatio: 老年代和年轻代内存大小的比例</li>\n<li>-XX:MaxTenurinThreshold: 对象从年轻代晋升到老年代经过GC次数的最大阈值</li>\n</ul>\n<h6 id=\"老年代-2-3\"><a href=\"#老年代-2-3\" class=\"headerlink\" title=\"老年代(2/3)\"></a>老年代(2/3)</h6><ul>\n<li>标记-清理算法</li>\n<li>标记-整理算法</li>\n</ul>\n<p>老年代的GC会涉及新生代，Full GC就是全GC</p>\n<ul>\n<li>Full GC 和 Major GC</li>\n<li>Full GC 比Minor GC 慢(10倍左右)，但执行频率低</li>\n</ul>\n<p>触发Full GC的条件</p>\n<ul>\n<li>老年代空间不足</li>\n<li>永久代空间不足 (jdk6, 7)</li>\n<li>CMS GC时出现promotion failed, concurrent mode failure</li>\n<li>Minor GC晋级到老年代的平均大小大于老年代的剩余空间</li>\n<li>调用System.gc()</li>\n<li>使用RMI来进行RPC管理的JDK应用，每效时执行一次Full GC</li>\n</ul>\n<h6 id=\"Stop-the-World\"><a href=\"#Stop-the-World\" class=\"headerlink\" title=\"Stop-the-World\"></a>Stop-the-World</h6><ul>\n<li>JVM 由于要执行GC而停止了应用程序的执行</li>\n<li>任何一种GC算法中都会发生</li>\n<li>多数GC优化通过减少Stop-the-world发生的时间来提高程序性能(实现高吞吐)</li>\n</ul>\n<h6 id=\"Safepoint\"><a href=\"#Safepoint\" class=\"headerlink\" title=\"Safepoint\"></a>Safepoint</h6><ul>\n<li>分析过程中对象引用关系不会发生变化的点</li>\n<li>产生安全点的地方: 方法调用，循环跳转，异常跳转等</li>\n<li>安全点数量适中</li>\n</ul>\n<h4 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h4><p>JVM的运行模式</p>\n<ul>\n<li>Server</li>\n<li>Client</li>\n</ul>\n<h5 id=\"年轻代常见的垃圾收集器\"><a href=\"#年轻代常见的垃圾收集器\" class=\"headerlink\" title=\"年轻代常见的垃圾收集器\"></a>年轻代常见的垃圾收集器</h5><h6 id=\"Serial收集器-XX-UseSerialGC-复制算法\"><a href=\"#Serial收集器-XX-UseSerialGC-复制算法\" class=\"headerlink\" title=\"Serial收集器(-XX: +UseSerialGC, 复制算法)\"></a>Serial收集器(-XX: +UseSerialGC, 复制算法)</h6><ul>\n<li>单线程收集，进行垃圾收集时，必须暂停所有工作线程</li>\n<li>简单高效，Client模式下默认的年轻代收集器</li>\n</ul>\n<h6 id=\"ParNew收集器-XX-UseParNewGC-复制算法\"><a href=\"#ParNew收集器-XX-UseParNewGC-复制算法\" class=\"headerlink\" title=\"ParNew收集器(-XX: +UseParNewGC, 复制算法)\"></a>ParNew收集器(-XX: +UseParNewGC, 复制算法)</h6><ul>\n<li>多线程收集，其他行为同Serial</li>\n<li>单核执行效率不如Serial，多核下有优势</li>\n</ul>\n<h6 id=\"Parallel-Scavenge收集器-XX-UseParallelGC，复制算法\"><a href=\"#Parallel-Scavenge收集器-XX-UseParallelGC，复制算法\" class=\"headerlink\" title=\"Parallel Scavenge收集器(-XX: +UseParallelGC，复制算法)\"></a>Parallel Scavenge收集器(-XX: +UseParallelGC，复制算法)</h6><ul>\n<li>吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)</li>\n<li>比起关注用户线程停顿时间，更关注系统的吞吐量</li>\n<li>在多核下执行才有优势，Server模式下默认的年轻代收集器</li>\n</ul>\n<h5 id=\"老年代垃圾收集器\"><a href=\"#老年代垃圾收集器\" class=\"headerlink\" title=\"老年代垃圾收集器\"></a>老年代垃圾收集器</h5><h6 id=\"Serial-Old收集器-XX-UseSerialOldGC-标记-整理算法\"><a href=\"#Serial-Old收集器-XX-UseSerialOldGC-标记-整理算法\" class=\"headerlink\" title=\"Serial Old收集器(-XX: +UseSerialOldGC, 标记-整理算法)\"></a>Serial Old收集器(-XX: +UseSerialOldGC, 标记-整理算法)</h6><p>其他特点同年轻代</p>\n<h6 id=\"Paraller-Old收集器-XX-UseParallelOldGC，标记-清理算法\"><a href=\"#Paraller-Old收集器-XX-UseParallelOldGC，标记-清理算法\" class=\"headerlink\" title=\"Paraller Old收集器(-XX: +UseParallelOldGC，标记-清理算法)\"></a>Paraller Old收集器(-XX: +UseParallelOldGC，标记-清理算法)</h6><ul>\n<li>多线程，吞吐量优先</li>\n</ul>\n<h6 id=\"CMS收集器-XX-UseConcMarkSweepGC，-标记-清理算法\"><a href=\"#CMS收集器-XX-UseConcMarkSweepGC，-标记-清理算法\" class=\"headerlink\" title=\"CMS收集器(-XX: +UseConcMarkSweepGC， 标记-清理算法)\"></a>CMS收集器(-XX: +UseConcMarkSweepGC， 标记-清理算法)</h6><ul>\n<li>初始标记: stop-the-world</li>\n<li>并发标记: 并发追溯标记，程序不会停顿</li>\n<li>并发预清理: 查找执行并发标记阶段从年轻代晋升到老年代的对象</li>\n<li>重新标记: 暂停虚拟机，扫面CMS堆中的剩余对象</li>\n<li>并发清理: 清理垃圾对象，程序不会停顿</li>\n<li>并发重置: 重置CMS收集器的数据结构</li>\n</ul>\n<h5 id=\"G1收集器-XX-UseG1GC，复制-标记-整理算法\"><a href=\"#G1收集器-XX-UseG1GC，复制-标记-整理算法\" class=\"headerlink\" title=\"G1收集器(-XX: +UseG1GC，复制+标记-整理算法)\"></a>G1收集器(-XX: +UseG1GC，复制+标记-整理算法)</h5><p>Garbage First收集器优点</p>\n<ul>\n<li>并发和并行</li>\n<li>分代收集</li>\n<li>空间整合</li>\n<li>可预测的停顿</li>\n</ul>\n<p>G1</p>\n<ul>\n<li>Java堆内存划分为多个大小相等的Region</li>\n<li>年轻代和老年代不再物理隔离</li>\n</ul>\n<h4 id=\"GC-的面试题\"><a href=\"#GC-的面试题\" class=\"headerlink\" title=\"GC 的面试题\"></a>GC 的面试题</h4><h5 id=\"Object的finalize-方法的作用是否与C-的析构函数作用相同\"><a href=\"#Object的finalize-方法的作用是否与C-的析构函数作用相同\" class=\"headerlink\" title=\"Object的finalize()方法的作用是否与C++的析构函数作用相同\"></a>Object的finalize()方法的作用是否与C++的析构函数作用相同</h5><ul>\n<li>与C++的析构函数不同，析构函数调用确定，而它是不确定的</li>\n<li>将未被引用的对象放置在F-Queue队列</li>\n<li>方法执行随时可能会被终止</li>\n<li>给予对象最后一次重生的机会</li>\n</ul>\n<h5 id=\"G1-ZGC\"><a href=\"#G1-ZGC\" class=\"headerlink\" title=\"G1, ZGC\"></a>G1, ZGC</h5><h5 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h5><h6 id=\"强引用\"><a href=\"#强引用\" class=\"headerlink\" title=\"强引用\"></a>强引用</h6><ul>\n<li>最普通的引用: Object obj = new Object()</li>\n<li>抛出OutOfMemoryError 终止程序也不会回收具有强引用的对象</li>\n<li>通过将对象设置为null来弱化引用，使其被回收</li>\n</ul>\n<h6 id=\"软引用\"><a href=\"#软引用\" class=\"headerlink\" title=\"软引用\"></a>软引用</h6><ul>\n<li>对象处在有用但非必须的状态</li>\n<li>只有当内存空间不足时，GC会回收该引用的对象的内存</li>\n<li>可以用来实现高速缓存</li>\n</ul>\n<h6 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h6><ul>\n<li>非必须的对象，比软引用更弱</li>\n<li>GC时会被回收</li>\n<li>被回收的概率不大，因为GC线程优先级比较低</li>\n<li>适用于引用偶尔被使用且不影响垃圾收集的对象</li>\n</ul>\n<h6 id=\"虚引用\"><a href=\"#虚引用\" class=\"headerlink\" title=\"虚引用\"></a>虚引用</h6><ul>\n<li>不会决定对象的生命周期</li>\n<li>任何时候都可能被垃圾收集器回收</li>\n<li>跟踪对象被垃圾收集器回收的活动，起哨兵作用</li>\n<li>必须和引用队列ReferenceQueue联合使用 </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">引用类型</th>\n<th align=\"center\">被垃圾回收时间</th>\n<th align=\"center\">用途</th>\n<th align=\"center\">生存时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">被强用</td>\n<td align=\"center\">从来不会</td>\n<td align=\"center\">对象的一般状态</td>\n<td align=\"center\">JVM停止运行时终止</td>\n</tr>\n<tr>\n<td align=\"center\">被软用</td>\n<td align=\"center\">在内存不足时</td>\n<td align=\"center\">对象缓存</td>\n<td align=\"center\">内存不足时终止</td>\n</tr>\n<tr>\n<td align=\"center\">弱引用</td>\n<td align=\"center\">在垃圾回收时</td>\n<td align=\"center\">对象缓存</td>\n<td align=\"center\">gc运行后终止</td>\n</tr>\n<tr>\n<td align=\"center\">虚引用</td>\n<td align=\"center\">Unknown</td>\n<td align=\"center\">标记、哨兵</td>\n<td align=\"center\">Unknown</td>\n</tr>\n</tbody></table>\n<h6 id=\"引用队列-reference-queue\"><a href=\"#引用队列-reference-queue\" class=\"headerlink\" title=\"引用队列(reference queue)\"></a>引用队列(reference queue)</h6><ul>\n<li>无实际存储结构，存储逻辑依赖于内部节点之间的关系来表达</li>\n<li>存储关联的且被GC的软引用，弱引用以及虚引用</li>\n</ul>\n<h2 id=\"Java线程\"><a href=\"#Java线程\" class=\"headerlink\" title=\"Java线程\"></a>Java线程</h2><h3 id=\"进程和线程的区别-1\"><a href=\"#进程和线程的区别-1\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h3><h4 id=\"进程和线程的由来\"><a href=\"#进程和线程的由来\" class=\"headerlink\" title=\"进程和线程的由来\"></a>进程和线程的由来</h4><ul>\n<li>串行: 串行执行任务，需要长时间等待用户输入</li>\n<li>预处理:预先将用户指令集中成清单，批量串行处理用户指令，任无法并发执行</li>\n<li>进程: 进程独占内存空间。保存各自运行状态，相互不干扰且可切换，为并发处理任务提供了可能性</li>\n<li>线程: 共享进程的内存资源，相互切换更快速，支持更细粒度的任务控制，使进程内的子任务得以并发执行</li>\n</ul>\n<h4 id=\"区别-1\"><a href=\"#区别-1\" class=\"headerlink\" title=\"区别\"></a>区别</h4><p>进程是资源分配的最小单位，线程是CPU调度的最小单位</p>\n<ul>\n<li>所有与进程相关的资源都被记录在PCB中(进程控制块)</li>\n<li>进程是抢占处理机的调度单位，线程属于某个进程，共享其资源</li>\n<li>线程只由堆栈寄存器、程序计数器和TCB组成(线程控制块)</li>\n</ul>\n<p>区别:</p>\n<ul>\n<li>线程不是独立应用。而进程可以看做独立应用</li>\n<li>进程又独立的空间，相互不影响，县城只是进程不同的执行路径</li>\n<li>线程没有独立的地址空间，多进程的程序比多线程程序健壮</li>\n<li>进程的切换比线程的切换开销大</li>\n</ul>\n<h3 id=\"进程和线程的关系\"><a href=\"#进程和线程的关系\" class=\"headerlink\" title=\"进程和线程的关系\"></a>进程和线程的关系</h3><ul>\n<li>Java堆操作系统提供的功能进行封装，包括进程和线程</li>\n<li>运行一个程序会产生一个进程，进程包含至少一个线程</li>\n<li>每个进程对应一个JVM实例，多个线程共享JVM里的堆</li>\n<li>Java采用单线程编程模型，程序会自动创建主线程</li>\n<li>主线程可以创建子线程，原则上要晚于子线程结束</li>\n</ul>\n<h3 id=\"Thread中的start和run方法的区别\"><a href=\"#Thread中的start和run方法的区别\" class=\"headerlink\" title=\"Thread中的start和run方法的区别\"></a>Thread中的start和run方法的区别</h3><p>Thread#start() =&gt; JVM_StartThread =&gt; thread_entry =&gt; Thread#run()</p>\n<ul>\n<li>调用start()方法会创建一个新的子线程并启动</li>\n<li>run()方法只是Thread的一个普通方法的调用</li>\n</ul>\n<h3 id=\"Thread和Runnable是什么关系\"><a href=\"#Thread和Runnable是什么关系\" class=\"headerlink\" title=\"Thread和Runnable是什么关系\"></a>Thread和Runnable是什么关系</h3><p>Thread是类，Runnable是接口</p>\n<ul>\n<li>Thread是实现了Runnable接口的类，使得run支持多线程</li>\n<li>因类的单一继承原则，推荐多使用Runnable接口</li>\n</ul>\n<h3 id=\"如何给run-方法传参\"><a href=\"#如何给run-方法传参\" class=\"headerlink\" title=\"如何给run()方法传参\"></a>如何给run()方法传参</h3><ul>\n<li>构造函数传参</li>\n<li>成员变量传参</li>\n<li>回调函数传参</li>\n</ul>\n<h3 id=\"如何实现线程的返回值\"><a href=\"#如何实现线程的返回值\" class=\"headerlink\" title=\"如何实现线程的返回值\"></a>如何实现线程的返回值</h3><ul>\n<li>主线程等待</li>\n<li>Thread类的join方法</li>\n<li>Callable接口实现: 通过FutureTask or 线程池获取</li>\n</ul>\n<h3 id=\"线程的状态\"><a href=\"#线程的状态\" class=\"headerlink\" title=\"线程的状态\"></a>线程的状态</h3><p>六个状态</p>\n<ul>\n<li>新建(New): 创建后尚未启动的线程的状态</li>\n<li>运行(Runnable):包含Running和Ready</li>\n<li>无限期等待(Waiting): 不会被分配CPU执行时间，需要显性被唤醒</li>\n<li>限期等待(Timed Waiting): 在一定时间后会由系统自动唤醒</li>\n<li>阻塞(Blocked): 等待获取排他锁</li>\n<li>结束(terminated): 已终止线程的状态，线程已经结束运行</li>\n</ul>\n<h3 id=\"sleep和wait\"><a href=\"#sleep和wait\" class=\"headerlink\" title=\"sleep和wait\"></a>sleep和wait</h3><ul>\n<li>sleep是Thread类的方法，wait是Object类中定义的方法</li>\n<li>Sleep()方法可以在任何地方使用</li>\n<li>wait()只能在synchronized方法或synchronized块中使用</li>\n</ul>\n<p>本质区别</p>\n<ul>\n<li>Thread.sleep只会让出CPU，不会导致锁行为改变</li>\n<li>Object.wait不仅让出CPU，还会释放已经占有的同步资源锁</li>\n</ul>\n<p>// TODO wait sleep</p>\n<h3 id=\"notify和notifyall-的区别\"><a href=\"#notify和notifyall-的区别\" class=\"headerlink\" title=\"notify和notifyall 的区别\"></a>notify和notifyall 的区别</h3><p>两个概念</p>\n<ul>\n<li><p>EntryList 锁池</p>\n</li>\n<li><p>WaitSet 等待池</p>\n</li>\n<li><p>notifyAll会让所有处于等待池的线程进入锁池中去竞争获取锁的机会</p>\n</li>\n<li><p>notify 只会随机选取一个处于等待池中的线程进入锁池去竞争</p>\n</li>\n</ul>\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h3><p>Thread.yield()函数时，会给线程调度器一个当前线程愿意让出CPU使用的暗示，但是线程调度器可能会忽略这个暗示</p>\n<h3 id=\"如何中断线程\"><a href=\"#如何中断线程\" class=\"headerlink\" title=\"如何中断线程\"></a>如何中断线程</h3><ul>\n<li>通过调用stop()方法停止线程</li>\n<li>通过调用suspend(), resume)方法</li>\n</ul>\n<p>目前使用</p>\n<ul>\n<li>interrupt(),通知线程应该中断了<ul>\n<li>如果线程处于被阻塞状态,那么线程将立即退出被阻塞状态,并抛出一个 Interruptedexception异常。</li>\n<li>如果线程处于正常活动状态,那么会将该线程的中断标志设置为true。被设置中断的线程将继续正常运行,不受影响</li>\n</ul>\n</li>\n</ul>\n<p>Interrupt需要被调用的线程配合中断</p>\n<h3 id=\"sychronized\"><a href=\"#sychronized\" class=\"headerlink\" title=\"sychronized\"></a>sychronized</h3><p>// TODO</p>\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><ul>\n<li>synchronized 是mark word ,lock调用unsafe的park方法</li>\n</ul>\n<h3 id=\"JMM-Java-Memory-Model-–-Java内存模式\"><a href=\"#JMM-Java-Memory-Model-–-Java内存模式\" class=\"headerlink\" title=\"JMM (Java Memory Model) – Java内存模式\"></a>JMM (Java Memory Model) – Java内存模式</h3><h4 id=\"JMM-主内存\"><a href=\"#JMM-主内存\" class=\"headerlink\" title=\"JMM 主内存\"></a>JMM 主内存</h4><ul>\n<li>存储Java实例对象</li>\n<li>包括有成员变量、类信息、常量、静态变量等</li>\n<li>属于数据共享的区域，多线程并发操作时会引发线程安全问题</li>\n</ul>\n<h4 id=\"JMM的工作内存\"><a href=\"#JMM的工作内存\" class=\"headerlink\" title=\"JMM的工作内存\"></a>JMM的工作内存</h4><ul>\n<li>存储当前方法的所有本地变量信息，本地变量对其他线程不可见</li>\n<li>字节码行号指示器、Native方法信息</li>\n<li>属于线程私有的数据区域，不存在线程安全问题</li>\n</ul>\n<h4 id=\"JMM与Java内存区域划分是不同的概念层次\"><a href=\"#JMM与Java内存区域划分是不同的概念层次\" class=\"headerlink\" title=\"JMM与Java内存区域划分是不同的概念层次\"></a>JMM与Java内存区域划分是不同的概念层次</h4><ul>\n<li>JMM描述的是一组规则，围绕原子性，有序性，可见性展开</li>\n<li>相似点: 存在共享区和私有区域</li>\n</ul>\n<h4 id=\"主内存与工作内存的数据存储类型以及操作方式归纳\"><a href=\"#主内存与工作内存的数据存储类型以及操作方式归纳\" class=\"headerlink\" title=\"主内存与工作内存的数据存储类型以及操作方式归纳\"></a>主内存与工作内存的数据存储类型以及操作方式归纳</h4><ul>\n<li>方法里的基本数据类型本地变量将直接存储在工作内存的栈帧结构中</li>\n<li>引用类型的本地变量: 引用存储在工作内存中，实例存储在主内存中</li>\n<li>成员变量、static变量、类信息均存储在主内存中</li>\n<li>主内存共享的方式是线程各拷贝一份数据到工作内存，操作完成后刷新主内存</li>\n</ul>\n<h4 id=\"JMM怎么实现可见性\"><a href=\"#JMM怎么实现可见性\" class=\"headerlink\" title=\"JMM怎么实现可见性\"></a>JMM怎么实现可见性</h4><h5 id=\"指令重排序需要满足条件\"><a href=\"#指令重排序需要满足条件\" class=\"headerlink\" title=\"指令重排序需要满足条件\"></a>指令重排序需要满足条件</h5><ul>\n<li>单线程环境下不能改变程序运行的结果</li>\n<li>存在数据以来关系的不允许重排序</li>\n</ul>\n<p>无法通过happens-before原则推导出来的，才能进行指令的重排序<br>A操作的结果需要对B操作可见，则A与B存在happens-before关系</p>\n<h5 id=\"happens-before八大原则\"><a href=\"#happens-before八大原则\" class=\"headerlink\" title=\"happens-before八大原则\"></a>happens-before八大原则</h5><ol>\n<li>程序次序规则:一个线程内,按照代码顺序,书写在前面的操作先行发生于肀写在后面的操作;</li>\n<li>锁定规则:一个 unlock操作先行发生于后面对同一个锁的lock操作;</li>\n<li>volatile变量规则:对一个变量的写操作先行发生于后面对这个变量的读操作 </li>\n<li>传递规则:如果操作A先行发生于操作B,而操作B又先行发生于操作C,则可以得出操作A先行发生于操作C;</li>\n<li>线程启动规则: Thread对象的 start(方法先行发生于此线程的每一个动作;</li>\n<li>线程中断规则:对线程 Interrupt0方法的调用先行发生于被中断线程的代码检测到中断事件的发生;</li>\n<li>线程终结规则:线程中所有的操作都先行发生于线程的终止检测,我们可以过 Thread join(方法结束、 Thread isalive0的返回值手段检测到线程已经终止执行;</li>\n<li>对象终结规则:一个对象的初始化完成先行发生于他的 Finalize0方法的开始</li>\n</ol>\n<h5 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h5><p>JVM提供的轻量级同步机制</p>\n<ul>\n<li>保证被volatile修饰的共享变量对所有线程总是可见的</li>\n<li>禁止指令重排序优化</li>\n</ul>\n<h6 id=\"volatile-的可见性\"><a href=\"#volatile-的可见性\" class=\"headerlink\" title=\"volatile 的可见性\"></a>volatile 的可见性</h6><p>如何实现?</p>\n<ul>\n<li>当写一个 volatile变量时,JMM会把该线程对应的工作内存中的共享变量值刷新到主内存中</li>\n<li>当读取个 volatile变量时,JM会把该线程对应的工作内存置为无效</li>\n</ul>\n<h6 id=\"如何禁止重排优化\"><a href=\"#如何禁止重排优化\" class=\"headerlink\" title=\"如何禁止重排优化\"></a>如何禁止重排优化</h6><p>内存屏障(memory barrier)</p>\n<ol>\n<li>保证特定操作的执行顺序</li>\n<li>保证某些变量的内存可见性</li>\n</ol>\n<p>通过内存屏障指令禁止在内存屏障前后的指令执行重新排序优化<br>强制刷出各种CPU的缓存数据,因此任何CPU上的线程都能读取到这些数据的最新版本</p>\n<h3 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h3><p>sync是悲观锁，假定会并发冲突<br>乐观锁假定并发不冲突 CAS</p>\n<ul>\n<li>支持原子更新操作，适用于计算器，序列发生器等场景</li>\n<li>属于乐观锁机制，号称lock-free</li>\n<li>CAS操作失败时由开发者决定是继续尝试，还是执行别的操作</li>\n</ul>\n<h4 id=\"CAS思想\"><a href=\"#CAS思想\" class=\"headerlink\" title=\"CAS思想\"></a>CAS思想</h4><ul>\n<li>包含三个操作数– 内存位置(V)、预期原值(A)和新值(B)</li>\n</ul>\n<h2 id=\"Java集合框架\"><a href=\"#Java集合框架\" class=\"headerlink\" title=\"Java集合框架\"></a>Java集合框架</h2><h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>// TODO</p>\n<ul>\n<li>数组和链表的区别</li>\n<li>链表的操作，如反转，链表环路检测，双向链表，循环链表相关操作</li>\n<li>队列，栈的应用</li>\n<li>二叉树的遍历方式及其递归和非递归的实现</li>\n<li>红黑树的旋转</li>\n</ul>\n<h4 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h4><p><img src=\"Collection.png\" alt=\"Collection\"></p>\n<h4 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h4><p>HashMap(java8之前): 数组+链表<br>HashMap(java8之后): 数组+链表+红黑树</p>\n<h5 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h5><ul>\n<li>多线程环境下，调整大小存在条件竞争，容易造成死锁</li>\n<li>rehashing 是一个耗时的过程</li>\n</ul>\n<h4 id=\"HashTable\"><a href=\"#HashTable\" class=\"headerlink\" title=\"HashTable\"></a>HashTable</h4><p>sync</p>\n<h4 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h4><p>早期通过分段锁Segment</p>\n<p>采用了CAS + sync，数组链表红黑树</p>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><ul>\n<li>内部排序: 如递归排序，交换排序(冒泡排序、快排)、选择排序、插入排序</li>\n<li>外部排序: 应掌握如何利用有限的内存配合海量的外部存储来处理超大的数据集，写不出来也要有相关的思路</li>\n</ul>\n<p>哪些不稳定(堆，快)，稳定意味着什么<br>不同数据集，各种排序最好或最差的情况<br>如何优化算法</p>\n<h3 id=\"Java的IO机制\"><a href=\"#Java的IO机制\" class=\"headerlink\" title=\"Java的IO机制\"></a>Java的IO机制</h3><p>BIO、NIO、AIO的区别</p>\n<p>Block-IO: InputStream 和 OutputStream, Reader 和 Writer<br>NonBlock-IO: 构建多路复用的、同步非阻塞的IO操作</p>\n<h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><h3 id=\"你了解Spring-IOC吗\"><a href=\"#你了解Spring-IOC吗\" class=\"headerlink\" title=\"你了解Spring IOC吗\"></a>你了解Spring IOC吗</h3><p>IOC(Inversion of Control): 控制反转</p>\n<ul>\n<li>Spring Core最核心的部分</li>\n<li>需要先了解依赖注入(DI)</li>\n</ul>\n<h4 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h4><p>DI: 将底层类作为参数传递给上层类，实现上层对下层的”控制”</p>\n<p>IOC: DI和DL</p>\n<p>DL: 因为需要用户实现API所以被移除</p>\n<h4 id=\"注入的方式\"><a href=\"#注入的方式\" class=\"headerlink\" title=\"注入的方式\"></a>注入的方式</h4><ul>\n<li>Setter</li>\n<li>Interface</li>\n<li>Constructor</li>\n<li>Annotation</li>\n</ul>\n<p>IOC容器的优势</p>\n<ul>\n<li>避免在各处使用new来创建类，并且可以做到统一维护</li>\n<li>创建实例的时候不需要了解其中的细节</li>\n</ul>\n<h4 id=\"Spring-IOC支持的功能\"><a href=\"#Spring-IOC支持的功能\" class=\"headerlink\" title=\"Spring IOC支持的功能\"></a>Spring IOC支持的功能</h4><ul>\n<li>依赖注入</li>\n<li>依赖检查</li>\n<li>自动装配</li>\n<li>支持集合</li>\n<li>指定初始化方法和销毁方法</li>\n<li>支持回调方法</li>\n</ul>\n<h4 id=\"Spring-Bean\"><a href=\"#Spring-Bean\" class=\"headerlink\" title=\"Spring Bean\"></a>Spring Bean</h4><p>BeanDefinition: 主要用来描述Bean的<br>BeanDefinitionRegistry: 提供向IOC容器注册BeanDefinition对象的方法</p>\n<p>** BeanFactory **: Spring框架最核心的接口</p>\n<ul>\n<li>提供IOC的配置机制</li>\n<li>包含Bean的各种定义，便于实例化Bean</li>\n<li>建立Bean之间的依赖关系</li>\n<li>Bean生命周期的控制</li>\n</ul>\n<h5 id=\"BeanFactory与ApplicationContext的比较\"><a href=\"#BeanFactory与ApplicationContext的比较\" class=\"headerlink\" title=\"BeanFactory与ApplicationContext的比较\"></a>BeanFactory与ApplicationContext的比较</h5><ul>\n<li>BeanFactory是Spring框架的基础设施</li>\n<li>ApplicationContext面向Spring开发者</li>\n</ul>\n<p>继承多个接口</p>\n<ul>\n<li>BeanFactory: 能够管理、装配Bean</li>\n<li>ResourcePatternResolver: 能够加载资源文件</li>\n<li>MessageSource: 能够实现国际化等功能</li>\n<li>ApplicationEventPublisher: 能够注册监听器，实现监听机制</li>\n</ul>\n<h5 id=\"Spring-Bean-的作用域\"><a href=\"#Spring-Bean-的作用域\" class=\"headerlink\" title=\"Spring Bean 的作用域\"></a>Spring Bean 的作用域</h5><p>作用域</p>\n<ul>\n<li>singleton: Spring默认的作用域，容器里拥有唯一的Bean实例</li>\n<li>prototype: 针对每个getBean请求，容器都会创建一个bean实例</li>\n<li>request: 会为每个HTTP请求创建一个Bean</li>\n<li>session: 会为每个session创建一个Bean</li>\n<li>globalSession: 会为每个全局Http Session创建一个Bean实例，该作用域仅对Portlet有效</li>\n</ul>\n<h5 id=\"Spring-Bean-的生命周期\"><a href=\"#Spring-Bean-的生命周期\" class=\"headerlink\" title=\"Spring Bean 的生命周期\"></a>Spring Bean 的生命周期</h5><h3 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h3><p>关注点分离: 不同的问题交给不同的部分去解决</p>\n<ul>\n<li>面向切面编程AOP正是这种技术的体现</li>\n<li>通用化功能代码的实现，对应的就是所谓的切面(Aspect)</li>\n<li>业务功能和切面代码分开,架构将变得高内聚低耦合</li>\n<li>确保功能的完整性: 切面最终需要合并到业务中(Weave)</li>\n</ul>\n<h4 id=\"AOP的三种织入\"><a href=\"#AOP的三种织入\" class=\"headerlink\" title=\"AOP的三种织入\"></a>AOP的三种织入</h4><ul>\n<li>编译时织入: 需要特殊的Java编译器，如AspectJ</li>\n<li>类加载时织入: 需要特殊的Java编辑器，如AspectJ,AspectWerkz</li>\n<li>运行时织入: Spring采用的方式，通过动态代理的方式，实现简单</li>\n</ul>\n<h3 id=\"七个事务传播属性\"><a href=\"#七个事务传播属性\" class=\"headerlink\" title=\"七个事务传播属性\"></a>七个事务传播属性</h3><p>什么是事务传播属性<br>传播两个方法: 两个方法都带事务，但是事务设置不同。</p>\n<p>为什么要事务？<br>事务是为解决数据安全操作提出的，事务控制实际上就是控制数据的安全访问。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">传播行为</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">propagation_required（xml文件中为required)</td>\n<td align=\"center\">表示当前方法必须在一个具有事务的上下文中运行，如有客户端有事务在进行，那么被调用端将在该事务中运行，否则的话重新开启一个事务。（如果被调用端发生异常，那么调用端和被调用端事务都将回滚）</td>\n</tr>\n<tr>\n<td align=\"center\">propagation_supports(xml文件中为supports)</td>\n<td align=\"center\">表示当前方法不必需要具有一个事务上下文，但是如果有一个事务的话，它也可以在这个事务中运行</td>\n</tr>\n<tr>\n<td align=\"center\">propagation_mandatory(xml文件中为mandatory)</td>\n<td align=\"center\">表示当前方法必须在一个事务中运行，如果没有事务，将抛出异常</td>\n</tr>\n<tr>\n<td align=\"center\">propagation_nested(xml文件中为nested)</td>\n<td align=\"center\">表示如果当前方法正有一个事务在运行中，则该方法应该运行在一个嵌套事务中，被嵌套的事务可以独立于被封装的事务中进行提交或者回滚。如果封装事务存在，并且外层事务抛出异常回滚，那么内层事务必须回滚，反之，内层事务并不影响外层事务。如果封装事务不存在，则同propagation_required的一样</td>\n</tr>\n<tr>\n<td align=\"center\">propagation_never（xml文件中为never)</td>\n<td align=\"center\">表示当方法务不应该在一个事务中运行，如果存在一个事务，则抛出异常</td>\n</tr>\n<tr>\n<td align=\"center\">propagation_requires_new(xml文件中为requires_new)</td>\n<td align=\"center\">表示当前方法必须运行在它自己的事务中。一个新的事务将启动，而且如果有一个现有的事务在运行的话，则这个方法将在运行期被挂起，直到新的事务提交或者回滚才恢复执行。</td>\n</tr>\n<tr>\n<td align=\"center\">propagation_not_supported（xml文件中为not_supported)</td>\n<td align=\"center\">表示该方法不应该在一个事务中运行。如果有一个事务正在运行，他将在运行期被挂起，直到这个事务提交或者回滚才恢复执行</td>\n</tr>\n</tbody></table>\n<h3 id=\"Spring中的事务隔离级别\"><a href=\"#Spring中的事务隔离级别\" class=\"headerlink\" title=\"Spring中的事务隔离级别\"></a>Spring中的事务隔离级别</h3><table>\n<thead>\n<tr>\n<th align=\"center\">隔离级别</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">isolation_default</td>\n<td align=\"center\">使用数据库默认的事务隔离级别</td>\n</tr>\n<tr>\n<td align=\"center\">isolation_read_uncommitted</td>\n<td align=\"center\">允许读取尚未提交的修改，可能导致脏读、幻读和不可重复读</td>\n</tr>\n<tr>\n<td align=\"center\">isolation_read_committed</td>\n<td align=\"center\">允许从已经提交的事务读取，可防止脏读、但幻读，不可重复读仍然有可能发生</td>\n</tr>\n<tr>\n<td align=\"center\">isolation_repeatable_read</td>\n<td align=\"center\">对相同字段的多次读取的结果是一致的，除非数据被当前事务自生修改。可防止脏读和不可重复读，但幻读仍有可能发生</td>\n</tr>\n<tr>\n<td align=\"center\">isolation_serializable</td>\n<td align=\"center\">完全服从acid隔离原则，确保不发生脏读、不可重复读、和幻读，但执行效率最低。</td>\n</tr>\n</tbody></table>\n<p>除了default另外四个与JDBC的隔离级别相对应。</p>\n<h3 id=\"高并发如何修改同一行数据\"><a href=\"#高并发如何修改同一行数据\" class=\"headerlink\" title=\"高并发如何修改同一行数据\"></a>高并发如何修改同一行数据</h3><h4 id=\"jvm解决\"><a href=\"#jvm解决\" class=\"headerlink\" title=\"jvm解决\"></a>jvm解决</h4><ol>\n<li>jvm 下用synchronized锁。</li>\n</ol>\n<ol start=\"2\">\n<li>lock 锁</li>\n</ol>\n<p>try lock finally unlock</p>\n<p>JVM 解决不了分布式环境多任务对共享资源竞争的协同操作问题</p>\n<h4 id=\"分布式解决\"><a href=\"#分布式解决\" class=\"headerlink\" title=\"分布式解决\"></a>分布式解决</h4><p>分布式锁 三种实现方式</p>\n<ul>\n<li>数据库 (性能差)</li>\n<li>redis (死锁)</li>\n<li>zookeeper<ul>\n<li>基于异常 (临时节点)</li>\n<li>基于相互监听 (性能比较高，占用资源，临时有序节点)</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Zookeerper-数据结构\"><a href=\"#Zookeerper-数据结构\" class=\"headerlink\" title=\"Zookeerper 数据结构\"></a>Zookeerper 数据结构</h5><ul>\n<li>Zookeeper 数据结构类似Linux  </li>\n<li>每一个节点都有值  </li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/JVM/JVM.png","slug":"JVM.png","post":"ck871n972000a24uwm14cec0z","modified":0,"renderable":0},{"_id":"source/_posts/JVM/JVM随着JDK的变化.png","slug":"JVM随着JDK的变化.png","post":"ck871n972000a24uwm14cec0z","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/Node_X.png","slug":"Node_X.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/redis_node_c.png","slug":"redis_node_c.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/三次握手.png","slug":"三次握手.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/vitual_node.png","slug":"vitual_node.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/TCP报文.png","slug":"TCP报文.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/Python3-PIL图像处理/1.jpg","slug":"1.jpg","post":"ck871n97r000i24uwhce0npyf","modified":0,"renderable":0},{"_id":"source/_posts/STL之list/list.png","slug":"list.png","post":"ck871n98d000v24uw5fpt9kje","modified":0,"renderable":0},{"_id":"source/_posts/STL之sort和unique/sort&unique.png","slug":"sort&unique.png","post":"ck871n98n001624uw112bokyu","modified":0,"renderable":0},{"_id":"source/_posts/STL之string/string.png","slug":"string.png","post":"ck871n98p001b24uwnhnk93tq","modified":0,"renderable":0},{"_id":"source/_posts/Zookeeper/lock.png","slug":"lock.png","post":"ck871n99a002a24uw32m4y8mo","modified":0,"renderable":0},{"_id":"source/_posts/hashmap/linkList.png","slug":"linkList.png","post":"ck871n99e002h24uw0fizxqi5","modified":0,"renderable":0},{"_id":"source/_posts/合并数字/1.png","slug":"1.png","post":"ck871n9a9003q24uwrwa2z2uo","modified":0,"renderable":0},{"_id":"source/_posts/最长递增序列LIS(n^2和nlog2n)/LIS.png","slug":"LIS.png","post":"ck871n9ag004124uwac7xgklb","modified":0,"renderable":0},{"_id":"source/_posts/STL之map/map.png","slug":"map.png","post":"ck871n983000p24uw0wyihmcb","modified":0,"renderable":0},{"_id":"source/_posts/STL之map/map1.png","slug":"map1.png","post":"ck871n983000p24uw0wyihmcb","modified":0,"renderable":0},{"_id":"source/_posts/STL之vector/vector.png","slug":"vector.png","post":"ck871n98r001e24uw32tk1nn7","modified":0,"renderable":0},{"_id":"source/_posts/STL之vector/vector1.png","slug":"vector1.png","post":"ck871n98r001e24uw32tk1nn7","modified":0,"renderable":0},{"_id":"source/_posts/python爬取hdu题库/1.png","slug":"1.png","post":"ck871n99u003424uw12j35mup","modified":0,"renderable":0},{"_id":"source/_posts/python爬取hdu题库/2.png","slug":"2.png","post":"ck871n99u003424uw12j35mup","modified":0,"renderable":0},{"_id":"source/_posts/不要62/1.png","slug":"1.png","post":"ck871n9a2003g24uwjiwui96t","modified":0,"renderable":0},{"_id":"source/_posts/不要62/DP.png","slug":"DP.png","post":"ck871n9a2003g24uwjiwui96t","modified":0,"renderable":0},{"_id":"source/_posts/最长公共子串LCS/lcs.png","slug":"lcs.png","post":"ck871n9ad003x24uwby3oiz0j","modified":0,"renderable":0},{"_id":"source/_posts/最长公共子串LCS/lcs1.png","slug":"lcs1.png","post":"ck871n9ad003x24uwby3oiz0j","modified":0,"renderable":0},{"_id":"source/_posts/STL之stack-queue/queue.png","slug":"queue.png","post":"ck871n98l001324uws2n3lwh2","modified":0,"renderable":0},{"_id":"source/_posts/STL之stack-queue/queue1.png","slug":"queue1.png","post":"ck871n98l001324uws2n3lwh2","modified":0,"renderable":0},{"_id":"source/_posts/STL之stack-queue/stack.png","slug":"stack.png","post":"ck871n98l001324uws2n3lwh2","modified":0,"renderable":0},{"_id":"source/_posts/全排列/1.png","slug":"1.png","post":"ck871n9a7003n24uw1rtz468q","modified":0,"renderable":0},{"_id":"source/_posts/全排列/2.png","slug":"2.png","post":"ck871n9a7003n24uw1rtz468q","modified":0,"renderable":0},{"_id":"source/_posts/全排列/3.png","slug":"3.png","post":"ck871n9a7003n24uw1rtz468q","modified":0,"renderable":0},{"_id":"source/_posts/JVM/G1划分.png","slug":"G1划分.png","post":"ck871n972000a24uwm14cec0z","modified":0,"renderable":0},{"_id":"source/_posts/JVM/传统GC划分.png","slug":"传统GC划分.png","post":"ck871n972000a24uwm14cec0z","modified":0,"renderable":0},{"_id":"source/_posts/STL之set/set.png","slug":"set.png","post":"ck871n98i000z24uwbl86xzzr","modified":0,"renderable":0},{"_id":"source/_posts/STL之set/set1.png","slug":"set1.png","post":"ck871n98i000z24uwbl86xzzr","modified":0,"renderable":0},{"_id":"source/_posts/STL之set/set2.png","slug":"set2.png","post":"ck871n98i000z24uwbl86xzzr","modified":0,"renderable":0},{"_id":"source/_posts/STL之set/set3.png","slug":"set3.png","post":"ck871n98i000z24uwbl86xzzr","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/Collection.png","slug":"Collection.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/JAVA跨平台.png","slug":"JAVA跨平台.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/JVM.png","slug":"JVM.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/JVM内存模型.png","slug":"JVM内存模型.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/RDB&AOF.png","slug":"RDB&AOF.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/Stack.png","slug":"Stack.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/TCP_IP.png","slug":"TCP_IP.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/TCP_IP1.png","slug":"TCP_IP1.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/socket.jpg","slug":"socket.jpg","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/七层.jpg","slug":"七层.jpg","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/二叉树.png","slug":"二叉树.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/双亲委派.png","slug":"双亲委派.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/四次挥手.png","slug":"四次挥手.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/类加载.png","slug":"类加载.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0},{"_id":"source/_posts/面试专题/类的声明周期.png","slug":"类的声明周期.png","post":"ck871n9bw005j24uw0hkk65h0","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck871n96g000024uw3y5nwen7","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n97e000c24uwiwjzguzf"},{"post_id":"ck871n96z000724uw2jh7k4c7","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n97m000g24uw1l7ei3o9"},{"post_id":"ck871n96p000224uw7cs68amr","category_id":"ck871n970000824uwkjaxiaa7","_id":"ck871n97t000l24uwtg9h292x"},{"post_id":"ck871n96v000524uwueevo25v","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n984000q24uwzip5ifas"},{"post_id":"ck871n96x000624uw6emuo67l","category_id":"ck871n97s000k24uw6065mirx","_id":"ck871n98i000w24uwtlu4ke72"},{"post_id":"ck871n983000p24uw0wyihmcb","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n98k001124uwahrl72cc"},{"post_id":"ck871n972000a24uwm14cec0z","category_id":"ck871n987000r24uwzqlshe8r","_id":"ck871n98m001524uw74zgi7xh"},{"post_id":"ck871n98d000v24uw5fpt9kje","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n98p001a24uwdjkna3b2"},{"post_id":"ck871n98i000z24uwbl86xzzr","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n98r001d24uw2zogb0ei"},{"post_id":"ck871n98l001324uws2n3lwh2","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n98u001i24uwn9p94x55"},{"post_id":"ck871n97d000b24uwrvvg8s21","category_id":"ck871n98i000y24uwimzn2rbc","_id":"ck871n98w001l24uwbcjb0s95"},{"post_id":"ck871n98n001624uw112bokyu","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n98y001q24uwey1siry7"},{"post_id":"ck871n98p001b24uwnhnk93tq","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n990001t24uwybprelca"},{"post_id":"ck871n97k000f24uwt01k1yjm","category_id":"ck871n98o001724uwx8n63t8d","_id":"ck871n993001x24uwlxkvoy8e"},{"post_id":"ck871n98r001e24uw32tk1nn7","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n995002124uww9t913ho"},{"post_id":"ck871n97r000i24uwhce0npyf","category_id":"ck871n98o001724uwx8n63t8d","_id":"ck871n997002524uwa6vl3qdp"},{"post_id":"ck871n988000t24uwqp3lskyp","category_id":"ck871n98o001724uwx8n63t8d","_id":"ck871n999002824uwwq1locez"},{"post_id":"ck871n993001z24uwuwwcu2pv","category_id":"ck871n98i000y24uwimzn2rbc","_id":"ck871n99c002c24uw7usk5i08"},{"post_id":"ck871n98u001j24uwdk9y0st9","category_id":"ck871n992001v24uw4zbbg8p5","_id":"ck871n99e002f24uw0yv3wk87"},{"post_id":"ck871n98w001m24uwbc3sgb81","category_id":"ck871n992001v24uw4zbbg8p5","_id":"ck871n99g002j24uw1t3pi4gt"},{"post_id":"ck871n98z001r24uwugwl6gbh","category_id":"ck871n99b002b24uwguqmbvrq","_id":"ck871n99l002q24uweneabvai"},{"post_id":"ck871n99e002h24uw0fizxqi5","category_id":"ck871n987000r24uwzqlshe8r","_id":"ck871n99o002u24uwqtnip4om"},{"post_id":"ck871n991001u24uwo41zng50","category_id":"ck871n99b002b24uwguqmbvrq","_id":"ck871n99p002x24uwch4bkipw"},{"post_id":"ck871n99o002v24uwdmd2241o","category_id":"ck871n98o001724uwx8n63t8d","_id":"ck871n99w003524uw192qd8le"},{"post_id":"ck871n995002224uwosvkp4hk","category_id":"ck871n99l002p24uwe7lt3i23","_id":"ck871n99y003924uw95ozrtty"},{"post_id":"ck871n997002624uwg8gjsszh","category_id":"ck871n99l002p24uwe7lt3i23","_id":"ck871n9a1003d24uwh1oujn6q"},{"post_id":"ck871n99x003824uwxzo5t9sq","category_id":"ck871n98o001724uwx8n63t8d","_id":"ck871n9a6003j24uwpjovau58"},{"post_id":"ck871n99c002d24uw0s0t13cd","category_id":"ck871n99l002p24uwe7lt3i23","_id":"ck871n9a8003o24uwexi26ro2"},{"post_id":"ck871n99z003b24uw2sh95d2j","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9aa003r24uw0qun373y"},{"post_id":"ck871n9a2003g24uwjiwui96t","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9ac003u24uws0cfnc8q"},{"post_id":"ck871n99g002k24uwbvvmypev","category_id":"ck871n99l002p24uwe7lt3i23","_id":"ck871n9af003y24uwu3cfwbmv"},{"post_id":"ck871n9a7003n24uw1rtz468q","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9ah004224uw69ncoyr2"},{"post_id":"ck871n99j002n24uwf5x59tjc","category_id":"ck871n9a6003k24uwnyd6o6u4","_id":"ck871n9ak004524uwar4rdk3i"},{"post_id":"ck871n9a9003q24uwrwa2z2uo","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9an004924uw9ja3qdrc"},{"post_id":"ck871n9ab003t24uwg5q588c4","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9aq004c24uwqs2pzwph"},{"post_id":"ck871n99m002r24uw2ptfakcj","category_id":"ck871n9ab003s24uwbtxw4nm4","_id":"ck871n9at004g24uw6sz3bsvb"},{"post_id":"ck871n9ad003x24uwby3oiz0j","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9aw004k24uwx0e6i4tt"},{"post_id":"ck871n9ag004124uwac7xgklb","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9ay004n24uwa4srs7ow"},{"post_id":"ck871n99q002y24uwdle65snd","category_id":"ck871n9ab003s24uwbtxw4nm4","_id":"ck871n9b0004q24uw9gobbxsh"},{"post_id":"ck871n9aj004424uw30lmxlhd","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9b2004t24uwcsbpigua"},{"post_id":"ck871n9al004824uwcf9zhk72","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9b4004w24uwldqvchoo"},{"post_id":"ck871n99t003224uwwh2fb21x","category_id":"ck871n9ab003s24uwbtxw4nm4","_id":"ck871n9b6004z24uwdpcya4bx"},{"post_id":"ck871n9ap004b24uwz8l14g48","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9ba005324uww6ry4czm"},{"post_id":"ck871n9as004f24uwp11lwa0k","category_id":"ck871n9ab003s24uwbtxw4nm4","_id":"ck871n9bf005624uwrqrwj2fd"},{"post_id":"ck871n99u003424uw12j35mup","category_id":"ck871n9ar004e24uw6ghpn5ik","_id":"ck871n9bi005824uw6jayyv12"},{"post_id":"ck871n9az004p24uwazuhoqjk","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9bo005c24uw670bz4z8"},{"post_id":"ck871n9b1004s24uwpah3atao","category_id":"ck871n99l002p24uwe7lt3i23","_id":"ck871n9br005e24uw88r4dgqb"},{"post_id":"ck871n9b3004v24uwnlibqzmb","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9bv005h24uwt4yf2y21"},{"post_id":"ck871n9b5004y24uwk9cw5hlg","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9bx005k24uwvtrjtyh7"},{"post_id":"ck871n9bh005724uwc6q4qwzb","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9by005m24uw7rl7begj"},{"post_id":"ck871n9bk005b24uwl1vs74e8","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9bz005o24uwcv6n92pe"},{"post_id":"ck871n9bp005d24uwuce70hjz","category_id":"ck871n96s000324uw1uzozzjw","_id":"ck871n9c0005r24uwr7hrtxhe"},{"post_id":"ck871n9bw005j24uw0hkk65h0","category_id":"ck871n987000r24uwzqlshe8r","_id":"ck871n9c1005t24uwmb1i0hkz"}],"PostTag":[{"post_id":"ck871n96g000024uw3y5nwen7","tag_id":"ck871n96u000424uw0dxasrzy","_id":"ck871n97m000h24uw0ldnr0xe"},{"post_id":"ck871n96g000024uw3y5nwen7","tag_id":"ck871n971000924uwx1rnh9sg","_id":"ck871n97s000j24uwxawa04l1"},{"post_id":"ck871n96p000224uw7cs68amr","tag_id":"ck871n97f000e24uwy0d9wuo3","_id":"ck871n980000o24uwmszkoudn"},{"post_id":"ck871n96v000524uwueevo25v","tag_id":"ck871n97x000m24uwf9afbwmx","_id":"ck871n98d000u24uw9qaq0qbu"},{"post_id":"ck871n983000p24uw0wyihmcb","tag_id":"ck871n971000924uwx1rnh9sg","_id":"ck871n98i000x24uwmpiv2ho8"},{"post_id":"ck871n98d000v24uw5fpt9kje","tag_id":"ck871n971000924uwx1rnh9sg","_id":"ck871n98l001224uw9z1j07zd"},{"post_id":"ck871n96x000624uw6emuo67l","tag_id":"ck871n988000s24uwhx6zyt8b","_id":"ck871n98m001424uwjhx5kgh0"},{"post_id":"ck871n98i000z24uwbl86xzzr","tag_id":"ck871n971000924uwx1rnh9sg","_id":"ck871n98p001924uweoiyn40k"},{"post_id":"ck871n96z000724uw2jh7k4c7","tag_id":"ck871n96u000424uw0dxasrzy","_id":"ck871n98r001c24uw7241f0u8"},{"post_id":"ck871n96z000724uw2jh7k4c7","tag_id":"ck871n971000924uwx1rnh9sg","_id":"ck871n98t001h24uwr5on5ec4"},{"post_id":"ck871n98n001624uw112bokyu","tag_id":"ck871n971000924uwx1rnh9sg","_id":"ck871n98v001k24uwobgkhxde"},{"post_id":"ck871n98p001b24uwnhnk93tq","tag_id":"ck871n971000924uwx1rnh9sg","_id":"ck871n98y001p24uwqgrris3i"},{"post_id":"ck871n98r001e24uw32tk1nn7","tag_id":"ck871n971000924uwx1rnh9sg","_id":"ck871n990001s24uw9nxpjvoy"},{"post_id":"ck871n972000a24uwm14cec0z","tag_id":"ck871n98o001824uwv0ug551l","_id":"ck871n992001w24uw5mxfotjt"},{"post_id":"ck871n972000a24uwm14cec0z","tag_id":"ck871n98t001g24uwwnnkxh2a","_id":"ck871n994002024uw2uga165t"},{"post_id":"ck871n97d000b24uwrvvg8s21","tag_id":"ck871n98y001o24uw7dl0y5jx","_id":"ck871n997002424uwg99jzn17"},{"post_id":"ck871n97k000f24uwt01k1yjm","tag_id":"ck871n993001y24uwxyedner9","_id":"ck871n99a002924uwdrzihkep"},{"post_id":"ck871n97r000i24uwhce0npyf","tag_id":"ck871n993001y24uwxyedner9","_id":"ck871n99e002g24uwzwxtphch"},{"post_id":"ck871n99e002h24uw0fizxqi5","tag_id":"ck871n98o001824uwv0ug551l","_id":"ck871n99j002m24uwvhxowt2d"},{"post_id":"ck871n99e002h24uw0fizxqi5","tag_id":"ck871n98t001g24uwwnnkxh2a","_id":"ck871n99l002o24uwe1gz8wlc"},{"post_id":"ck871n988000t24uwqp3lskyp","tag_id":"ck871n993001y24uwxyedner9","_id":"ck871n99n002t24uwclilqk8q"},{"post_id":"ck871n98l001324uws2n3lwh2","tag_id":"ck871n971000924uwx1rnh9sg","_id":"ck871n99p002w24uw6w8q2cbh"},{"post_id":"ck871n98l001324uws2n3lwh2","tag_id":"ck871n99i002l24uwzkei10pt","_id":"ck871n99s003124uw5my23wln"},{"post_id":"ck871n98u001j24uwdk9y0st9","tag_id":"ck871n99n002s24uwjb03hm6i","_id":"ck871n99u003324uwg2y7tmfy"},{"post_id":"ck871n98w001m24uwbc3sgb81","tag_id":"ck871n99n002s24uwjb03hm6i","_id":"ck871n99z003a24uwjpp6f5xc"},{"post_id":"ck871n99x003824uwxzo5t9sq","tag_id":"ck871n993001y24uwxyedner9","_id":"ck871n9a1003e24uw6ennyal7"},{"post_id":"ck871n98z001r24uwugwl6gbh","tag_id":"ck871n99x003724uwljfd8hoq","_id":"ck871n9a4003h24uwqvbeug5f"},{"post_id":"ck871n99z003b24uw2sh95d2j","tag_id":"ck871n971000924uwx1rnh9sg","_id":"ck871n9a7003l24uw8dx14nw3"},{"post_id":"ck871n991001u24uwo41zng50","tag_id":"ck871n99x003724uwljfd8hoq","_id":"ck871n9a9003p24uw5sya7f9l"},{"post_id":"ck871n993001z24uwuwwcu2pv","tag_id":"ck871n9a7003m24uwgro8wuuy","_id":"ck871n9ad003w24uw3iqb9irm"},{"post_id":"ck871n9ab003t24uwg5q588c4","tag_id":"ck871n97x000m24uwf9afbwmx","_id":"ck871n9ag004024uwn0mrzx46"},{"post_id":"ck871n995002224uwosvkp4hk","tag_id":"ck871n9ac003v24uw66s7p57s","_id":"ck871n9ak004624uwpn20t9mb"},{"post_id":"ck871n997002624uwg8gjsszh","tag_id":"ck871n9ac003v24uw66s7p57s","_id":"ck871n9ar004d24uwe8ffxlbj"},{"post_id":"ck871n9al004824uwcf9zhk72","tag_id":"ck871n97x000m24uwf9afbwmx","_id":"ck871n9au004h24uwkhd2zl0j"},{"post_id":"ck871n99c002d24uw0s0t13cd","tag_id":"ck871n9ac003v24uw66s7p57s","_id":"ck871n9aw004l24uwlwsya112"},{"post_id":"ck871n99g002k24uwbvvmypev","tag_id":"ck871n9ac003v24uw66s7p57s","_id":"ck871n9b0004r24uwfbkz2oe8"},{"post_id":"ck871n99j002n24uwf5x59tjc","tag_id":"ck871n9ay004o24uwpout5pjf","_id":"ck871n9b4004x24uw55e1crol"},{"post_id":"ck871n9b1004s24uwpah3atao","tag_id":"ck871n9ac003v24uw66s7p57s","_id":"ck871n9b7005024uwty8g1h61"},{"post_id":"ck871n99m002r24uw2ptfakcj","tag_id":"ck871n9b2004u24uwolfqftf4","_id":"ck871n9bd005424uwku5v7d8t"},{"post_id":"ck871n99o002v24uwdmd2241o","tag_id":"ck871n9b7005124uw02ruzkl0","_id":"ck871n9bj005a24uwpmm00yeq"},{"post_id":"ck871n99q002y24uwdle65snd","tag_id":"ck871n9bj005924uwrz4qbgnx","_id":"ck871n9bv005i24uwsvqbfr6n"},{"post_id":"ck871n99t003224uwwh2fb21x","tag_id":"ck871n9b2004u24uwolfqftf4","_id":"ck871n9bz005n24uwcp1pbyci"},{"post_id":"ck871n9bw005j24uw0hkk65h0","tag_id":"ck871n98o001824uwv0ug551l","_id":"ck871n9bz005p24uwd94edvus"},{"post_id":"ck871n9bw005j24uw0hkk65h0","tag_id":"ck871n98t001g24uwwnnkxh2a","_id":"ck871n9c0005s24uwvv341hyt"},{"post_id":"ck871n99u003424uw12j35mup","tag_id":"ck871n9bx005l24uwmmws30fm","_id":"ck871n9c1005u24uwpaep594i"},{"post_id":"ck871n9a2003g24uwjiwui96t","tag_id":"ck871n9c0005q24uw9jcgdw7k","_id":"ck871n9c1005w24uwxz0y3p7c"},{"post_id":"ck871n9a7003n24uw1rtz468q","tag_id":"ck871n9c1005v24uwsy05nfwi","_id":"ck871n9c2005z24uw1cu5xxrz"},{"post_id":"ck871n9a7003n24uw1rtz468q","tag_id":"ck871n9c2005x24uw8hffpnft","_id":"ck871n9c3006024uwpgpx3pco"},{"post_id":"ck871n9a9003q24uwrwa2z2uo","tag_id":"ck871n9c2005y24uwqdj2tftx","_id":"ck871n9c3006224uwspedzl45"},{"post_id":"ck871n9a9003q24uwrwa2z2uo","tag_id":"ck871n99i002l24uwzkei10pt","_id":"ck871n9c4006324uwuro9xtgi"},{"post_id":"ck871n9ad003x24uwby3oiz0j","tag_id":"ck871n9c0005q24uw9jcgdw7k","_id":"ck871n9c5006524uwsiywmq7v"},{"post_id":"ck871n9ag004124uwac7xgklb","tag_id":"ck871n9c0005q24uw9jcgdw7k","_id":"ck871n9c6006724uwfam3t03c"},{"post_id":"ck871n9aj004424uw30lmxlhd","tag_id":"ck871n9c1005v24uwsy05nfwi","_id":"ck871n9c6006924uwqlu9dzu8"},{"post_id":"ck871n9ap004b24uwz8l14g48","tag_id":"ck871n9c6006824uwebd4d8mm","_id":"ck871n9c8006c24uwr4ka1ooc"},{"post_id":"ck871n9ap004b24uwz8l14g48","tag_id":"ck871n9c2005y24uwqdj2tftx","_id":"ck871n9c8006d24uw4kffq83l"},{"post_id":"ck871n9as004f24uwp11lwa0k","tag_id":"ck871n9bj005924uwrz4qbgnx","_id":"ck871n9c9006f24uwdnjqr554"},{"post_id":"ck871n9av004j24uwgy613kgz","tag_id":"ck871n9bj005924uwrz4qbgnx","_id":"ck871n9ca006h24uw728h8pcl"},{"post_id":"ck871n9az004p24uwazuhoqjk","tag_id":"ck871n9c0005q24uw9jcgdw7k","_id":"ck871n9cb006j24uwbi5sb2cf"},{"post_id":"ck871n9b3004v24uwnlibqzmb","tag_id":"ck871n9ca006i24uwj8lsf5ba","_id":"ck871n9cb006l24uw7zqvawoj"},{"post_id":"ck871n9b5004y24uwk9cw5hlg","tag_id":"ck871n9ca006i24uwj8lsf5ba","_id":"ck871n9cc006n24uw2ru147eo"},{"post_id":"ck871n9bh005724uwc6q4qwzb","tag_id":"ck871n9c2005y24uwqdj2tftx","_id":"ck871n9cd006p24uwuyr9h043"},{"post_id":"ck871n9bk005b24uwl1vs74e8","tag_id":"ck871n9ca006i24uwj8lsf5ba","_id":"ck871n9ce006r24uw5sv3mhua"},{"post_id":"ck871n9bp005d24uwuce70hjz","tag_id":"ck871n9c6006824uwebd4d8mm","_id":"ck871n9cf006t24uwdty31g9y"},{"post_id":"ck871n9bp005d24uwuce70hjz","tag_id":"ck871n9c2005y24uwqdj2tftx","_id":"ck871n9cf006u24uwof64u7ir"}],"Tag":[{"name":"BFS","_id":"ck871n96u000424uw0dxasrzy"},{"name":"STL","_id":"ck871n971000924uwx1rnh9sg"},{"name":"JS","_id":"ck871n97f000e24uwy0d9wuo3"},{"name":"模板","_id":"ck871n97x000m24uwf9afbwmx"},{"name":"HTML","_id":"ck871n988000s24uwhx6zyt8b"},{"name":"Interview","_id":"ck871n98o001824uwv0ug551l"},{"name":"Java","_id":"ck871n98t001g24uwwnnkxh2a"},{"name":"Linux","_id":"ck871n98y001o24uw7dl0y5jx"},{"name":"python3小练手","_id":"ck871n993001y24uwxyedner9"},{"name":"栈","_id":"ck871n99i002l24uwzkei10pt"},{"name":"SpringBoot","_id":"ck871n99n002s24uwjb03hm6i"},{"name":"Spring","_id":"ck871n99x003724uwljfd8hoq"},{"name":"Ubuntu","_id":"ck871n9a7003m24uwgro8wuuy"},{"name":"应用","_id":"ck871n9ac003v24uw66s7p57s"},{"name":"SQL","_id":"ck871n9ay004o24uwpout5pjf"},{"name":"hexo","_id":"ck871n9b2004u24uwolfqftf4"},{"name":"python3项目","_id":"ck871n9b7005124uw02ruzkl0"},{"name":"网站","_id":"ck871n9bj005924uwrz4qbgnx"},{"name":"Python","_id":"ck871n9bx005l24uwmmws30fm"},{"name":"动态规划","_id":"ck871n9c0005q24uw9jcgdw7k"},{"name":"DFS","_id":"ck871n9c1005v24uwsy05nfwi"},{"name":"递归","_id":"ck871n9c2005x24uw8hffpnft"},{"name":"C/C++题目","_id":"ck871n9c2005y24uwqdj2tftx"},{"name":"经历","_id":"ck871n9c6006824uwebd4d8mm"},{"name":"蓝桥杯","_id":"ck871n9ca006i24uwj8lsf5ba"}]}}